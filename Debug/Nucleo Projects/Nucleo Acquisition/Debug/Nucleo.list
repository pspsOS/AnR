
Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005220  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  080053c0  080053c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005628  08005628  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005628  08005628  00015628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005630  08005630  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005630  08005630  00015630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005634  08005634  00015634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a34  20000080  080056b4  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004ab4  080056b4  00024ab4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b67  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fc0  00000000  00000000  00035c13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cc0  00000000  00000000  00038bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b68  00000000  00000000  00039898  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a63e  00000000  00000000  0003a400  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d7e3  00000000  00000000  00054a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009186e  00000000  00000000  00062221  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f3a8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038bc  00000000  00000000  000f3b0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080053a8 	.word	0x080053a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080053a8 	.word	0x080053a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	2000009c 	.word	0x2000009c
 80005b0:	200000f0 	.word	0x200000f0

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b09e      	sub	sp, #120	; 0x78
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fbed 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f881 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f913 	bl	80007ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c6:	f000 f8e7 	bl	8000798 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 80005ca:	4833      	ldr	r0, [pc, #204]	; (8000698 <main+0xe4>)
 80005cc:	f000 fa10 	bl	80009f0 <RetargetInit>
  for(int i = 0; i < 500; i++) printf(" \r\n");
 80005d0:	2300      	movs	r3, #0
 80005d2:	677b      	str	r3, [r7, #116]	; 0x74
 80005d4:	e005      	b.n	80005e2 <main+0x2e>
 80005d6:	4831      	ldr	r0, [pc, #196]	; (800069c <main+0xe8>)
 80005d8:	f004 f80c 	bl	80045f4 <puts>
 80005dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005de:	3301      	adds	r3, #1
 80005e0:	677b      	str	r3, [r7, #116]	; 0x74
 80005e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005e8:	dbf5      	blt.n	80005d6 <main+0x22>
  HAL_Delay(250);
 80005ea:	20fa      	movs	r0, #250	; 0xfa
 80005ec:	f000 fc46 	bl	8000e7c <HAL_Delay>
  printf("Starting:\r\n");
 80005f0:	482b      	ldr	r0, [pc, #172]	; (80006a0 <main+0xec>)
 80005f2:	f003 ffff 	bl	80045f4 <puts>
  HAL_Delay(250);
 80005f6:	20fa      	movs	r0, #250	; 0xfa
 80005f8:	f000 fc40 	bl	8000e7c <HAL_Delay>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ControlLogic */
  osThreadStaticDef(ControlLogic, startControlLogic, osPriorityNormal, 0, 128, ControlLogicBuffer, &ControlLogicControlBlock);
 80005fc:	4b29      	ldr	r3, [pc, #164]	; (80006a4 <main+0xf0>)
 80005fe:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000602:	461d      	mov	r5, r3
 8000604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000608:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlLogicHandle = osThreadCreate(osThread(ControlLogic), NULL);
 8000610:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f002 f8bf 	bl	800279a <osThreadCreate>
 800061c:	4602      	mov	r2, r0
 800061e:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <main+0xf4>)
 8000620:	601a      	str	r2, [r3, #0]

  /* definition and creation of Acquisition */
  osThreadStaticDef(Acquisition, startAcquisition, osPriorityRealtime, 0, 128, AcquisitionBuffer, &AcquisitionControlBlock);
 8000622:	4b22      	ldr	r3, [pc, #136]	; (80006ac <main+0xf8>)
 8000624:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000628:	461d      	mov	r5, r3
 800062a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000632:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AcquisitionHandle = osThreadCreate(osThread(Acquisition), NULL);
 8000636:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f002 f8ac 	bl	800279a <osThreadCreate>
 8000642:	4602      	mov	r2, r0
 8000644:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <main+0xfc>)
 8000646:	601a      	str	r2, [r3, #0]

  /* definition and creation of Processing */
  osThreadStaticDef(Processing, startProcessing, osPriorityNormal, 0, 128, ProcessingBuffer, &ProcessingControlBlock);
 8000648:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <main+0x100>)
 800064a:	f107 0420 	add.w	r4, r7, #32
 800064e:	461d      	mov	r5, r3
 8000650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000654:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000658:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ProcessingHandle = osThreadCreate(osThread(Processing), NULL);
 800065c:	f107 0320 	add.w	r3, r7, #32
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f002 f899 	bl	800279a <osThreadCreate>
 8000668:	4602      	mov	r2, r0
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <main+0x104>)
 800066c:	601a      	str	r2, [r3, #0]

  /* definition and creation of Monitoring */
  osThreadStaticDef(Monitoring, startMonitoring, osPriorityLow, 0, 128, MonitoringBuffer, &MonitoringControlBlock);
 800066e:	4b13      	ldr	r3, [pc, #76]	; (80006bc <main+0x108>)
 8000670:	1d3c      	adds	r4, r7, #4
 8000672:	461d      	mov	r5, r3
 8000674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000678:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800067c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MonitoringHandle = osThreadCreate(osThread(Monitoring), NULL);
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f002 f888 	bl	800279a <osThreadCreate>
 800068a:	4602      	mov	r2, r0
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <main+0x10c>)
 800068e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000690:	f002 f87c 	bl	800278c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000694:	e7fe      	b.n	8000694 <main+0xe0>
 8000696:	bf00      	nop
 8000698:	200047c8 	.word	0x200047c8
 800069c:	080053c0 	.word	0x080053c0
 80006a0:	080053c4 	.word	0x080053c4
 80006a4:	080053e0 	.word	0x080053e0
 80006a8:	200045c4 	.word	0x200045c4
 80006ac:	08005408 	.word	0x08005408
 80006b0:	200045c0 	.word	0x200045c0
 80006b4:	08005430 	.word	0x08005430
 80006b8:	20004564 	.word	0x20004564
 80006bc:	08005458 	.word	0x08005458
 80006c0:	200045bc 	.word	0x200045bc

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 fe6a 	bl	80043ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a27      	ldr	r2, [pc, #156]	; (8000790 <SystemClock_Config+0xcc>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemClock_Config+0xd0>)
 800070e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000734:	2310      	movs	r3, #16
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000738:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800073c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800073e:	2304      	movs	r3, #4
 8000740:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000742:	2304      	movs	r3, #4
 8000744:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fe52 	bl	80013f4 <HAL_RCC_OscConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000756:	f000 f947 	bl	80009e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2302      	movs	r3, #2
 8000760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2102      	movs	r1, #2
 8000776:	4618      	mov	r0, r3
 8000778:	f001 f8ac 	bl	80018d4 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000782:	f000 f931 	bl	80009e8 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	; 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <MX_USART2_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007d0:	f001 fa72 	bl	8001cb8 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007da:	f000 f905 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200047c8 	.word	0x200047c8
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <MX_GPIO_Init+0xd0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a2c      	ldr	r2, [pc, #176]	; (80008bc <MX_GPIO_Init+0xd0>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <MX_GPIO_Init+0xd0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b26      	ldr	r3, [pc, #152]	; (80008bc <MX_GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a25      	ldr	r2, [pc, #148]	; (80008bc <MX_GPIO_Init+0xd0>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b23      	ldr	r3, [pc, #140]	; (80008bc <MX_GPIO_Init+0xd0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <MX_GPIO_Init+0xd0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a1e      	ldr	r2, [pc, #120]	; (80008bc <MX_GPIO_Init+0xd0>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <MX_GPIO_Init+0xd0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_GPIO_Init+0xd0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a17      	ldr	r2, [pc, #92]	; (80008bc <MX_GPIO_Init+0xd0>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_GPIO_Init+0xd0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2120      	movs	r1, #32
 8000876:	4812      	ldr	r0, [pc, #72]	; (80008c0 <MX_GPIO_Init+0xd4>)
 8000878:	f000 fda2 	bl	80013c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <MX_GPIO_Init+0xd8>)
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	480d      	ldr	r0, [pc, #52]	; (80008c8 <MX_GPIO_Init+0xdc>)
 8000892:	f000 fbfb 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000896:	2320      	movs	r3, #32
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_GPIO_Init+0xd4>)
 80008ae:	f000 fbed 	bl	800108c <HAL_GPIO_Init>

}
 80008b2:	bf00      	nop
 80008b4:	3728      	adds	r7, #40	; 0x28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020000 	.word	0x40020000
 80008c4:	10210000 	.word	0x10210000
 80008c8:	40020800 	.word	0x40020800

080008cc <startControlLogic>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startControlLogic */
void startControlLogic(void const * argument)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	static TickType_t time_init = 0;
  /* Infinite loop */
	while(ENABLE_CONTROL_LOGIC) {

		if(printDiv) printf("-------------\r\n");
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <startControlLogic+0x28>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d002      	beq.n	80008e2 <startControlLogic+0x16>
 80008dc:	4806      	ldr	r0, [pc, #24]	; (80008f8 <startControlLogic+0x2c>)
 80008de:	f003 fe89 	bl	80045f4 <puts>
		toggleLed();
 80008e2:	f003 fd17 	bl	8004314 <toggleLed>

		vTaskDelayUntil(&time_init, CONTROL_LOGIC_TASK_DELAY);
 80008e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008ea:	4804      	ldr	r0, [pc, #16]	; (80008fc <startControlLogic+0x30>)
 80008ec:	f002 fa72 	bl	8002dd4 <vTaskDelayUntil>
	while(ENABLE_CONTROL_LOGIC) {
 80008f0:	e7f0      	b.n	80008d4 <startControlLogic+0x8>
 80008f2:	bf00      	nop
 80008f4:	20000000 	.word	0x20000000
 80008f8:	08005474 	.word	0x08005474
 80008fc:	200002f0 	.word	0x200002f0

08000900 <startAcquisition>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAcquisition */
void startAcquisition(void const * argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startAcquisition */
	static TickType_t time_init = 0;

	setup_A();
 8000908:	f003 fa7c 	bl	8003e04 <setup_A>
	printf("\n\n");
 800090c:	4816      	ldr	r0, [pc, #88]	; (8000968 <startAcquisition+0x68>)
 800090e:	f003 fe71 	bl	80045f4 <puts>
  /* Infinite loop */
	while(ENABLE_ACQUISITION) {
		switch(loop_A()) {
 8000912:	f003 fabf 	bl	8003e94 <loop_A>
 8000916:	4603      	mov	r3, r0
 8000918:	2b01      	cmp	r3, #1
 800091a:	d002      	beq.n	8000922 <startAcquisition+0x22>
 800091c:	2b02      	cmp	r3, #2
 800091e:	d006      	beq.n	800092e <startAcquisition+0x2e>
 8000920:	e00a      	b.n	8000938 <startAcquisition+0x38>
		case 1: vTaskDelayUntil(&time_init, ACQUISITION_TASK_DELAY1);
 8000922:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000926:	4811      	ldr	r0, [pc, #68]	; (800096c <startAcquisition+0x6c>)
 8000928:	f002 fa54 	bl	8002dd4 <vTaskDelayUntil>
				break;
 800092c:	e00a      	b.n	8000944 <startAcquisition+0x44>

		case 2: vTaskDelayUntil(&time_init, ACQUISITION_TASK_DELAY2);
 800092e:	21c8      	movs	r1, #200	; 0xc8
 8000930:	480e      	ldr	r0, [pc, #56]	; (800096c <startAcquisition+0x6c>)
 8000932:	f002 fa4f 	bl	8002dd4 <vTaskDelayUntil>
				break;
 8000936:	e005      	b.n	8000944 <startAcquisition+0x44>

		default:vTaskDelayUntil(&time_init, ACQUISITION_TASK_DELAY0);
 8000938:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800093c:	480b      	ldr	r0, [pc, #44]	; (800096c <startAcquisition+0x6c>)
 800093e:	f002 fa49 	bl	8002dd4 <vTaskDelayUntil>
				break;
 8000942:	bf00      	nop
		}
		if(time_init > 4000) break;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <startAcquisition+0x6c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800094c:	d800      	bhi.n	8000950 <startAcquisition+0x50>
		switch(loop_A()) {
 800094e:	e7e0      	b.n	8000912 <startAcquisition+0x12>
		if(time_init > 4000) break;
 8000950:	bf00      	nop
	}
	//printf("%d\n\r",time_init);
	printDiv = false;
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <startAcquisition+0x70>)
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
	vTaskDelete(NULL);
 8000958:	2000      	movs	r0, #0
 800095a:	f002 f9ad 	bl	8002cb8 <vTaskDelete>

  /* USER CODE END startAcquisition */
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	08005484 	.word	0x08005484
 800096c:	200002f4 	.word	0x200002f4
 8000970:	20000000 	.word	0x20000000

08000974 <startProcessing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startProcessing */
void startProcessing(void const * argument)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	extern bool alaNominal;
	extern bool bmpNominal;
	extern bool gpsNominal;
  /* Infinite loop */
	while(ENABLE_PROCESSING) {
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != pressed) {
 800097c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000980:	480e      	ldr	r0, [pc, #56]	; (80009bc <startProcessing+0x48>)
 8000982:	f000 fd05 	bl	8001390 <HAL_GPIO_ReadPin>
 8000986:	4603      	mov	r3, r0
 8000988:	461a      	mov	r2, r3
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <startProcessing+0x4c>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	429a      	cmp	r2, r3
 8000990:	d00e      	beq.n	80009b0 <startProcessing+0x3c>
			pressed = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000992:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000996:	4809      	ldr	r0, [pc, #36]	; (80009bc <startProcessing+0x48>)
 8000998:	f000 fcfa 	bl	8001390 <HAL_GPIO_ReadPin>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <startProcessing+0x4c>)
 80009a2:	701a      	strb	r2, [r3, #0]
			//gpsNominal = false;
			//bmpNominal = false;
			imuNominal = false;
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <startProcessing+0x50>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
			alaNominal = false;
 80009aa:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <startProcessing+0x54>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
		}
		vTaskDelayUntil(&time_init, PROCESSING_TASK_DELAY);
 80009b0:	2108      	movs	r1, #8
 80009b2:	4806      	ldr	r0, [pc, #24]	; (80009cc <startProcessing+0x58>)
 80009b4:	f002 fa0e 	bl	8002dd4 <vTaskDelayUntil>
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != pressed) {
 80009b8:	e7e0      	b.n	800097c <startProcessing+0x8>
 80009ba:	bf00      	nop
 80009bc:	40020800 	.word	0x40020800
 80009c0:	20000001 	.word	0x20000001
 80009c4:	20004a51 	.word	0x20004a51
 80009c8:	20004aa6 	.word	0x20004aa6
 80009cc:	200002f8 	.word	0x200002f8

080009d0 <startMonitoring>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMonitoring */
void startMonitoring(void const * argument)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMonitoring */
	static GPIO_PinState pressed = GPIO_PIN_SET;
	static int counter = 0;
	static TickType_t time_init = 0;
  /* Infinite loop */
	while(ENABLE_MONITORING) {
 80009d8:	bf00      	nop


		vTaskDelayUntil(&time_init, MONITORING_TASK_DELAY);
	}

	vTaskDelete(NULL);
 80009da:	2000      	movs	r0, #0
 80009dc:	f002 f96c 	bl	8002cb8 <vTaskDelete>
  /* USER CODE END startMonitoring */
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ee:	e7fe      	b.n	80009ee <Error_Handler+0x6>

080009f0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80009f8:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <RetargetInit+0x28>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <RetargetInit+0x2c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	6898      	ldr	r0, [r3, #8]
 8000a04:	2300      	movs	r3, #0
 8000a06:	2202      	movs	r2, #2
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f003 fe0b 	bl	8004624 <setvbuf>
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20004a08 	.word	0x20004a08
 8000a1c:	20000018 	.word	0x20000018

08000a20 <_isatty>:

int _isatty(int fd) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	db04      	blt.n	8000a38 <_isatty+0x18>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	dc01      	bgt.n	8000a38 <_isatty+0x18>
    return 1;
 8000a34:	2301      	movs	r3, #1
 8000a36:	e005      	b.n	8000a44 <_isatty+0x24>

  errno = EBADF;
 8000a38:	f003 fc86 	bl	8004348 <__errno>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	2309      	movs	r3, #9
 8000a40:	6013      	str	r3, [r2, #0]
  return 0;
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <_write>:

int _write(int fd, char* ptr, int len) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d002      	beq.n	8000a64 <_write+0x18>
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d111      	bne.n	8000a88 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <_write+0x54>)
 8000a66:	6818      	ldr	r0, [r3, #0]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a70:	68b9      	ldr	r1, [r7, #8]
 8000a72:	f001 f96e 	bl	8001d52 <HAL_UART_Transmit>
 8000a76:	4603      	mov	r3, r0
 8000a78:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000a7a:	7dfb      	ldrb	r3, [r7, #23]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d101      	bne.n	8000a84 <_write+0x38>
      return len;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	e008      	b.n	8000a96 <_write+0x4a>
    else
      return EIO;
 8000a84:	2305      	movs	r3, #5
 8000a86:	e006      	b.n	8000a96 <_write+0x4a>
  }
  errno = EBADF;
 8000a88:	f003 fc5e 	bl	8004348 <__errno>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	2309      	movs	r3, #9
 8000a90:	6013      	str	r3, [r2, #0]
  return -1;
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20004a08 	.word	0x20004a08

08000aa4 <_close>:

int _close(int fd) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	db04      	blt.n	8000abc <_close+0x18>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	dc01      	bgt.n	8000abc <_close+0x18>
    return 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	e006      	b.n	8000aca <_close+0x26>

  errno = EBADF;
 8000abc:	f003 fc44 	bl	8004348 <__errno>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	2309      	movs	r3, #9
 8000ac4:	6013      	str	r3, [r2, #0]
  return -1;
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b084      	sub	sp, #16
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000ade:	f003 fc33 	bl	8004348 <__errno>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	2309      	movs	r3, #9
 8000ae6:	6013      	str	r3, [r2, #0]
  return -1;
 8000ae8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <_read>:

int _read(int fd, char* ptr, int len) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d110      	bne.n	8000b28 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <_read+0x4c>)
 8000b08:	6818      	ldr	r0, [r3, #0]
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	2201      	movs	r2, #1
 8000b10:	68b9      	ldr	r1, [r7, #8]
 8000b12:	f001 f9b7 	bl	8001e84 <HAL_UART_Receive>
 8000b16:	4603      	mov	r3, r0
 8000b18:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000b1a:	7dfb      	ldrb	r3, [r7, #23]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d101      	bne.n	8000b24 <_read+0x30>
      return 1;
 8000b20:	2301      	movs	r3, #1
 8000b22:	e008      	b.n	8000b36 <_read+0x42>
    else
      return EIO;
 8000b24:	2305      	movs	r3, #5
 8000b26:	e006      	b.n	8000b36 <_read+0x42>
  }
  errno = EBADF;
 8000b28:	f003 fc0e 	bl	8004348 <__errno>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	2309      	movs	r3, #9
 8000b30:	6013      	str	r3, [r2, #0]
  return -1;
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20004a08 	.word	0x20004a08

08000b44 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	db08      	blt.n	8000b66 <_fstat+0x22>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	dc05      	bgt.n	8000b66 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b60:	605a      	str	r2, [r3, #4]
    return 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	e005      	b.n	8000b72 <_fstat+0x2e>
  }

  errno = EBADF;
 8000b66:	f003 fbef 	bl	8004348 <__errno>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	2309      	movs	r3, #9
 8000b6e:	6013      	str	r3, [r2, #0]
  return 0;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_MspInit+0x54>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	4a11      	ldr	r2, [pc, #68]	; (8000bd0 <HAL_MspInit+0x54>)
 8000b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b90:	6453      	str	r3, [r2, #68]	; 0x44
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <HAL_MspInit+0x54>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_MspInit+0x54>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <HAL_MspInit+0x54>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_MspInit+0x54>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	210f      	movs	r1, #15
 8000bbe:	f06f 0001 	mvn.w	r0, #1
 8000bc2:	f000 fa3a 	bl	800103a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a19      	ldr	r2, [pc, #100]	; (8000c58 <HAL_UART_MspInit+0x84>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d12b      	bne.n	8000c4e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c2e:	230c      	movs	r3, #12
 8000c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c3e:	2307      	movs	r3, #7
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <HAL_UART_MspInit+0x8c>)
 8000c4a:	f000 fa1f 	bl	800108c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3728      	adds	r7, #40	; 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40004400 	.word	0x40004400
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020000 	.word	0x40020000

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <NMI_Handler+0x4>

08000c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <MemManage_Handler+0x4>

08000c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c94:	f000 f8d2 	bl	8000e3c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c98:	f002 fc36 	bl	8003508 <xTaskGetSchedulerState>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d001      	beq.n	8000ca6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ca2:	f002 fe69 	bl	8003978 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb4:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <_sbrk+0x5c>)
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <_sbrk+0x60>)
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d102      	bne.n	8000cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <_sbrk+0x64>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <_sbrk+0x68>)
 8000ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <_sbrk+0x64>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d207      	bcs.n	8000cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cdc:	f003 fb34 	bl	8004348 <__errno>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	230c      	movs	r3, #12
 8000ce4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cea:	e009      	b.n	8000d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <_sbrk+0x64>)
 8000cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20020000 	.word	0x20020000
 8000d0c:	00000400 	.word	0x00000400
 8000d10:	200002fc 	.word	0x200002fc
 8000d14:	20004ab8 	.word	0x20004ab8

08000d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <SystemInit+0x28>)
 8000d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d22:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <SystemInit+0x28>)
 8000d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <SystemInit+0x28>)
 8000d2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d32:	609a      	str	r2, [r3, #8]
#endif
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d4a:	e003      	b.n	8000d54 <LoopCopyDataInit>

08000d4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d52:	3104      	adds	r1, #4

08000d54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d54:	480b      	ldr	r0, [pc, #44]	; (8000d84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d5c:	d3f6      	bcc.n	8000d4c <CopyDataInit>
  ldr  r2, =_sbss
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d60:	e002      	b.n	8000d68 <LoopFillZerobss>

08000d62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d64:	f842 3b04 	str.w	r3, [r2], #4

08000d68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d6c:	d3f9      	bcc.n	8000d62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d6e:	f7ff ffd3 	bl	8000d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d72:	f003 faef 	bl	8004354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d76:	f7ff fc1d 	bl	80005b4 <main>
  bx  lr    
 8000d7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d80:	08005638 	.word	0x08005638
  ldr  r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d88:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8000d8c:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8000d90:	20004ab4 	.word	0x20004ab4

08000d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <HAL_Init+0x40>)
 8000da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_Init+0x40>)
 8000dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <HAL_Init+0x40>)
 8000dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 f92f 	bl	8001024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc6:	200f      	movs	r0, #15
 8000dc8:	f000 f808 	bl	8000ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dcc:	f7ff fed6 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023c00 	.word	0x40023c00

08000ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HAL_InitTick+0x54>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <HAL_InitTick+0x58>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f939 	bl	8001072 <HAL_SYSTICK_Config>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00e      	b.n	8000e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b0f      	cmp	r3, #15
 8000e0e:	d80a      	bhi.n	8000e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e10:	2200      	movs	r2, #0
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f000 f90f 	bl	800103a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e1c:	4a06      	ldr	r2, [pc, #24]	; (8000e38 <HAL_InitTick+0x5c>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e000      	b.n	8000e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000004 	.word	0x20000004
 8000e34:	2000000c 	.word	0x2000000c
 8000e38:	20000008 	.word	0x20000008

08000e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_IncTick+0x20>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_IncTick+0x24>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <HAL_IncTick+0x24>)
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	2000000c 	.word	0x2000000c
 8000e60:	20004a0c 	.word	0x20004a0c

08000e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <HAL_GetTick+0x14>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20004a0c 	.word	0x20004a0c

08000e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e84:	f7ff ffee 	bl	8000e64 <HAL_GetTick>
 8000e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e94:	d005      	beq.n	8000ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <HAL_Delay+0x40>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ea2:	bf00      	nop
 8000ea4:	f7ff ffde 	bl	8000e64 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d8f7      	bhi.n	8000ea4 <HAL_Delay+0x28>
  {
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2000000c 	.word	0x2000000c

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	db0a      	blt.n	8000f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	490c      	ldr	r1, [pc, #48]	; (8000f70 <__NVIC_SetPriority+0x4c>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	0112      	lsls	r2, r2, #4
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	440b      	add	r3, r1
 8000f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f4c:	e00a      	b.n	8000f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4908      	ldr	r1, [pc, #32]	; (8000f74 <__NVIC_SetPriority+0x50>)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	3b04      	subs	r3, #4
 8000f5c:	0112      	lsls	r2, r2, #4
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	440b      	add	r3, r1
 8000f62:	761a      	strb	r2, [r3, #24]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f1c3 0307 	rsb	r3, r3, #7
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	bf28      	it	cs
 8000f96:	2304      	movcs	r3, #4
 8000f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d902      	bls.n	8000fa8 <NVIC_EncodePriority+0x30>
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3b03      	subs	r3, #3
 8000fa6:	e000      	b.n	8000faa <NVIC_EncodePriority+0x32>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	401a      	ands	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43d9      	mvns	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	4313      	orrs	r3, r2
         );
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3724      	adds	r7, #36	; 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff0:	d301      	bcc.n	8000ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00f      	b.n	8001016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <SysTick_Config+0x40>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffe:	210f      	movs	r1, #15
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f7ff ff8e 	bl	8000f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <SysTick_Config+0x40>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <SysTick_Config+0x40>)
 8001010:	2207      	movs	r2, #7
 8001012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	e000e010 	.word	0xe000e010

08001024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ff47 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800104c:	f7ff ff5c 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 8001050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	68b9      	ldr	r1, [r7, #8]
 8001056:	6978      	ldr	r0, [r7, #20]
 8001058:	f7ff ff8e 	bl	8000f78 <NVIC_EncodePriority>
 800105c:	4602      	mov	r2, r0
 800105e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff5d 	bl	8000f24 <__NVIC_SetPriority>
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffb0 	bl	8000fe0 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
 80010a6:	e159      	b.n	800135c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010a8:	2201      	movs	r2, #1
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	f040 8148 	bne.w	8001356 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d00b      	beq.n	80010e6 <HAL_GPIO_Init+0x5a>
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d007      	beq.n	80010e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010da:	2b11      	cmp	r3, #17
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b12      	cmp	r3, #18
 80010e4:	d130      	bne.n	8001148 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	68da      	ldr	r2, [r3, #12]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800111c:	2201      	movs	r2, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	091b      	lsrs	r3, r3, #4
 8001132:	f003 0201 	and.w	r2, r3, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b02      	cmp	r3, #2
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0xfc>
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b12      	cmp	r3, #18
 8001186:	d123      	bne.n	80011d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	08da      	lsrs	r2, r3, #3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3208      	adds	r2, #8
 8001190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	220f      	movs	r2, #15
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	691a      	ldr	r2, [r3, #16]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	08da      	lsrs	r2, r3, #3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3208      	adds	r2, #8
 80011ca:	69b9      	ldr	r1, [r7, #24]
 80011cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0203 	and.w	r2, r3, #3
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 80a2 	beq.w	8001356 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b56      	ldr	r3, [pc, #344]	; (8001370 <HAL_GPIO_Init+0x2e4>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	4a55      	ldr	r2, [pc, #340]	; (8001370 <HAL_GPIO_Init+0x2e4>)
 800121c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001220:	6453      	str	r3, [r2, #68]	; 0x44
 8001222:	4b53      	ldr	r3, [pc, #332]	; (8001370 <HAL_GPIO_Init+0x2e4>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800122e:	4a51      	ldr	r2, [pc, #324]	; (8001374 <HAL_GPIO_Init+0x2e8>)
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	089b      	lsrs	r3, r3, #2
 8001234:	3302      	adds	r3, #2
 8001236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	220f      	movs	r2, #15
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a48      	ldr	r2, [pc, #288]	; (8001378 <HAL_GPIO_Init+0x2ec>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d019      	beq.n	800128e <HAL_GPIO_Init+0x202>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a47      	ldr	r2, [pc, #284]	; (800137c <HAL_GPIO_Init+0x2f0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0x1fe>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a46      	ldr	r2, [pc, #280]	; (8001380 <HAL_GPIO_Init+0x2f4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00d      	beq.n	8001286 <HAL_GPIO_Init+0x1fa>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a45      	ldr	r2, [pc, #276]	; (8001384 <HAL_GPIO_Init+0x2f8>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d007      	beq.n	8001282 <HAL_GPIO_Init+0x1f6>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a44      	ldr	r2, [pc, #272]	; (8001388 <HAL_GPIO_Init+0x2fc>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_GPIO_Init+0x1f2>
 800127a:	2304      	movs	r3, #4
 800127c:	e008      	b.n	8001290 <HAL_GPIO_Init+0x204>
 800127e:	2307      	movs	r3, #7
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x204>
 8001282:	2303      	movs	r3, #3
 8001284:	e004      	b.n	8001290 <HAL_GPIO_Init+0x204>
 8001286:	2302      	movs	r3, #2
 8001288:	e002      	b.n	8001290 <HAL_GPIO_Init+0x204>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <HAL_GPIO_Init+0x204>
 800128e:	2300      	movs	r3, #0
 8001290:	69fa      	ldr	r2, [r7, #28]
 8001292:	f002 0203 	and.w	r2, r2, #3
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	4093      	lsls	r3, r2
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a0:	4934      	ldr	r1, [pc, #208]	; (8001374 <HAL_GPIO_Init+0x2e8>)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ae:	4b37      	ldr	r3, [pc, #220]	; (800138c <HAL_GPIO_Init+0x300>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012d2:	4a2e      	ldr	r2, [pc, #184]	; (800138c <HAL_GPIO_Init+0x300>)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012d8:	4b2c      	ldr	r3, [pc, #176]	; (800138c <HAL_GPIO_Init+0x300>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012fc:	4a23      	ldr	r2, [pc, #140]	; (800138c <HAL_GPIO_Init+0x300>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001302:	4b22      	ldr	r3, [pc, #136]	; (800138c <HAL_GPIO_Init+0x300>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001326:	4a19      	ldr	r2, [pc, #100]	; (800138c <HAL_GPIO_Init+0x300>)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <HAL_GPIO_Init+0x300>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001350:	4a0e      	ldr	r2, [pc, #56]	; (800138c <HAL_GPIO_Init+0x300>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3301      	adds	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	2b0f      	cmp	r3, #15
 8001360:	f67f aea2 	bls.w	80010a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001364:	bf00      	nop
 8001366:	3724      	adds	r7, #36	; 0x24
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	40023800 	.word	0x40023800
 8001374:	40013800 	.word	0x40013800
 8001378:	40020000 	.word	0x40020000
 800137c:	40020400 	.word	0x40020400
 8001380:	40020800 	.word	0x40020800
 8001384:	40020c00 	.word	0x40020c00
 8001388:	40021000 	.word	0x40021000
 800138c:	40013c00 	.word	0x40013c00

08001390 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	887b      	ldrh	r3, [r7, #2]
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d002      	beq.n	80013ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e001      	b.n	80013b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
 80013cc:	4613      	mov	r3, r2
 80013ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d0:	787b      	ldrb	r3, [r7, #1]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013dc:	e003      	b.n	80013e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013de:	887b      	ldrh	r3, [r7, #2]
 80013e0:	041a      	lsls	r2, r3, #16
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	619a      	str	r2, [r3, #24]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e25b      	b.n	80018be <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d075      	beq.n	80014fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001412:	4ba3      	ldr	r3, [pc, #652]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	2b04      	cmp	r3, #4
 800141c:	d00c      	beq.n	8001438 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800141e:	4ba0      	ldr	r3, [pc, #640]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001426:	2b08      	cmp	r3, #8
 8001428:	d112      	bne.n	8001450 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800142a:	4b9d      	ldr	r3, [pc, #628]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001436:	d10b      	bne.n	8001450 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001438:	4b99      	ldr	r3, [pc, #612]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d05b      	beq.n	80014fc <HAL_RCC_OscConfig+0x108>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d157      	bne.n	80014fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e236      	b.n	80018be <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001458:	d106      	bne.n	8001468 <HAL_RCC_OscConfig+0x74>
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a90      	ldr	r2, [pc, #576]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e01d      	b.n	80014a4 <HAL_RCC_OscConfig+0xb0>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001470:	d10c      	bne.n	800148c <HAL_RCC_OscConfig+0x98>
 8001472:	4b8b      	ldr	r3, [pc, #556]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a8a      	ldr	r2, [pc, #552]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	4b88      	ldr	r3, [pc, #544]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a87      	ldr	r2, [pc, #540]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e00b      	b.n	80014a4 <HAL_RCC_OscConfig+0xb0>
 800148c:	4b84      	ldr	r3, [pc, #528]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a83      	ldr	r2, [pc, #524]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b81      	ldr	r3, [pc, #516]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a80      	ldr	r2, [pc, #512]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 800149e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d013      	beq.n	80014d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fcda 	bl	8000e64 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b4:	f7ff fcd6 	bl	8000e64 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b64      	cmp	r3, #100	; 0x64
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e1fb      	b.n	80018be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c6:	4b76      	ldr	r3, [pc, #472]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0xc0>
 80014d2:	e014      	b.n	80014fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fcc6 	bl	8000e64 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014dc:	f7ff fcc2 	bl	8000e64 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e1e7      	b.n	80018be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ee:	4b6c      	ldr	r3, [pc, #432]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0xe8>
 80014fa:	e000      	b.n	80014fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d063      	beq.n	80015d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800150a:	4b65      	ldr	r3, [pc, #404]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00b      	beq.n	800152e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001516:	4b62      	ldr	r3, [pc, #392]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800151e:	2b08      	cmp	r3, #8
 8001520:	d11c      	bne.n	800155c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001522:	4b5f      	ldr	r3, [pc, #380]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d116      	bne.n	800155c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152e:	4b5c      	ldr	r3, [pc, #368]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <HAL_RCC_OscConfig+0x152>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d001      	beq.n	8001546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e1bb      	b.n	80018be <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001546:	4b56      	ldr	r3, [pc, #344]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	4952      	ldr	r1, [pc, #328]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001556:	4313      	orrs	r3, r2
 8001558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155a:	e03a      	b.n	80015d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d020      	beq.n	80015a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001564:	4b4f      	ldr	r3, [pc, #316]	; (80016a4 <HAL_RCC_OscConfig+0x2b0>)
 8001566:	2201      	movs	r2, #1
 8001568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156a:	f7ff fc7b 	bl	8000e64 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001572:	f7ff fc77 	bl	8000e64 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e19c      	b.n	80018be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001584:	4b46      	ldr	r3, [pc, #280]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f0      	beq.n	8001572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001590:	4b43      	ldr	r3, [pc, #268]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	4940      	ldr	r1, [pc, #256]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	600b      	str	r3, [r1, #0]
 80015a4:	e015      	b.n	80015d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015a6:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <HAL_RCC_OscConfig+0x2b0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ac:	f7ff fc5a 	bl	8000e64 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b4:	f7ff fc56 	bl	8000e64 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e17b      	b.n	80018be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c6:	4b36      	ldr	r3, [pc, #216]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d030      	beq.n	8001640 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d016      	beq.n	8001614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015e6:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <HAL_RCC_OscConfig+0x2b4>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ec:	f7ff fc3a 	bl	8000e64 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f4:	f7ff fc36 	bl	8000e64 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e15b      	b.n	80018be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001606:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x200>
 8001612:	e015      	b.n	8001640 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001614:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <HAL_RCC_OscConfig+0x2b4>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161a:	f7ff fc23 	bl	8000e64 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001622:	f7ff fc1f 	bl	8000e64 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e144      	b.n	80018be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f0      	bne.n	8001622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 80a0 	beq.w	800178e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800164e:	2300      	movs	r3, #0
 8001650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001652:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10f      	bne.n	800167e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <HAL_RCC_OscConfig+0x2ac>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800167a:	2301      	movs	r3, #1
 800167c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_RCC_OscConfig+0x2b8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001686:	2b00      	cmp	r3, #0
 8001688:	d121      	bne.n	80016ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <HAL_RCC_OscConfig+0x2b8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_RCC_OscConfig+0x2b8>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001696:	f7ff fbe5 	bl	8000e64 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169c:	e011      	b.n	80016c2 <HAL_RCC_OscConfig+0x2ce>
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	42470000 	.word	0x42470000
 80016a8:	42470e80 	.word	0x42470e80
 80016ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b0:	f7ff fbd8 	bl	8000e64 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e0fd      	b.n	80018be <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c2:	4b81      	ldr	r3, [pc, #516]	; (80018c8 <HAL_RCC_OscConfig+0x4d4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d106      	bne.n	80016e4 <HAL_RCC_OscConfig+0x2f0>
 80016d6:	4b7d      	ldr	r3, [pc, #500]	; (80018cc <HAL_RCC_OscConfig+0x4d8>)
 80016d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016da:	4a7c      	ldr	r2, [pc, #496]	; (80018cc <HAL_RCC_OscConfig+0x4d8>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6713      	str	r3, [r2, #112]	; 0x70
 80016e2:	e01c      	b.n	800171e <HAL_RCC_OscConfig+0x32a>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b05      	cmp	r3, #5
 80016ea:	d10c      	bne.n	8001706 <HAL_RCC_OscConfig+0x312>
 80016ec:	4b77      	ldr	r3, [pc, #476]	; (80018cc <HAL_RCC_OscConfig+0x4d8>)
 80016ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f0:	4a76      	ldr	r2, [pc, #472]	; (80018cc <HAL_RCC_OscConfig+0x4d8>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6713      	str	r3, [r2, #112]	; 0x70
 80016f8:	4b74      	ldr	r3, [pc, #464]	; (80018cc <HAL_RCC_OscConfig+0x4d8>)
 80016fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fc:	4a73      	ldr	r2, [pc, #460]	; (80018cc <HAL_RCC_OscConfig+0x4d8>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6713      	str	r3, [r2, #112]	; 0x70
 8001704:	e00b      	b.n	800171e <HAL_RCC_OscConfig+0x32a>
 8001706:	4b71      	ldr	r3, [pc, #452]	; (80018cc <HAL_RCC_OscConfig+0x4d8>)
 8001708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170a:	4a70      	ldr	r2, [pc, #448]	; (80018cc <HAL_RCC_OscConfig+0x4d8>)
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	6713      	str	r3, [r2, #112]	; 0x70
 8001712:	4b6e      	ldr	r3, [pc, #440]	; (80018cc <HAL_RCC_OscConfig+0x4d8>)
 8001714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001716:	4a6d      	ldr	r2, [pc, #436]	; (80018cc <HAL_RCC_OscConfig+0x4d8>)
 8001718:	f023 0304 	bic.w	r3, r3, #4
 800171c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d015      	beq.n	8001752 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001726:	f7ff fb9d 	bl	8000e64 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172c:	e00a      	b.n	8001744 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800172e:	f7ff fb99 	bl	8000e64 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	f241 3288 	movw	r2, #5000	; 0x1388
 800173c:	4293      	cmp	r3, r2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e0bc      	b.n	80018be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001744:	4b61      	ldr	r3, [pc, #388]	; (80018cc <HAL_RCC_OscConfig+0x4d8>)
 8001746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0ee      	beq.n	800172e <HAL_RCC_OscConfig+0x33a>
 8001750:	e014      	b.n	800177c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001752:	f7ff fb87 	bl	8000e64 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001758:	e00a      	b.n	8001770 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800175a:	f7ff fb83 	bl	8000e64 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e0a6      	b.n	80018be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001770:	4b56      	ldr	r3, [pc, #344]	; (80018cc <HAL_RCC_OscConfig+0x4d8>)
 8001772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1ee      	bne.n	800175a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800177c:	7dfb      	ldrb	r3, [r7, #23]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d105      	bne.n	800178e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001782:	4b52      	ldr	r3, [pc, #328]	; (80018cc <HAL_RCC_OscConfig+0x4d8>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	4a51      	ldr	r2, [pc, #324]	; (80018cc <HAL_RCC_OscConfig+0x4d8>)
 8001788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800178c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 8092 	beq.w	80018bc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001798:	4b4c      	ldr	r3, [pc, #304]	; (80018cc <HAL_RCC_OscConfig+0x4d8>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 030c 	and.w	r3, r3, #12
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d05c      	beq.n	800185e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d141      	bne.n	8001830 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ac:	4b48      	ldr	r3, [pc, #288]	; (80018d0 <HAL_RCC_OscConfig+0x4dc>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b2:	f7ff fb57 	bl	8000e64 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ba:	f7ff fb53 	bl	8000e64 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e078      	b.n	80018be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017cc:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <HAL_RCC_OscConfig+0x4d8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f0      	bne.n	80017ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69da      	ldr	r2, [r3, #28]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	019b      	lsls	r3, r3, #6
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ee:	085b      	lsrs	r3, r3, #1
 80017f0:	3b01      	subs	r3, #1
 80017f2:	041b      	lsls	r3, r3, #16
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fa:	061b      	lsls	r3, r3, #24
 80017fc:	4933      	ldr	r1, [pc, #204]	; (80018cc <HAL_RCC_OscConfig+0x4d8>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001802:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <HAL_RCC_OscConfig+0x4dc>)
 8001804:	2201      	movs	r2, #1
 8001806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001808:	f7ff fb2c 	bl	8000e64 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001810:	f7ff fb28 	bl	8000e64 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e04d      	b.n	80018be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001822:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <HAL_RCC_OscConfig+0x4d8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f0      	beq.n	8001810 <HAL_RCC_OscConfig+0x41c>
 800182e:	e045      	b.n	80018bc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001830:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <HAL_RCC_OscConfig+0x4dc>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001836:	f7ff fb15 	bl	8000e64 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183e:	f7ff fb11 	bl	8000e64 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e036      	b.n	80018be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001850:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <HAL_RCC_OscConfig+0x4d8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f0      	bne.n	800183e <HAL_RCC_OscConfig+0x44a>
 800185c:	e02e      	b.n	80018bc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e029      	b.n	80018be <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800186a:	4b18      	ldr	r3, [pc, #96]	; (80018cc <HAL_RCC_OscConfig+0x4d8>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	429a      	cmp	r2, r3
 800187c:	d11c      	bne.n	80018b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d115      	bne.n	80018b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001892:	4013      	ands	r3, r2
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001898:	4293      	cmp	r3, r2
 800189a:	d10d      	bne.n	80018b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d106      	bne.n	80018b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e000      	b.n	80018be <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40007000 	.word	0x40007000
 80018cc:	40023800 	.word	0x40023800
 80018d0:	42470060 	.word	0x42470060

080018d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0cc      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018e8:	4b68      	ldr	r3, [pc, #416]	; (8001a8c <HAL_RCC_ClockConfig+0x1b8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 030f 	and.w	r3, r3, #15
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d90c      	bls.n	8001910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f6:	4b65      	ldr	r3, [pc, #404]	; (8001a8c <HAL_RCC_ClockConfig+0x1b8>)
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	4b63      	ldr	r3, [pc, #396]	; (8001a8c <HAL_RCC_ClockConfig+0x1b8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0b8      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d020      	beq.n	800195e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001928:	4b59      	ldr	r3, [pc, #356]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	4a58      	ldr	r2, [pc, #352]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001932:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001940:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	4a52      	ldr	r2, [pc, #328]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800194a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800194c:	4b50      	ldr	r3, [pc, #320]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	494d      	ldr	r1, [pc, #308]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d044      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d119      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e07f      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d003      	beq.n	8001992 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800198e:	2b03      	cmp	r3, #3
 8001990:	d107      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001992:	4b3f      	ldr	r3, [pc, #252]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d109      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e06f      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a2:	4b3b      	ldr	r3, [pc, #236]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e067      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019b2:	4b37      	ldr	r3, [pc, #220]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f023 0203 	bic.w	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4934      	ldr	r1, [pc, #208]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019c4:	f7ff fa4e 	bl	8000e64 <HAL_GetTick>
 80019c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ca:	e00a      	b.n	80019e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019cc:	f7ff fa4a 	bl	8000e64 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e04f      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e2:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 020c 	and.w	r2, r3, #12
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d1eb      	bne.n	80019cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019f4:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <HAL_RCC_ClockConfig+0x1b8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 030f 	and.w	r3, r3, #15
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d20c      	bcs.n	8001a1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a02:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <HAL_RCC_ClockConfig+0x1b8>)
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0a:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_RCC_ClockConfig+0x1b8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d001      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e032      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d008      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4916      	ldr	r1, [pc, #88]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d009      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	490e      	ldr	r1, [pc, #56]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a5a:	f000 f821 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8001a5e:	4601      	mov	r1, r0
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <HAL_RCC_ClockConfig+0x1c0>)
 8001a6c:	5cd3      	ldrb	r3, [r2, r3]
 8001a6e:	fa21 f303 	lsr.w	r3, r1, r3
 8001a72:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_RCC_ClockConfig+0x1c8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff f9ae 	bl	8000ddc <HAL_InitTick>

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023c00 	.word	0x40023c00
 8001a90:	40023800 	.word	0x40023800
 8001a94:	08005578 	.word	0x08005578
 8001a98:	20000004 	.word	0x20000004
 8001a9c:	20000008 	.word	0x20000008

08001aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ab6:	4b63      	ldr	r3, [pc, #396]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d007      	beq.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x32>
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d008      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x38>
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f040 80b4 	bne.w	8001c34 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001acc:	4b5e      	ldr	r3, [pc, #376]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ace:	60bb      	str	r3, [r7, #8]
       break;
 8001ad0:	e0b3      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ad2:	4b5e      	ldr	r3, [pc, #376]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001ad4:	60bb      	str	r3, [r7, #8]
      break;
 8001ad6:	e0b0      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ad8:	4b5a      	ldr	r3, [pc, #360]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ae0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ae2:	4b58      	ldr	r3, [pc, #352]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d04a      	beq.n	8001b84 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aee:	4b55      	ldr	r3, [pc, #340]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	099b      	lsrs	r3, r3, #6
 8001af4:	f04f 0400 	mov.w	r4, #0
 8001af8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	ea03 0501 	and.w	r5, r3, r1
 8001b04:	ea04 0602 	and.w	r6, r4, r2
 8001b08:	4629      	mov	r1, r5
 8001b0a:	4632      	mov	r2, r6
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	f04f 0400 	mov.w	r4, #0
 8001b14:	0154      	lsls	r4, r2, #5
 8001b16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b1a:	014b      	lsls	r3, r1, #5
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4622      	mov	r2, r4
 8001b20:	1b49      	subs	r1, r1, r5
 8001b22:	eb62 0206 	sbc.w	r2, r2, r6
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	f04f 0400 	mov.w	r4, #0
 8001b2e:	0194      	lsls	r4, r2, #6
 8001b30:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b34:	018b      	lsls	r3, r1, #6
 8001b36:	1a5b      	subs	r3, r3, r1
 8001b38:	eb64 0402 	sbc.w	r4, r4, r2
 8001b3c:	f04f 0100 	mov.w	r1, #0
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	00e2      	lsls	r2, r4, #3
 8001b46:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b4a:	00d9      	lsls	r1, r3, #3
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4614      	mov	r4, r2
 8001b50:	195b      	adds	r3, r3, r5
 8001b52:	eb44 0406 	adc.w	r4, r4, r6
 8001b56:	f04f 0100 	mov.w	r1, #0
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	0262      	lsls	r2, r4, #9
 8001b60:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001b64:	0259      	lsls	r1, r3, #9
 8001b66:	460b      	mov	r3, r1
 8001b68:	4614      	mov	r4, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	4621      	mov	r1, r4
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f04f 0400 	mov.w	r4, #0
 8001b74:	461a      	mov	r2, r3
 8001b76:	4623      	mov	r3, r4
 8001b78:	f7fe fb82 	bl	8000280 <__aeabi_uldivmod>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	460c      	mov	r4, r1
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	e049      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b84:	4b2f      	ldr	r3, [pc, #188]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	099b      	lsrs	r3, r3, #6
 8001b8a:	f04f 0400 	mov.w	r4, #0
 8001b8e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	ea03 0501 	and.w	r5, r3, r1
 8001b9a:	ea04 0602 	and.w	r6, r4, r2
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	4632      	mov	r2, r6
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	f04f 0400 	mov.w	r4, #0
 8001baa:	0154      	lsls	r4, r2, #5
 8001bac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bb0:	014b      	lsls	r3, r1, #5
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4622      	mov	r2, r4
 8001bb6:	1b49      	subs	r1, r1, r5
 8001bb8:	eb62 0206 	sbc.w	r2, r2, r6
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	f04f 0400 	mov.w	r4, #0
 8001bc4:	0194      	lsls	r4, r2, #6
 8001bc6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001bca:	018b      	lsls	r3, r1, #6
 8001bcc:	1a5b      	subs	r3, r3, r1
 8001bce:	eb64 0402 	sbc.w	r4, r4, r2
 8001bd2:	f04f 0100 	mov.w	r1, #0
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	00e2      	lsls	r2, r4, #3
 8001bdc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001be0:	00d9      	lsls	r1, r3, #3
 8001be2:	460b      	mov	r3, r1
 8001be4:	4614      	mov	r4, r2
 8001be6:	195b      	adds	r3, r3, r5
 8001be8:	eb44 0406 	adc.w	r4, r4, r6
 8001bec:	f04f 0100 	mov.w	r1, #0
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	02a2      	lsls	r2, r4, #10
 8001bf6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001bfa:	0299      	lsls	r1, r3, #10
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4614      	mov	r4, r2
 8001c00:	4618      	mov	r0, r3
 8001c02:	4621      	mov	r1, r4
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f04f 0400 	mov.w	r4, #0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4623      	mov	r3, r4
 8001c0e:	f7fe fb37 	bl	8000280 <__aeabi_uldivmod>
 8001c12:	4603      	mov	r3, r0
 8001c14:	460c      	mov	r4, r1
 8001c16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	0c1b      	lsrs	r3, r3, #16
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	3301      	adds	r3, #1
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c30:	60bb      	str	r3, [r7, #8]
      break;
 8001c32:	e002      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c36:	60bb      	str	r3, [r7, #8]
      break;
 8001c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c3a:	68bb      	ldr	r3, [r7, #8]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c44:	40023800 	.word	0x40023800
 8001c48:	00f42400 	.word	0x00f42400
 8001c4c:	007a1200 	.word	0x007a1200

08001c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000004 	.word	0x20000004

08001c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c6c:	f7ff fff0 	bl	8001c50 <HAL_RCC_GetHCLKFreq>
 8001c70:	4601      	mov	r1, r0
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	0a9b      	lsrs	r3, r3, #10
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	4a03      	ldr	r2, [pc, #12]	; (8001c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c7e:	5cd3      	ldrb	r3, [r2, r3]
 8001c80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	08005588 	.word	0x08005588

08001c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c94:	f7ff ffdc 	bl	8001c50 <HAL_RCC_GetHCLKFreq>
 8001c98:	4601      	mov	r1, r0
 8001c9a:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	0b5b      	lsrs	r3, r3, #13
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	4a03      	ldr	r2, [pc, #12]	; (8001cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ca6:	5cd3      	ldrb	r3, [r2, r3]
 8001ca8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	08005588 	.word	0x08005588

08001cb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e03f      	b.n	8001d4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7fe ff78 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2224      	movs	r2, #36	; 0x24
 8001ce8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f9b1 	bl	8002064 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b088      	sub	sp, #32
 8001d56:	af02      	add	r7, sp, #8
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	603b      	str	r3, [r7, #0]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b20      	cmp	r3, #32
 8001d70:	f040 8083 	bne.w	8001e7a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <HAL_UART_Transmit+0x2e>
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e07b      	b.n	8001e7c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_UART_Transmit+0x40>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e074      	b.n	8001e7c <HAL_UART_Transmit+0x12a>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2221      	movs	r2, #33	; 0x21
 8001da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001da8:	f7ff f85c 	bl	8000e64 <HAL_GetTick>
 8001dac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	88fa      	ldrh	r2, [r7, #6]
 8001db2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	88fa      	ldrh	r2, [r7, #6]
 8001db8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001dc2:	e042      	b.n	8001e4a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dda:	d122      	bne.n	8001e22 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2200      	movs	r2, #0
 8001de4:	2180      	movs	r1, #128	; 0x80
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 f8f2 	bl	8001fd0 <UART_WaitOnFlagUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e042      	b.n	8001e7c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e08:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d103      	bne.n	8001e1a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	3302      	adds	r3, #2
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	e017      	b.n	8001e4a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	e013      	b.n	8001e4a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2180      	movs	r1, #128	; 0x80
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f000 f8cf 	bl	8001fd0 <UART_WaitOnFlagUntilTimeout>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e01f      	b.n	8001e7c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	60ba      	str	r2, [r7, #8]
 8001e42:	781a      	ldrb	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1b7      	bne.n	8001dc4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2140      	movs	r1, #64	; 0x40
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 f8b6 	bl	8001fd0 <UART_WaitOnFlagUntilTimeout>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e006      	b.n	8001e7c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2220      	movs	r2, #32
 8001e72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e000      	b.n	8001e7c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001e7a:	2302      	movs	r3, #2
  }
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	4613      	mov	r3, r2
 8001e92:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b20      	cmp	r3, #32
 8001ea2:	f040 8090 	bne.w	8001fc6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <HAL_UART_Receive+0x2e>
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e088      	b.n	8001fc8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <HAL_UART_Receive+0x40>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e081      	b.n	8001fc8 <HAL_UART_Receive+0x144>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2222      	movs	r2, #34	; 0x22
 8001ed6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001eda:	f7fe ffc3 	bl	8000e64 <HAL_GetTick>
 8001ede:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	88fa      	ldrh	r2, [r7, #6]
 8001ee4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	88fa      	ldrh	r2, [r7, #6]
 8001eea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001ef4:	e05c      	b.n	8001fb0 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f0c:	d12b      	bne.n	8001f66 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2200      	movs	r2, #0
 8001f16:	2120      	movs	r1, #32
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 f859 	bl	8001fd0 <UART_WaitOnFlagUntilTimeout>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e04f      	b.n	8001fc8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10c      	bne.n	8001f4e <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	3302      	adds	r3, #2
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	e030      	b.n	8001fb0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	3301      	adds	r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	e024      	b.n	8001fb0 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2120      	movs	r1, #32
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 f82d 	bl	8001fd0 <UART_WaitOnFlagUntilTimeout>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e023      	b.n	8001fc8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d108      	bne.n	8001f9a <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6859      	ldr	r1, [r3, #4]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	60ba      	str	r2, [r7, #8]
 8001f94:	b2ca      	uxtb	r2, r1
 8001f96:	701a      	strb	r2, [r3, #0]
 8001f98:	e00a      	b.n	8001fb0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	1c59      	adds	r1, r3, #1
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d19d      	bne.n	8001ef6 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e000      	b.n	8001fc8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8001fc6:	2302      	movs	r3, #2
  }
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fe0:	e02c      	b.n	800203c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe8:	d028      	beq.n	800203c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d007      	beq.n	8002000 <UART_WaitOnFlagUntilTimeout+0x30>
 8001ff0:	f7fe ff38 	bl	8000e64 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d21d      	bcs.n	800203c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800200e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2220      	movs	r2, #32
 8002024:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2220      	movs	r2, #32
 800202c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e00f      	b.n	800205c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	4013      	ands	r3, r2
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	429a      	cmp	r2, r3
 800204a:	bf0c      	ite	eq
 800204c:	2301      	moveq	r3, #1
 800204e:	2300      	movne	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	429a      	cmp	r2, r3
 8002058:	d0c3      	beq.n	8001fe2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002068:	b085      	sub	sp, #20
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	4313      	orrs	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80020a6:	f023 030c 	bic.w	r3, r3, #12
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	68f9      	ldr	r1, [r7, #12]
 80020b0:	430b      	orrs	r3, r1
 80020b2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699a      	ldr	r2, [r3, #24]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020d2:	f040 818b 	bne.w	80023ec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4ac1      	ldr	r2, [pc, #772]	; (80023e0 <UART_SetConfig+0x37c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d005      	beq.n	80020ec <UART_SetConfig+0x88>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4abf      	ldr	r2, [pc, #764]	; (80023e4 <UART_SetConfig+0x380>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	f040 80bd 	bne.w	8002266 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020ec:	f7ff fdd0 	bl	8001c90 <HAL_RCC_GetPCLK2Freq>
 80020f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	461d      	mov	r5, r3
 80020f6:	f04f 0600 	mov.w	r6, #0
 80020fa:	46a8      	mov	r8, r5
 80020fc:	46b1      	mov	r9, r6
 80020fe:	eb18 0308 	adds.w	r3, r8, r8
 8002102:	eb49 0409 	adc.w	r4, r9, r9
 8002106:	4698      	mov	r8, r3
 8002108:	46a1      	mov	r9, r4
 800210a:	eb18 0805 	adds.w	r8, r8, r5
 800210e:	eb49 0906 	adc.w	r9, r9, r6
 8002112:	f04f 0100 	mov.w	r1, #0
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800211e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002122:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002126:	4688      	mov	r8, r1
 8002128:	4691      	mov	r9, r2
 800212a:	eb18 0005 	adds.w	r0, r8, r5
 800212e:	eb49 0106 	adc.w	r1, r9, r6
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	461d      	mov	r5, r3
 8002138:	f04f 0600 	mov.w	r6, #0
 800213c:	196b      	adds	r3, r5, r5
 800213e:	eb46 0406 	adc.w	r4, r6, r6
 8002142:	461a      	mov	r2, r3
 8002144:	4623      	mov	r3, r4
 8002146:	f7fe f89b 	bl	8000280 <__aeabi_uldivmod>
 800214a:	4603      	mov	r3, r0
 800214c:	460c      	mov	r4, r1
 800214e:	461a      	mov	r2, r3
 8002150:	4ba5      	ldr	r3, [pc, #660]	; (80023e8 <UART_SetConfig+0x384>)
 8002152:	fba3 2302 	umull	r2, r3, r3, r2
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	461d      	mov	r5, r3
 8002160:	f04f 0600 	mov.w	r6, #0
 8002164:	46a9      	mov	r9, r5
 8002166:	46b2      	mov	sl, r6
 8002168:	eb19 0309 	adds.w	r3, r9, r9
 800216c:	eb4a 040a 	adc.w	r4, sl, sl
 8002170:	4699      	mov	r9, r3
 8002172:	46a2      	mov	sl, r4
 8002174:	eb19 0905 	adds.w	r9, r9, r5
 8002178:	eb4a 0a06 	adc.w	sl, sl, r6
 800217c:	f04f 0100 	mov.w	r1, #0
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002188:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800218c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002190:	4689      	mov	r9, r1
 8002192:	4692      	mov	sl, r2
 8002194:	eb19 0005 	adds.w	r0, r9, r5
 8002198:	eb4a 0106 	adc.w	r1, sl, r6
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	461d      	mov	r5, r3
 80021a2:	f04f 0600 	mov.w	r6, #0
 80021a6:	196b      	adds	r3, r5, r5
 80021a8:	eb46 0406 	adc.w	r4, r6, r6
 80021ac:	461a      	mov	r2, r3
 80021ae:	4623      	mov	r3, r4
 80021b0:	f7fe f866 	bl	8000280 <__aeabi_uldivmod>
 80021b4:	4603      	mov	r3, r0
 80021b6:	460c      	mov	r4, r1
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b8b      	ldr	r3, [pc, #556]	; (80023e8 <UART_SetConfig+0x384>)
 80021bc:	fba3 1302 	umull	r1, r3, r3, r2
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	2164      	movs	r1, #100	; 0x64
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	3332      	adds	r3, #50	; 0x32
 80021ce:	4a86      	ldr	r2, [pc, #536]	; (80023e8 <UART_SetConfig+0x384>)
 80021d0:	fba2 2303 	umull	r2, r3, r2, r3
 80021d4:	095b      	lsrs	r3, r3, #5
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021dc:	4498      	add	r8, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	461d      	mov	r5, r3
 80021e2:	f04f 0600 	mov.w	r6, #0
 80021e6:	46a9      	mov	r9, r5
 80021e8:	46b2      	mov	sl, r6
 80021ea:	eb19 0309 	adds.w	r3, r9, r9
 80021ee:	eb4a 040a 	adc.w	r4, sl, sl
 80021f2:	4699      	mov	r9, r3
 80021f4:	46a2      	mov	sl, r4
 80021f6:	eb19 0905 	adds.w	r9, r9, r5
 80021fa:	eb4a 0a06 	adc.w	sl, sl, r6
 80021fe:	f04f 0100 	mov.w	r1, #0
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800220a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800220e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002212:	4689      	mov	r9, r1
 8002214:	4692      	mov	sl, r2
 8002216:	eb19 0005 	adds.w	r0, r9, r5
 800221a:	eb4a 0106 	adc.w	r1, sl, r6
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	461d      	mov	r5, r3
 8002224:	f04f 0600 	mov.w	r6, #0
 8002228:	196b      	adds	r3, r5, r5
 800222a:	eb46 0406 	adc.w	r4, r6, r6
 800222e:	461a      	mov	r2, r3
 8002230:	4623      	mov	r3, r4
 8002232:	f7fe f825 	bl	8000280 <__aeabi_uldivmod>
 8002236:	4603      	mov	r3, r0
 8002238:	460c      	mov	r4, r1
 800223a:	461a      	mov	r2, r3
 800223c:	4b6a      	ldr	r3, [pc, #424]	; (80023e8 <UART_SetConfig+0x384>)
 800223e:	fba3 1302 	umull	r1, r3, r3, r2
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	2164      	movs	r1, #100	; 0x64
 8002246:	fb01 f303 	mul.w	r3, r1, r3
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	3332      	adds	r3, #50	; 0x32
 8002250:	4a65      	ldr	r2, [pc, #404]	; (80023e8 <UART_SetConfig+0x384>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	f003 0207 	and.w	r2, r3, #7
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4442      	add	r2, r8
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	e26f      	b.n	8002746 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002266:	f7ff fcff 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 800226a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	461d      	mov	r5, r3
 8002270:	f04f 0600 	mov.w	r6, #0
 8002274:	46a8      	mov	r8, r5
 8002276:	46b1      	mov	r9, r6
 8002278:	eb18 0308 	adds.w	r3, r8, r8
 800227c:	eb49 0409 	adc.w	r4, r9, r9
 8002280:	4698      	mov	r8, r3
 8002282:	46a1      	mov	r9, r4
 8002284:	eb18 0805 	adds.w	r8, r8, r5
 8002288:	eb49 0906 	adc.w	r9, r9, r6
 800228c:	f04f 0100 	mov.w	r1, #0
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002298:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800229c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80022a0:	4688      	mov	r8, r1
 80022a2:	4691      	mov	r9, r2
 80022a4:	eb18 0005 	adds.w	r0, r8, r5
 80022a8:	eb49 0106 	adc.w	r1, r9, r6
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	461d      	mov	r5, r3
 80022b2:	f04f 0600 	mov.w	r6, #0
 80022b6:	196b      	adds	r3, r5, r5
 80022b8:	eb46 0406 	adc.w	r4, r6, r6
 80022bc:	461a      	mov	r2, r3
 80022be:	4623      	mov	r3, r4
 80022c0:	f7fd ffde 	bl	8000280 <__aeabi_uldivmod>
 80022c4:	4603      	mov	r3, r0
 80022c6:	460c      	mov	r4, r1
 80022c8:	461a      	mov	r2, r3
 80022ca:	4b47      	ldr	r3, [pc, #284]	; (80023e8 <UART_SetConfig+0x384>)
 80022cc:	fba3 2302 	umull	r2, r3, r3, r2
 80022d0:	095b      	lsrs	r3, r3, #5
 80022d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	461d      	mov	r5, r3
 80022da:	f04f 0600 	mov.w	r6, #0
 80022de:	46a9      	mov	r9, r5
 80022e0:	46b2      	mov	sl, r6
 80022e2:	eb19 0309 	adds.w	r3, r9, r9
 80022e6:	eb4a 040a 	adc.w	r4, sl, sl
 80022ea:	4699      	mov	r9, r3
 80022ec:	46a2      	mov	sl, r4
 80022ee:	eb19 0905 	adds.w	r9, r9, r5
 80022f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80022f6:	f04f 0100 	mov.w	r1, #0
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002302:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002306:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800230a:	4689      	mov	r9, r1
 800230c:	4692      	mov	sl, r2
 800230e:	eb19 0005 	adds.w	r0, r9, r5
 8002312:	eb4a 0106 	adc.w	r1, sl, r6
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	461d      	mov	r5, r3
 800231c:	f04f 0600 	mov.w	r6, #0
 8002320:	196b      	adds	r3, r5, r5
 8002322:	eb46 0406 	adc.w	r4, r6, r6
 8002326:	461a      	mov	r2, r3
 8002328:	4623      	mov	r3, r4
 800232a:	f7fd ffa9 	bl	8000280 <__aeabi_uldivmod>
 800232e:	4603      	mov	r3, r0
 8002330:	460c      	mov	r4, r1
 8002332:	461a      	mov	r2, r3
 8002334:	4b2c      	ldr	r3, [pc, #176]	; (80023e8 <UART_SetConfig+0x384>)
 8002336:	fba3 1302 	umull	r1, r3, r3, r2
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	2164      	movs	r1, #100	; 0x64
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	3332      	adds	r3, #50	; 0x32
 8002348:	4a27      	ldr	r2, [pc, #156]	; (80023e8 <UART_SetConfig+0x384>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002356:	4498      	add	r8, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	461d      	mov	r5, r3
 800235c:	f04f 0600 	mov.w	r6, #0
 8002360:	46a9      	mov	r9, r5
 8002362:	46b2      	mov	sl, r6
 8002364:	eb19 0309 	adds.w	r3, r9, r9
 8002368:	eb4a 040a 	adc.w	r4, sl, sl
 800236c:	4699      	mov	r9, r3
 800236e:	46a2      	mov	sl, r4
 8002370:	eb19 0905 	adds.w	r9, r9, r5
 8002374:	eb4a 0a06 	adc.w	sl, sl, r6
 8002378:	f04f 0100 	mov.w	r1, #0
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002384:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002388:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800238c:	4689      	mov	r9, r1
 800238e:	4692      	mov	sl, r2
 8002390:	eb19 0005 	adds.w	r0, r9, r5
 8002394:	eb4a 0106 	adc.w	r1, sl, r6
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	461d      	mov	r5, r3
 800239e:	f04f 0600 	mov.w	r6, #0
 80023a2:	196b      	adds	r3, r5, r5
 80023a4:	eb46 0406 	adc.w	r4, r6, r6
 80023a8:	461a      	mov	r2, r3
 80023aa:	4623      	mov	r3, r4
 80023ac:	f7fd ff68 	bl	8000280 <__aeabi_uldivmod>
 80023b0:	4603      	mov	r3, r0
 80023b2:	460c      	mov	r4, r1
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <UART_SetConfig+0x384>)
 80023b8:	fba3 1302 	umull	r1, r3, r3, r2
 80023bc:	095b      	lsrs	r3, r3, #5
 80023be:	2164      	movs	r1, #100	; 0x64
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	3332      	adds	r3, #50	; 0x32
 80023ca:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <UART_SetConfig+0x384>)
 80023cc:	fba2 2303 	umull	r2, r3, r2, r3
 80023d0:	095b      	lsrs	r3, r3, #5
 80023d2:	f003 0207 	and.w	r2, r3, #7
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4442      	add	r2, r8
 80023dc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80023de:	e1b2      	b.n	8002746 <UART_SetConfig+0x6e2>
 80023e0:	40011000 	.word	0x40011000
 80023e4:	40011400 	.word	0x40011400
 80023e8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4ad7      	ldr	r2, [pc, #860]	; (8002750 <UART_SetConfig+0x6ec>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d005      	beq.n	8002402 <UART_SetConfig+0x39e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4ad6      	ldr	r2, [pc, #856]	; (8002754 <UART_SetConfig+0x6f0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	f040 80d1 	bne.w	80025a4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002402:	f7ff fc45 	bl	8001c90 <HAL_RCC_GetPCLK2Freq>
 8002406:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	469a      	mov	sl, r3
 800240c:	f04f 0b00 	mov.w	fp, #0
 8002410:	46d0      	mov	r8, sl
 8002412:	46d9      	mov	r9, fp
 8002414:	eb18 0308 	adds.w	r3, r8, r8
 8002418:	eb49 0409 	adc.w	r4, r9, r9
 800241c:	4698      	mov	r8, r3
 800241e:	46a1      	mov	r9, r4
 8002420:	eb18 080a 	adds.w	r8, r8, sl
 8002424:	eb49 090b 	adc.w	r9, r9, fp
 8002428:	f04f 0100 	mov.w	r1, #0
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002434:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002438:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800243c:	4688      	mov	r8, r1
 800243e:	4691      	mov	r9, r2
 8002440:	eb1a 0508 	adds.w	r5, sl, r8
 8002444:	eb4b 0609 	adc.w	r6, fp, r9
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	4619      	mov	r1, r3
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	f04f 0400 	mov.w	r4, #0
 800245a:	0094      	lsls	r4, r2, #2
 800245c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002460:	008b      	lsls	r3, r1, #2
 8002462:	461a      	mov	r2, r3
 8002464:	4623      	mov	r3, r4
 8002466:	4628      	mov	r0, r5
 8002468:	4631      	mov	r1, r6
 800246a:	f7fd ff09 	bl	8000280 <__aeabi_uldivmod>
 800246e:	4603      	mov	r3, r0
 8002470:	460c      	mov	r4, r1
 8002472:	461a      	mov	r2, r3
 8002474:	4bb8      	ldr	r3, [pc, #736]	; (8002758 <UART_SetConfig+0x6f4>)
 8002476:	fba3 2302 	umull	r2, r3, r3, r2
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	469b      	mov	fp, r3
 8002484:	f04f 0c00 	mov.w	ip, #0
 8002488:	46d9      	mov	r9, fp
 800248a:	46e2      	mov	sl, ip
 800248c:	eb19 0309 	adds.w	r3, r9, r9
 8002490:	eb4a 040a 	adc.w	r4, sl, sl
 8002494:	4699      	mov	r9, r3
 8002496:	46a2      	mov	sl, r4
 8002498:	eb19 090b 	adds.w	r9, r9, fp
 800249c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80024a0:	f04f 0100 	mov.w	r1, #0
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024b4:	4689      	mov	r9, r1
 80024b6:	4692      	mov	sl, r2
 80024b8:	eb1b 0509 	adds.w	r5, fp, r9
 80024bc:	eb4c 060a 	adc.w	r6, ip, sl
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	4619      	mov	r1, r3
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	f04f 0400 	mov.w	r4, #0
 80024d2:	0094      	lsls	r4, r2, #2
 80024d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024d8:	008b      	lsls	r3, r1, #2
 80024da:	461a      	mov	r2, r3
 80024dc:	4623      	mov	r3, r4
 80024de:	4628      	mov	r0, r5
 80024e0:	4631      	mov	r1, r6
 80024e2:	f7fd fecd 	bl	8000280 <__aeabi_uldivmod>
 80024e6:	4603      	mov	r3, r0
 80024e8:	460c      	mov	r4, r1
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b9a      	ldr	r3, [pc, #616]	; (8002758 <UART_SetConfig+0x6f4>)
 80024ee:	fba3 1302 	umull	r1, r3, r3, r2
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	2164      	movs	r1, #100	; 0x64
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	3332      	adds	r3, #50	; 0x32
 8002500:	4a95      	ldr	r2, [pc, #596]	; (8002758 <UART_SetConfig+0x6f4>)
 8002502:	fba2 2303 	umull	r2, r3, r2, r3
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800250c:	4498      	add	r8, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	469b      	mov	fp, r3
 8002512:	f04f 0c00 	mov.w	ip, #0
 8002516:	46d9      	mov	r9, fp
 8002518:	46e2      	mov	sl, ip
 800251a:	eb19 0309 	adds.w	r3, r9, r9
 800251e:	eb4a 040a 	adc.w	r4, sl, sl
 8002522:	4699      	mov	r9, r3
 8002524:	46a2      	mov	sl, r4
 8002526:	eb19 090b 	adds.w	r9, r9, fp
 800252a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800252e:	f04f 0100 	mov.w	r1, #0
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800253a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800253e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002542:	4689      	mov	r9, r1
 8002544:	4692      	mov	sl, r2
 8002546:	eb1b 0509 	adds.w	r5, fp, r9
 800254a:	eb4c 060a 	adc.w	r6, ip, sl
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4619      	mov	r1, r3
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	f04f 0400 	mov.w	r4, #0
 8002560:	0094      	lsls	r4, r2, #2
 8002562:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002566:	008b      	lsls	r3, r1, #2
 8002568:	461a      	mov	r2, r3
 800256a:	4623      	mov	r3, r4
 800256c:	4628      	mov	r0, r5
 800256e:	4631      	mov	r1, r6
 8002570:	f7fd fe86 	bl	8000280 <__aeabi_uldivmod>
 8002574:	4603      	mov	r3, r0
 8002576:	460c      	mov	r4, r1
 8002578:	461a      	mov	r2, r3
 800257a:	4b77      	ldr	r3, [pc, #476]	; (8002758 <UART_SetConfig+0x6f4>)
 800257c:	fba3 1302 	umull	r1, r3, r3, r2
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	2164      	movs	r1, #100	; 0x64
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	3332      	adds	r3, #50	; 0x32
 800258e:	4a72      	ldr	r2, [pc, #456]	; (8002758 <UART_SetConfig+0x6f4>)
 8002590:	fba2 2303 	umull	r2, r3, r2, r3
 8002594:	095b      	lsrs	r3, r3, #5
 8002596:	f003 020f 	and.w	r2, r3, #15
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4442      	add	r2, r8
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	e0d0      	b.n	8002746 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80025a4:	f7ff fb60 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 80025a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	469a      	mov	sl, r3
 80025ae:	f04f 0b00 	mov.w	fp, #0
 80025b2:	46d0      	mov	r8, sl
 80025b4:	46d9      	mov	r9, fp
 80025b6:	eb18 0308 	adds.w	r3, r8, r8
 80025ba:	eb49 0409 	adc.w	r4, r9, r9
 80025be:	4698      	mov	r8, r3
 80025c0:	46a1      	mov	r9, r4
 80025c2:	eb18 080a 	adds.w	r8, r8, sl
 80025c6:	eb49 090b 	adc.w	r9, r9, fp
 80025ca:	f04f 0100 	mov.w	r1, #0
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80025d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80025da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80025de:	4688      	mov	r8, r1
 80025e0:	4691      	mov	r9, r2
 80025e2:	eb1a 0508 	adds.w	r5, sl, r8
 80025e6:	eb4b 0609 	adc.w	r6, fp, r9
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4619      	mov	r1, r3
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	f04f 0400 	mov.w	r4, #0
 80025fc:	0094      	lsls	r4, r2, #2
 80025fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002602:	008b      	lsls	r3, r1, #2
 8002604:	461a      	mov	r2, r3
 8002606:	4623      	mov	r3, r4
 8002608:	4628      	mov	r0, r5
 800260a:	4631      	mov	r1, r6
 800260c:	f7fd fe38 	bl	8000280 <__aeabi_uldivmod>
 8002610:	4603      	mov	r3, r0
 8002612:	460c      	mov	r4, r1
 8002614:	461a      	mov	r2, r3
 8002616:	4b50      	ldr	r3, [pc, #320]	; (8002758 <UART_SetConfig+0x6f4>)
 8002618:	fba3 2302 	umull	r2, r3, r3, r2
 800261c:	095b      	lsrs	r3, r3, #5
 800261e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	469b      	mov	fp, r3
 8002626:	f04f 0c00 	mov.w	ip, #0
 800262a:	46d9      	mov	r9, fp
 800262c:	46e2      	mov	sl, ip
 800262e:	eb19 0309 	adds.w	r3, r9, r9
 8002632:	eb4a 040a 	adc.w	r4, sl, sl
 8002636:	4699      	mov	r9, r3
 8002638:	46a2      	mov	sl, r4
 800263a:	eb19 090b 	adds.w	r9, r9, fp
 800263e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002642:	f04f 0100 	mov.w	r1, #0
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800264e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002652:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002656:	4689      	mov	r9, r1
 8002658:	4692      	mov	sl, r2
 800265a:	eb1b 0509 	adds.w	r5, fp, r9
 800265e:	eb4c 060a 	adc.w	r6, ip, sl
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4619      	mov	r1, r3
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	f04f 0400 	mov.w	r4, #0
 8002674:	0094      	lsls	r4, r2, #2
 8002676:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800267a:	008b      	lsls	r3, r1, #2
 800267c:	461a      	mov	r2, r3
 800267e:	4623      	mov	r3, r4
 8002680:	4628      	mov	r0, r5
 8002682:	4631      	mov	r1, r6
 8002684:	f7fd fdfc 	bl	8000280 <__aeabi_uldivmod>
 8002688:	4603      	mov	r3, r0
 800268a:	460c      	mov	r4, r1
 800268c:	461a      	mov	r2, r3
 800268e:	4b32      	ldr	r3, [pc, #200]	; (8002758 <UART_SetConfig+0x6f4>)
 8002690:	fba3 1302 	umull	r1, r3, r3, r2
 8002694:	095b      	lsrs	r3, r3, #5
 8002696:	2164      	movs	r1, #100	; 0x64
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	3332      	adds	r3, #50	; 0x32
 80026a2:	4a2d      	ldr	r2, [pc, #180]	; (8002758 <UART_SetConfig+0x6f4>)
 80026a4:	fba2 2303 	umull	r2, r3, r2, r3
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ae:	4498      	add	r8, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	469b      	mov	fp, r3
 80026b4:	f04f 0c00 	mov.w	ip, #0
 80026b8:	46d9      	mov	r9, fp
 80026ba:	46e2      	mov	sl, ip
 80026bc:	eb19 0309 	adds.w	r3, r9, r9
 80026c0:	eb4a 040a 	adc.w	r4, sl, sl
 80026c4:	4699      	mov	r9, r3
 80026c6:	46a2      	mov	sl, r4
 80026c8:	eb19 090b 	adds.w	r9, r9, fp
 80026cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80026d0:	f04f 0100 	mov.w	r1, #0
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026e4:	4689      	mov	r9, r1
 80026e6:	4692      	mov	sl, r2
 80026e8:	eb1b 0509 	adds.w	r5, fp, r9
 80026ec:	eb4c 060a 	adc.w	r6, ip, sl
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4619      	mov	r1, r3
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	f04f 0400 	mov.w	r4, #0
 8002702:	0094      	lsls	r4, r2, #2
 8002704:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002708:	008b      	lsls	r3, r1, #2
 800270a:	461a      	mov	r2, r3
 800270c:	4623      	mov	r3, r4
 800270e:	4628      	mov	r0, r5
 8002710:	4631      	mov	r1, r6
 8002712:	f7fd fdb5 	bl	8000280 <__aeabi_uldivmod>
 8002716:	4603      	mov	r3, r0
 8002718:	460c      	mov	r4, r1
 800271a:	461a      	mov	r2, r3
 800271c:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <UART_SetConfig+0x6f4>)
 800271e:	fba3 1302 	umull	r1, r3, r3, r2
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	2164      	movs	r1, #100	; 0x64
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	3332      	adds	r3, #50	; 0x32
 8002730:	4a09      	ldr	r2, [pc, #36]	; (8002758 <UART_SetConfig+0x6f4>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	f003 020f 	and.w	r2, r3, #15
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4442      	add	r2, r8
 8002742:	609a      	str	r2, [r3, #8]
}
 8002744:	e7ff      	b.n	8002746 <UART_SetConfig+0x6e2>
 8002746:	bf00      	nop
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002750:	40011000 	.word	0x40011000
 8002754:	40011400 	.word	0x40011400
 8002758:	51eb851f 	.word	0x51eb851f

0800275c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800276a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800276e:	2b84      	cmp	r3, #132	; 0x84
 8002770:	d005      	beq.n	800277e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002772:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4413      	add	r3, r2
 800277a:	3303      	adds	r3, #3
 800277c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800277e:	68fb      	ldr	r3, [r7, #12]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002790:	f000 fbce 	bl	8002f30 <vTaskStartScheduler>
  
  return osOK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	bd80      	pop	{r7, pc}

0800279a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800279a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279c:	b089      	sub	sp, #36	; 0x24
 800279e:	af04      	add	r7, sp, #16
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d020      	beq.n	80027ee <osThreadCreate+0x54>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d01c      	beq.n	80027ee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685c      	ldr	r4, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681d      	ldr	r5, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691e      	ldr	r6, [r3, #16]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff ffc8 	bl	800275c <makeFreeRtosPriority>
 80027cc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027d6:	9202      	str	r2, [sp, #8]
 80027d8:	9301      	str	r3, [sp, #4]
 80027da:	9100      	str	r1, [sp, #0]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	4632      	mov	r2, r6
 80027e0:	4629      	mov	r1, r5
 80027e2:	4620      	mov	r0, r4
 80027e4:	f000 f8d9 	bl	800299a <xTaskCreateStatic>
 80027e8:	4603      	mov	r3, r0
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	e01c      	b.n	8002828 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685c      	ldr	r4, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027fa:	b29e      	uxth	r6, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff ffaa 	bl	800275c <makeFreeRtosPriority>
 8002808:	4602      	mov	r2, r0
 800280a:	f107 030c 	add.w	r3, r7, #12
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	9200      	str	r2, [sp, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	4632      	mov	r2, r6
 8002816:	4629      	mov	r1, r5
 8002818:	4620      	mov	r0, r4
 800281a:	f000 f918 	bl	8002a4e <xTaskCreate>
 800281e:	4603      	mov	r3, r0
 8002820:	2b01      	cmp	r3, #1
 8002822:	d001      	beq.n	8002828 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002824:	2300      	movs	r3, #0
 8002826:	e000      	b.n	800282a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002828:	68fb      	ldr	r3, [r7, #12]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002832 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f103 0208 	add.w	r2, r3, #8
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f04f 32ff 	mov.w	r2, #4294967295
 800284a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f103 0208 	add.w	r2, r3, #8
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f103 0208 	add.w	r2, r3, #8
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	601a      	str	r2, [r3, #0]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ea:	d103      	bne.n	80028f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	e00c      	b.n	800290e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3308      	adds	r3, #8
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	e002      	b.n	8002902 <vListInsert+0x2e>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	429a      	cmp	r2, r3
 800290c:	d2f6      	bcs.n	80028fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	601a      	str	r2, [r3, #0]
}
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002946:	b480      	push	{r7}
 8002948:	b085      	sub	sp, #20
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6892      	ldr	r2, [r2, #8]
 800295c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6852      	ldr	r2, [r2, #4]
 8002966:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	429a      	cmp	r2, r3
 8002970:	d103      	bne.n	800297a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	1e5a      	subs	r2, r3, #1
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800299a:	b580      	push	{r7, lr}
 800299c:	b08e      	sub	sp, #56	; 0x38
 800299e:	af04      	add	r7, sp, #16
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80029a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b2:	f383 8811 	msr	BASEPRI, r3
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	623b      	str	r3, [r7, #32]
 80029c0:	e7fe      	b.n	80029c0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d109      	bne.n	80029dc <xTaskCreateStatic+0x42>
 80029c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029cc:	f383 8811 	msr	BASEPRI, r3
 80029d0:	f3bf 8f6f 	isb	sy
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	e7fe      	b.n	80029da <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80029dc:	2354      	movs	r3, #84	; 0x54
 80029de:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	2b54      	cmp	r3, #84	; 0x54
 80029e4:	d009      	beq.n	80029fa <xTaskCreateStatic+0x60>
 80029e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ea:	f383 8811 	msr	BASEPRI, r3
 80029ee:	f3bf 8f6f 	isb	sy
 80029f2:	f3bf 8f4f 	dsb	sy
 80029f6:	61bb      	str	r3, [r7, #24]
 80029f8:	e7fe      	b.n	80029f8 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80029fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80029fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d01e      	beq.n	8002a40 <xTaskCreateStatic+0xa6>
 8002a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01b      	beq.n	8002a40 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	2202      	movs	r2, #2
 8002a16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	9303      	str	r3, [sp, #12]
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	9302      	str	r3, [sp, #8]
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	9301      	str	r3, [sp, #4]
 8002a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f850 	bl	8002ad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a3a:	f000 f8d3 	bl	8002be4 <prvAddNewTaskToReadyList>
 8002a3e:	e001      	b.n	8002a44 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002a44:	697b      	ldr	r3, [r7, #20]
	}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3728      	adds	r7, #40	; 0x28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b08c      	sub	sp, #48	; 0x30
 8002a52:	af04      	add	r7, sp, #16
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	603b      	str	r3, [r7, #0]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 ffd6 	bl	8003a14 <pvPortMalloc>
 8002a68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00e      	beq.n	8002a8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a70:	2054      	movs	r0, #84	; 0x54
 8002a72:	f000 ffcf 	bl	8003a14 <pvPortMalloc>
 8002a76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
 8002a84:	e005      	b.n	8002a92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a86:	6978      	ldr	r0, [r7, #20]
 8002a88:	f001 f886 	bl	8003b98 <vPortFree>
 8002a8c:	e001      	b.n	8002a92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d017      	beq.n	8002ac8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002aa0:	88fa      	ldrh	r2, [r7, #6]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	9303      	str	r3, [sp, #12]
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	9302      	str	r3, [sp, #8]
 8002aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aac:	9301      	str	r3, [sp, #4]
 8002aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 f80e 	bl	8002ad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002abc:	69f8      	ldr	r0, [r7, #28]
 8002abe:	f000 f891 	bl	8002be4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	e002      	b.n	8002ace <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8002acc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ace:	69bb      	ldr	r3, [r7, #24]
	}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3720      	adds	r7, #32
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002af0:	3b01      	subs	r3, #1
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	f023 0307 	bic.w	r3, r3, #7
 8002afe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <prvInitialiseNewTask+0x46>
 8002b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0e:	f383 8811 	msr	BASEPRI, r3
 8002b12:	f3bf 8f6f 	isb	sy
 8002b16:	f3bf 8f4f 	dsb	sy
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	e7fe      	b.n	8002b1c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d01f      	beq.n	8002b64 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b24:	2300      	movs	r3, #0
 8002b26:	61fb      	str	r3, [r7, #28]
 8002b28:	e012      	b.n	8002b50 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	4413      	add	r3, r2
 8002b30:	7819      	ldrb	r1, [r3, #0]
 8002b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	4413      	add	r3, r2
 8002b38:	3334      	adds	r3, #52	; 0x34
 8002b3a:	460a      	mov	r2, r1
 8002b3c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	4413      	add	r3, r2
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d006      	beq.n	8002b58 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	61fb      	str	r3, [r7, #28]
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	2b0f      	cmp	r3, #15
 8002b54:	d9e9      	bls.n	8002b2a <prvInitialiseNewTask+0x52>
 8002b56:	e000      	b.n	8002b5a <prvInitialiseNewTask+0x82>
			{
				break;
 8002b58:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b62:	e003      	b.n	8002b6c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6e:	2b06      	cmp	r3, #6
 8002b70:	d901      	bls.n	8002b76 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b72:	2306      	movs	r3, #6
 8002b74:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b7a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b80:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b84:	2200      	movs	r2, #0
 8002b86:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fe70 	bl	8002872 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b94:	3318      	adds	r3, #24
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fe6b 	bl	8002872 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ba0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	f1c3 0207 	rsb	r2, r3, #7
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002baa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	68f9      	ldr	r1, [r7, #12]
 8002bc4:	69b8      	ldr	r0, [r7, #24]
 8002bc6:	f000 fd23 	bl	8003610 <pxPortInitialiseStack>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bdc:	bf00      	nop
 8002bde:	3720      	adds	r7, #32
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002bec:	f000 fe36 	bl	800385c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002bf0:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <prvAddNewTaskToReadyList+0xb8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	4a29      	ldr	r2, [pc, #164]	; (8002c9c <prvAddNewTaskToReadyList+0xb8>)
 8002bf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002bfa:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <prvAddNewTaskToReadyList+0xbc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c02:	4a27      	ldr	r2, [pc, #156]	; (8002ca0 <prvAddNewTaskToReadyList+0xbc>)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c08:	4b24      	ldr	r3, [pc, #144]	; (8002c9c <prvAddNewTaskToReadyList+0xb8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d110      	bne.n	8002c32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002c10:	f000 fbc0 	bl	8003394 <prvInitialiseTaskLists>
 8002c14:	e00d      	b.n	8002c32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002c16:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <prvAddNewTaskToReadyList+0xc0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d109      	bne.n	8002c32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <prvAddNewTaskToReadyList+0xbc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d802      	bhi.n	8002c32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c2c:	4a1c      	ldr	r2, [pc, #112]	; (8002ca0 <prvAddNewTaskToReadyList+0xbc>)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c32:	4b1d      	ldr	r3, [pc, #116]	; (8002ca8 <prvAddNewTaskToReadyList+0xc4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	3301      	adds	r3, #1
 8002c38:	4a1b      	ldr	r2, [pc, #108]	; (8002ca8 <prvAddNewTaskToReadyList+0xc4>)
 8002c3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	2201      	movs	r2, #1
 8002c42:	409a      	lsls	r2, r3
 8002c44:	4b19      	ldr	r3, [pc, #100]	; (8002cac <prvAddNewTaskToReadyList+0xc8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	4a18      	ldr	r2, [pc, #96]	; (8002cac <prvAddNewTaskToReadyList+0xc8>)
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4a15      	ldr	r2, [pc, #84]	; (8002cb0 <prvAddNewTaskToReadyList+0xcc>)
 8002c5c:	441a      	add	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3304      	adds	r3, #4
 8002c62:	4619      	mov	r1, r3
 8002c64:	4610      	mov	r0, r2
 8002c66:	f7ff fe11 	bl	800288c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c6a:	f000 fe25 	bl	80038b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <prvAddNewTaskToReadyList+0xc0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00e      	beq.n	8002c94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <prvAddNewTaskToReadyList+0xbc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d207      	bcs.n	8002c94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <prvAddNewTaskToReadyList+0xd0>)
 8002c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000400 	.word	0x20000400
 8002ca0:	20000300 	.word	0x20000300
 8002ca4:	2000040c 	.word	0x2000040c
 8002ca8:	2000041c 	.word	0x2000041c
 8002cac:	20000408 	.word	0x20000408
 8002cb0:	20000304 	.word	0x20000304
 8002cb4:	e000ed04 	.word	0xe000ed04

08002cb8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002cc0:	f000 fdcc 	bl	800385c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d102      	bne.n	8002cd0 <vTaskDelete+0x18>
 8002cca:	4b38      	ldr	r3, [pc, #224]	; (8002dac <vTaskDelete+0xf4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	e000      	b.n	8002cd2 <vTaskDelete+0x1a>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fe34 	bl	8002946 <uxListRemove>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d115      	bne.n	8002d10 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce8:	4931      	ldr	r1, [pc, #196]	; (8002db0 <vTaskDelete+0xf8>)
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10a      	bne.n	8002d10 <vTaskDelete+0x58>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfe:	2201      	movs	r2, #1
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43da      	mvns	r2, r3
 8002d06:	4b2b      	ldr	r3, [pc, #172]	; (8002db4 <vTaskDelete+0xfc>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	4a29      	ldr	r2, [pc, #164]	; (8002db4 <vTaskDelete+0xfc>)
 8002d0e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d004      	beq.n	8002d22 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	3318      	adds	r3, #24
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff fe12 	bl	8002946 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002d22:	4b25      	ldr	r3, [pc, #148]	; (8002db8 <vTaskDelete+0x100>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	3301      	adds	r3, #1
 8002d28:	4a23      	ldr	r2, [pc, #140]	; (8002db8 <vTaskDelete+0x100>)
 8002d2a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002d2c:	4b1f      	ldr	r3, [pc, #124]	; (8002dac <vTaskDelete+0xf4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d10b      	bne.n	8002d4e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	481f      	ldr	r0, [pc, #124]	; (8002dbc <vTaskDelete+0x104>)
 8002d3e:	f7ff fda5 	bl	800288c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002d42:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <vTaskDelete+0x108>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	3301      	adds	r3, #1
 8002d48:	4a1d      	ldr	r2, [pc, #116]	; (8002dc0 <vTaskDelete+0x108>)
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	e009      	b.n	8002d62 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <vTaskDelete+0x10c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	4a1b      	ldr	r2, [pc, #108]	; (8002dc4 <vTaskDelete+0x10c>)
 8002d56:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fb87 	bl	800346c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002d5e:	f000 fbb3 	bl	80034c8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8002d62:	f000 fda9 	bl	80038b8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002d66:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <vTaskDelete+0x110>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d01a      	beq.n	8002da4 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8002d6e:	4b0f      	ldr	r3, [pc, #60]	; (8002dac <vTaskDelete+0xf4>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d115      	bne.n	8002da4 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002d78:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <vTaskDelete+0x114>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d009      	beq.n	8002d94 <vTaskDelete+0xdc>
 8002d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d84:	f383 8811 	msr	BASEPRI, r3
 8002d88:	f3bf 8f6f 	isb	sy
 8002d8c:	f3bf 8f4f 	dsb	sy
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	e7fe      	b.n	8002d92 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8002d94:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <vTaskDelete+0x118>)
 8002d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002da4:	bf00      	nop
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20000300 	.word	0x20000300
 8002db0:	20000304 	.word	0x20000304
 8002db4:	20000408 	.word	0x20000408
 8002db8:	2000041c 	.word	0x2000041c
 8002dbc:	200003d4 	.word	0x200003d4
 8002dc0:	200003e8 	.word	0x200003e8
 8002dc4:	20000400 	.word	0x20000400
 8002dc8:	2000040c 	.word	0x2000040c
 8002dcc:	20000428 	.word	0x20000428
 8002dd0:	e000ed04 	.word	0xe000ed04

08002dd4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	; 0x28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002dde:	2300      	movs	r3, #0
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d109      	bne.n	8002dfc <vTaskDelayUntil+0x28>
 8002de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	e7fe      	b.n	8002dfa <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <vTaskDelayUntil+0x42>
 8002e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e06:	f383 8811 	msr	BASEPRI, r3
 8002e0a:	f3bf 8f6f 	isb	sy
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	e7fe      	b.n	8002e14 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8002e16:	4b29      	ldr	r3, [pc, #164]	; (8002ebc <vTaskDelayUntil+0xe8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d009      	beq.n	8002e32 <vTaskDelayUntil+0x5e>
 8002e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e22:	f383 8811 	msr	BASEPRI, r3
 8002e26:	f3bf 8f6f 	isb	sy
 8002e2a:	f3bf 8f4f 	dsb	sy
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	e7fe      	b.n	8002e30 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8002e32:	f000 f8db 	bl	8002fec <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8002e36:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <vTaskDelayUntil+0xec>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	4413      	add	r3, r2
 8002e44:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6a3a      	ldr	r2, [r7, #32]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d20b      	bcs.n	8002e68 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69fa      	ldr	r2, [r7, #28]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d211      	bcs.n	8002e7e <vTaskDelayUntil+0xaa>
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d90d      	bls.n	8002e7e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8002e62:	2301      	movs	r3, #1
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
 8002e66:	e00a      	b.n	8002e7e <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	69fa      	ldr	r2, [r7, #28]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d303      	bcc.n	8002e7a <vTaskDelayUntil+0xa6>
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d901      	bls.n	8002e7e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d006      	beq.n	8002e98 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002e8a:	69fa      	ldr	r2, [r7, #28]
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fb56 	bl	8003544 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8002e98:	f000 f8b6 	bl	8003008 <xTaskResumeAll>
 8002e9c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d107      	bne.n	8002eb4 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8002ea4:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <vTaskDelayUntil+0xf0>)
 8002ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002eb4:	bf00      	nop
 8002eb6:	3728      	adds	r7, #40	; 0x28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	20000428 	.word	0x20000428
 8002ec0:	20000404 	.word	0x20000404
 8002ec4:	e000ed04 	.word	0xe000ed04

08002ec8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d016      	beq.n	8002f08 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002eda:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <vTaskDelay+0x60>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d009      	beq.n	8002ef6 <vTaskDelay+0x2e>
 8002ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	60bb      	str	r3, [r7, #8]
 8002ef4:	e7fe      	b.n	8002ef4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002ef6:	f000 f879 	bl	8002fec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002efa:	2100      	movs	r1, #0
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fb21 	bl	8003544 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f02:	f000 f881 	bl	8003008 <xTaskResumeAll>
 8002f06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d107      	bne.n	8002f1e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002f0e:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <vTaskDelay+0x64>)
 8002f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000428 	.word	0x20000428
 8002f2c:	e000ed04 	.word	0xe000ed04

08002f30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08a      	sub	sp, #40	; 0x28
 8002f34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f3e:	463a      	mov	r2, r7
 8002f40:	1d39      	adds	r1, r7, #4
 8002f42:	f107 0308 	add.w	r3, r7, #8
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd fb1a 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f4c:	6839      	ldr	r1, [r7, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	9202      	str	r2, [sp, #8]
 8002f54:	9301      	str	r3, [sp, #4]
 8002f56:	2300      	movs	r3, #0
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	460a      	mov	r2, r1
 8002f5e:	491d      	ldr	r1, [pc, #116]	; (8002fd4 <vTaskStartScheduler+0xa4>)
 8002f60:	481d      	ldr	r0, [pc, #116]	; (8002fd8 <vTaskStartScheduler+0xa8>)
 8002f62:	f7ff fd1a 	bl	800299a <xTaskCreateStatic>
 8002f66:	4602      	mov	r2, r0
 8002f68:	4b1c      	ldr	r3, [pc, #112]	; (8002fdc <vTaskStartScheduler+0xac>)
 8002f6a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <vTaskStartScheduler+0xac>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f74:	2301      	movs	r3, #1
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	e001      	b.n	8002f7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d115      	bne.n	8002fb0 <vTaskStartScheduler+0x80>
 8002f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002f96:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <vTaskStartScheduler+0xb0>)
 8002f98:	f04f 32ff 	mov.w	r2, #4294967295
 8002f9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002f9e:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <vTaskStartScheduler+0xb4>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fa4:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <vTaskStartScheduler+0xb8>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002faa:	f000 fbb9 	bl	8003720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002fae:	e00d      	b.n	8002fcc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb6:	d109      	bne.n	8002fcc <vTaskStartScheduler+0x9c>
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	e7fe      	b.n	8002fca <vTaskStartScheduler+0x9a>
}
 8002fcc:	bf00      	nop
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	08005488 	.word	0x08005488
 8002fd8:	08003365 	.word	0x08003365
 8002fdc:	20000424 	.word	0x20000424
 8002fe0:	20000420 	.word	0x20000420
 8002fe4:	2000040c 	.word	0x2000040c
 8002fe8:	20000404 	.word	0x20000404

08002fec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002ff0:	4b04      	ldr	r3, [pc, #16]	; (8003004 <vTaskSuspendAll+0x18>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	4a03      	ldr	r2, [pc, #12]	; (8003004 <vTaskSuspendAll+0x18>)
 8002ff8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002ffa:	bf00      	nop
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	20000428 	.word	0x20000428

08003008 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003016:	4b41      	ldr	r3, [pc, #260]	; (800311c <xTaskResumeAll+0x114>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <xTaskResumeAll+0x2a>
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	e7fe      	b.n	8003030 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003032:	f000 fc13 	bl	800385c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003036:	4b39      	ldr	r3, [pc, #228]	; (800311c <xTaskResumeAll+0x114>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	3b01      	subs	r3, #1
 800303c:	4a37      	ldr	r2, [pc, #220]	; (800311c <xTaskResumeAll+0x114>)
 800303e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003040:	4b36      	ldr	r3, [pc, #216]	; (800311c <xTaskResumeAll+0x114>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d161      	bne.n	800310c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003048:	4b35      	ldr	r3, [pc, #212]	; (8003120 <xTaskResumeAll+0x118>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d05d      	beq.n	800310c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003050:	e02e      	b.n	80030b0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003052:	4b34      	ldr	r3, [pc, #208]	; (8003124 <xTaskResumeAll+0x11c>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	3318      	adds	r3, #24
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff fc71 	bl	8002946 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3304      	adds	r3, #4
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fc6c 	bl	8002946 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	2201      	movs	r2, #1
 8003074:	409a      	lsls	r2, r3
 8003076:	4b2c      	ldr	r3, [pc, #176]	; (8003128 <xTaskResumeAll+0x120>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4313      	orrs	r3, r2
 800307c:	4a2a      	ldr	r2, [pc, #168]	; (8003128 <xTaskResumeAll+0x120>)
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4a27      	ldr	r2, [pc, #156]	; (800312c <xTaskResumeAll+0x124>)
 800308e:	441a      	add	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	3304      	adds	r3, #4
 8003094:	4619      	mov	r1, r3
 8003096:	4610      	mov	r0, r2
 8003098:	f7ff fbf8 	bl	800288c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a0:	4b23      	ldr	r3, [pc, #140]	; (8003130 <xTaskResumeAll+0x128>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d302      	bcc.n	80030b0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80030aa:	4b22      	ldr	r3, [pc, #136]	; (8003134 <xTaskResumeAll+0x12c>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030b0:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <xTaskResumeAll+0x11c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1cc      	bne.n	8003052 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80030be:	f000 fa03 	bl	80034c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80030c2:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <xTaskResumeAll+0x130>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d010      	beq.n	80030f0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80030ce:	f000 f837 	bl	8003140 <xTaskIncrementTick>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80030d8:	4b16      	ldr	r3, [pc, #88]	; (8003134 <xTaskResumeAll+0x12c>)
 80030da:	2201      	movs	r2, #1
 80030dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f1      	bne.n	80030ce <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80030ea:	4b13      	ldr	r3, [pc, #76]	; (8003138 <xTaskResumeAll+0x130>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80030f0:	4b10      	ldr	r3, [pc, #64]	; (8003134 <xTaskResumeAll+0x12c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d009      	beq.n	800310c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80030f8:	2301      	movs	r3, #1
 80030fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80030fc:	4b0f      	ldr	r3, [pc, #60]	; (800313c <xTaskResumeAll+0x134>)
 80030fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800310c:	f000 fbd4 	bl	80038b8 <vPortExitCritical>

	return xAlreadyYielded;
 8003110:	68bb      	ldr	r3, [r7, #8]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000428 	.word	0x20000428
 8003120:	20000400 	.word	0x20000400
 8003124:	200003c0 	.word	0x200003c0
 8003128:	20000408 	.word	0x20000408
 800312c:	20000304 	.word	0x20000304
 8003130:	20000300 	.word	0x20000300
 8003134:	20000414 	.word	0x20000414
 8003138:	20000410 	.word	0x20000410
 800313c:	e000ed04 	.word	0xe000ed04

08003140 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800314a:	4b4e      	ldr	r3, [pc, #312]	; (8003284 <xTaskIncrementTick+0x144>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	f040 8087 	bne.w	8003262 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003154:	4b4c      	ldr	r3, [pc, #304]	; (8003288 <xTaskIncrementTick+0x148>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3301      	adds	r3, #1
 800315a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800315c:	4a4a      	ldr	r2, [pc, #296]	; (8003288 <xTaskIncrementTick+0x148>)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d11f      	bne.n	80031a8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003168:	4b48      	ldr	r3, [pc, #288]	; (800328c <xTaskIncrementTick+0x14c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <xTaskIncrementTick+0x46>
 8003172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003176:	f383 8811 	msr	BASEPRI, r3
 800317a:	f3bf 8f6f 	isb	sy
 800317e:	f3bf 8f4f 	dsb	sy
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	e7fe      	b.n	8003184 <xTaskIncrementTick+0x44>
 8003186:	4b41      	ldr	r3, [pc, #260]	; (800328c <xTaskIncrementTick+0x14c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	4b40      	ldr	r3, [pc, #256]	; (8003290 <xTaskIncrementTick+0x150>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a3e      	ldr	r2, [pc, #248]	; (800328c <xTaskIncrementTick+0x14c>)
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	4a3e      	ldr	r2, [pc, #248]	; (8003290 <xTaskIncrementTick+0x150>)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	4b3e      	ldr	r3, [pc, #248]	; (8003294 <xTaskIncrementTick+0x154>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	3301      	adds	r3, #1
 80031a0:	4a3c      	ldr	r2, [pc, #240]	; (8003294 <xTaskIncrementTick+0x154>)
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	f000 f990 	bl	80034c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031a8:	4b3b      	ldr	r3, [pc, #236]	; (8003298 <xTaskIncrementTick+0x158>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d348      	bcc.n	8003244 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031b2:	4b36      	ldr	r3, [pc, #216]	; (800328c <xTaskIncrementTick+0x14c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d104      	bne.n	80031c6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031bc:	4b36      	ldr	r3, [pc, #216]	; (8003298 <xTaskIncrementTick+0x158>)
 80031be:	f04f 32ff 	mov.w	r2, #4294967295
 80031c2:	601a      	str	r2, [r3, #0]
					break;
 80031c4:	e03e      	b.n	8003244 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031c6:	4b31      	ldr	r3, [pc, #196]	; (800328c <xTaskIncrementTick+0x14c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d203      	bcs.n	80031e6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80031de:	4a2e      	ldr	r2, [pc, #184]	; (8003298 <xTaskIncrementTick+0x158>)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80031e4:	e02e      	b.n	8003244 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	3304      	adds	r3, #4
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fbab 	bl	8002946 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d004      	beq.n	8003202 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	3318      	adds	r3, #24
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff fba2 	bl	8002946 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	2201      	movs	r2, #1
 8003208:	409a      	lsls	r2, r3
 800320a:	4b24      	ldr	r3, [pc, #144]	; (800329c <xTaskIncrementTick+0x15c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4313      	orrs	r3, r2
 8003210:	4a22      	ldr	r2, [pc, #136]	; (800329c <xTaskIncrementTick+0x15c>)
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4a1f      	ldr	r2, [pc, #124]	; (80032a0 <xTaskIncrementTick+0x160>)
 8003222:	441a      	add	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	3304      	adds	r3, #4
 8003228:	4619      	mov	r1, r3
 800322a:	4610      	mov	r0, r2
 800322c:	f7ff fb2e 	bl	800288c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003234:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <xTaskIncrementTick+0x164>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323a:	429a      	cmp	r2, r3
 800323c:	d3b9      	bcc.n	80031b2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800323e:	2301      	movs	r3, #1
 8003240:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003242:	e7b6      	b.n	80031b2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003244:	4b17      	ldr	r3, [pc, #92]	; (80032a4 <xTaskIncrementTick+0x164>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324a:	4915      	ldr	r1, [pc, #84]	; (80032a0 <xTaskIncrementTick+0x160>)
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d907      	bls.n	800326c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800325c:	2301      	movs	r3, #1
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	e004      	b.n	800326c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003262:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <xTaskIncrementTick+0x168>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3301      	adds	r3, #1
 8003268:	4a0f      	ldr	r2, [pc, #60]	; (80032a8 <xTaskIncrementTick+0x168>)
 800326a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800326c:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <xTaskIncrementTick+0x16c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003274:	2301      	movs	r3, #1
 8003276:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003278:	697b      	ldr	r3, [r7, #20]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20000428 	.word	0x20000428
 8003288:	20000404 	.word	0x20000404
 800328c:	200003b8 	.word	0x200003b8
 8003290:	200003bc 	.word	0x200003bc
 8003294:	20000418 	.word	0x20000418
 8003298:	20000420 	.word	0x20000420
 800329c:	20000408 	.word	0x20000408
 80032a0:	20000304 	.word	0x20000304
 80032a4:	20000300 	.word	0x20000300
 80032a8:	20000410 	.word	0x20000410
 80032ac:	20000414 	.word	0x20000414

080032b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032b6:	4b26      	ldr	r3, [pc, #152]	; (8003350 <vTaskSwitchContext+0xa0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80032be:	4b25      	ldr	r3, [pc, #148]	; (8003354 <vTaskSwitchContext+0xa4>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80032c4:	e03e      	b.n	8003344 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80032c6:	4b23      	ldr	r3, [pc, #140]	; (8003354 <vTaskSwitchContext+0xa4>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032cc:	4b22      	ldr	r3, [pc, #136]	; (8003358 <vTaskSwitchContext+0xa8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	fab3 f383 	clz	r3, r3
 80032d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80032da:	7afb      	ldrb	r3, [r7, #11]
 80032dc:	f1c3 031f 	rsb	r3, r3, #31
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	491e      	ldr	r1, [pc, #120]	; (800335c <vTaskSwitchContext+0xac>)
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d109      	bne.n	800330a <vTaskSwitchContext+0x5a>
	__asm volatile
 80032f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	607b      	str	r3, [r7, #4]
 8003308:	e7fe      	b.n	8003308 <vTaskSwitchContext+0x58>
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4a11      	ldr	r2, [pc, #68]	; (800335c <vTaskSwitchContext+0xac>)
 8003316:	4413      	add	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	605a      	str	r2, [r3, #4]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	3308      	adds	r3, #8
 800332c:	429a      	cmp	r2, r3
 800332e:	d104      	bne.n	800333a <vTaskSwitchContext+0x8a>
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4a07      	ldr	r2, [pc, #28]	; (8003360 <vTaskSwitchContext+0xb0>)
 8003342:	6013      	str	r3, [r2, #0]
}
 8003344:	bf00      	nop
 8003346:	371c      	adds	r7, #28
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	20000428 	.word	0x20000428
 8003354:	20000414 	.word	0x20000414
 8003358:	20000408 	.word	0x20000408
 800335c:	20000304 	.word	0x20000304
 8003360:	20000300 	.word	0x20000300

08003364 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800336c:	f000 f852 	bl	8003414 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003370:	4b06      	ldr	r3, [pc, #24]	; (800338c <prvIdleTask+0x28>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d9f9      	bls.n	800336c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003378:	4b05      	ldr	r3, [pc, #20]	; (8003390 <prvIdleTask+0x2c>)
 800337a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003388:	e7f0      	b.n	800336c <prvIdleTask+0x8>
 800338a:	bf00      	nop
 800338c:	20000304 	.word	0x20000304
 8003390:	e000ed04 	.word	0xe000ed04

08003394 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800339a:	2300      	movs	r3, #0
 800339c:	607b      	str	r3, [r7, #4]
 800339e:	e00c      	b.n	80033ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4a12      	ldr	r2, [pc, #72]	; (80033f4 <prvInitialiseTaskLists+0x60>)
 80033ac:	4413      	add	r3, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fa3f 	bl	8002832 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3301      	adds	r3, #1
 80033b8:	607b      	str	r3, [r7, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b06      	cmp	r3, #6
 80033be:	d9ef      	bls.n	80033a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80033c0:	480d      	ldr	r0, [pc, #52]	; (80033f8 <prvInitialiseTaskLists+0x64>)
 80033c2:	f7ff fa36 	bl	8002832 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80033c6:	480d      	ldr	r0, [pc, #52]	; (80033fc <prvInitialiseTaskLists+0x68>)
 80033c8:	f7ff fa33 	bl	8002832 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80033cc:	480c      	ldr	r0, [pc, #48]	; (8003400 <prvInitialiseTaskLists+0x6c>)
 80033ce:	f7ff fa30 	bl	8002832 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80033d2:	480c      	ldr	r0, [pc, #48]	; (8003404 <prvInitialiseTaskLists+0x70>)
 80033d4:	f7ff fa2d 	bl	8002832 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80033d8:	480b      	ldr	r0, [pc, #44]	; (8003408 <prvInitialiseTaskLists+0x74>)
 80033da:	f7ff fa2a 	bl	8002832 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80033de:	4b0b      	ldr	r3, [pc, #44]	; (800340c <prvInitialiseTaskLists+0x78>)
 80033e0:	4a05      	ldr	r2, [pc, #20]	; (80033f8 <prvInitialiseTaskLists+0x64>)
 80033e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80033e4:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <prvInitialiseTaskLists+0x7c>)
 80033e6:	4a05      	ldr	r2, [pc, #20]	; (80033fc <prvInitialiseTaskLists+0x68>)
 80033e8:	601a      	str	r2, [r3, #0]
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000304 	.word	0x20000304
 80033f8:	20000390 	.word	0x20000390
 80033fc:	200003a4 	.word	0x200003a4
 8003400:	200003c0 	.word	0x200003c0
 8003404:	200003d4 	.word	0x200003d4
 8003408:	200003ec 	.word	0x200003ec
 800340c:	200003b8 	.word	0x200003b8
 8003410:	200003bc 	.word	0x200003bc

08003414 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800341a:	e019      	b.n	8003450 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800341c:	f000 fa1e 	bl	800385c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003420:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <prvCheckTasksWaitingTermination+0x4c>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3304      	adds	r3, #4
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff fa8a 	bl	8002946 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003432:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <prvCheckTasksWaitingTermination+0x50>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	3b01      	subs	r3, #1
 8003438:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <prvCheckTasksWaitingTermination+0x50>)
 800343a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <prvCheckTasksWaitingTermination+0x54>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3b01      	subs	r3, #1
 8003442:	4a09      	ldr	r2, [pc, #36]	; (8003468 <prvCheckTasksWaitingTermination+0x54>)
 8003444:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003446:	f000 fa37 	bl	80038b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f80e 	bl	800346c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <prvCheckTasksWaitingTermination+0x54>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e1      	bne.n	800341c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003458:	bf00      	nop
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	200003d4 	.word	0x200003d4
 8003464:	20000400 	.word	0x20000400
 8003468:	200003e8 	.word	0x200003e8

0800346c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800347a:	2b00      	cmp	r3, #0
 800347c:	d108      	bne.n	8003490 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	4618      	mov	r0, r3
 8003484:	f000 fb88 	bl	8003b98 <vPortFree>
				vPortFree( pxTCB );
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fb85 	bl	8003b98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800348e:	e017      	b.n	80034c0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003496:	2b01      	cmp	r3, #1
 8003498:	d103      	bne.n	80034a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fb7c 	bl	8003b98 <vPortFree>
	}
 80034a0:	e00e      	b.n	80034c0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d009      	beq.n	80034c0 <prvDeleteTCB+0x54>
 80034ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b0:	f383 8811 	msr	BASEPRI, r3
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	e7fe      	b.n	80034be <prvDeleteTCB+0x52>
	}
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034ce:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <prvResetNextTaskUnblockTime+0x38>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d104      	bne.n	80034e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80034d8:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <prvResetNextTaskUnblockTime+0x3c>)
 80034da:	f04f 32ff 	mov.w	r2, #4294967295
 80034de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80034e0:	e008      	b.n	80034f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034e2:	4b07      	ldr	r3, [pc, #28]	; (8003500 <prvResetNextTaskUnblockTime+0x38>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	4a04      	ldr	r2, [pc, #16]	; (8003504 <prvResetNextTaskUnblockTime+0x3c>)
 80034f2:	6013      	str	r3, [r2, #0]
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	200003b8 	.word	0x200003b8
 8003504:	20000420 	.word	0x20000420

08003508 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800350e:	4b0b      	ldr	r3, [pc, #44]	; (800353c <xTaskGetSchedulerState+0x34>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d102      	bne.n	800351c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003516:	2301      	movs	r3, #1
 8003518:	607b      	str	r3, [r7, #4]
 800351a:	e008      	b.n	800352e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800351c:	4b08      	ldr	r3, [pc, #32]	; (8003540 <xTaskGetSchedulerState+0x38>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003524:	2302      	movs	r3, #2
 8003526:	607b      	str	r3, [r7, #4]
 8003528:	e001      	b.n	800352e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800352a:	2300      	movs	r3, #0
 800352c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800352e:	687b      	ldr	r3, [r7, #4]
	}
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	2000040c 	.word	0x2000040c
 8003540:	20000428 	.word	0x20000428

08003544 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800354e:	4b29      	ldr	r3, [pc, #164]	; (80035f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003554:	4b28      	ldr	r3, [pc, #160]	; (80035f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3304      	adds	r3, #4
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff f9f3 	bl	8002946 <uxListRemove>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10b      	bne.n	800357e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003566:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	2201      	movs	r2, #1
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43da      	mvns	r2, r3
 8003574:	4b21      	ldr	r3, [pc, #132]	; (80035fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4013      	ands	r3, r2
 800357a:	4a20      	ldr	r2, [pc, #128]	; (80035fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800357c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	d10a      	bne.n	800359c <prvAddCurrentTaskToDelayedList+0x58>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d007      	beq.n	800359c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800358c:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3304      	adds	r3, #4
 8003592:	4619      	mov	r1, r3
 8003594:	481a      	ldr	r0, [pc, #104]	; (8003600 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003596:	f7ff f979 	bl	800288c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800359a:	e026      	b.n	80035ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4413      	add	r3, r2
 80035a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035a4:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d209      	bcs.n	80035c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035b4:	4b13      	ldr	r3, [pc, #76]	; (8003604 <prvAddCurrentTaskToDelayedList+0xc0>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4b0f      	ldr	r3, [pc, #60]	; (80035f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3304      	adds	r3, #4
 80035be:	4619      	mov	r1, r3
 80035c0:	4610      	mov	r0, r2
 80035c2:	f7ff f987 	bl	80028d4 <vListInsert>
}
 80035c6:	e010      	b.n	80035ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035c8:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <prvAddCurrentTaskToDelayedList+0xc4>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3304      	adds	r3, #4
 80035d2:	4619      	mov	r1, r3
 80035d4:	4610      	mov	r0, r2
 80035d6:	f7ff f97d 	bl	80028d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80035da:	4b0c      	ldr	r3, [pc, #48]	; (800360c <prvAddCurrentTaskToDelayedList+0xc8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d202      	bcs.n	80035ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80035e4:	4a09      	ldr	r2, [pc, #36]	; (800360c <prvAddCurrentTaskToDelayedList+0xc8>)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	6013      	str	r3, [r2, #0]
}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	20000404 	.word	0x20000404
 80035f8:	20000300 	.word	0x20000300
 80035fc:	20000408 	.word	0x20000408
 8003600:	200003ec 	.word	0x200003ec
 8003604:	200003bc 	.word	0x200003bc
 8003608:	200003b8 	.word	0x200003b8
 800360c:	20000420 	.word	0x20000420

08003610 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	3b04      	subs	r3, #4
 8003620:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003628:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	3b04      	subs	r3, #4
 800362e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f023 0201 	bic.w	r2, r3, #1
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	3b04      	subs	r3, #4
 800363e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003640:	4a0c      	ldr	r2, [pc, #48]	; (8003674 <pxPortInitialiseStack+0x64>)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	3b14      	subs	r3, #20
 800364a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	3b04      	subs	r3, #4
 8003656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f06f 0202 	mvn.w	r2, #2
 800365e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	3b20      	subs	r3, #32
 8003664:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003666:	68fb      	ldr	r3, [r7, #12]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	08003679 	.word	0x08003679

08003678 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003682:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <prvTaskExitError+0x50>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368a:	d009      	beq.n	80036a0 <prvTaskExitError+0x28>
 800368c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003690:	f383 8811 	msr	BASEPRI, r3
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	e7fe      	b.n	800369e <prvTaskExitError+0x26>
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80036b2:	bf00      	nop
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0fc      	beq.n	80036b4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80036ba:	bf00      	nop
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	20000010 	.word	0x20000010
 80036cc:	00000000 	.word	0x00000000

080036d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80036d0:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <pxCurrentTCBConst2>)
 80036d2:	6819      	ldr	r1, [r3, #0]
 80036d4:	6808      	ldr	r0, [r1, #0]
 80036d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036da:	f380 8809 	msr	PSP, r0
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f04f 0000 	mov.w	r0, #0
 80036e6:	f380 8811 	msr	BASEPRI, r0
 80036ea:	4770      	bx	lr
 80036ec:	f3af 8000 	nop.w

080036f0 <pxCurrentTCBConst2>:
 80036f0:	20000300 	.word	0x20000300
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop

080036f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80036f8:	4808      	ldr	r0, [pc, #32]	; (800371c <prvPortStartFirstTask+0x24>)
 80036fa:	6800      	ldr	r0, [r0, #0]
 80036fc:	6800      	ldr	r0, [r0, #0]
 80036fe:	f380 8808 	msr	MSP, r0
 8003702:	f04f 0000 	mov.w	r0, #0
 8003706:	f380 8814 	msr	CONTROL, r0
 800370a:	b662      	cpsie	i
 800370c:	b661      	cpsie	f
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	df00      	svc	0
 8003718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800371a:	bf00      	nop
 800371c:	e000ed08 	.word	0xe000ed08

08003720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003726:	4b44      	ldr	r3, [pc, #272]	; (8003838 <xPortStartScheduler+0x118>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a44      	ldr	r2, [pc, #272]	; (800383c <xPortStartScheduler+0x11c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d109      	bne.n	8003744 <xPortStartScheduler+0x24>
 8003730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003734:	f383 8811 	msr	BASEPRI, r3
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	e7fe      	b.n	8003742 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003744:	4b3c      	ldr	r3, [pc, #240]	; (8003838 <xPortStartScheduler+0x118>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a3d      	ldr	r2, [pc, #244]	; (8003840 <xPortStartScheduler+0x120>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d109      	bne.n	8003762 <xPortStartScheduler+0x42>
 800374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	e7fe      	b.n	8003760 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003762:	4b38      	ldr	r3, [pc, #224]	; (8003844 <xPortStartScheduler+0x124>)
 8003764:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	b2db      	uxtb	r3, r3
 800376c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	22ff      	movs	r2, #255	; 0xff
 8003772:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800377c:	78fb      	ldrb	r3, [r7, #3]
 800377e:	b2db      	uxtb	r3, r3
 8003780:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4b30      	ldr	r3, [pc, #192]	; (8003848 <xPortStartScheduler+0x128>)
 8003788:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800378a:	4b30      	ldr	r3, [pc, #192]	; (800384c <xPortStartScheduler+0x12c>)
 800378c:	2207      	movs	r2, #7
 800378e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003790:	e009      	b.n	80037a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003792:	4b2e      	ldr	r3, [pc, #184]	; (800384c <xPortStartScheduler+0x12c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	3b01      	subs	r3, #1
 8003798:	4a2c      	ldr	r2, [pc, #176]	; (800384c <xPortStartScheduler+0x12c>)
 800379a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800379c:	78fb      	ldrb	r3, [r7, #3]
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ae:	2b80      	cmp	r3, #128	; 0x80
 80037b0:	d0ef      	beq.n	8003792 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80037b2:	4b26      	ldr	r3, [pc, #152]	; (800384c <xPortStartScheduler+0x12c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f1c3 0307 	rsb	r3, r3, #7
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d009      	beq.n	80037d2 <xPortStartScheduler+0xb2>
 80037be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	60bb      	str	r3, [r7, #8]
 80037d0:	e7fe      	b.n	80037d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80037d2:	4b1e      	ldr	r3, [pc, #120]	; (800384c <xPortStartScheduler+0x12c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	021b      	lsls	r3, r3, #8
 80037d8:	4a1c      	ldr	r2, [pc, #112]	; (800384c <xPortStartScheduler+0x12c>)
 80037da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80037dc:	4b1b      	ldr	r3, [pc, #108]	; (800384c <xPortStartScheduler+0x12c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037e4:	4a19      	ldr	r2, [pc, #100]	; (800384c <xPortStartScheduler+0x12c>)
 80037e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80037f0:	4b17      	ldr	r3, [pc, #92]	; (8003850 <xPortStartScheduler+0x130>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a16      	ldr	r2, [pc, #88]	; (8003850 <xPortStartScheduler+0x130>)
 80037f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80037fc:	4b14      	ldr	r3, [pc, #80]	; (8003850 <xPortStartScheduler+0x130>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a13      	ldr	r2, [pc, #76]	; (8003850 <xPortStartScheduler+0x130>)
 8003802:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003806:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003808:	f000 f8d6 	bl	80039b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800380c:	4b11      	ldr	r3, [pc, #68]	; (8003854 <xPortStartScheduler+0x134>)
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003812:	f000 f8f5 	bl	8003a00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003816:	4b10      	ldr	r3, [pc, #64]	; (8003858 <xPortStartScheduler+0x138>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a0f      	ldr	r2, [pc, #60]	; (8003858 <xPortStartScheduler+0x138>)
 800381c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003820:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003822:	f7ff ff69 	bl	80036f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003826:	f7ff fd43 	bl	80032b0 <vTaskSwitchContext>
	prvTaskExitError();
 800382a:	f7ff ff25 	bl	8003678 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	e000ed00 	.word	0xe000ed00
 800383c:	410fc271 	.word	0x410fc271
 8003840:	410fc270 	.word	0x410fc270
 8003844:	e000e400 	.word	0xe000e400
 8003848:	2000042c 	.word	0x2000042c
 800384c:	20000430 	.word	0x20000430
 8003850:	e000ed20 	.word	0xe000ed20
 8003854:	20000010 	.word	0x20000010
 8003858:	e000ef34 	.word	0xe000ef34

0800385c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003866:	f383 8811 	msr	BASEPRI, r3
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003874:	4b0e      	ldr	r3, [pc, #56]	; (80038b0 <vPortEnterCritical+0x54>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3301      	adds	r3, #1
 800387a:	4a0d      	ldr	r2, [pc, #52]	; (80038b0 <vPortEnterCritical+0x54>)
 800387c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800387e:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <vPortEnterCritical+0x54>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d10e      	bne.n	80038a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003886:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <vPortEnterCritical+0x58>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d009      	beq.n	80038a4 <vPortEnterCritical+0x48>
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	603b      	str	r3, [r7, #0]
 80038a2:	e7fe      	b.n	80038a2 <vPortEnterCritical+0x46>
	}
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	20000010 	.word	0x20000010
 80038b4:	e000ed04 	.word	0xe000ed04

080038b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80038be:	4b11      	ldr	r3, [pc, #68]	; (8003904 <vPortExitCritical+0x4c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <vPortExitCritical+0x22>
 80038c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ca:	f383 8811 	msr	BASEPRI, r3
 80038ce:	f3bf 8f6f 	isb	sy
 80038d2:	f3bf 8f4f 	dsb	sy
 80038d6:	607b      	str	r3, [r7, #4]
 80038d8:	e7fe      	b.n	80038d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80038da:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <vPortExitCritical+0x4c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3b01      	subs	r3, #1
 80038e0:	4a08      	ldr	r2, [pc, #32]	; (8003904 <vPortExitCritical+0x4c>)
 80038e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80038e4:	4b07      	ldr	r3, [pc, #28]	; (8003904 <vPortExitCritical+0x4c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d104      	bne.n	80038f6 <vPortExitCritical+0x3e>
 80038ec:	2300      	movs	r3, #0
 80038ee:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	20000010 	.word	0x20000010
	...

08003910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003910:	f3ef 8009 	mrs	r0, PSP
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	4b15      	ldr	r3, [pc, #84]	; (8003970 <pxCurrentTCBConst>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	f01e 0f10 	tst.w	lr, #16
 8003920:	bf08      	it	eq
 8003922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800392a:	6010      	str	r0, [r2, #0]
 800392c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003934:	f380 8811 	msr	BASEPRI, r0
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f7ff fcb6 	bl	80032b0 <vTaskSwitchContext>
 8003944:	f04f 0000 	mov.w	r0, #0
 8003948:	f380 8811 	msr	BASEPRI, r0
 800394c:	bc09      	pop	{r0, r3}
 800394e:	6819      	ldr	r1, [r3, #0]
 8003950:	6808      	ldr	r0, [r1, #0]
 8003952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003956:	f01e 0f10 	tst.w	lr, #16
 800395a:	bf08      	it	eq
 800395c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003960:	f380 8809 	msr	PSP, r0
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	f3af 8000 	nop.w

08003970 <pxCurrentTCBConst>:
 8003970:	20000300 	.word	0x20000300
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop

08003978 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
	__asm volatile
 800397e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003990:	f7ff fbd6 	bl	8003140 <xTaskIncrementTick>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800399a:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <xPortSysTickHandler+0x3c>)
 800399c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	2300      	movs	r3, #0
 80039a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80039ac:	bf00      	nop
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	e000ed04 	.word	0xe000ed04

080039b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80039bc:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <vPortSetupTimerInterrupt+0x34>)
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80039c2:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <vPortSetupTimerInterrupt+0x38>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80039c8:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <vPortSetupTimerInterrupt+0x3c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a0a      	ldr	r2, [pc, #40]	; (80039f8 <vPortSetupTimerInterrupt+0x40>)
 80039ce:	fba2 2303 	umull	r2, r3, r2, r3
 80039d2:	099b      	lsrs	r3, r3, #6
 80039d4:	4a09      	ldr	r2, [pc, #36]	; (80039fc <vPortSetupTimerInterrupt+0x44>)
 80039d6:	3b01      	subs	r3, #1
 80039d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80039da:	4b04      	ldr	r3, [pc, #16]	; (80039ec <vPortSetupTimerInterrupt+0x34>)
 80039dc:	2207      	movs	r2, #7
 80039de:	601a      	str	r2, [r3, #0]
}
 80039e0:	bf00      	nop
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	e000e010 	.word	0xe000e010
 80039f0:	e000e018 	.word	0xe000e018
 80039f4:	20000004 	.word	0x20000004
 80039f8:	10624dd3 	.word	0x10624dd3
 80039fc:	e000e014 	.word	0xe000e014

08003a00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003a00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003a10 <vPortEnableVFP+0x10>
 8003a04:	6801      	ldr	r1, [r0, #0]
 8003a06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003a0a:	6001      	str	r1, [r0, #0]
 8003a0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003a0e:	bf00      	nop
 8003a10:	e000ed88 	.word	0xe000ed88

08003a14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	; 0x28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003a20:	f7ff fae4 	bl	8002fec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003a24:	4b57      	ldr	r3, [pc, #348]	; (8003b84 <pvPortMalloc+0x170>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003a2c:	f000 f90c 	bl	8003c48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a30:	4b55      	ldr	r3, [pc, #340]	; (8003b88 <pvPortMalloc+0x174>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f040 808c 	bne.w	8003b56 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d01c      	beq.n	8003a7e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003a44:	2208      	movs	r2, #8
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4413      	add	r3, r2
 8003a4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d013      	beq.n	8003a7e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f023 0307 	bic.w	r3, r3, #7
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d009      	beq.n	8003a7e <pvPortMalloc+0x6a>
	__asm volatile
 8003a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	e7fe      	b.n	8003a7c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d068      	beq.n	8003b56 <pvPortMalloc+0x142>
 8003a84:	4b41      	ldr	r3, [pc, #260]	; (8003b8c <pvPortMalloc+0x178>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d863      	bhi.n	8003b56 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003a8e:	4b40      	ldr	r3, [pc, #256]	; (8003b90 <pvPortMalloc+0x17c>)
 8003a90:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003a92:	4b3f      	ldr	r3, [pc, #252]	; (8003b90 <pvPortMalloc+0x17c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a98:	e004      	b.n	8003aa4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d903      	bls.n	8003ab6 <pvPortMalloc+0xa2>
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f1      	bne.n	8003a9a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003ab6:	4b33      	ldr	r3, [pc, #204]	; (8003b84 <pvPortMalloc+0x170>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d04a      	beq.n	8003b56 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2208      	movs	r2, #8
 8003ac6:	4413      	add	r3, r2
 8003ac8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	1ad2      	subs	r2, r2, r3
 8003ada:	2308      	movs	r3, #8
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d91e      	bls.n	8003b20 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d009      	beq.n	8003b08 <pvPortMalloc+0xf4>
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	e7fe      	b.n	8003b06 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	1ad2      	subs	r2, r2, r3
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b1a:	69b8      	ldr	r0, [r7, #24]
 8003b1c:	f000 f8f6 	bl	8003d0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b20:	4b1a      	ldr	r3, [pc, #104]	; (8003b8c <pvPortMalloc+0x178>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	4a18      	ldr	r2, [pc, #96]	; (8003b8c <pvPortMalloc+0x178>)
 8003b2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b2e:	4b17      	ldr	r3, [pc, #92]	; (8003b8c <pvPortMalloc+0x178>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <pvPortMalloc+0x180>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d203      	bcs.n	8003b42 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b3a:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <pvPortMalloc+0x178>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a15      	ldr	r2, [pc, #84]	; (8003b94 <pvPortMalloc+0x180>)
 8003b40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <pvPortMalloc+0x174>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003b56:	f7ff fa57 	bl	8003008 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d009      	beq.n	8003b78 <pvPortMalloc+0x164>
 8003b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	e7fe      	b.n	8003b76 <pvPortMalloc+0x162>
	return pvReturn;
 8003b78:	69fb      	ldr	r3, [r7, #28]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3728      	adds	r7, #40	; 0x28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	2000403c 	.word	0x2000403c
 8003b88:	20004048 	.word	0x20004048
 8003b8c:	20004040 	.word	0x20004040
 8003b90:	20004034 	.word	0x20004034
 8003b94:	20004044 	.word	0x20004044

08003b98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d046      	beq.n	8003c38 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003baa:	2308      	movs	r3, #8
 8003bac:	425b      	negs	r3, r3
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	4b20      	ldr	r3, [pc, #128]	; (8003c40 <vPortFree+0xa8>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d109      	bne.n	8003bda <vPortFree+0x42>
 8003bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	e7fe      	b.n	8003bd8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d009      	beq.n	8003bf6 <vPortFree+0x5e>
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	60bb      	str	r3, [r7, #8]
 8003bf4:	e7fe      	b.n	8003bf4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <vPortFree+0xa8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d019      	beq.n	8003c38 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d115      	bne.n	8003c38 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <vPortFree+0xa8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	43db      	mvns	r3, r3
 8003c16:	401a      	ands	r2, r3
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003c1c:	f7ff f9e6 	bl	8002fec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <vPortFree+0xac>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4413      	add	r3, r2
 8003c2a:	4a06      	ldr	r2, [pc, #24]	; (8003c44 <vPortFree+0xac>)
 8003c2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c2e:	6938      	ldr	r0, [r7, #16]
 8003c30:	f000 f86c 	bl	8003d0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003c34:	f7ff f9e8 	bl	8003008 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003c38:	bf00      	nop
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20004048 	.word	0x20004048
 8003c44:	20004040 	.word	0x20004040

08003c48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003c4e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003c52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003c54:	4b27      	ldr	r3, [pc, #156]	; (8003cf4 <prvHeapInit+0xac>)
 8003c56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00c      	beq.n	8003c7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	3307      	adds	r3, #7
 8003c66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 0307 	bic.w	r3, r3, #7
 8003c6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	4a1f      	ldr	r2, [pc, #124]	; (8003cf4 <prvHeapInit+0xac>)
 8003c78:	4413      	add	r3, r2
 8003c7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003c80:	4a1d      	ldr	r2, [pc, #116]	; (8003cf8 <prvHeapInit+0xb0>)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003c86:	4b1c      	ldr	r3, [pc, #112]	; (8003cf8 <prvHeapInit+0xb0>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	4413      	add	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003c94:	2208      	movs	r2, #8
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1a9b      	subs	r3, r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0307 	bic.w	r3, r3, #7
 8003ca2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4a15      	ldr	r2, [pc, #84]	; (8003cfc <prvHeapInit+0xb4>)
 8003ca8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003caa:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <prvHeapInit+0xb4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003cb2:	4b12      	ldr	r3, [pc, #72]	; (8003cfc <prvHeapInit+0xb4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	1ad2      	subs	r2, r2, r3
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003cc8:	4b0c      	ldr	r3, [pc, #48]	; (8003cfc <prvHeapInit+0xb4>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	4a0a      	ldr	r2, [pc, #40]	; (8003d00 <prvHeapInit+0xb8>)
 8003cd6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	4a09      	ldr	r2, [pc, #36]	; (8003d04 <prvHeapInit+0xbc>)
 8003cde:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003ce0:	4b09      	ldr	r3, [pc, #36]	; (8003d08 <prvHeapInit+0xc0>)
 8003ce2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ce6:	601a      	str	r2, [r3, #0]
}
 8003ce8:	bf00      	nop
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	20000434 	.word	0x20000434
 8003cf8:	20004034 	.word	0x20004034
 8003cfc:	2000403c 	.word	0x2000403c
 8003d00:	20004044 	.word	0x20004044
 8003d04:	20004040 	.word	0x20004040
 8003d08:	20004048 	.word	0x20004048

08003d0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d14:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <prvInsertBlockIntoFreeList+0xac>)
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	e002      	b.n	8003d20 <prvInsertBlockIntoFreeList+0x14>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d8f7      	bhi.n	8003d1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	4413      	add	r3, r2
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d108      	bne.n	8003d4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	441a      	add	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	441a      	add	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d118      	bne.n	8003d94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <prvInsertBlockIntoFreeList+0xb0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d00d      	beq.n	8003d8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	441a      	add	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	e008      	b.n	8003d9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003d8a:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <prvInsertBlockIntoFreeList+0xb0>)
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	e003      	b.n	8003d9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d002      	beq.n	8003daa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003daa:	bf00      	nop
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	20004034 	.word	0x20004034
 8003dbc:	2000403c 	.word	0x2000403c

08003dc0 <barometerInit>:
 *
 * @author Dawson Moore
 * @author Jeff Kaji
 * @date 01/11/2021
 */
void barometerInit(bool *bmpNomPtr) {
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
		handleHalError(BMP);
		return;
	}
	sensors.tempsens = (dataIn[0] << 8) | dataIn[1];
#else
	handleHalError(BMP);
 8003dc8:	2001      	movs	r0, #1
 8003dca:	f000 f805 	bl	8003dd8 <handleHalError>
#endif
}
 8003dce:	bf00      	nop
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <handleHalError>:

	return state;
}
#endif
void handleHalError(uint8_t SENSOR)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	71fb      	strb	r3, [r7, #7]
	//Basically just to let us know that we ran into an issue during transmission
	//Toggle an LED, send error messages, or something similar
	//I don't know what you guys need, but this is for you to fill out
	// TODO: Implement handleHalError

	switch(SENSOR) {
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d000      	beq.n	8003dea <handleHalError+0x12>
	case BMP:
		*(sensors.bmpNomPtr) = false;
		break;
	}
}
 8003de8:	e004      	b.n	8003df4 <handleHalError+0x1c>
		*(sensors.bmpNomPtr) = false;
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <handleHalError+0x28>)
 8003dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]
		break;
 8003df2:	bf00      	nop
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	20004a10 	.word	0x20004a10

08003e04 <setup_A>:
 * @retval None
 *
 * @author Jeff Kaji
 * @date 12/28/2020
 */
void setup_A() {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0

	// Initialize local variables
	daqScalingEnabled = true;
 8003e08:	4b17      	ldr	r3, [pc, #92]	; (8003e68 <setup_A+0x64>)
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	701a      	strb	r2, [r3, #0]
	daqScaler = DEFAULT_DAQ_SCALER;
 8003e0e:	4b17      	ldr	r3, [pc, #92]	; (8003e6c <setup_A+0x68>)
 8003e10:	220a      	movs	r2, #10
 8003e12:	701a      	strb	r2, [r3, #0]
	gpsNominal = true;
 8003e14:	4b16      	ldr	r3, [pc, #88]	; (8003e70 <setup_A+0x6c>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	701a      	strb	r2, [r3, #0]
	bmpNominal = true;
 8003e1a:	4b16      	ldr	r3, [pc, #88]	; (8003e74 <setup_A+0x70>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	701a      	strb	r2, [r3, #0]
	imuNominal = true;
 8003e20:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <setup_A+0x74>)
 8003e22:	2201      	movs	r2, #1
 8003e24:	701a      	strb	r2, [r3, #0]
	alaNominal = true;
 8003e26:	4b15      	ldr	r3, [pc, #84]	; (8003e7c <setup_A+0x78>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	701a      	strb	r2, [r3, #0]
	sendDaqStatus = false;
 8003e2c:	4b14      	ldr	r3, [pc, #80]	; (8003e80 <setup_A+0x7c>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	701a      	strb	r2, [r3, #0]
	bmpCounter = 0;
 8003e32:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <setup_A+0x80>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	701a      	strb	r2, [r3, #0]
	imuCounter = 0;
 8003e38:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <setup_A+0x84>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	701a      	strb	r2, [r3, #0]


	// Setup sensors
	gpsSetup_A();
 8003e3e:	f000 f8d5 	bl	8003fec <gpsSetup_A>
	bmpSetup_A();
 8003e42:	f000 f8db 	bl	8003ffc <bmpSetup_A>
	imuSetup_A();
 8003e46:	f000 f8e3 	bl	8004010 <imuSetup_A>
	alaSetup_A();
 8003e4a:	f000 f8e8 	bl	800401e <alaSetup_A>

	// Unlock initialized interface structs
	g_daqStatusData.lock = false;
 8003e4e:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <setup_A+0x88>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	729a      	strb	r2, [r3, #10]
	g_daqScalingData.lock = false;
 8003e54:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <setup_A+0x8c>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	709a      	strb	r2, [r3, #2]

	// Send update
	sendUpdate_A();
 8003e5a:	f000 f989 	bl	8004170 <sendUpdate_A>
	updateLeds_A();
 8003e5e:	f000 f9c3 	bl	80041e8 <updateLeds_A>
}
 8003e62:	bf00      	nop
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20004aac 	.word	0x20004aac
 8003e6c:	20004aa7 	.word	0x20004aa7
 8003e70:	20004a50 	.word	0x20004a50
 8003e74:	20004aa9 	.word	0x20004aa9
 8003e78:	20004a51 	.word	0x20004a51
 8003e7c:	20004aa6 	.word	0x20004aa6
 8003e80:	20004aab 	.word	0x20004aab
 8003e84:	20004aa4 	.word	0x20004aa4
 8003e88:	20004aa8 	.word	0x20004aa8
 8003e8c:	20004050 	.word	0x20004050
 8003e90:	2000405c 	.word	0x2000405c

08003e94 <loop_A>:
 * TODO: Make delayVal return the constants defined in main
 *
 * @author Jeff Kaji
 * @date 01/19/2021
 */
ui8 loop_A() {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0



	if(daqScalingEnabled) {
 8003e98:	4b49      	ldr	r3, [pc, #292]	; (8003fc0 <loop_A+0x12c>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d06f      	beq.n	8003f80 <loop_A+0xec>
		if(imuNominal || alaNominal) imuRead_A();
 8003ea0:	4b48      	ldr	r3, [pc, #288]	; (8003fc4 <loop_A+0x130>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d103      	bne.n	8003eb0 <loop_A+0x1c>
 8003ea8:	4b47      	ldr	r3, [pc, #284]	; (8003fc8 <loop_A+0x134>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <loop_A+0x22>
 8003eb0:	f000 f8d6 	bl	8004060 <imuRead_A>
 8003eb4:	e005      	b.n	8003ec2 <loop_A+0x2e>
		else printf("########IMU Skip %d\r\n", imuCounter);
 8003eb6:	4b45      	ldr	r3, [pc, #276]	; (8003fcc <loop_A+0x138>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4844      	ldr	r0, [pc, #272]	; (8003fd0 <loop_A+0x13c>)
 8003ebe:	f000 fb25 	bl	800450c <iprintf>

		if(imuCounter == 0) {
 8003ec2:	4b42      	ldr	r3, [pc, #264]	; (8003fcc <loop_A+0x138>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d11a      	bne.n	8003f00 <loop_A+0x6c>
			if(bmpNominal) bmpRead_A();
 8003eca:	4b42      	ldr	r3, [pc, #264]	; (8003fd4 <loop_A+0x140>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <loop_A+0x44>
 8003ed2:	f000 f8b5 	bl	8004040 <bmpRead_A>
 8003ed6:	e005      	b.n	8003ee4 <loop_A+0x50>
			else printf("####BMP Skip %d\r\n", bmpCounter);
 8003ed8:	4b3f      	ldr	r3, [pc, #252]	; (8003fd8 <loop_A+0x144>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	4619      	mov	r1, r3
 8003ede:	483f      	ldr	r0, [pc, #252]	; (8003fdc <loop_A+0x148>)
 8003ee0:	f000 fb14 	bl	800450c <iprintf>

			if(bmpCounter == 0) {
 8003ee4:	4b3c      	ldr	r3, [pc, #240]	; (8003fd8 <loop_A+0x144>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d109      	bne.n	8003f00 <loop_A+0x6c>
				if(gpsNominal) gpsRead_A();
 8003eec:	4b3c      	ldr	r3, [pc, #240]	; (8003fe0 <loop_A+0x14c>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <loop_A+0x66>
 8003ef4:	f000 f89a 	bl	800402c <gpsRead_A>
 8003ef8:	e002      	b.n	8003f00 <loop_A+0x6c>
				else printf("GPS Skip\r\n");
 8003efa:	483a      	ldr	r0, [pc, #232]	; (8003fe4 <loop_A+0x150>)
 8003efc:	f000 fb7a 	bl	80045f4 <puts>
			}
		}

		if(imuNominal || alaNominal || imuCounter > 0) {
 8003f00:	4b30      	ldr	r3, [pc, #192]	; (8003fc4 <loop_A+0x130>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d107      	bne.n	8003f18 <loop_A+0x84>
 8003f08:	4b2f      	ldr	r3, [pc, #188]	; (8003fc8 <loop_A+0x134>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d103      	bne.n	8003f18 <loop_A+0x84>
 8003f10:	4b2e      	ldr	r3, [pc, #184]	; (8003fcc <loop_A+0x138>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d009      	beq.n	8003f2c <loop_A+0x98>
			imuCounter += 1;
 8003f18:	4b2c      	ldr	r3, [pc, #176]	; (8003fcc <loop_A+0x138>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	4b2a      	ldr	r3, [pc, #168]	; (8003fcc <loop_A+0x138>)
 8003f22:	701a      	strb	r2, [r3, #0]
			delayVal = 2;
 8003f24:	4b30      	ldr	r3, [pc, #192]	; (8003fe8 <loop_A+0x154>)
 8003f26:	2202      	movs	r2, #2
 8003f28:	701a      	strb	r2, [r3, #0]
 8003f2a:	e014      	b.n	8003f56 <loop_A+0xc2>
		} else if(bmpNominal || bmpCounter > 0) {
 8003f2c:	4b29      	ldr	r3, [pc, #164]	; (8003fd4 <loop_A+0x140>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d103      	bne.n	8003f3c <loop_A+0xa8>
 8003f34:	4b28      	ldr	r3, [pc, #160]	; (8003fd8 <loop_A+0x144>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d009      	beq.n	8003f50 <loop_A+0xbc>
			bmpCounter += 1;
 8003f3c:	4b26      	ldr	r3, [pc, #152]	; (8003fd8 <loop_A+0x144>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	3301      	adds	r3, #1
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	4b24      	ldr	r3, [pc, #144]	; (8003fd8 <loop_A+0x144>)
 8003f46:	701a      	strb	r2, [r3, #0]
			delayVal = 1;
 8003f48:	4b27      	ldr	r3, [pc, #156]	; (8003fe8 <loop_A+0x154>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	701a      	strb	r2, [r3, #0]
 8003f4e:	e002      	b.n	8003f56 <loop_A+0xc2>
		} else {
			delayVal = 0;
 8003f50:	4b25      	ldr	r3, [pc, #148]	; (8003fe8 <loop_A+0x154>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	701a      	strb	r2, [r3, #0]
		}

		if(imuCounter == IMU_MULTIPLIER) {
 8003f56:	4b1d      	ldr	r3, [pc, #116]	; (8003fcc <loop_A+0x138>)
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b05      	cmp	r3, #5
 8003f5c:	d108      	bne.n	8003f70 <loop_A+0xdc>
			bmpCounter += 1;
 8003f5e:	4b1e      	ldr	r3, [pc, #120]	; (8003fd8 <loop_A+0x144>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	3301      	adds	r3, #1
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	4b1c      	ldr	r3, [pc, #112]	; (8003fd8 <loop_A+0x144>)
 8003f68:	701a      	strb	r2, [r3, #0]
			imuCounter = 0;
 8003f6a:	4b18      	ldr	r3, [pc, #96]	; (8003fcc <loop_A+0x138>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	701a      	strb	r2, [r3, #0]
		}

		if(bmpCounter == BMP_MULTIPLIER) {
 8003f70:	4b19      	ldr	r3, [pc, #100]	; (8003fd8 <loop_A+0x144>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d11c      	bne.n	8003fb2 <loop_A+0x11e>
			bmpCounter = 0;
 8003f78:	4b17      	ldr	r3, [pc, #92]	; (8003fd8 <loop_A+0x144>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	e018      	b.n	8003fb2 <loop_A+0x11e>
		}


	} else {
		if(imuNominal || alaNominal) imuRead_A();
 8003f80:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <loop_A+0x130>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d103      	bne.n	8003f90 <loop_A+0xfc>
 8003f88:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <loop_A+0x134>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <loop_A+0x100>
 8003f90:	f000 f866 	bl	8004060 <imuRead_A>
		if(bmpNominal) bmpRead_A();
 8003f94:	4b0f      	ldr	r3, [pc, #60]	; (8003fd4 <loop_A+0x140>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <loop_A+0x10c>
 8003f9c:	f000 f850 	bl	8004040 <bmpRead_A>
		if(gpsNominal) gpsRead_A();
 8003fa0:	4b0f      	ldr	r3, [pc, #60]	; (8003fe0 <loop_A+0x14c>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <loop_A+0x118>
 8003fa8:	f000 f840 	bl	800402c <gpsRead_A>
		delayVal = 0;
 8003fac:	4b0e      	ldr	r3, [pc, #56]	; (8003fe8 <loop_A+0x154>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	701a      	strb	r2, [r3, #0]
	}

	checkStatus_A();
 8003fb2:	f000 f863 	bl	800407c <checkStatus_A>
	return delayVal;
 8003fb6:	4b0c      	ldr	r3, [pc, #48]	; (8003fe8 <loop_A+0x154>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20004aac 	.word	0x20004aac
 8003fc4:	20004a51 	.word	0x20004a51
 8003fc8:	20004aa6 	.word	0x20004aa6
 8003fcc:	20004aa8 	.word	0x20004aa8
 8003fd0:	08005490 	.word	0x08005490
 8003fd4:	20004aa9 	.word	0x20004aa9
 8003fd8:	20004aa4 	.word	0x20004aa4
 8003fdc:	080054a8 	.word	0x080054a8
 8003fe0:	20004a50 	.word	0x20004a50
 8003fe4:	080054bc 	.word	0x080054bc
 8003fe8:	2000404c 	.word	0x2000404c

08003fec <gpsSetup_A>:
 * @retval None
 *
 * @author Jeff Kaji
 * @date 12/31/2020
 */
void gpsSetup_A() {
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
		// TODO: Implement gpsSetup
		#if !defined(SUPRESS_TASK_UPDATES) && !defined(SUPRESS_ALL)
		printf("    Task Update: Acquisition GPS Setup: %s\r\n", gpsNominal ? "True" : "False");
		#endif
	#endif
}
 8003ff0:	bf00      	nop
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <bmpSetup_A>:
 * @retval None
 *
 * @author Jeff Kaji
 * @date 12/31/2020
 */
void bmpSetup_A() {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
	#ifndef NDEBUG
		_bmpFile = setupSensorFile_DS(BMP, &bmpNominal);
	#else
		barometerInit(&bmpNominal);
 8004000:	4802      	ldr	r0, [pc, #8]	; (800400c <bmpSetup_A+0x10>)
 8004002:	f7ff fedd 	bl	8003dc0 <barometerInit>
#if !defined(SUPRESS_TASK_UPDATES) && !defined(SUPRESS_ALL)
		printf("    Task Update: Acquisition BMP Setup: %s\r\n", bmpNominal ? "True" : "False");
		#endif
	#endif
}
 8004006:	bf00      	nop
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20004aa9 	.word	0x20004aa9

08004010 <imuSetup_A>:
 * @retval None
 *
 * @author Jeff Kaji
 * @date 12/31/2020
 */
void imuSetup_A() {
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
		// TODO: Implement imuSetup
#if !defined(SUPRESS_TASK_UPDATES) && !defined(SUPRESS_ALL)
		printf("    Task Update: Acquisition IMU Setup: %s\r\n", imuNominal ? "True" : "False");
		#endif
	#endif
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <alaSetup_A>:
 * @retval None
 *
 * @author Jeff Kaji
 * @date 12/31/2020
 */
void alaSetup_A() {
 800401e:	b480      	push	{r7}
 8004020:	af00      	add	r7, sp, #0
		// TODO: Implement alaSetup
#if !defined(SUPRESS_TASK_UPDATES) && !defined(SUPRESS_ALL)
		printf("    Task Update: Acquisition ALA Setup: %s\r\n", alaNominal ? "True" : "False");
		#endif
	#endif
}
 8004022:	bf00      	nop
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <gpsRead_A>:
 * @retval None
 *
 * @author Jeff Kaji
 * @date 12/23/2020
 */
void gpsRead_A() {
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
	printf("GPS Read\r\n");
 8004030:	4802      	ldr	r0, [pc, #8]	; (800403c <gpsRead_A+0x10>)
 8004032:	f000 fadf 	bl	80045f4 <puts>
	return;
 8004036:	bf00      	nop
	g_gpsData.timeStamp = getTimeStamp();


*/
//	return;
}
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	080054c8 	.word	0x080054c8

08004040 <bmpRead_A>:
 * @retval None
 *
 * @author Jeff Kaji
 * @date 12/23/2020
 */
void bmpRead_A() {
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
	printf("    BMP Read %d\r\n", bmpCounter);
 8004046:	4b04      	ldr	r3, [pc, #16]	; (8004058 <bmpRead_A+0x18>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	4619      	mov	r1, r3
 800404c:	4803      	ldr	r0, [pc, #12]	; (800405c <bmpRead_A+0x1c>)
 800404e:	f000 fa5d 	bl	800450c <iprintf>
		g_bmpData.lock = false;

	} else {
		sendDaqStatus = true;
	}
}
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20004aa4 	.word	0x20004aa4
 800405c:	080054d4 	.word	0x080054d4

08004060 <imuRead_A>:
 * @retval None
 *
 * @author Jeff Kaji
 * @date 12/23/2020
 */
void imuRead_A() {
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
	printf("        IMU Read %d\r\n", imuCounter);
 8004064:	4b03      	ldr	r3, [pc, #12]	; (8004074 <imuRead_A+0x14>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	4619      	mov	r1, r3
 800406a:	4803      	ldr	r0, [pc, #12]	; (8004078 <imuRead_A+0x18>)
 800406c:	f000 fa4e 	bl	800450c <iprintf>

		// TODO: Implement IMU Simulation
	#else
		// TODO: Implement imuRead in hardware
	#endif
}
 8004070:	bf00      	nop
 8004072:	bd80      	pop	{r7, pc}
 8004074:	20004aa8 	.word	0x20004aa8
 8004078:	080054e8 	.word	0x080054e8

0800407c <checkStatus_A>:
 * Check status of DAQ Scaling and Sensors. Update if necessary.
 *
 * @author Jeff Kaji
 * @date 12/23/2020
 */
void checkStatus_A() {
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
	// Check for daqScalingEnabled update
	while(g_daqScalingData.lock) {
 8004080:	e002      	b.n	8004088 <checkStatus_A+0xc>
		retryTakeDelay(DEFAULT_TAKE_DELAY);
 8004082:	2032      	movs	r0, #50	; 0x32
 8004084:	f000 f921 	bl	80042ca <retryTakeDelay>
	while(g_daqScalingData.lock) {
 8004088:	4b32      	ldr	r3, [pc, #200]	; (8004154 <checkStatus_A+0xd8>)
 800408a:	789b      	ldrb	r3, [r3, #2]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f7      	bne.n	8004082 <checkStatus_A+0x6>
	}
	g_daqScalingData.lock = true;
 8004092:	4b30      	ldr	r3, [pc, #192]	; (8004154 <checkStatus_A+0xd8>)
 8004094:	2201      	movs	r2, #1
 8004096:	709a      	strb	r2, [r3, #2]
	if(g_daqScalingData.hasUpdate) {
 8004098:	4b2e      	ldr	r3, [pc, #184]	; (8004154 <checkStatus_A+0xd8>)
 800409a:	785b      	ldrb	r3, [r3, #1]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <checkStatus_A+0x3c>
		daqScalingEnabled = g_daqScalingData.enableDaqScaling;
 80040a2:	4b2c      	ldr	r3, [pc, #176]	; (8004154 <checkStatus_A+0xd8>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	4b2b      	ldr	r3, [pc, #172]	; (8004158 <checkStatus_A+0xdc>)
 80040aa:	701a      	strb	r2, [r3, #0]
		g_daqScalingData.hasUpdate = false;
 80040ac:	4b29      	ldr	r3, [pc, #164]	; (8004154 <checkStatus_A+0xd8>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	705a      	strb	r2, [r3, #1]
		sendDaqStatus = true;
 80040b2:	4b2a      	ldr	r3, [pc, #168]	; (800415c <checkStatus_A+0xe0>)
 80040b4:	2201      	movs	r2, #1
 80040b6:	701a      	strb	r2, [r3, #0]
		#ifndef NDEBUG
		printf("-- DAQ Scaling: %s --\n", (daqScalingEnabled) ? _TRUE : _FALSE);
		#endif
	}
	g_daqScalingData.lock = false;
 80040b8:	4b26      	ldr	r3, [pc, #152]	; (8004154 <checkStatus_A+0xd8>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	709a      	strb	r2, [r3, #2]

	// GPS handling
	if(!gpsNominal) {
 80040be:	4b28      	ldr	r3, [pc, #160]	; (8004160 <checkStatus_A+0xe4>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	f083 0301 	eor.w	r3, r3, #1
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <checkStatus_A+0x62>
#ifndef NDEBUG
		if(simulateGps)
#endif
		gpsSetup_A();
 80040cc:	f7ff ff8e 	bl	8003fec <gpsSetup_A>
		if(gpsNominal) {
 80040d0:	4b23      	ldr	r3, [pc, #140]	; (8004160 <checkStatus_A+0xe4>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <checkStatus_A+0x62>
			sendDaqStatus = true;
 80040d8:	4b20      	ldr	r3, [pc, #128]	; (800415c <checkStatus_A+0xe0>)
 80040da:	2201      	movs	r2, #1
 80040dc:	701a      	strb	r2, [r3, #0]
		}
	}

	// BMP Handling
	if(!bmpNominal) {
 80040de:	4b21      	ldr	r3, [pc, #132]	; (8004164 <checkStatus_A+0xe8>)
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	f083 0301 	eor.w	r3, r3, #1
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d008      	beq.n	80040fe <checkStatus_A+0x82>
#ifndef NDEBUG
		if(simulateGps)
#endif
		bmpSetup_A();
 80040ec:	f7ff ff86 	bl	8003ffc <bmpSetup_A>
		if(bmpNominal) {
 80040f0:	4b1c      	ldr	r3, [pc, #112]	; (8004164 <checkStatus_A+0xe8>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <checkStatus_A+0x82>
			sendDaqStatus = true;
 80040f8:	4b18      	ldr	r3, [pc, #96]	; (800415c <checkStatus_A+0xe0>)
 80040fa:	2201      	movs	r2, #1
 80040fc:	701a      	strb	r2, [r3, #0]
		}
	}

	// IMU Handling
	if(!imuNominal) {
 80040fe:	4b1a      	ldr	r3, [pc, #104]	; (8004168 <checkStatus_A+0xec>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	f083 0301 	eor.w	r3, r3, #1
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <checkStatus_A+0xa2>
#ifndef NDEBUG
		if(simulateImu)
#endif
		imuSetup_A();
 800410c:	f7ff ff80 	bl	8004010 <imuSetup_A>
		if(imuNominal) {
 8004110:	4b15      	ldr	r3, [pc, #84]	; (8004168 <checkStatus_A+0xec>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <checkStatus_A+0xa2>
			sendDaqStatus = true;
 8004118:	4b10      	ldr	r3, [pc, #64]	; (800415c <checkStatus_A+0xe0>)
 800411a:	2201      	movs	r2, #1
 800411c:	701a      	strb	r2, [r3, #0]
		}
	}

	// ALA Handling
	if(!alaNominal) {
 800411e:	4b13      	ldr	r3, [pc, #76]	; (800416c <checkStatus_A+0xf0>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	f083 0301 	eor.w	r3, r3, #1
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d008      	beq.n	800413e <checkStatus_A+0xc2>
#ifndef NDEBUG
		if(simulateAla)
#endif
		alaSetup_A();
 800412c:	f7ff ff77 	bl	800401e <alaSetup_A>
		if(alaNominal) {
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <checkStatus_A+0xf0>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <checkStatus_A+0xc2>
			sendDaqStatus = true;
 8004138:	4b08      	ldr	r3, [pc, #32]	; (800415c <checkStatus_A+0xe0>)
 800413a:	2201      	movs	r2, #1
 800413c:	701a      	strb	r2, [r3, #0]
		}
	}

	// Send update if needed
	if(sendDaqStatus) {
 800413e:	4b07      	ldr	r3, [pc, #28]	; (800415c <checkStatus_A+0xe0>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <checkStatus_A+0xd2>
		sendUpdate_A();
 8004146:	f000 f813 	bl	8004170 <sendUpdate_A>
		updateLeds_A();
 800414a:	f000 f84d 	bl	80041e8 <updateLeds_A>
	}
}
 800414e:	bf00      	nop
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	2000405c 	.word	0x2000405c
 8004158:	20004aac 	.word	0x20004aac
 800415c:	20004aab 	.word	0x20004aab
 8004160:	20004a50 	.word	0x20004a50
 8004164:	20004aa9 	.word	0x20004aa9
 8004168:	20004a51 	.word	0x20004a51
 800416c:	20004aa6 	.word	0x20004aa6

08004170 <sendUpdate_A>:
 * @retval None
 *
 * @author Jeff Kaji
 * @date 12/31/2020
 */
void sendUpdate_A() {
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
	while(g_daqStatusData.lock) {
 8004174:	e002      	b.n	800417c <sendUpdate_A+0xc>
		retryTakeDelay(DEFAULT_TAKE_DELAY);
 8004176:	2032      	movs	r0, #50	; 0x32
 8004178:	f000 f8a7 	bl	80042ca <retryTakeDelay>
	while(g_daqStatusData.lock) {
 800417c:	4b14      	ldr	r3, [pc, #80]	; (80041d0 <sendUpdate_A+0x60>)
 800417e:	7a9b      	ldrb	r3, [r3, #10]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f7      	bne.n	8004176 <sendUpdate_A+0x6>
	}
	g_daqStatusData.lock = true;
 8004186:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <sendUpdate_A+0x60>)
 8004188:	2201      	movs	r2, #1
 800418a:	729a      	strb	r2, [r3, #10]
	g_daqStatusData.timeStamp = getTimeStamp();
 800418c:	f000 f896 	bl	80042bc <getTimeStamp>
 8004190:	4602      	mov	r2, r0
 8004192:	4b0f      	ldr	r3, [pc, #60]	; (80041d0 <sendUpdate_A+0x60>)
 8004194:	601a      	str	r2, [r3, #0]
	g_daqStatusData.daqScalingEnabled = daqScalingEnabled;
 8004196:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <sendUpdate_A+0x64>)
 8004198:	781a      	ldrb	r2, [r3, #0]
 800419a:	4b0d      	ldr	r3, [pc, #52]	; (80041d0 <sendUpdate_A+0x60>)
 800419c:	711a      	strb	r2, [r3, #4]
	g_daqStatusData.gpsNominal = gpsNominal;
 800419e:	4b0e      	ldr	r3, [pc, #56]	; (80041d8 <sendUpdate_A+0x68>)
 80041a0:	781a      	ldrb	r2, [r3, #0]
 80041a2:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <sendUpdate_A+0x60>)
 80041a4:	715a      	strb	r2, [r3, #5]
	g_daqStatusData.bmpNominal = bmpNominal;
 80041a6:	4b0d      	ldr	r3, [pc, #52]	; (80041dc <sendUpdate_A+0x6c>)
 80041a8:	781a      	ldrb	r2, [r3, #0]
 80041aa:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <sendUpdate_A+0x60>)
 80041ac:	719a      	strb	r2, [r3, #6]
	g_daqStatusData.imuNominal = imuNominal;
 80041ae:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <sendUpdate_A+0x70>)
 80041b0:	781a      	ldrb	r2, [r3, #0]
 80041b2:	4b07      	ldr	r3, [pc, #28]	; (80041d0 <sendUpdate_A+0x60>)
 80041b4:	71da      	strb	r2, [r3, #7]
	g_daqStatusData.alaNominal = alaNominal;
 80041b6:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <sendUpdate_A+0x74>)
 80041b8:	781a      	ldrb	r2, [r3, #0]
 80041ba:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <sendUpdate_A+0x60>)
 80041bc:	721a      	strb	r2, [r3, #8]
	g_daqStatusData.hasUpdate = true;
 80041be:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <sendUpdate_A+0x60>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	725a      	strb	r2, [r3, #9]
	g_daqStatusData.lock = false;
 80041c4:	4b02      	ldr	r3, [pc, #8]	; (80041d0 <sendUpdate_A+0x60>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	729a      	strb	r2, [r3, #10]

	#if !defined(SUPRESS_TASK_UPDATES) && !defined(SUPRESS_ALL)
		printf("    Task Update: Acquisition DAQ Status Data sent\r\n");
	#endif
}
 80041ca:	bf00      	nop
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20004050 	.word	0x20004050
 80041d4:	20004aac 	.word	0x20004aac
 80041d8:	20004a50 	.word	0x20004a50
 80041dc:	20004aa9 	.word	0x20004aa9
 80041e0:	20004a51 	.word	0x20004a51
 80041e4:	20004aa6 	.word	0x20004aa6

080041e8 <updateLeds_A>:
 * @brief Updates Sensor LEDs
 *
 * @author Jeff Kaji
 * @date 01/11/2021
 */
void updateLeds_A() {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
#ifdef NDEBUG
	PSP_GPIO_WritePin(U1S_CHECK_GPIO_Port, U1S_CHECK_Pin, imuNominal, "U1S_CHECK");
 80041ec:	4b29      	ldr	r3, [pc, #164]	; (8004294 <updateLeds_A+0xac>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	461a      	mov	r2, r3
 80041f2:	4b29      	ldr	r3, [pc, #164]	; (8004298 <updateLeds_A+0xb0>)
 80041f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80041f8:	2000      	movs	r0, #0
 80041fa:	f000 f872 	bl	80042e2 <PSP_GPIO_WritePin>
	PSP_GPIO_WritePin(U2S_CHECK_GPIO_Port, U2S_CHECK_Pin, alaNominal, "U2S_CHECK");
 80041fe:	4b27      	ldr	r3, [pc, #156]	; (800429c <updateLeds_A+0xb4>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	4b26      	ldr	r3, [pc, #152]	; (80042a0 <updateLeds_A+0xb8>)
 8004206:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800420a:	2000      	movs	r0, #0
 800420c:	f000 f869 	bl	80042e2 <PSP_GPIO_WritePin>
	PSP_GPIO_WritePin(U3S_CHECK_GPIO_Port, U3S_CHECK_Pin, bmpNominal, "U3S_CHECK");
 8004210:	4b24      	ldr	r3, [pc, #144]	; (80042a4 <updateLeds_A+0xbc>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	4b24      	ldr	r3, [pc, #144]	; (80042a8 <updateLeds_A+0xc0>)
 8004218:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800421c:	2000      	movs	r0, #0
 800421e:	f000 f860 	bl	80042e2 <PSP_GPIO_WritePin>
	PSP_GPIO_WritePin(U4S_CHECK_GPIO_Port, U4S_CHECK_Pin, gpsNominal, "U4S_CHECK");
 8004222:	4b22      	ldr	r3, [pc, #136]	; (80042ac <updateLeds_A+0xc4>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	4b21      	ldr	r3, [pc, #132]	; (80042b0 <updateLeds_A+0xc8>)
 800422a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800422e:	2000      	movs	r0, #0
 8004230:	f000 f857 	bl	80042e2 <PSP_GPIO_WritePin>


	if(gpsNominal && bmpNominal && imuNominal && alaNominal) {
 8004234:	4b1d      	ldr	r3, [pc, #116]	; (80042ac <updateLeds_A+0xc4>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01a      	beq.n	8004272 <updateLeds_A+0x8a>
 800423c:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <updateLeds_A+0xbc>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d016      	beq.n	8004272 <updateLeds_A+0x8a>
 8004244:	4b13      	ldr	r3, [pc, #76]	; (8004294 <updateLeds_A+0xac>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d012      	beq.n	8004272 <updateLeds_A+0x8a>
 800424c:	4b13      	ldr	r3, [pc, #76]	; (800429c <updateLeds_A+0xb4>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00e      	beq.n	8004272 <updateLeds_A+0x8a>
		PSP_GPIO_WritePin(SENSOR_NOMINAL_GPIO_Port, SENSOR_NOMINAL_Pin, GPIO_PIN_SET, "SENSOR_NOMINAL");
 8004254:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <updateLeds_A+0xcc>)
 8004256:	2201      	movs	r2, #1
 8004258:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800425c:	2000      	movs	r0, #0
 800425e:	f000 f840 	bl	80042e2 <PSP_GPIO_WritePin>
		PSP_GPIO_WritePin(SENSOR_ERROR_GPIO_Port, SENSOR_ERROR_Pin, GPIO_PIN_RESET, "SENSOR_ERROR");
 8004262:	4b15      	ldr	r3, [pc, #84]	; (80042b8 <updateLeds_A+0xd0>)
 8004264:	2200      	movs	r2, #0
 8004266:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800426a:	2000      	movs	r0, #0
 800426c:	f000 f839 	bl	80042e2 <PSP_GPIO_WritePin>
 8004270:	e00d      	b.n	800428e <updateLeds_A+0xa6>
	} else {
		PSP_GPIO_WritePin(SENSOR_NOMINAL_GPIO_Port, SENSOR_NOMINAL_Pin, GPIO_PIN_RESET, "SENSOR_NOMINAL");
 8004272:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <updateLeds_A+0xcc>)
 8004274:	2200      	movs	r2, #0
 8004276:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800427a:	2000      	movs	r0, #0
 800427c:	f000 f831 	bl	80042e2 <PSP_GPIO_WritePin>
		PSP_GPIO_WritePin(SENSOR_ERROR_GPIO_Port, SENSOR_ERROR_Pin, GPIO_PIN_SET, "SENSOR_ERROR");
 8004280:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <updateLeds_A+0xd0>)
 8004282:	2201      	movs	r2, #1
 8004284:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004288:	2000      	movs	r0, #0
 800428a:	f000 f82a 	bl	80042e2 <PSP_GPIO_WritePin>
	}
	#if !defined(SUPRESS_TASK_UPDATES) && !defined(SUPRESS_ALL)
		printf("    Task Update: Acquisition LEDs Updated\r\n");
	#endif
#endif
}
 800428e:	bf00      	nop
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20004a51 	.word	0x20004a51
 8004298:	08005500 	.word	0x08005500
 800429c:	20004aa6 	.word	0x20004aa6
 80042a0:	0800550c 	.word	0x0800550c
 80042a4:	20004aa9 	.word	0x20004aa9
 80042a8:	08005518 	.word	0x08005518
 80042ac:	20004a50 	.word	0x20004a50
 80042b0:	08005524 	.word	0x08005524
 80042b4:	08005530 	.word	0x08005530
 80042b8:	08005540 	.word	0x08005540

080042bc <getTimeStamp>:
 * @return None
 *
 * @author Jeff Kaji
 * @date 12/24/2020
 */
ui32 getTimeStamp(void) {
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
	#ifndef NDEBUG
		return 0;
	#else
		return HAL_GetTick();
 80042c0:	f7fc fdd0 	bl	8000e64 <HAL_GetTick>
 80042c4:	4603      	mov	r3, r0
	#endif
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	bd80      	pop	{r7, pc}

080042ca <retryTakeDelay>:
 * @retval None
 *
 * @author Jeff Kaji
 * @date 12/28/2020
 */
void retryTakeDelay(int length) {
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b082      	sub	sp, #8
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
#ifdef NDEBUG
	vTaskDelay(length);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fe fdf7 	bl	8002ec8 <vTaskDelay>
#endif
}
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <PSP_GPIO_WritePin>:
GPIO_PinState PSP_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	if(GPIO_Pin == FAKE_GPIO) return 0;
	else return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
}

void PSP_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState, char* name) {
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	607b      	str	r3, [r7, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	817b      	strh	r3, [r7, #10]
 80042f0:	4613      	mov	r3, r2
 80042f2:	727b      	strb	r3, [r7, #9]
	if(GPIO_Pin != FAKE_GPIO) {
 80042f4:	897b      	ldrh	r3, [r7, #10]
 80042f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d005      	beq.n	800430a <PSP_GPIO_WritePin+0x28>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 80042fe:	7a7a      	ldrb	r2, [r7, #9]
 8004300:	897b      	ldrh	r3, [r7, #10]
 8004302:	4619      	mov	r1, r3
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f7fd f85b 	bl	80013c0 <HAL_GPIO_WritePin>

	}
#if !defined(SUPRESS_SETUP_WARNING) && !defined(SUPRESS_ALL)
	else printf("! Setup Warning: %s not setup on this device.\r\n", name);
#endif
}
 800430a:	bf00      	nop
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <toggleLed>:


#ifdef LD2_Pin
void toggleLed() {
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
	static int j = 1;
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, j);
 8004318:	4b09      	ldr	r3, [pc, #36]	; (8004340 <toggleLed+0x2c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	461a      	mov	r2, r3
 8004320:	2120      	movs	r1, #32
 8004322:	4808      	ldr	r0, [pc, #32]	; (8004344 <toggleLed+0x30>)
 8004324:	f7fd f84c 	bl	80013c0 <HAL_GPIO_WritePin>
	j = !j;
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <toggleLed+0x2c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	bf0c      	ite	eq
 8004330:	2301      	moveq	r3, #1
 8004332:	2300      	movne	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	4b01      	ldr	r3, [pc, #4]	; (8004340 <toggleLed+0x2c>)
 800433a:	601a      	str	r2, [r3, #0]
}
 800433c:	bf00      	nop
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20000014 	.word	0x20000014
 8004344:	40020000 	.word	0x40020000

08004348 <__errno>:
 8004348:	4b01      	ldr	r3, [pc, #4]	; (8004350 <__errno+0x8>)
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	20000018 	.word	0x20000018

08004354 <__libc_init_array>:
 8004354:	b570      	push	{r4, r5, r6, lr}
 8004356:	4e0d      	ldr	r6, [pc, #52]	; (800438c <__libc_init_array+0x38>)
 8004358:	4c0d      	ldr	r4, [pc, #52]	; (8004390 <__libc_init_array+0x3c>)
 800435a:	1ba4      	subs	r4, r4, r6
 800435c:	10a4      	asrs	r4, r4, #2
 800435e:	2500      	movs	r5, #0
 8004360:	42a5      	cmp	r5, r4
 8004362:	d109      	bne.n	8004378 <__libc_init_array+0x24>
 8004364:	4e0b      	ldr	r6, [pc, #44]	; (8004394 <__libc_init_array+0x40>)
 8004366:	4c0c      	ldr	r4, [pc, #48]	; (8004398 <__libc_init_array+0x44>)
 8004368:	f001 f81e 	bl	80053a8 <_init>
 800436c:	1ba4      	subs	r4, r4, r6
 800436e:	10a4      	asrs	r4, r4, #2
 8004370:	2500      	movs	r5, #0
 8004372:	42a5      	cmp	r5, r4
 8004374:	d105      	bne.n	8004382 <__libc_init_array+0x2e>
 8004376:	bd70      	pop	{r4, r5, r6, pc}
 8004378:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800437c:	4798      	blx	r3
 800437e:	3501      	adds	r5, #1
 8004380:	e7ee      	b.n	8004360 <__libc_init_array+0xc>
 8004382:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004386:	4798      	blx	r3
 8004388:	3501      	adds	r5, #1
 800438a:	e7f2      	b.n	8004372 <__libc_init_array+0x1e>
 800438c:	08005630 	.word	0x08005630
 8004390:	08005630 	.word	0x08005630
 8004394:	08005630 	.word	0x08005630
 8004398:	08005634 	.word	0x08005634

0800439c <malloc>:
 800439c:	4b02      	ldr	r3, [pc, #8]	; (80043a8 <malloc+0xc>)
 800439e:	4601      	mov	r1, r0
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	f000 b859 	b.w	8004458 <_malloc_r>
 80043a6:	bf00      	nop
 80043a8:	20000018 	.word	0x20000018

080043ac <memset>:
 80043ac:	4402      	add	r2, r0
 80043ae:	4603      	mov	r3, r0
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d100      	bne.n	80043b6 <memset+0xa>
 80043b4:	4770      	bx	lr
 80043b6:	f803 1b01 	strb.w	r1, [r3], #1
 80043ba:	e7f9      	b.n	80043b0 <memset+0x4>

080043bc <_free_r>:
 80043bc:	b538      	push	{r3, r4, r5, lr}
 80043be:	4605      	mov	r5, r0
 80043c0:	2900      	cmp	r1, #0
 80043c2:	d045      	beq.n	8004450 <_free_r+0x94>
 80043c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043c8:	1f0c      	subs	r4, r1, #4
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	bfb8      	it	lt
 80043ce:	18e4      	addlt	r4, r4, r3
 80043d0:	f000 fc74 	bl	8004cbc <__malloc_lock>
 80043d4:	4a1f      	ldr	r2, [pc, #124]	; (8004454 <_free_r+0x98>)
 80043d6:	6813      	ldr	r3, [r2, #0]
 80043d8:	4610      	mov	r0, r2
 80043da:	b933      	cbnz	r3, 80043ea <_free_r+0x2e>
 80043dc:	6063      	str	r3, [r4, #4]
 80043de:	6014      	str	r4, [r2, #0]
 80043e0:	4628      	mov	r0, r5
 80043e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043e6:	f000 bc6a 	b.w	8004cbe <__malloc_unlock>
 80043ea:	42a3      	cmp	r3, r4
 80043ec:	d90c      	bls.n	8004408 <_free_r+0x4c>
 80043ee:	6821      	ldr	r1, [r4, #0]
 80043f0:	1862      	adds	r2, r4, r1
 80043f2:	4293      	cmp	r3, r2
 80043f4:	bf04      	itt	eq
 80043f6:	681a      	ldreq	r2, [r3, #0]
 80043f8:	685b      	ldreq	r3, [r3, #4]
 80043fa:	6063      	str	r3, [r4, #4]
 80043fc:	bf04      	itt	eq
 80043fe:	1852      	addeq	r2, r2, r1
 8004400:	6022      	streq	r2, [r4, #0]
 8004402:	6004      	str	r4, [r0, #0]
 8004404:	e7ec      	b.n	80043e0 <_free_r+0x24>
 8004406:	4613      	mov	r3, r2
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	b10a      	cbz	r2, 8004410 <_free_r+0x54>
 800440c:	42a2      	cmp	r2, r4
 800440e:	d9fa      	bls.n	8004406 <_free_r+0x4a>
 8004410:	6819      	ldr	r1, [r3, #0]
 8004412:	1858      	adds	r0, r3, r1
 8004414:	42a0      	cmp	r0, r4
 8004416:	d10b      	bne.n	8004430 <_free_r+0x74>
 8004418:	6820      	ldr	r0, [r4, #0]
 800441a:	4401      	add	r1, r0
 800441c:	1858      	adds	r0, r3, r1
 800441e:	4282      	cmp	r2, r0
 8004420:	6019      	str	r1, [r3, #0]
 8004422:	d1dd      	bne.n	80043e0 <_free_r+0x24>
 8004424:	6810      	ldr	r0, [r2, #0]
 8004426:	6852      	ldr	r2, [r2, #4]
 8004428:	605a      	str	r2, [r3, #4]
 800442a:	4401      	add	r1, r0
 800442c:	6019      	str	r1, [r3, #0]
 800442e:	e7d7      	b.n	80043e0 <_free_r+0x24>
 8004430:	d902      	bls.n	8004438 <_free_r+0x7c>
 8004432:	230c      	movs	r3, #12
 8004434:	602b      	str	r3, [r5, #0]
 8004436:	e7d3      	b.n	80043e0 <_free_r+0x24>
 8004438:	6820      	ldr	r0, [r4, #0]
 800443a:	1821      	adds	r1, r4, r0
 800443c:	428a      	cmp	r2, r1
 800443e:	bf04      	itt	eq
 8004440:	6811      	ldreq	r1, [r2, #0]
 8004442:	6852      	ldreq	r2, [r2, #4]
 8004444:	6062      	str	r2, [r4, #4]
 8004446:	bf04      	itt	eq
 8004448:	1809      	addeq	r1, r1, r0
 800444a:	6021      	streq	r1, [r4, #0]
 800444c:	605c      	str	r4, [r3, #4]
 800444e:	e7c7      	b.n	80043e0 <_free_r+0x24>
 8004450:	bd38      	pop	{r3, r4, r5, pc}
 8004452:	bf00      	nop
 8004454:	20004060 	.word	0x20004060

08004458 <_malloc_r>:
 8004458:	b570      	push	{r4, r5, r6, lr}
 800445a:	1ccd      	adds	r5, r1, #3
 800445c:	f025 0503 	bic.w	r5, r5, #3
 8004460:	3508      	adds	r5, #8
 8004462:	2d0c      	cmp	r5, #12
 8004464:	bf38      	it	cc
 8004466:	250c      	movcc	r5, #12
 8004468:	2d00      	cmp	r5, #0
 800446a:	4606      	mov	r6, r0
 800446c:	db01      	blt.n	8004472 <_malloc_r+0x1a>
 800446e:	42a9      	cmp	r1, r5
 8004470:	d903      	bls.n	800447a <_malloc_r+0x22>
 8004472:	230c      	movs	r3, #12
 8004474:	6033      	str	r3, [r6, #0]
 8004476:	2000      	movs	r0, #0
 8004478:	bd70      	pop	{r4, r5, r6, pc}
 800447a:	f000 fc1f 	bl	8004cbc <__malloc_lock>
 800447e:	4a21      	ldr	r2, [pc, #132]	; (8004504 <_malloc_r+0xac>)
 8004480:	6814      	ldr	r4, [r2, #0]
 8004482:	4621      	mov	r1, r4
 8004484:	b991      	cbnz	r1, 80044ac <_malloc_r+0x54>
 8004486:	4c20      	ldr	r4, [pc, #128]	; (8004508 <_malloc_r+0xb0>)
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	b91b      	cbnz	r3, 8004494 <_malloc_r+0x3c>
 800448c:	4630      	mov	r0, r6
 800448e:	f000 f8b9 	bl	8004604 <_sbrk_r>
 8004492:	6020      	str	r0, [r4, #0]
 8004494:	4629      	mov	r1, r5
 8004496:	4630      	mov	r0, r6
 8004498:	f000 f8b4 	bl	8004604 <_sbrk_r>
 800449c:	1c43      	adds	r3, r0, #1
 800449e:	d124      	bne.n	80044ea <_malloc_r+0x92>
 80044a0:	230c      	movs	r3, #12
 80044a2:	6033      	str	r3, [r6, #0]
 80044a4:	4630      	mov	r0, r6
 80044a6:	f000 fc0a 	bl	8004cbe <__malloc_unlock>
 80044aa:	e7e4      	b.n	8004476 <_malloc_r+0x1e>
 80044ac:	680b      	ldr	r3, [r1, #0]
 80044ae:	1b5b      	subs	r3, r3, r5
 80044b0:	d418      	bmi.n	80044e4 <_malloc_r+0x8c>
 80044b2:	2b0b      	cmp	r3, #11
 80044b4:	d90f      	bls.n	80044d6 <_malloc_r+0x7e>
 80044b6:	600b      	str	r3, [r1, #0]
 80044b8:	50cd      	str	r5, [r1, r3]
 80044ba:	18cc      	adds	r4, r1, r3
 80044bc:	4630      	mov	r0, r6
 80044be:	f000 fbfe 	bl	8004cbe <__malloc_unlock>
 80044c2:	f104 000b 	add.w	r0, r4, #11
 80044c6:	1d23      	adds	r3, r4, #4
 80044c8:	f020 0007 	bic.w	r0, r0, #7
 80044cc:	1ac3      	subs	r3, r0, r3
 80044ce:	d0d3      	beq.n	8004478 <_malloc_r+0x20>
 80044d0:	425a      	negs	r2, r3
 80044d2:	50e2      	str	r2, [r4, r3]
 80044d4:	e7d0      	b.n	8004478 <_malloc_r+0x20>
 80044d6:	428c      	cmp	r4, r1
 80044d8:	684b      	ldr	r3, [r1, #4]
 80044da:	bf16      	itet	ne
 80044dc:	6063      	strne	r3, [r4, #4]
 80044de:	6013      	streq	r3, [r2, #0]
 80044e0:	460c      	movne	r4, r1
 80044e2:	e7eb      	b.n	80044bc <_malloc_r+0x64>
 80044e4:	460c      	mov	r4, r1
 80044e6:	6849      	ldr	r1, [r1, #4]
 80044e8:	e7cc      	b.n	8004484 <_malloc_r+0x2c>
 80044ea:	1cc4      	adds	r4, r0, #3
 80044ec:	f024 0403 	bic.w	r4, r4, #3
 80044f0:	42a0      	cmp	r0, r4
 80044f2:	d005      	beq.n	8004500 <_malloc_r+0xa8>
 80044f4:	1a21      	subs	r1, r4, r0
 80044f6:	4630      	mov	r0, r6
 80044f8:	f000 f884 	bl	8004604 <_sbrk_r>
 80044fc:	3001      	adds	r0, #1
 80044fe:	d0cf      	beq.n	80044a0 <_malloc_r+0x48>
 8004500:	6025      	str	r5, [r4, #0]
 8004502:	e7db      	b.n	80044bc <_malloc_r+0x64>
 8004504:	20004060 	.word	0x20004060
 8004508:	20004064 	.word	0x20004064

0800450c <iprintf>:
 800450c:	b40f      	push	{r0, r1, r2, r3}
 800450e:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <iprintf+0x2c>)
 8004510:	b513      	push	{r0, r1, r4, lr}
 8004512:	681c      	ldr	r4, [r3, #0]
 8004514:	b124      	cbz	r4, 8004520 <iprintf+0x14>
 8004516:	69a3      	ldr	r3, [r4, #24]
 8004518:	b913      	cbnz	r3, 8004520 <iprintf+0x14>
 800451a:	4620      	mov	r0, r4
 800451c:	f000 fae0 	bl	8004ae0 <__sinit>
 8004520:	ab05      	add	r3, sp, #20
 8004522:	9a04      	ldr	r2, [sp, #16]
 8004524:	68a1      	ldr	r1, [r4, #8]
 8004526:	9301      	str	r3, [sp, #4]
 8004528:	4620      	mov	r0, r4
 800452a:	f000 fbf3 	bl	8004d14 <_vfiprintf_r>
 800452e:	b002      	add	sp, #8
 8004530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004534:	b004      	add	sp, #16
 8004536:	4770      	bx	lr
 8004538:	20000018 	.word	0x20000018

0800453c <_puts_r>:
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	460e      	mov	r6, r1
 8004540:	4605      	mov	r5, r0
 8004542:	b118      	cbz	r0, 800454c <_puts_r+0x10>
 8004544:	6983      	ldr	r3, [r0, #24]
 8004546:	b90b      	cbnz	r3, 800454c <_puts_r+0x10>
 8004548:	f000 faca 	bl	8004ae0 <__sinit>
 800454c:	69ab      	ldr	r3, [r5, #24]
 800454e:	68ac      	ldr	r4, [r5, #8]
 8004550:	b913      	cbnz	r3, 8004558 <_puts_r+0x1c>
 8004552:	4628      	mov	r0, r5
 8004554:	f000 fac4 	bl	8004ae0 <__sinit>
 8004558:	4b23      	ldr	r3, [pc, #140]	; (80045e8 <_puts_r+0xac>)
 800455a:	429c      	cmp	r4, r3
 800455c:	d117      	bne.n	800458e <_puts_r+0x52>
 800455e:	686c      	ldr	r4, [r5, #4]
 8004560:	89a3      	ldrh	r3, [r4, #12]
 8004562:	071b      	lsls	r3, r3, #28
 8004564:	d51d      	bpl.n	80045a2 <_puts_r+0x66>
 8004566:	6923      	ldr	r3, [r4, #16]
 8004568:	b1db      	cbz	r3, 80045a2 <_puts_r+0x66>
 800456a:	3e01      	subs	r6, #1
 800456c:	68a3      	ldr	r3, [r4, #8]
 800456e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004572:	3b01      	subs	r3, #1
 8004574:	60a3      	str	r3, [r4, #8]
 8004576:	b9e9      	cbnz	r1, 80045b4 <_puts_r+0x78>
 8004578:	2b00      	cmp	r3, #0
 800457a:	da2e      	bge.n	80045da <_puts_r+0x9e>
 800457c:	4622      	mov	r2, r4
 800457e:	210a      	movs	r1, #10
 8004580:	4628      	mov	r0, r5
 8004582:	f000 f8fd 	bl	8004780 <__swbuf_r>
 8004586:	3001      	adds	r0, #1
 8004588:	d011      	beq.n	80045ae <_puts_r+0x72>
 800458a:	200a      	movs	r0, #10
 800458c:	e011      	b.n	80045b2 <_puts_r+0x76>
 800458e:	4b17      	ldr	r3, [pc, #92]	; (80045ec <_puts_r+0xb0>)
 8004590:	429c      	cmp	r4, r3
 8004592:	d101      	bne.n	8004598 <_puts_r+0x5c>
 8004594:	68ac      	ldr	r4, [r5, #8]
 8004596:	e7e3      	b.n	8004560 <_puts_r+0x24>
 8004598:	4b15      	ldr	r3, [pc, #84]	; (80045f0 <_puts_r+0xb4>)
 800459a:	429c      	cmp	r4, r3
 800459c:	bf08      	it	eq
 800459e:	68ec      	ldreq	r4, [r5, #12]
 80045a0:	e7de      	b.n	8004560 <_puts_r+0x24>
 80045a2:	4621      	mov	r1, r4
 80045a4:	4628      	mov	r0, r5
 80045a6:	f000 f93d 	bl	8004824 <__swsetup_r>
 80045aa:	2800      	cmp	r0, #0
 80045ac:	d0dd      	beq.n	800456a <_puts_r+0x2e>
 80045ae:	f04f 30ff 	mov.w	r0, #4294967295
 80045b2:	bd70      	pop	{r4, r5, r6, pc}
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	da04      	bge.n	80045c2 <_puts_r+0x86>
 80045b8:	69a2      	ldr	r2, [r4, #24]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	dc06      	bgt.n	80045cc <_puts_r+0x90>
 80045be:	290a      	cmp	r1, #10
 80045c0:	d004      	beq.n	80045cc <_puts_r+0x90>
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	6022      	str	r2, [r4, #0]
 80045c8:	7019      	strb	r1, [r3, #0]
 80045ca:	e7cf      	b.n	800456c <_puts_r+0x30>
 80045cc:	4622      	mov	r2, r4
 80045ce:	4628      	mov	r0, r5
 80045d0:	f000 f8d6 	bl	8004780 <__swbuf_r>
 80045d4:	3001      	adds	r0, #1
 80045d6:	d1c9      	bne.n	800456c <_puts_r+0x30>
 80045d8:	e7e9      	b.n	80045ae <_puts_r+0x72>
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	200a      	movs	r0, #10
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	6022      	str	r2, [r4, #0]
 80045e2:	7018      	strb	r0, [r3, #0]
 80045e4:	e7e5      	b.n	80045b2 <_puts_r+0x76>
 80045e6:	bf00      	nop
 80045e8:	080055b4 	.word	0x080055b4
 80045ec:	080055d4 	.word	0x080055d4
 80045f0:	08005594 	.word	0x08005594

080045f4 <puts>:
 80045f4:	4b02      	ldr	r3, [pc, #8]	; (8004600 <puts+0xc>)
 80045f6:	4601      	mov	r1, r0
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	f7ff bf9f 	b.w	800453c <_puts_r>
 80045fe:	bf00      	nop
 8004600:	20000018 	.word	0x20000018

08004604 <_sbrk_r>:
 8004604:	b538      	push	{r3, r4, r5, lr}
 8004606:	4c06      	ldr	r4, [pc, #24]	; (8004620 <_sbrk_r+0x1c>)
 8004608:	2300      	movs	r3, #0
 800460a:	4605      	mov	r5, r0
 800460c:	4608      	mov	r0, r1
 800460e:	6023      	str	r3, [r4, #0]
 8004610:	f7fc fb4c 	bl	8000cac <_sbrk>
 8004614:	1c43      	adds	r3, r0, #1
 8004616:	d102      	bne.n	800461e <_sbrk_r+0x1a>
 8004618:	6823      	ldr	r3, [r4, #0]
 800461a:	b103      	cbz	r3, 800461e <_sbrk_r+0x1a>
 800461c:	602b      	str	r3, [r5, #0]
 800461e:	bd38      	pop	{r3, r4, r5, pc}
 8004620:	20004ab0 	.word	0x20004ab0

08004624 <setvbuf>:
 8004624:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004628:	461d      	mov	r5, r3
 800462a:	4b51      	ldr	r3, [pc, #324]	; (8004770 <setvbuf+0x14c>)
 800462c:	681e      	ldr	r6, [r3, #0]
 800462e:	4604      	mov	r4, r0
 8004630:	460f      	mov	r7, r1
 8004632:	4690      	mov	r8, r2
 8004634:	b126      	cbz	r6, 8004640 <setvbuf+0x1c>
 8004636:	69b3      	ldr	r3, [r6, #24]
 8004638:	b913      	cbnz	r3, 8004640 <setvbuf+0x1c>
 800463a:	4630      	mov	r0, r6
 800463c:	f000 fa50 	bl	8004ae0 <__sinit>
 8004640:	4b4c      	ldr	r3, [pc, #304]	; (8004774 <setvbuf+0x150>)
 8004642:	429c      	cmp	r4, r3
 8004644:	d152      	bne.n	80046ec <setvbuf+0xc8>
 8004646:	6874      	ldr	r4, [r6, #4]
 8004648:	f1b8 0f02 	cmp.w	r8, #2
 800464c:	d006      	beq.n	800465c <setvbuf+0x38>
 800464e:	f1b8 0f01 	cmp.w	r8, #1
 8004652:	f200 8089 	bhi.w	8004768 <setvbuf+0x144>
 8004656:	2d00      	cmp	r5, #0
 8004658:	f2c0 8086 	blt.w	8004768 <setvbuf+0x144>
 800465c:	4621      	mov	r1, r4
 800465e:	4630      	mov	r0, r6
 8004660:	f000 f9d4 	bl	8004a0c <_fflush_r>
 8004664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004666:	b141      	cbz	r1, 800467a <setvbuf+0x56>
 8004668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800466c:	4299      	cmp	r1, r3
 800466e:	d002      	beq.n	8004676 <setvbuf+0x52>
 8004670:	4630      	mov	r0, r6
 8004672:	f7ff fea3 	bl	80043bc <_free_r>
 8004676:	2300      	movs	r3, #0
 8004678:	6363      	str	r3, [r4, #52]	; 0x34
 800467a:	2300      	movs	r3, #0
 800467c:	61a3      	str	r3, [r4, #24]
 800467e:	6063      	str	r3, [r4, #4]
 8004680:	89a3      	ldrh	r3, [r4, #12]
 8004682:	061b      	lsls	r3, r3, #24
 8004684:	d503      	bpl.n	800468e <setvbuf+0x6a>
 8004686:	6921      	ldr	r1, [r4, #16]
 8004688:	4630      	mov	r0, r6
 800468a:	f7ff fe97 	bl	80043bc <_free_r>
 800468e:	89a3      	ldrh	r3, [r4, #12]
 8004690:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004694:	f023 0303 	bic.w	r3, r3, #3
 8004698:	f1b8 0f02 	cmp.w	r8, #2
 800469c:	81a3      	strh	r3, [r4, #12]
 800469e:	d05d      	beq.n	800475c <setvbuf+0x138>
 80046a0:	ab01      	add	r3, sp, #4
 80046a2:	466a      	mov	r2, sp
 80046a4:	4621      	mov	r1, r4
 80046a6:	4630      	mov	r0, r6
 80046a8:	f000 faa4 	bl	8004bf4 <__swhatbuf_r>
 80046ac:	89a3      	ldrh	r3, [r4, #12]
 80046ae:	4318      	orrs	r0, r3
 80046b0:	81a0      	strh	r0, [r4, #12]
 80046b2:	bb2d      	cbnz	r5, 8004700 <setvbuf+0xdc>
 80046b4:	9d00      	ldr	r5, [sp, #0]
 80046b6:	4628      	mov	r0, r5
 80046b8:	f7ff fe70 	bl	800439c <malloc>
 80046bc:	4607      	mov	r7, r0
 80046be:	2800      	cmp	r0, #0
 80046c0:	d14e      	bne.n	8004760 <setvbuf+0x13c>
 80046c2:	f8dd 9000 	ldr.w	r9, [sp]
 80046c6:	45a9      	cmp	r9, r5
 80046c8:	d13c      	bne.n	8004744 <setvbuf+0x120>
 80046ca:	f04f 30ff 	mov.w	r0, #4294967295
 80046ce:	89a3      	ldrh	r3, [r4, #12]
 80046d0:	f043 0302 	orr.w	r3, r3, #2
 80046d4:	81a3      	strh	r3, [r4, #12]
 80046d6:	2300      	movs	r3, #0
 80046d8:	60a3      	str	r3, [r4, #8]
 80046da:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046de:	6023      	str	r3, [r4, #0]
 80046e0:	6123      	str	r3, [r4, #16]
 80046e2:	2301      	movs	r3, #1
 80046e4:	6163      	str	r3, [r4, #20]
 80046e6:	b003      	add	sp, #12
 80046e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046ec:	4b22      	ldr	r3, [pc, #136]	; (8004778 <setvbuf+0x154>)
 80046ee:	429c      	cmp	r4, r3
 80046f0:	d101      	bne.n	80046f6 <setvbuf+0xd2>
 80046f2:	68b4      	ldr	r4, [r6, #8]
 80046f4:	e7a8      	b.n	8004648 <setvbuf+0x24>
 80046f6:	4b21      	ldr	r3, [pc, #132]	; (800477c <setvbuf+0x158>)
 80046f8:	429c      	cmp	r4, r3
 80046fa:	bf08      	it	eq
 80046fc:	68f4      	ldreq	r4, [r6, #12]
 80046fe:	e7a3      	b.n	8004648 <setvbuf+0x24>
 8004700:	2f00      	cmp	r7, #0
 8004702:	d0d8      	beq.n	80046b6 <setvbuf+0x92>
 8004704:	69b3      	ldr	r3, [r6, #24]
 8004706:	b913      	cbnz	r3, 800470e <setvbuf+0xea>
 8004708:	4630      	mov	r0, r6
 800470a:	f000 f9e9 	bl	8004ae0 <__sinit>
 800470e:	f1b8 0f01 	cmp.w	r8, #1
 8004712:	bf08      	it	eq
 8004714:	89a3      	ldrheq	r3, [r4, #12]
 8004716:	6027      	str	r7, [r4, #0]
 8004718:	bf04      	itt	eq
 800471a:	f043 0301 	orreq.w	r3, r3, #1
 800471e:	81a3      	strheq	r3, [r4, #12]
 8004720:	89a3      	ldrh	r3, [r4, #12]
 8004722:	f013 0008 	ands.w	r0, r3, #8
 8004726:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800472a:	d01b      	beq.n	8004764 <setvbuf+0x140>
 800472c:	f013 0001 	ands.w	r0, r3, #1
 8004730:	bf18      	it	ne
 8004732:	426d      	negne	r5, r5
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	bf1d      	ittte	ne
 800473a:	60a3      	strne	r3, [r4, #8]
 800473c:	61a5      	strne	r5, [r4, #24]
 800473e:	4618      	movne	r0, r3
 8004740:	60a5      	streq	r5, [r4, #8]
 8004742:	e7d0      	b.n	80046e6 <setvbuf+0xc2>
 8004744:	4648      	mov	r0, r9
 8004746:	f7ff fe29 	bl	800439c <malloc>
 800474a:	4607      	mov	r7, r0
 800474c:	2800      	cmp	r0, #0
 800474e:	d0bc      	beq.n	80046ca <setvbuf+0xa6>
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004756:	81a3      	strh	r3, [r4, #12]
 8004758:	464d      	mov	r5, r9
 800475a:	e7d3      	b.n	8004704 <setvbuf+0xe0>
 800475c:	2000      	movs	r0, #0
 800475e:	e7b6      	b.n	80046ce <setvbuf+0xaa>
 8004760:	46a9      	mov	r9, r5
 8004762:	e7f5      	b.n	8004750 <setvbuf+0x12c>
 8004764:	60a0      	str	r0, [r4, #8]
 8004766:	e7be      	b.n	80046e6 <setvbuf+0xc2>
 8004768:	f04f 30ff 	mov.w	r0, #4294967295
 800476c:	e7bb      	b.n	80046e6 <setvbuf+0xc2>
 800476e:	bf00      	nop
 8004770:	20000018 	.word	0x20000018
 8004774:	080055b4 	.word	0x080055b4
 8004778:	080055d4 	.word	0x080055d4
 800477c:	08005594 	.word	0x08005594

08004780 <__swbuf_r>:
 8004780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004782:	460e      	mov	r6, r1
 8004784:	4614      	mov	r4, r2
 8004786:	4605      	mov	r5, r0
 8004788:	b118      	cbz	r0, 8004792 <__swbuf_r+0x12>
 800478a:	6983      	ldr	r3, [r0, #24]
 800478c:	b90b      	cbnz	r3, 8004792 <__swbuf_r+0x12>
 800478e:	f000 f9a7 	bl	8004ae0 <__sinit>
 8004792:	4b21      	ldr	r3, [pc, #132]	; (8004818 <__swbuf_r+0x98>)
 8004794:	429c      	cmp	r4, r3
 8004796:	d12a      	bne.n	80047ee <__swbuf_r+0x6e>
 8004798:	686c      	ldr	r4, [r5, #4]
 800479a:	69a3      	ldr	r3, [r4, #24]
 800479c:	60a3      	str	r3, [r4, #8]
 800479e:	89a3      	ldrh	r3, [r4, #12]
 80047a0:	071a      	lsls	r2, r3, #28
 80047a2:	d52e      	bpl.n	8004802 <__swbuf_r+0x82>
 80047a4:	6923      	ldr	r3, [r4, #16]
 80047a6:	b363      	cbz	r3, 8004802 <__swbuf_r+0x82>
 80047a8:	6923      	ldr	r3, [r4, #16]
 80047aa:	6820      	ldr	r0, [r4, #0]
 80047ac:	1ac0      	subs	r0, r0, r3
 80047ae:	6963      	ldr	r3, [r4, #20]
 80047b0:	b2f6      	uxtb	r6, r6
 80047b2:	4283      	cmp	r3, r0
 80047b4:	4637      	mov	r7, r6
 80047b6:	dc04      	bgt.n	80047c2 <__swbuf_r+0x42>
 80047b8:	4621      	mov	r1, r4
 80047ba:	4628      	mov	r0, r5
 80047bc:	f000 f926 	bl	8004a0c <_fflush_r>
 80047c0:	bb28      	cbnz	r0, 800480e <__swbuf_r+0x8e>
 80047c2:	68a3      	ldr	r3, [r4, #8]
 80047c4:	3b01      	subs	r3, #1
 80047c6:	60a3      	str	r3, [r4, #8]
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	6022      	str	r2, [r4, #0]
 80047ce:	701e      	strb	r6, [r3, #0]
 80047d0:	6963      	ldr	r3, [r4, #20]
 80047d2:	3001      	adds	r0, #1
 80047d4:	4283      	cmp	r3, r0
 80047d6:	d004      	beq.n	80047e2 <__swbuf_r+0x62>
 80047d8:	89a3      	ldrh	r3, [r4, #12]
 80047da:	07db      	lsls	r3, r3, #31
 80047dc:	d519      	bpl.n	8004812 <__swbuf_r+0x92>
 80047de:	2e0a      	cmp	r6, #10
 80047e0:	d117      	bne.n	8004812 <__swbuf_r+0x92>
 80047e2:	4621      	mov	r1, r4
 80047e4:	4628      	mov	r0, r5
 80047e6:	f000 f911 	bl	8004a0c <_fflush_r>
 80047ea:	b190      	cbz	r0, 8004812 <__swbuf_r+0x92>
 80047ec:	e00f      	b.n	800480e <__swbuf_r+0x8e>
 80047ee:	4b0b      	ldr	r3, [pc, #44]	; (800481c <__swbuf_r+0x9c>)
 80047f0:	429c      	cmp	r4, r3
 80047f2:	d101      	bne.n	80047f8 <__swbuf_r+0x78>
 80047f4:	68ac      	ldr	r4, [r5, #8]
 80047f6:	e7d0      	b.n	800479a <__swbuf_r+0x1a>
 80047f8:	4b09      	ldr	r3, [pc, #36]	; (8004820 <__swbuf_r+0xa0>)
 80047fa:	429c      	cmp	r4, r3
 80047fc:	bf08      	it	eq
 80047fe:	68ec      	ldreq	r4, [r5, #12]
 8004800:	e7cb      	b.n	800479a <__swbuf_r+0x1a>
 8004802:	4621      	mov	r1, r4
 8004804:	4628      	mov	r0, r5
 8004806:	f000 f80d 	bl	8004824 <__swsetup_r>
 800480a:	2800      	cmp	r0, #0
 800480c:	d0cc      	beq.n	80047a8 <__swbuf_r+0x28>
 800480e:	f04f 37ff 	mov.w	r7, #4294967295
 8004812:	4638      	mov	r0, r7
 8004814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004816:	bf00      	nop
 8004818:	080055b4 	.word	0x080055b4
 800481c:	080055d4 	.word	0x080055d4
 8004820:	08005594 	.word	0x08005594

08004824 <__swsetup_r>:
 8004824:	4b32      	ldr	r3, [pc, #200]	; (80048f0 <__swsetup_r+0xcc>)
 8004826:	b570      	push	{r4, r5, r6, lr}
 8004828:	681d      	ldr	r5, [r3, #0]
 800482a:	4606      	mov	r6, r0
 800482c:	460c      	mov	r4, r1
 800482e:	b125      	cbz	r5, 800483a <__swsetup_r+0x16>
 8004830:	69ab      	ldr	r3, [r5, #24]
 8004832:	b913      	cbnz	r3, 800483a <__swsetup_r+0x16>
 8004834:	4628      	mov	r0, r5
 8004836:	f000 f953 	bl	8004ae0 <__sinit>
 800483a:	4b2e      	ldr	r3, [pc, #184]	; (80048f4 <__swsetup_r+0xd0>)
 800483c:	429c      	cmp	r4, r3
 800483e:	d10f      	bne.n	8004860 <__swsetup_r+0x3c>
 8004840:	686c      	ldr	r4, [r5, #4]
 8004842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004846:	b29a      	uxth	r2, r3
 8004848:	0715      	lsls	r5, r2, #28
 800484a:	d42c      	bmi.n	80048a6 <__swsetup_r+0x82>
 800484c:	06d0      	lsls	r0, r2, #27
 800484e:	d411      	bmi.n	8004874 <__swsetup_r+0x50>
 8004850:	2209      	movs	r2, #9
 8004852:	6032      	str	r2, [r6, #0]
 8004854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004858:	81a3      	strh	r3, [r4, #12]
 800485a:	f04f 30ff 	mov.w	r0, #4294967295
 800485e:	e03e      	b.n	80048de <__swsetup_r+0xba>
 8004860:	4b25      	ldr	r3, [pc, #148]	; (80048f8 <__swsetup_r+0xd4>)
 8004862:	429c      	cmp	r4, r3
 8004864:	d101      	bne.n	800486a <__swsetup_r+0x46>
 8004866:	68ac      	ldr	r4, [r5, #8]
 8004868:	e7eb      	b.n	8004842 <__swsetup_r+0x1e>
 800486a:	4b24      	ldr	r3, [pc, #144]	; (80048fc <__swsetup_r+0xd8>)
 800486c:	429c      	cmp	r4, r3
 800486e:	bf08      	it	eq
 8004870:	68ec      	ldreq	r4, [r5, #12]
 8004872:	e7e6      	b.n	8004842 <__swsetup_r+0x1e>
 8004874:	0751      	lsls	r1, r2, #29
 8004876:	d512      	bpl.n	800489e <__swsetup_r+0x7a>
 8004878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800487a:	b141      	cbz	r1, 800488e <__swsetup_r+0x6a>
 800487c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004880:	4299      	cmp	r1, r3
 8004882:	d002      	beq.n	800488a <__swsetup_r+0x66>
 8004884:	4630      	mov	r0, r6
 8004886:	f7ff fd99 	bl	80043bc <_free_r>
 800488a:	2300      	movs	r3, #0
 800488c:	6363      	str	r3, [r4, #52]	; 0x34
 800488e:	89a3      	ldrh	r3, [r4, #12]
 8004890:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004894:	81a3      	strh	r3, [r4, #12]
 8004896:	2300      	movs	r3, #0
 8004898:	6063      	str	r3, [r4, #4]
 800489a:	6923      	ldr	r3, [r4, #16]
 800489c:	6023      	str	r3, [r4, #0]
 800489e:	89a3      	ldrh	r3, [r4, #12]
 80048a0:	f043 0308 	orr.w	r3, r3, #8
 80048a4:	81a3      	strh	r3, [r4, #12]
 80048a6:	6923      	ldr	r3, [r4, #16]
 80048a8:	b94b      	cbnz	r3, 80048be <__swsetup_r+0x9a>
 80048aa:	89a3      	ldrh	r3, [r4, #12]
 80048ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80048b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048b4:	d003      	beq.n	80048be <__swsetup_r+0x9a>
 80048b6:	4621      	mov	r1, r4
 80048b8:	4630      	mov	r0, r6
 80048ba:	f000 f9bf 	bl	8004c3c <__smakebuf_r>
 80048be:	89a2      	ldrh	r2, [r4, #12]
 80048c0:	f012 0301 	ands.w	r3, r2, #1
 80048c4:	d00c      	beq.n	80048e0 <__swsetup_r+0xbc>
 80048c6:	2300      	movs	r3, #0
 80048c8:	60a3      	str	r3, [r4, #8]
 80048ca:	6963      	ldr	r3, [r4, #20]
 80048cc:	425b      	negs	r3, r3
 80048ce:	61a3      	str	r3, [r4, #24]
 80048d0:	6923      	ldr	r3, [r4, #16]
 80048d2:	b953      	cbnz	r3, 80048ea <__swsetup_r+0xc6>
 80048d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048d8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80048dc:	d1ba      	bne.n	8004854 <__swsetup_r+0x30>
 80048de:	bd70      	pop	{r4, r5, r6, pc}
 80048e0:	0792      	lsls	r2, r2, #30
 80048e2:	bf58      	it	pl
 80048e4:	6963      	ldrpl	r3, [r4, #20]
 80048e6:	60a3      	str	r3, [r4, #8]
 80048e8:	e7f2      	b.n	80048d0 <__swsetup_r+0xac>
 80048ea:	2000      	movs	r0, #0
 80048ec:	e7f7      	b.n	80048de <__swsetup_r+0xba>
 80048ee:	bf00      	nop
 80048f0:	20000018 	.word	0x20000018
 80048f4:	080055b4 	.word	0x080055b4
 80048f8:	080055d4 	.word	0x080055d4
 80048fc:	08005594 	.word	0x08005594

08004900 <__sflush_r>:
 8004900:	898a      	ldrh	r2, [r1, #12]
 8004902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004906:	4605      	mov	r5, r0
 8004908:	0710      	lsls	r0, r2, #28
 800490a:	460c      	mov	r4, r1
 800490c:	d458      	bmi.n	80049c0 <__sflush_r+0xc0>
 800490e:	684b      	ldr	r3, [r1, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	dc05      	bgt.n	8004920 <__sflush_r+0x20>
 8004914:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	dc02      	bgt.n	8004920 <__sflush_r+0x20>
 800491a:	2000      	movs	r0, #0
 800491c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004922:	2e00      	cmp	r6, #0
 8004924:	d0f9      	beq.n	800491a <__sflush_r+0x1a>
 8004926:	2300      	movs	r3, #0
 8004928:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800492c:	682f      	ldr	r7, [r5, #0]
 800492e:	6a21      	ldr	r1, [r4, #32]
 8004930:	602b      	str	r3, [r5, #0]
 8004932:	d032      	beq.n	800499a <__sflush_r+0x9a>
 8004934:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004936:	89a3      	ldrh	r3, [r4, #12]
 8004938:	075a      	lsls	r2, r3, #29
 800493a:	d505      	bpl.n	8004948 <__sflush_r+0x48>
 800493c:	6863      	ldr	r3, [r4, #4]
 800493e:	1ac0      	subs	r0, r0, r3
 8004940:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004942:	b10b      	cbz	r3, 8004948 <__sflush_r+0x48>
 8004944:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004946:	1ac0      	subs	r0, r0, r3
 8004948:	2300      	movs	r3, #0
 800494a:	4602      	mov	r2, r0
 800494c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800494e:	6a21      	ldr	r1, [r4, #32]
 8004950:	4628      	mov	r0, r5
 8004952:	47b0      	blx	r6
 8004954:	1c43      	adds	r3, r0, #1
 8004956:	89a3      	ldrh	r3, [r4, #12]
 8004958:	d106      	bne.n	8004968 <__sflush_r+0x68>
 800495a:	6829      	ldr	r1, [r5, #0]
 800495c:	291d      	cmp	r1, #29
 800495e:	d848      	bhi.n	80049f2 <__sflush_r+0xf2>
 8004960:	4a29      	ldr	r2, [pc, #164]	; (8004a08 <__sflush_r+0x108>)
 8004962:	40ca      	lsrs	r2, r1
 8004964:	07d6      	lsls	r6, r2, #31
 8004966:	d544      	bpl.n	80049f2 <__sflush_r+0xf2>
 8004968:	2200      	movs	r2, #0
 800496a:	6062      	str	r2, [r4, #4]
 800496c:	04d9      	lsls	r1, r3, #19
 800496e:	6922      	ldr	r2, [r4, #16]
 8004970:	6022      	str	r2, [r4, #0]
 8004972:	d504      	bpl.n	800497e <__sflush_r+0x7e>
 8004974:	1c42      	adds	r2, r0, #1
 8004976:	d101      	bne.n	800497c <__sflush_r+0x7c>
 8004978:	682b      	ldr	r3, [r5, #0]
 800497a:	b903      	cbnz	r3, 800497e <__sflush_r+0x7e>
 800497c:	6560      	str	r0, [r4, #84]	; 0x54
 800497e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004980:	602f      	str	r7, [r5, #0]
 8004982:	2900      	cmp	r1, #0
 8004984:	d0c9      	beq.n	800491a <__sflush_r+0x1a>
 8004986:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800498a:	4299      	cmp	r1, r3
 800498c:	d002      	beq.n	8004994 <__sflush_r+0x94>
 800498e:	4628      	mov	r0, r5
 8004990:	f7ff fd14 	bl	80043bc <_free_r>
 8004994:	2000      	movs	r0, #0
 8004996:	6360      	str	r0, [r4, #52]	; 0x34
 8004998:	e7c0      	b.n	800491c <__sflush_r+0x1c>
 800499a:	2301      	movs	r3, #1
 800499c:	4628      	mov	r0, r5
 800499e:	47b0      	blx	r6
 80049a0:	1c41      	adds	r1, r0, #1
 80049a2:	d1c8      	bne.n	8004936 <__sflush_r+0x36>
 80049a4:	682b      	ldr	r3, [r5, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0c5      	beq.n	8004936 <__sflush_r+0x36>
 80049aa:	2b1d      	cmp	r3, #29
 80049ac:	d001      	beq.n	80049b2 <__sflush_r+0xb2>
 80049ae:	2b16      	cmp	r3, #22
 80049b0:	d101      	bne.n	80049b6 <__sflush_r+0xb6>
 80049b2:	602f      	str	r7, [r5, #0]
 80049b4:	e7b1      	b.n	800491a <__sflush_r+0x1a>
 80049b6:	89a3      	ldrh	r3, [r4, #12]
 80049b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049bc:	81a3      	strh	r3, [r4, #12]
 80049be:	e7ad      	b.n	800491c <__sflush_r+0x1c>
 80049c0:	690f      	ldr	r7, [r1, #16]
 80049c2:	2f00      	cmp	r7, #0
 80049c4:	d0a9      	beq.n	800491a <__sflush_r+0x1a>
 80049c6:	0793      	lsls	r3, r2, #30
 80049c8:	680e      	ldr	r6, [r1, #0]
 80049ca:	bf08      	it	eq
 80049cc:	694b      	ldreq	r3, [r1, #20]
 80049ce:	600f      	str	r7, [r1, #0]
 80049d0:	bf18      	it	ne
 80049d2:	2300      	movne	r3, #0
 80049d4:	eba6 0807 	sub.w	r8, r6, r7
 80049d8:	608b      	str	r3, [r1, #8]
 80049da:	f1b8 0f00 	cmp.w	r8, #0
 80049de:	dd9c      	ble.n	800491a <__sflush_r+0x1a>
 80049e0:	4643      	mov	r3, r8
 80049e2:	463a      	mov	r2, r7
 80049e4:	6a21      	ldr	r1, [r4, #32]
 80049e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049e8:	4628      	mov	r0, r5
 80049ea:	47b0      	blx	r6
 80049ec:	2800      	cmp	r0, #0
 80049ee:	dc06      	bgt.n	80049fe <__sflush_r+0xfe>
 80049f0:	89a3      	ldrh	r3, [r4, #12]
 80049f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049f6:	81a3      	strh	r3, [r4, #12]
 80049f8:	f04f 30ff 	mov.w	r0, #4294967295
 80049fc:	e78e      	b.n	800491c <__sflush_r+0x1c>
 80049fe:	4407      	add	r7, r0
 8004a00:	eba8 0800 	sub.w	r8, r8, r0
 8004a04:	e7e9      	b.n	80049da <__sflush_r+0xda>
 8004a06:	bf00      	nop
 8004a08:	20400001 	.word	0x20400001

08004a0c <_fflush_r>:
 8004a0c:	b538      	push	{r3, r4, r5, lr}
 8004a0e:	690b      	ldr	r3, [r1, #16]
 8004a10:	4605      	mov	r5, r0
 8004a12:	460c      	mov	r4, r1
 8004a14:	b1db      	cbz	r3, 8004a4e <_fflush_r+0x42>
 8004a16:	b118      	cbz	r0, 8004a20 <_fflush_r+0x14>
 8004a18:	6983      	ldr	r3, [r0, #24]
 8004a1a:	b90b      	cbnz	r3, 8004a20 <_fflush_r+0x14>
 8004a1c:	f000 f860 	bl	8004ae0 <__sinit>
 8004a20:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <_fflush_r+0x48>)
 8004a22:	429c      	cmp	r4, r3
 8004a24:	d109      	bne.n	8004a3a <_fflush_r+0x2e>
 8004a26:	686c      	ldr	r4, [r5, #4]
 8004a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a2c:	b17b      	cbz	r3, 8004a4e <_fflush_r+0x42>
 8004a2e:	4621      	mov	r1, r4
 8004a30:	4628      	mov	r0, r5
 8004a32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a36:	f7ff bf63 	b.w	8004900 <__sflush_r>
 8004a3a:	4b07      	ldr	r3, [pc, #28]	; (8004a58 <_fflush_r+0x4c>)
 8004a3c:	429c      	cmp	r4, r3
 8004a3e:	d101      	bne.n	8004a44 <_fflush_r+0x38>
 8004a40:	68ac      	ldr	r4, [r5, #8]
 8004a42:	e7f1      	b.n	8004a28 <_fflush_r+0x1c>
 8004a44:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <_fflush_r+0x50>)
 8004a46:	429c      	cmp	r4, r3
 8004a48:	bf08      	it	eq
 8004a4a:	68ec      	ldreq	r4, [r5, #12]
 8004a4c:	e7ec      	b.n	8004a28 <_fflush_r+0x1c>
 8004a4e:	2000      	movs	r0, #0
 8004a50:	bd38      	pop	{r3, r4, r5, pc}
 8004a52:	bf00      	nop
 8004a54:	080055b4 	.word	0x080055b4
 8004a58:	080055d4 	.word	0x080055d4
 8004a5c:	08005594 	.word	0x08005594

08004a60 <std>:
 8004a60:	2300      	movs	r3, #0
 8004a62:	b510      	push	{r4, lr}
 8004a64:	4604      	mov	r4, r0
 8004a66:	e9c0 3300 	strd	r3, r3, [r0]
 8004a6a:	6083      	str	r3, [r0, #8]
 8004a6c:	8181      	strh	r1, [r0, #12]
 8004a6e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a70:	81c2      	strh	r2, [r0, #14]
 8004a72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a76:	6183      	str	r3, [r0, #24]
 8004a78:	4619      	mov	r1, r3
 8004a7a:	2208      	movs	r2, #8
 8004a7c:	305c      	adds	r0, #92	; 0x5c
 8004a7e:	f7ff fc95 	bl	80043ac <memset>
 8004a82:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <std+0x38>)
 8004a84:	6263      	str	r3, [r4, #36]	; 0x24
 8004a86:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <std+0x3c>)
 8004a88:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a8a:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <std+0x40>)
 8004a8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a8e:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <std+0x44>)
 8004a90:	6224      	str	r4, [r4, #32]
 8004a92:	6323      	str	r3, [r4, #48]	; 0x30
 8004a94:	bd10      	pop	{r4, pc}
 8004a96:	bf00      	nop
 8004a98:	08005251 	.word	0x08005251
 8004a9c:	08005273 	.word	0x08005273
 8004aa0:	080052ab 	.word	0x080052ab
 8004aa4:	080052cf 	.word	0x080052cf

08004aa8 <_cleanup_r>:
 8004aa8:	4901      	ldr	r1, [pc, #4]	; (8004ab0 <_cleanup_r+0x8>)
 8004aaa:	f000 b885 	b.w	8004bb8 <_fwalk_reent>
 8004aae:	bf00      	nop
 8004ab0:	08004a0d 	.word	0x08004a0d

08004ab4 <__sfmoreglue>:
 8004ab4:	b570      	push	{r4, r5, r6, lr}
 8004ab6:	1e4a      	subs	r2, r1, #1
 8004ab8:	2568      	movs	r5, #104	; 0x68
 8004aba:	4355      	muls	r5, r2
 8004abc:	460e      	mov	r6, r1
 8004abe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ac2:	f7ff fcc9 	bl	8004458 <_malloc_r>
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	b140      	cbz	r0, 8004adc <__sfmoreglue+0x28>
 8004aca:	2100      	movs	r1, #0
 8004acc:	e9c0 1600 	strd	r1, r6, [r0]
 8004ad0:	300c      	adds	r0, #12
 8004ad2:	60a0      	str	r0, [r4, #8]
 8004ad4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ad8:	f7ff fc68 	bl	80043ac <memset>
 8004adc:	4620      	mov	r0, r4
 8004ade:	bd70      	pop	{r4, r5, r6, pc}

08004ae0 <__sinit>:
 8004ae0:	6983      	ldr	r3, [r0, #24]
 8004ae2:	b510      	push	{r4, lr}
 8004ae4:	4604      	mov	r4, r0
 8004ae6:	bb33      	cbnz	r3, 8004b36 <__sinit+0x56>
 8004ae8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004aec:	6503      	str	r3, [r0, #80]	; 0x50
 8004aee:	4b12      	ldr	r3, [pc, #72]	; (8004b38 <__sinit+0x58>)
 8004af0:	4a12      	ldr	r2, [pc, #72]	; (8004b3c <__sinit+0x5c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6282      	str	r2, [r0, #40]	; 0x28
 8004af6:	4298      	cmp	r0, r3
 8004af8:	bf04      	itt	eq
 8004afa:	2301      	moveq	r3, #1
 8004afc:	6183      	streq	r3, [r0, #24]
 8004afe:	f000 f81f 	bl	8004b40 <__sfp>
 8004b02:	6060      	str	r0, [r4, #4]
 8004b04:	4620      	mov	r0, r4
 8004b06:	f000 f81b 	bl	8004b40 <__sfp>
 8004b0a:	60a0      	str	r0, [r4, #8]
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f000 f817 	bl	8004b40 <__sfp>
 8004b12:	2200      	movs	r2, #0
 8004b14:	60e0      	str	r0, [r4, #12]
 8004b16:	2104      	movs	r1, #4
 8004b18:	6860      	ldr	r0, [r4, #4]
 8004b1a:	f7ff ffa1 	bl	8004a60 <std>
 8004b1e:	2201      	movs	r2, #1
 8004b20:	2109      	movs	r1, #9
 8004b22:	68a0      	ldr	r0, [r4, #8]
 8004b24:	f7ff ff9c 	bl	8004a60 <std>
 8004b28:	2202      	movs	r2, #2
 8004b2a:	2112      	movs	r1, #18
 8004b2c:	68e0      	ldr	r0, [r4, #12]
 8004b2e:	f7ff ff97 	bl	8004a60 <std>
 8004b32:	2301      	movs	r3, #1
 8004b34:	61a3      	str	r3, [r4, #24]
 8004b36:	bd10      	pop	{r4, pc}
 8004b38:	08005590 	.word	0x08005590
 8004b3c:	08004aa9 	.word	0x08004aa9

08004b40 <__sfp>:
 8004b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b42:	4b1b      	ldr	r3, [pc, #108]	; (8004bb0 <__sfp+0x70>)
 8004b44:	681e      	ldr	r6, [r3, #0]
 8004b46:	69b3      	ldr	r3, [r6, #24]
 8004b48:	4607      	mov	r7, r0
 8004b4a:	b913      	cbnz	r3, 8004b52 <__sfp+0x12>
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	f7ff ffc7 	bl	8004ae0 <__sinit>
 8004b52:	3648      	adds	r6, #72	; 0x48
 8004b54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	d503      	bpl.n	8004b64 <__sfp+0x24>
 8004b5c:	6833      	ldr	r3, [r6, #0]
 8004b5e:	b133      	cbz	r3, 8004b6e <__sfp+0x2e>
 8004b60:	6836      	ldr	r6, [r6, #0]
 8004b62:	e7f7      	b.n	8004b54 <__sfp+0x14>
 8004b64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b68:	b16d      	cbz	r5, 8004b86 <__sfp+0x46>
 8004b6a:	3468      	adds	r4, #104	; 0x68
 8004b6c:	e7f4      	b.n	8004b58 <__sfp+0x18>
 8004b6e:	2104      	movs	r1, #4
 8004b70:	4638      	mov	r0, r7
 8004b72:	f7ff ff9f 	bl	8004ab4 <__sfmoreglue>
 8004b76:	6030      	str	r0, [r6, #0]
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	d1f1      	bne.n	8004b60 <__sfp+0x20>
 8004b7c:	230c      	movs	r3, #12
 8004b7e:	603b      	str	r3, [r7, #0]
 8004b80:	4604      	mov	r4, r0
 8004b82:	4620      	mov	r0, r4
 8004b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b86:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <__sfp+0x74>)
 8004b88:	6665      	str	r5, [r4, #100]	; 0x64
 8004b8a:	e9c4 5500 	strd	r5, r5, [r4]
 8004b8e:	60a5      	str	r5, [r4, #8]
 8004b90:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004b94:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004b98:	2208      	movs	r2, #8
 8004b9a:	4629      	mov	r1, r5
 8004b9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ba0:	f7ff fc04 	bl	80043ac <memset>
 8004ba4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ba8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004bac:	e7e9      	b.n	8004b82 <__sfp+0x42>
 8004bae:	bf00      	nop
 8004bb0:	08005590 	.word	0x08005590
 8004bb4:	ffff0001 	.word	0xffff0001

08004bb8 <_fwalk_reent>:
 8004bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bbc:	4680      	mov	r8, r0
 8004bbe:	4689      	mov	r9, r1
 8004bc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bc4:	2600      	movs	r6, #0
 8004bc6:	b914      	cbnz	r4, 8004bce <_fwalk_reent+0x16>
 8004bc8:	4630      	mov	r0, r6
 8004bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004bd2:	3f01      	subs	r7, #1
 8004bd4:	d501      	bpl.n	8004bda <_fwalk_reent+0x22>
 8004bd6:	6824      	ldr	r4, [r4, #0]
 8004bd8:	e7f5      	b.n	8004bc6 <_fwalk_reent+0xe>
 8004bda:	89ab      	ldrh	r3, [r5, #12]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d907      	bls.n	8004bf0 <_fwalk_reent+0x38>
 8004be0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004be4:	3301      	adds	r3, #1
 8004be6:	d003      	beq.n	8004bf0 <_fwalk_reent+0x38>
 8004be8:	4629      	mov	r1, r5
 8004bea:	4640      	mov	r0, r8
 8004bec:	47c8      	blx	r9
 8004bee:	4306      	orrs	r6, r0
 8004bf0:	3568      	adds	r5, #104	; 0x68
 8004bf2:	e7ee      	b.n	8004bd2 <_fwalk_reent+0x1a>

08004bf4 <__swhatbuf_r>:
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	460e      	mov	r6, r1
 8004bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bfc:	2900      	cmp	r1, #0
 8004bfe:	b096      	sub	sp, #88	; 0x58
 8004c00:	4614      	mov	r4, r2
 8004c02:	461d      	mov	r5, r3
 8004c04:	da07      	bge.n	8004c16 <__swhatbuf_r+0x22>
 8004c06:	2300      	movs	r3, #0
 8004c08:	602b      	str	r3, [r5, #0]
 8004c0a:	89b3      	ldrh	r3, [r6, #12]
 8004c0c:	061a      	lsls	r2, r3, #24
 8004c0e:	d410      	bmi.n	8004c32 <__swhatbuf_r+0x3e>
 8004c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c14:	e00e      	b.n	8004c34 <__swhatbuf_r+0x40>
 8004c16:	466a      	mov	r2, sp
 8004c18:	f000 fb80 	bl	800531c <_fstat_r>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	dbf2      	blt.n	8004c06 <__swhatbuf_r+0x12>
 8004c20:	9a01      	ldr	r2, [sp, #4]
 8004c22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c2a:	425a      	negs	r2, r3
 8004c2c:	415a      	adcs	r2, r3
 8004c2e:	602a      	str	r2, [r5, #0]
 8004c30:	e7ee      	b.n	8004c10 <__swhatbuf_r+0x1c>
 8004c32:	2340      	movs	r3, #64	; 0x40
 8004c34:	2000      	movs	r0, #0
 8004c36:	6023      	str	r3, [r4, #0]
 8004c38:	b016      	add	sp, #88	; 0x58
 8004c3a:	bd70      	pop	{r4, r5, r6, pc}

08004c3c <__smakebuf_r>:
 8004c3c:	898b      	ldrh	r3, [r1, #12]
 8004c3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c40:	079d      	lsls	r5, r3, #30
 8004c42:	4606      	mov	r6, r0
 8004c44:	460c      	mov	r4, r1
 8004c46:	d507      	bpl.n	8004c58 <__smakebuf_r+0x1c>
 8004c48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c4c:	6023      	str	r3, [r4, #0]
 8004c4e:	6123      	str	r3, [r4, #16]
 8004c50:	2301      	movs	r3, #1
 8004c52:	6163      	str	r3, [r4, #20]
 8004c54:	b002      	add	sp, #8
 8004c56:	bd70      	pop	{r4, r5, r6, pc}
 8004c58:	ab01      	add	r3, sp, #4
 8004c5a:	466a      	mov	r2, sp
 8004c5c:	f7ff ffca 	bl	8004bf4 <__swhatbuf_r>
 8004c60:	9900      	ldr	r1, [sp, #0]
 8004c62:	4605      	mov	r5, r0
 8004c64:	4630      	mov	r0, r6
 8004c66:	f7ff fbf7 	bl	8004458 <_malloc_r>
 8004c6a:	b948      	cbnz	r0, 8004c80 <__smakebuf_r+0x44>
 8004c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c70:	059a      	lsls	r2, r3, #22
 8004c72:	d4ef      	bmi.n	8004c54 <__smakebuf_r+0x18>
 8004c74:	f023 0303 	bic.w	r3, r3, #3
 8004c78:	f043 0302 	orr.w	r3, r3, #2
 8004c7c:	81a3      	strh	r3, [r4, #12]
 8004c7e:	e7e3      	b.n	8004c48 <__smakebuf_r+0xc>
 8004c80:	4b0d      	ldr	r3, [pc, #52]	; (8004cb8 <__smakebuf_r+0x7c>)
 8004c82:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c84:	89a3      	ldrh	r3, [r4, #12]
 8004c86:	6020      	str	r0, [r4, #0]
 8004c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8c:	81a3      	strh	r3, [r4, #12]
 8004c8e:	9b00      	ldr	r3, [sp, #0]
 8004c90:	6163      	str	r3, [r4, #20]
 8004c92:	9b01      	ldr	r3, [sp, #4]
 8004c94:	6120      	str	r0, [r4, #16]
 8004c96:	b15b      	cbz	r3, 8004cb0 <__smakebuf_r+0x74>
 8004c98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c9c:	4630      	mov	r0, r6
 8004c9e:	f000 fb4f 	bl	8005340 <_isatty_r>
 8004ca2:	b128      	cbz	r0, 8004cb0 <__smakebuf_r+0x74>
 8004ca4:	89a3      	ldrh	r3, [r4, #12]
 8004ca6:	f023 0303 	bic.w	r3, r3, #3
 8004caa:	f043 0301 	orr.w	r3, r3, #1
 8004cae:	81a3      	strh	r3, [r4, #12]
 8004cb0:	89a3      	ldrh	r3, [r4, #12]
 8004cb2:	431d      	orrs	r5, r3
 8004cb4:	81a5      	strh	r5, [r4, #12]
 8004cb6:	e7cd      	b.n	8004c54 <__smakebuf_r+0x18>
 8004cb8:	08004aa9 	.word	0x08004aa9

08004cbc <__malloc_lock>:
 8004cbc:	4770      	bx	lr

08004cbe <__malloc_unlock>:
 8004cbe:	4770      	bx	lr

08004cc0 <__sfputc_r>:
 8004cc0:	6893      	ldr	r3, [r2, #8]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	b410      	push	{r4}
 8004cc8:	6093      	str	r3, [r2, #8]
 8004cca:	da08      	bge.n	8004cde <__sfputc_r+0x1e>
 8004ccc:	6994      	ldr	r4, [r2, #24]
 8004cce:	42a3      	cmp	r3, r4
 8004cd0:	db01      	blt.n	8004cd6 <__sfputc_r+0x16>
 8004cd2:	290a      	cmp	r1, #10
 8004cd4:	d103      	bne.n	8004cde <__sfputc_r+0x1e>
 8004cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cda:	f7ff bd51 	b.w	8004780 <__swbuf_r>
 8004cde:	6813      	ldr	r3, [r2, #0]
 8004ce0:	1c58      	adds	r0, r3, #1
 8004ce2:	6010      	str	r0, [r2, #0]
 8004ce4:	7019      	strb	r1, [r3, #0]
 8004ce6:	4608      	mov	r0, r1
 8004ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <__sfputs_r>:
 8004cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf0:	4606      	mov	r6, r0
 8004cf2:	460f      	mov	r7, r1
 8004cf4:	4614      	mov	r4, r2
 8004cf6:	18d5      	adds	r5, r2, r3
 8004cf8:	42ac      	cmp	r4, r5
 8004cfa:	d101      	bne.n	8004d00 <__sfputs_r+0x12>
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	e007      	b.n	8004d10 <__sfputs_r+0x22>
 8004d00:	463a      	mov	r2, r7
 8004d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d06:	4630      	mov	r0, r6
 8004d08:	f7ff ffda 	bl	8004cc0 <__sfputc_r>
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	d1f3      	bne.n	8004cf8 <__sfputs_r+0xa>
 8004d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d14 <_vfiprintf_r>:
 8004d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d18:	460c      	mov	r4, r1
 8004d1a:	b09d      	sub	sp, #116	; 0x74
 8004d1c:	4617      	mov	r7, r2
 8004d1e:	461d      	mov	r5, r3
 8004d20:	4606      	mov	r6, r0
 8004d22:	b118      	cbz	r0, 8004d2c <_vfiprintf_r+0x18>
 8004d24:	6983      	ldr	r3, [r0, #24]
 8004d26:	b90b      	cbnz	r3, 8004d2c <_vfiprintf_r+0x18>
 8004d28:	f7ff feda 	bl	8004ae0 <__sinit>
 8004d2c:	4b7c      	ldr	r3, [pc, #496]	; (8004f20 <_vfiprintf_r+0x20c>)
 8004d2e:	429c      	cmp	r4, r3
 8004d30:	d158      	bne.n	8004de4 <_vfiprintf_r+0xd0>
 8004d32:	6874      	ldr	r4, [r6, #4]
 8004d34:	89a3      	ldrh	r3, [r4, #12]
 8004d36:	0718      	lsls	r0, r3, #28
 8004d38:	d55e      	bpl.n	8004df8 <_vfiprintf_r+0xe4>
 8004d3a:	6923      	ldr	r3, [r4, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d05b      	beq.n	8004df8 <_vfiprintf_r+0xe4>
 8004d40:	2300      	movs	r3, #0
 8004d42:	9309      	str	r3, [sp, #36]	; 0x24
 8004d44:	2320      	movs	r3, #32
 8004d46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d4a:	2330      	movs	r3, #48	; 0x30
 8004d4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d50:	9503      	str	r5, [sp, #12]
 8004d52:	f04f 0b01 	mov.w	fp, #1
 8004d56:	46b8      	mov	r8, r7
 8004d58:	4645      	mov	r5, r8
 8004d5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004d5e:	b10b      	cbz	r3, 8004d64 <_vfiprintf_r+0x50>
 8004d60:	2b25      	cmp	r3, #37	; 0x25
 8004d62:	d154      	bne.n	8004e0e <_vfiprintf_r+0xfa>
 8004d64:	ebb8 0a07 	subs.w	sl, r8, r7
 8004d68:	d00b      	beq.n	8004d82 <_vfiprintf_r+0x6e>
 8004d6a:	4653      	mov	r3, sl
 8004d6c:	463a      	mov	r2, r7
 8004d6e:	4621      	mov	r1, r4
 8004d70:	4630      	mov	r0, r6
 8004d72:	f7ff ffbc 	bl	8004cee <__sfputs_r>
 8004d76:	3001      	adds	r0, #1
 8004d78:	f000 80c2 	beq.w	8004f00 <_vfiprintf_r+0x1ec>
 8004d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d7e:	4453      	add	r3, sl
 8004d80:	9309      	str	r3, [sp, #36]	; 0x24
 8004d82:	f898 3000 	ldrb.w	r3, [r8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 80ba 	beq.w	8004f00 <_vfiprintf_r+0x1ec>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d96:	9304      	str	r3, [sp, #16]
 8004d98:	9307      	str	r3, [sp, #28]
 8004d9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d9e:	931a      	str	r3, [sp, #104]	; 0x68
 8004da0:	46a8      	mov	r8, r5
 8004da2:	2205      	movs	r2, #5
 8004da4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004da8:	485e      	ldr	r0, [pc, #376]	; (8004f24 <_vfiprintf_r+0x210>)
 8004daa:	f7fb fa19 	bl	80001e0 <memchr>
 8004dae:	9b04      	ldr	r3, [sp, #16]
 8004db0:	bb78      	cbnz	r0, 8004e12 <_vfiprintf_r+0xfe>
 8004db2:	06d9      	lsls	r1, r3, #27
 8004db4:	bf44      	itt	mi
 8004db6:	2220      	movmi	r2, #32
 8004db8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004dbc:	071a      	lsls	r2, r3, #28
 8004dbe:	bf44      	itt	mi
 8004dc0:	222b      	movmi	r2, #43	; 0x2b
 8004dc2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004dc6:	782a      	ldrb	r2, [r5, #0]
 8004dc8:	2a2a      	cmp	r2, #42	; 0x2a
 8004dca:	d02a      	beq.n	8004e22 <_vfiprintf_r+0x10e>
 8004dcc:	9a07      	ldr	r2, [sp, #28]
 8004dce:	46a8      	mov	r8, r5
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	250a      	movs	r5, #10
 8004dd4:	4641      	mov	r1, r8
 8004dd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dda:	3b30      	subs	r3, #48	; 0x30
 8004ddc:	2b09      	cmp	r3, #9
 8004dde:	d969      	bls.n	8004eb4 <_vfiprintf_r+0x1a0>
 8004de0:	b360      	cbz	r0, 8004e3c <_vfiprintf_r+0x128>
 8004de2:	e024      	b.n	8004e2e <_vfiprintf_r+0x11a>
 8004de4:	4b50      	ldr	r3, [pc, #320]	; (8004f28 <_vfiprintf_r+0x214>)
 8004de6:	429c      	cmp	r4, r3
 8004de8:	d101      	bne.n	8004dee <_vfiprintf_r+0xda>
 8004dea:	68b4      	ldr	r4, [r6, #8]
 8004dec:	e7a2      	b.n	8004d34 <_vfiprintf_r+0x20>
 8004dee:	4b4f      	ldr	r3, [pc, #316]	; (8004f2c <_vfiprintf_r+0x218>)
 8004df0:	429c      	cmp	r4, r3
 8004df2:	bf08      	it	eq
 8004df4:	68f4      	ldreq	r4, [r6, #12]
 8004df6:	e79d      	b.n	8004d34 <_vfiprintf_r+0x20>
 8004df8:	4621      	mov	r1, r4
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	f7ff fd12 	bl	8004824 <__swsetup_r>
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d09d      	beq.n	8004d40 <_vfiprintf_r+0x2c>
 8004e04:	f04f 30ff 	mov.w	r0, #4294967295
 8004e08:	b01d      	add	sp, #116	; 0x74
 8004e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e0e:	46a8      	mov	r8, r5
 8004e10:	e7a2      	b.n	8004d58 <_vfiprintf_r+0x44>
 8004e12:	4a44      	ldr	r2, [pc, #272]	; (8004f24 <_vfiprintf_r+0x210>)
 8004e14:	1a80      	subs	r0, r0, r2
 8004e16:	fa0b f000 	lsl.w	r0, fp, r0
 8004e1a:	4318      	orrs	r0, r3
 8004e1c:	9004      	str	r0, [sp, #16]
 8004e1e:	4645      	mov	r5, r8
 8004e20:	e7be      	b.n	8004da0 <_vfiprintf_r+0x8c>
 8004e22:	9a03      	ldr	r2, [sp, #12]
 8004e24:	1d11      	adds	r1, r2, #4
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	9103      	str	r1, [sp, #12]
 8004e2a:	2a00      	cmp	r2, #0
 8004e2c:	db01      	blt.n	8004e32 <_vfiprintf_r+0x11e>
 8004e2e:	9207      	str	r2, [sp, #28]
 8004e30:	e004      	b.n	8004e3c <_vfiprintf_r+0x128>
 8004e32:	4252      	negs	r2, r2
 8004e34:	f043 0302 	orr.w	r3, r3, #2
 8004e38:	9207      	str	r2, [sp, #28]
 8004e3a:	9304      	str	r3, [sp, #16]
 8004e3c:	f898 3000 	ldrb.w	r3, [r8]
 8004e40:	2b2e      	cmp	r3, #46	; 0x2e
 8004e42:	d10e      	bne.n	8004e62 <_vfiprintf_r+0x14e>
 8004e44:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004e48:	2b2a      	cmp	r3, #42	; 0x2a
 8004e4a:	d138      	bne.n	8004ebe <_vfiprintf_r+0x1aa>
 8004e4c:	9b03      	ldr	r3, [sp, #12]
 8004e4e:	1d1a      	adds	r2, r3, #4
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	9203      	str	r2, [sp, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	bfb8      	it	lt
 8004e58:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e5c:	f108 0802 	add.w	r8, r8, #2
 8004e60:	9305      	str	r3, [sp, #20]
 8004e62:	4d33      	ldr	r5, [pc, #204]	; (8004f30 <_vfiprintf_r+0x21c>)
 8004e64:	f898 1000 	ldrb.w	r1, [r8]
 8004e68:	2203      	movs	r2, #3
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	f7fb f9b8 	bl	80001e0 <memchr>
 8004e70:	b140      	cbz	r0, 8004e84 <_vfiprintf_r+0x170>
 8004e72:	2340      	movs	r3, #64	; 0x40
 8004e74:	1b40      	subs	r0, r0, r5
 8004e76:	fa03 f000 	lsl.w	r0, r3, r0
 8004e7a:	9b04      	ldr	r3, [sp, #16]
 8004e7c:	4303      	orrs	r3, r0
 8004e7e:	f108 0801 	add.w	r8, r8, #1
 8004e82:	9304      	str	r3, [sp, #16]
 8004e84:	f898 1000 	ldrb.w	r1, [r8]
 8004e88:	482a      	ldr	r0, [pc, #168]	; (8004f34 <_vfiprintf_r+0x220>)
 8004e8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e8e:	2206      	movs	r2, #6
 8004e90:	f108 0701 	add.w	r7, r8, #1
 8004e94:	f7fb f9a4 	bl	80001e0 <memchr>
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	d037      	beq.n	8004f0c <_vfiprintf_r+0x1f8>
 8004e9c:	4b26      	ldr	r3, [pc, #152]	; (8004f38 <_vfiprintf_r+0x224>)
 8004e9e:	bb1b      	cbnz	r3, 8004ee8 <_vfiprintf_r+0x1d4>
 8004ea0:	9b03      	ldr	r3, [sp, #12]
 8004ea2:	3307      	adds	r3, #7
 8004ea4:	f023 0307 	bic.w	r3, r3, #7
 8004ea8:	3308      	adds	r3, #8
 8004eaa:	9303      	str	r3, [sp, #12]
 8004eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eae:	444b      	add	r3, r9
 8004eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8004eb2:	e750      	b.n	8004d56 <_vfiprintf_r+0x42>
 8004eb4:	fb05 3202 	mla	r2, r5, r2, r3
 8004eb8:	2001      	movs	r0, #1
 8004eba:	4688      	mov	r8, r1
 8004ebc:	e78a      	b.n	8004dd4 <_vfiprintf_r+0xc0>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f108 0801 	add.w	r8, r8, #1
 8004ec4:	9305      	str	r3, [sp, #20]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	250a      	movs	r5, #10
 8004eca:	4640      	mov	r0, r8
 8004ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ed0:	3a30      	subs	r2, #48	; 0x30
 8004ed2:	2a09      	cmp	r2, #9
 8004ed4:	d903      	bls.n	8004ede <_vfiprintf_r+0x1ca>
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0c3      	beq.n	8004e62 <_vfiprintf_r+0x14e>
 8004eda:	9105      	str	r1, [sp, #20]
 8004edc:	e7c1      	b.n	8004e62 <_vfiprintf_r+0x14e>
 8004ede:	fb05 2101 	mla	r1, r5, r1, r2
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	4680      	mov	r8, r0
 8004ee6:	e7f0      	b.n	8004eca <_vfiprintf_r+0x1b6>
 8004ee8:	ab03      	add	r3, sp, #12
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	4622      	mov	r2, r4
 8004eee:	4b13      	ldr	r3, [pc, #76]	; (8004f3c <_vfiprintf_r+0x228>)
 8004ef0:	a904      	add	r1, sp, #16
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	f3af 8000 	nop.w
 8004ef8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004efc:	4681      	mov	r9, r0
 8004efe:	d1d5      	bne.n	8004eac <_vfiprintf_r+0x198>
 8004f00:	89a3      	ldrh	r3, [r4, #12]
 8004f02:	065b      	lsls	r3, r3, #25
 8004f04:	f53f af7e 	bmi.w	8004e04 <_vfiprintf_r+0xf0>
 8004f08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f0a:	e77d      	b.n	8004e08 <_vfiprintf_r+0xf4>
 8004f0c:	ab03      	add	r3, sp, #12
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	4622      	mov	r2, r4
 8004f12:	4b0a      	ldr	r3, [pc, #40]	; (8004f3c <_vfiprintf_r+0x228>)
 8004f14:	a904      	add	r1, sp, #16
 8004f16:	4630      	mov	r0, r6
 8004f18:	f000 f888 	bl	800502c <_printf_i>
 8004f1c:	e7ec      	b.n	8004ef8 <_vfiprintf_r+0x1e4>
 8004f1e:	bf00      	nop
 8004f20:	080055b4 	.word	0x080055b4
 8004f24:	080055f4 	.word	0x080055f4
 8004f28:	080055d4 	.word	0x080055d4
 8004f2c:	08005594 	.word	0x08005594
 8004f30:	080055fa 	.word	0x080055fa
 8004f34:	080055fe 	.word	0x080055fe
 8004f38:	00000000 	.word	0x00000000
 8004f3c:	08004cef 	.word	0x08004cef

08004f40 <_printf_common>:
 8004f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f44:	4691      	mov	r9, r2
 8004f46:	461f      	mov	r7, r3
 8004f48:	688a      	ldr	r2, [r1, #8]
 8004f4a:	690b      	ldr	r3, [r1, #16]
 8004f4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f50:	4293      	cmp	r3, r2
 8004f52:	bfb8      	it	lt
 8004f54:	4613      	movlt	r3, r2
 8004f56:	f8c9 3000 	str.w	r3, [r9]
 8004f5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f5e:	4606      	mov	r6, r0
 8004f60:	460c      	mov	r4, r1
 8004f62:	b112      	cbz	r2, 8004f6a <_printf_common+0x2a>
 8004f64:	3301      	adds	r3, #1
 8004f66:	f8c9 3000 	str.w	r3, [r9]
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	0699      	lsls	r1, r3, #26
 8004f6e:	bf42      	ittt	mi
 8004f70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004f74:	3302      	addmi	r3, #2
 8004f76:	f8c9 3000 	strmi.w	r3, [r9]
 8004f7a:	6825      	ldr	r5, [r4, #0]
 8004f7c:	f015 0506 	ands.w	r5, r5, #6
 8004f80:	d107      	bne.n	8004f92 <_printf_common+0x52>
 8004f82:	f104 0a19 	add.w	sl, r4, #25
 8004f86:	68e3      	ldr	r3, [r4, #12]
 8004f88:	f8d9 2000 	ldr.w	r2, [r9]
 8004f8c:	1a9b      	subs	r3, r3, r2
 8004f8e:	42ab      	cmp	r3, r5
 8004f90:	dc28      	bgt.n	8004fe4 <_printf_common+0xa4>
 8004f92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004f96:	6822      	ldr	r2, [r4, #0]
 8004f98:	3300      	adds	r3, #0
 8004f9a:	bf18      	it	ne
 8004f9c:	2301      	movne	r3, #1
 8004f9e:	0692      	lsls	r2, r2, #26
 8004fa0:	d42d      	bmi.n	8004ffe <_printf_common+0xbe>
 8004fa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fa6:	4639      	mov	r1, r7
 8004fa8:	4630      	mov	r0, r6
 8004faa:	47c0      	blx	r8
 8004fac:	3001      	adds	r0, #1
 8004fae:	d020      	beq.n	8004ff2 <_printf_common+0xb2>
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	68e5      	ldr	r5, [r4, #12]
 8004fb4:	f8d9 2000 	ldr.w	r2, [r9]
 8004fb8:	f003 0306 	and.w	r3, r3, #6
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	bf08      	it	eq
 8004fc0:	1aad      	subeq	r5, r5, r2
 8004fc2:	68a3      	ldr	r3, [r4, #8]
 8004fc4:	6922      	ldr	r2, [r4, #16]
 8004fc6:	bf0c      	ite	eq
 8004fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fcc:	2500      	movne	r5, #0
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	bfc4      	itt	gt
 8004fd2:	1a9b      	subgt	r3, r3, r2
 8004fd4:	18ed      	addgt	r5, r5, r3
 8004fd6:	f04f 0900 	mov.w	r9, #0
 8004fda:	341a      	adds	r4, #26
 8004fdc:	454d      	cmp	r5, r9
 8004fde:	d11a      	bne.n	8005016 <_printf_common+0xd6>
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	e008      	b.n	8004ff6 <_printf_common+0xb6>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	4652      	mov	r2, sl
 8004fe8:	4639      	mov	r1, r7
 8004fea:	4630      	mov	r0, r6
 8004fec:	47c0      	blx	r8
 8004fee:	3001      	adds	r0, #1
 8004ff0:	d103      	bne.n	8004ffa <_printf_common+0xba>
 8004ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ffa:	3501      	adds	r5, #1
 8004ffc:	e7c3      	b.n	8004f86 <_printf_common+0x46>
 8004ffe:	18e1      	adds	r1, r4, r3
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	2030      	movs	r0, #48	; 0x30
 8005004:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005008:	4422      	add	r2, r4
 800500a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800500e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005012:	3302      	adds	r3, #2
 8005014:	e7c5      	b.n	8004fa2 <_printf_common+0x62>
 8005016:	2301      	movs	r3, #1
 8005018:	4622      	mov	r2, r4
 800501a:	4639      	mov	r1, r7
 800501c:	4630      	mov	r0, r6
 800501e:	47c0      	blx	r8
 8005020:	3001      	adds	r0, #1
 8005022:	d0e6      	beq.n	8004ff2 <_printf_common+0xb2>
 8005024:	f109 0901 	add.w	r9, r9, #1
 8005028:	e7d8      	b.n	8004fdc <_printf_common+0x9c>
	...

0800502c <_printf_i>:
 800502c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005030:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005034:	460c      	mov	r4, r1
 8005036:	7e09      	ldrb	r1, [r1, #24]
 8005038:	b085      	sub	sp, #20
 800503a:	296e      	cmp	r1, #110	; 0x6e
 800503c:	4617      	mov	r7, r2
 800503e:	4606      	mov	r6, r0
 8005040:	4698      	mov	r8, r3
 8005042:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005044:	f000 80b3 	beq.w	80051ae <_printf_i+0x182>
 8005048:	d822      	bhi.n	8005090 <_printf_i+0x64>
 800504a:	2963      	cmp	r1, #99	; 0x63
 800504c:	d036      	beq.n	80050bc <_printf_i+0x90>
 800504e:	d80a      	bhi.n	8005066 <_printf_i+0x3a>
 8005050:	2900      	cmp	r1, #0
 8005052:	f000 80b9 	beq.w	80051c8 <_printf_i+0x19c>
 8005056:	2958      	cmp	r1, #88	; 0x58
 8005058:	f000 8083 	beq.w	8005162 <_printf_i+0x136>
 800505c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005060:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005064:	e032      	b.n	80050cc <_printf_i+0xa0>
 8005066:	2964      	cmp	r1, #100	; 0x64
 8005068:	d001      	beq.n	800506e <_printf_i+0x42>
 800506a:	2969      	cmp	r1, #105	; 0x69
 800506c:	d1f6      	bne.n	800505c <_printf_i+0x30>
 800506e:	6820      	ldr	r0, [r4, #0]
 8005070:	6813      	ldr	r3, [r2, #0]
 8005072:	0605      	lsls	r5, r0, #24
 8005074:	f103 0104 	add.w	r1, r3, #4
 8005078:	d52a      	bpl.n	80050d0 <_printf_i+0xa4>
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6011      	str	r1, [r2, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	da03      	bge.n	800508a <_printf_i+0x5e>
 8005082:	222d      	movs	r2, #45	; 0x2d
 8005084:	425b      	negs	r3, r3
 8005086:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800508a:	486f      	ldr	r0, [pc, #444]	; (8005248 <_printf_i+0x21c>)
 800508c:	220a      	movs	r2, #10
 800508e:	e039      	b.n	8005104 <_printf_i+0xd8>
 8005090:	2973      	cmp	r1, #115	; 0x73
 8005092:	f000 809d 	beq.w	80051d0 <_printf_i+0x1a4>
 8005096:	d808      	bhi.n	80050aa <_printf_i+0x7e>
 8005098:	296f      	cmp	r1, #111	; 0x6f
 800509a:	d020      	beq.n	80050de <_printf_i+0xb2>
 800509c:	2970      	cmp	r1, #112	; 0x70
 800509e:	d1dd      	bne.n	800505c <_printf_i+0x30>
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	f043 0320 	orr.w	r3, r3, #32
 80050a6:	6023      	str	r3, [r4, #0]
 80050a8:	e003      	b.n	80050b2 <_printf_i+0x86>
 80050aa:	2975      	cmp	r1, #117	; 0x75
 80050ac:	d017      	beq.n	80050de <_printf_i+0xb2>
 80050ae:	2978      	cmp	r1, #120	; 0x78
 80050b0:	d1d4      	bne.n	800505c <_printf_i+0x30>
 80050b2:	2378      	movs	r3, #120	; 0x78
 80050b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050b8:	4864      	ldr	r0, [pc, #400]	; (800524c <_printf_i+0x220>)
 80050ba:	e055      	b.n	8005168 <_printf_i+0x13c>
 80050bc:	6813      	ldr	r3, [r2, #0]
 80050be:	1d19      	adds	r1, r3, #4
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6011      	str	r1, [r2, #0]
 80050c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050cc:	2301      	movs	r3, #1
 80050ce:	e08c      	b.n	80051ea <_printf_i+0x1be>
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6011      	str	r1, [r2, #0]
 80050d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050d8:	bf18      	it	ne
 80050da:	b21b      	sxthne	r3, r3
 80050dc:	e7cf      	b.n	800507e <_printf_i+0x52>
 80050de:	6813      	ldr	r3, [r2, #0]
 80050e0:	6825      	ldr	r5, [r4, #0]
 80050e2:	1d18      	adds	r0, r3, #4
 80050e4:	6010      	str	r0, [r2, #0]
 80050e6:	0628      	lsls	r0, r5, #24
 80050e8:	d501      	bpl.n	80050ee <_printf_i+0xc2>
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	e002      	b.n	80050f4 <_printf_i+0xc8>
 80050ee:	0668      	lsls	r0, r5, #25
 80050f0:	d5fb      	bpl.n	80050ea <_printf_i+0xbe>
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	4854      	ldr	r0, [pc, #336]	; (8005248 <_printf_i+0x21c>)
 80050f6:	296f      	cmp	r1, #111	; 0x6f
 80050f8:	bf14      	ite	ne
 80050fa:	220a      	movne	r2, #10
 80050fc:	2208      	moveq	r2, #8
 80050fe:	2100      	movs	r1, #0
 8005100:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005104:	6865      	ldr	r5, [r4, #4]
 8005106:	60a5      	str	r5, [r4, #8]
 8005108:	2d00      	cmp	r5, #0
 800510a:	f2c0 8095 	blt.w	8005238 <_printf_i+0x20c>
 800510e:	6821      	ldr	r1, [r4, #0]
 8005110:	f021 0104 	bic.w	r1, r1, #4
 8005114:	6021      	str	r1, [r4, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d13d      	bne.n	8005196 <_printf_i+0x16a>
 800511a:	2d00      	cmp	r5, #0
 800511c:	f040 808e 	bne.w	800523c <_printf_i+0x210>
 8005120:	4665      	mov	r5, ip
 8005122:	2a08      	cmp	r2, #8
 8005124:	d10b      	bne.n	800513e <_printf_i+0x112>
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	07db      	lsls	r3, r3, #31
 800512a:	d508      	bpl.n	800513e <_printf_i+0x112>
 800512c:	6923      	ldr	r3, [r4, #16]
 800512e:	6862      	ldr	r2, [r4, #4]
 8005130:	429a      	cmp	r2, r3
 8005132:	bfde      	ittt	le
 8005134:	2330      	movle	r3, #48	; 0x30
 8005136:	f805 3c01 	strble.w	r3, [r5, #-1]
 800513a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800513e:	ebac 0305 	sub.w	r3, ip, r5
 8005142:	6123      	str	r3, [r4, #16]
 8005144:	f8cd 8000 	str.w	r8, [sp]
 8005148:	463b      	mov	r3, r7
 800514a:	aa03      	add	r2, sp, #12
 800514c:	4621      	mov	r1, r4
 800514e:	4630      	mov	r0, r6
 8005150:	f7ff fef6 	bl	8004f40 <_printf_common>
 8005154:	3001      	adds	r0, #1
 8005156:	d14d      	bne.n	80051f4 <_printf_i+0x1c8>
 8005158:	f04f 30ff 	mov.w	r0, #4294967295
 800515c:	b005      	add	sp, #20
 800515e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005162:	4839      	ldr	r0, [pc, #228]	; (8005248 <_printf_i+0x21c>)
 8005164:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005168:	6813      	ldr	r3, [r2, #0]
 800516a:	6821      	ldr	r1, [r4, #0]
 800516c:	1d1d      	adds	r5, r3, #4
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6015      	str	r5, [r2, #0]
 8005172:	060a      	lsls	r2, r1, #24
 8005174:	d50b      	bpl.n	800518e <_printf_i+0x162>
 8005176:	07ca      	lsls	r2, r1, #31
 8005178:	bf44      	itt	mi
 800517a:	f041 0120 	orrmi.w	r1, r1, #32
 800517e:	6021      	strmi	r1, [r4, #0]
 8005180:	b91b      	cbnz	r3, 800518a <_printf_i+0x15e>
 8005182:	6822      	ldr	r2, [r4, #0]
 8005184:	f022 0220 	bic.w	r2, r2, #32
 8005188:	6022      	str	r2, [r4, #0]
 800518a:	2210      	movs	r2, #16
 800518c:	e7b7      	b.n	80050fe <_printf_i+0xd2>
 800518e:	064d      	lsls	r5, r1, #25
 8005190:	bf48      	it	mi
 8005192:	b29b      	uxthmi	r3, r3
 8005194:	e7ef      	b.n	8005176 <_printf_i+0x14a>
 8005196:	4665      	mov	r5, ip
 8005198:	fbb3 f1f2 	udiv	r1, r3, r2
 800519c:	fb02 3311 	mls	r3, r2, r1, r3
 80051a0:	5cc3      	ldrb	r3, [r0, r3]
 80051a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80051a6:	460b      	mov	r3, r1
 80051a8:	2900      	cmp	r1, #0
 80051aa:	d1f5      	bne.n	8005198 <_printf_i+0x16c>
 80051ac:	e7b9      	b.n	8005122 <_printf_i+0xf6>
 80051ae:	6813      	ldr	r3, [r2, #0]
 80051b0:	6825      	ldr	r5, [r4, #0]
 80051b2:	6961      	ldr	r1, [r4, #20]
 80051b4:	1d18      	adds	r0, r3, #4
 80051b6:	6010      	str	r0, [r2, #0]
 80051b8:	0628      	lsls	r0, r5, #24
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	d501      	bpl.n	80051c2 <_printf_i+0x196>
 80051be:	6019      	str	r1, [r3, #0]
 80051c0:	e002      	b.n	80051c8 <_printf_i+0x19c>
 80051c2:	066a      	lsls	r2, r5, #25
 80051c4:	d5fb      	bpl.n	80051be <_printf_i+0x192>
 80051c6:	8019      	strh	r1, [r3, #0]
 80051c8:	2300      	movs	r3, #0
 80051ca:	6123      	str	r3, [r4, #16]
 80051cc:	4665      	mov	r5, ip
 80051ce:	e7b9      	b.n	8005144 <_printf_i+0x118>
 80051d0:	6813      	ldr	r3, [r2, #0]
 80051d2:	1d19      	adds	r1, r3, #4
 80051d4:	6011      	str	r1, [r2, #0]
 80051d6:	681d      	ldr	r5, [r3, #0]
 80051d8:	6862      	ldr	r2, [r4, #4]
 80051da:	2100      	movs	r1, #0
 80051dc:	4628      	mov	r0, r5
 80051de:	f7fa ffff 	bl	80001e0 <memchr>
 80051e2:	b108      	cbz	r0, 80051e8 <_printf_i+0x1bc>
 80051e4:	1b40      	subs	r0, r0, r5
 80051e6:	6060      	str	r0, [r4, #4]
 80051e8:	6863      	ldr	r3, [r4, #4]
 80051ea:	6123      	str	r3, [r4, #16]
 80051ec:	2300      	movs	r3, #0
 80051ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051f2:	e7a7      	b.n	8005144 <_printf_i+0x118>
 80051f4:	6923      	ldr	r3, [r4, #16]
 80051f6:	462a      	mov	r2, r5
 80051f8:	4639      	mov	r1, r7
 80051fa:	4630      	mov	r0, r6
 80051fc:	47c0      	blx	r8
 80051fe:	3001      	adds	r0, #1
 8005200:	d0aa      	beq.n	8005158 <_printf_i+0x12c>
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	079b      	lsls	r3, r3, #30
 8005206:	d413      	bmi.n	8005230 <_printf_i+0x204>
 8005208:	68e0      	ldr	r0, [r4, #12]
 800520a:	9b03      	ldr	r3, [sp, #12]
 800520c:	4298      	cmp	r0, r3
 800520e:	bfb8      	it	lt
 8005210:	4618      	movlt	r0, r3
 8005212:	e7a3      	b.n	800515c <_printf_i+0x130>
 8005214:	2301      	movs	r3, #1
 8005216:	464a      	mov	r2, r9
 8005218:	4639      	mov	r1, r7
 800521a:	4630      	mov	r0, r6
 800521c:	47c0      	blx	r8
 800521e:	3001      	adds	r0, #1
 8005220:	d09a      	beq.n	8005158 <_printf_i+0x12c>
 8005222:	3501      	adds	r5, #1
 8005224:	68e3      	ldr	r3, [r4, #12]
 8005226:	9a03      	ldr	r2, [sp, #12]
 8005228:	1a9b      	subs	r3, r3, r2
 800522a:	42ab      	cmp	r3, r5
 800522c:	dcf2      	bgt.n	8005214 <_printf_i+0x1e8>
 800522e:	e7eb      	b.n	8005208 <_printf_i+0x1dc>
 8005230:	2500      	movs	r5, #0
 8005232:	f104 0919 	add.w	r9, r4, #25
 8005236:	e7f5      	b.n	8005224 <_printf_i+0x1f8>
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1ac      	bne.n	8005196 <_printf_i+0x16a>
 800523c:	7803      	ldrb	r3, [r0, #0]
 800523e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005242:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005246:	e76c      	b.n	8005122 <_printf_i+0xf6>
 8005248:	08005605 	.word	0x08005605
 800524c:	08005616 	.word	0x08005616

08005250 <__sread>:
 8005250:	b510      	push	{r4, lr}
 8005252:	460c      	mov	r4, r1
 8005254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005258:	f000 f894 	bl	8005384 <_read_r>
 800525c:	2800      	cmp	r0, #0
 800525e:	bfab      	itete	ge
 8005260:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005262:	89a3      	ldrhlt	r3, [r4, #12]
 8005264:	181b      	addge	r3, r3, r0
 8005266:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800526a:	bfac      	ite	ge
 800526c:	6563      	strge	r3, [r4, #84]	; 0x54
 800526e:	81a3      	strhlt	r3, [r4, #12]
 8005270:	bd10      	pop	{r4, pc}

08005272 <__swrite>:
 8005272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005276:	461f      	mov	r7, r3
 8005278:	898b      	ldrh	r3, [r1, #12]
 800527a:	05db      	lsls	r3, r3, #23
 800527c:	4605      	mov	r5, r0
 800527e:	460c      	mov	r4, r1
 8005280:	4616      	mov	r6, r2
 8005282:	d505      	bpl.n	8005290 <__swrite+0x1e>
 8005284:	2302      	movs	r3, #2
 8005286:	2200      	movs	r2, #0
 8005288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800528c:	f000 f868 	bl	8005360 <_lseek_r>
 8005290:	89a3      	ldrh	r3, [r4, #12]
 8005292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800529a:	81a3      	strh	r3, [r4, #12]
 800529c:	4632      	mov	r2, r6
 800529e:	463b      	mov	r3, r7
 80052a0:	4628      	mov	r0, r5
 80052a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052a6:	f000 b817 	b.w	80052d8 <_write_r>

080052aa <__sseek>:
 80052aa:	b510      	push	{r4, lr}
 80052ac:	460c      	mov	r4, r1
 80052ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b2:	f000 f855 	bl	8005360 <_lseek_r>
 80052b6:	1c43      	adds	r3, r0, #1
 80052b8:	89a3      	ldrh	r3, [r4, #12]
 80052ba:	bf15      	itete	ne
 80052bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80052be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052c6:	81a3      	strheq	r3, [r4, #12]
 80052c8:	bf18      	it	ne
 80052ca:	81a3      	strhne	r3, [r4, #12]
 80052cc:	bd10      	pop	{r4, pc}

080052ce <__sclose>:
 80052ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d2:	f000 b813 	b.w	80052fc <_close_r>
	...

080052d8 <_write_r>:
 80052d8:	b538      	push	{r3, r4, r5, lr}
 80052da:	4c07      	ldr	r4, [pc, #28]	; (80052f8 <_write_r+0x20>)
 80052dc:	4605      	mov	r5, r0
 80052de:	4608      	mov	r0, r1
 80052e0:	4611      	mov	r1, r2
 80052e2:	2200      	movs	r2, #0
 80052e4:	6022      	str	r2, [r4, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	f7fb fbb0 	bl	8000a4c <_write>
 80052ec:	1c43      	adds	r3, r0, #1
 80052ee:	d102      	bne.n	80052f6 <_write_r+0x1e>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	b103      	cbz	r3, 80052f6 <_write_r+0x1e>
 80052f4:	602b      	str	r3, [r5, #0]
 80052f6:	bd38      	pop	{r3, r4, r5, pc}
 80052f8:	20004ab0 	.word	0x20004ab0

080052fc <_close_r>:
 80052fc:	b538      	push	{r3, r4, r5, lr}
 80052fe:	4c06      	ldr	r4, [pc, #24]	; (8005318 <_close_r+0x1c>)
 8005300:	2300      	movs	r3, #0
 8005302:	4605      	mov	r5, r0
 8005304:	4608      	mov	r0, r1
 8005306:	6023      	str	r3, [r4, #0]
 8005308:	f7fb fbcc 	bl	8000aa4 <_close>
 800530c:	1c43      	adds	r3, r0, #1
 800530e:	d102      	bne.n	8005316 <_close_r+0x1a>
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	b103      	cbz	r3, 8005316 <_close_r+0x1a>
 8005314:	602b      	str	r3, [r5, #0]
 8005316:	bd38      	pop	{r3, r4, r5, pc}
 8005318:	20004ab0 	.word	0x20004ab0

0800531c <_fstat_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	4c07      	ldr	r4, [pc, #28]	; (800533c <_fstat_r+0x20>)
 8005320:	2300      	movs	r3, #0
 8005322:	4605      	mov	r5, r0
 8005324:	4608      	mov	r0, r1
 8005326:	4611      	mov	r1, r2
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	f7fb fc0b 	bl	8000b44 <_fstat>
 800532e:	1c43      	adds	r3, r0, #1
 8005330:	d102      	bne.n	8005338 <_fstat_r+0x1c>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	b103      	cbz	r3, 8005338 <_fstat_r+0x1c>
 8005336:	602b      	str	r3, [r5, #0]
 8005338:	bd38      	pop	{r3, r4, r5, pc}
 800533a:	bf00      	nop
 800533c:	20004ab0 	.word	0x20004ab0

08005340 <_isatty_r>:
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	4c06      	ldr	r4, [pc, #24]	; (800535c <_isatty_r+0x1c>)
 8005344:	2300      	movs	r3, #0
 8005346:	4605      	mov	r5, r0
 8005348:	4608      	mov	r0, r1
 800534a:	6023      	str	r3, [r4, #0]
 800534c:	f7fb fb68 	bl	8000a20 <_isatty>
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	d102      	bne.n	800535a <_isatty_r+0x1a>
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	b103      	cbz	r3, 800535a <_isatty_r+0x1a>
 8005358:	602b      	str	r3, [r5, #0]
 800535a:	bd38      	pop	{r3, r4, r5, pc}
 800535c:	20004ab0 	.word	0x20004ab0

08005360 <_lseek_r>:
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	4c07      	ldr	r4, [pc, #28]	; (8005380 <_lseek_r+0x20>)
 8005364:	4605      	mov	r5, r0
 8005366:	4608      	mov	r0, r1
 8005368:	4611      	mov	r1, r2
 800536a:	2200      	movs	r2, #0
 800536c:	6022      	str	r2, [r4, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	f7fb fbaf 	bl	8000ad2 <_lseek>
 8005374:	1c43      	adds	r3, r0, #1
 8005376:	d102      	bne.n	800537e <_lseek_r+0x1e>
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	b103      	cbz	r3, 800537e <_lseek_r+0x1e>
 800537c:	602b      	str	r3, [r5, #0]
 800537e:	bd38      	pop	{r3, r4, r5, pc}
 8005380:	20004ab0 	.word	0x20004ab0

08005384 <_read_r>:
 8005384:	b538      	push	{r3, r4, r5, lr}
 8005386:	4c07      	ldr	r4, [pc, #28]	; (80053a4 <_read_r+0x20>)
 8005388:	4605      	mov	r5, r0
 800538a:	4608      	mov	r0, r1
 800538c:	4611      	mov	r1, r2
 800538e:	2200      	movs	r2, #0
 8005390:	6022      	str	r2, [r4, #0]
 8005392:	461a      	mov	r2, r3
 8005394:	f7fb fbae 	bl	8000af4 <_read>
 8005398:	1c43      	adds	r3, r0, #1
 800539a:	d102      	bne.n	80053a2 <_read_r+0x1e>
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	b103      	cbz	r3, 80053a2 <_read_r+0x1e>
 80053a0:	602b      	str	r3, [r5, #0]
 80053a2:	bd38      	pop	{r3, r4, r5, pc}
 80053a4:	20004ab0 	.word	0x20004ab0

080053a8 <_init>:
 80053a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053aa:	bf00      	nop
 80053ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ae:	bc08      	pop	{r3}
 80053b0:	469e      	mov	lr, r3
 80053b2:	4770      	bx	lr

080053b4 <_fini>:
 80053b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b6:	bf00      	nop
 80053b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ba:	bc08      	pop	{r3}
 80053bc:	469e      	mov	lr, r3
 80053be:	4770      	bx	lr
