
Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006208  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  080063a8  080063a8  000163a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006784  08006784  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006784  08006784  00016784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800678c  0800678c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800678c  0800678c  0001678c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006790  08006790  00016790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ad8  20000078  08006808  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004b50  08006808  00024b50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b15b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036ee  00000000  00000000  0003b1ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f88  00000000  00000000  0003e8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e00  00000000  00000000  0003f878  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b4a3  00000000  00000000  00040678  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001028e  00000000  00000000  0005bb1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093725  00000000  00000000  0006bda9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ff4ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004458  00000000  00000000  000ff54c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006390 	.word	0x08006390

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08006390 	.word	0x08006390

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000094 	.word	0x20000094
 80005b0:	200000e8 	.word	0x200000e8

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b09e      	sub	sp, #120	; 0x78
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fc97 	bl	8000eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f883 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f94b 	bl	800085c <MX_GPIO_Init>
  MX_SPI1_Init();
 80005c6:	f000 f8e9 	bl	800079c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 f91d 	bl	8000808 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 80005ce:	4833      	ldr	r0, [pc, #204]	; (800069c <main+0xe8>)
 80005d0:	f000 fa70 	bl	8000ab4 <RetargetInit>
  for(int i = 0; i < 500; i++) printf(" \r\n");
 80005d4:	2300      	movs	r3, #0
 80005d6:	677b      	str	r3, [r7, #116]	; 0x74
 80005d8:	e005      	b.n	80005e6 <main+0x32>
 80005da:	4831      	ldr	r0, [pc, #196]	; (80006a0 <main+0xec>)
 80005dc:	f004 fffe 	bl	80055dc <puts>
 80005e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005e2:	3301      	adds	r3, #1
 80005e4:	677b      	str	r3, [r7, #116]	; 0x74
 80005e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005ec:	dbf5      	blt.n	80005da <main+0x26>
  HAL_Delay(250);
 80005ee:	20fa      	movs	r0, #250	; 0xfa
 80005f0:	f000 fcee 	bl	8000fd0 <HAL_Delay>
  printf("Starting:\r\n");
 80005f4:	482b      	ldr	r0, [pc, #172]	; (80006a4 <main+0xf0>)
 80005f6:	f004 fff1 	bl	80055dc <puts>
  HAL_Delay(250);
 80005fa:	20fa      	movs	r0, #250	; 0xfa
 80005fc:	f000 fce8 	bl	8000fd0 <HAL_Delay>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ControlLogic */
  osThreadStaticDef(ControlLogic, startControlLogic, osPriorityNormal, 0, 128, ControlLogicBuffer, &ControlLogicControlBlock);
 8000600:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <main+0xf4>)
 8000602:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000606:	461d      	mov	r5, r3
 8000608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000610:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlLogicHandle = osThreadCreate(osThread(ControlLogic), NULL);
 8000614:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fea3 	bl	8003366 <osThreadCreate>
 8000620:	4602      	mov	r2, r0
 8000622:	4b22      	ldr	r3, [pc, #136]	; (80006ac <main+0xf8>)
 8000624:	601a      	str	r2, [r3, #0]

  /* definition and creation of Acquisition */
  osThreadStaticDef(Acquisition, startAcquisition, osPriorityRealtime, 0, 128, AcquisitionBuffer, &AcquisitionControlBlock);
 8000626:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <main+0xfc>)
 8000628:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800062c:	461d      	mov	r5, r3
 800062e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000632:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AcquisitionHandle = osThreadCreate(osThread(Acquisition), NULL);
 800063a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f002 fe90 	bl	8003366 <osThreadCreate>
 8000646:	4602      	mov	r2, r0
 8000648:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <main+0x100>)
 800064a:	601a      	str	r2, [r3, #0]

  /* definition and creation of Processing */
  osThreadStaticDef(Processing, startProcessing, osPriorityNormal, 0, 128, ProcessingBuffer, &ProcessingControlBlock);
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <main+0x104>)
 800064e:	f107 0420 	add.w	r4, r7, #32
 8000652:	461d      	mov	r5, r3
 8000654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000658:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ProcessingHandle = osThreadCreate(osThread(Processing), NULL);
 8000660:	f107 0320 	add.w	r3, r7, #32
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f002 fe7d 	bl	8003366 <osThreadCreate>
 800066c:	4602      	mov	r2, r0
 800066e:	4b13      	ldr	r3, [pc, #76]	; (80006bc <main+0x108>)
 8000670:	601a      	str	r2, [r3, #0]

  /* definition and creation of Monitoring */
  osThreadStaticDef(Monitoring, startMonitoring, osPriorityLow, 0, 128, MonitoringBuffer, &MonitoringControlBlock);
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <main+0x10c>)
 8000674:	1d3c      	adds	r4, r7, #4
 8000676:	461d      	mov	r5, r3
 8000678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000680:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MonitoringHandle = osThreadCreate(osThread(Monitoring), NULL);
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f002 fe6c 	bl	8003366 <osThreadCreate>
 800068e:	4602      	mov	r2, r0
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <main+0x110>)
 8000692:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000694:	f002 fe60 	bl	8003358 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000698:	e7fe      	b.n	8000698 <main+0xe4>
 800069a:	bf00      	nop
 800069c:	20004810 	.word	0x20004810
 80006a0:	080063a8 	.word	0x080063a8
 80006a4:	080063ac 	.word	0x080063ac
 80006a8:	080063c8 	.word	0x080063c8
 80006ac:	200045b4 	.word	0x200045b4
 80006b0:	080063f0 	.word	0x080063f0
 80006b4:	200045b0 	.word	0x200045b0
 80006b8:	08006418 	.word	0x08006418
 80006bc:	20004554 	.word	0x20004554
 80006c0:	08006440 	.word	0x08006440
 80006c4:	200045ac 	.word	0x200045ac

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f004 fe5c 	bl	8005394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a27      	ldr	r2, [pc, #156]	; (8000794 <SystemClock_Config+0xcc>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemClock_Config+0xd0>)
 8000712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000738:	2310      	movs	r3, #16
 800073a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800073c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000740:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000742:	2304      	movs	r3, #4
 8000744:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000746:	2304      	movs	r3, #4
 8000748:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	4618      	mov	r0, r3
 8000750:	f000 fee2 	bl	8001518 <HAL_RCC_OscConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800075a:	f000 f9a7 	bl	8000aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	230f      	movs	r3, #15
 8000760:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2302      	movs	r3, #2
 8000764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2102      	movs	r1, #2
 800077a:	4618      	mov	r0, r3
 800077c:	f001 f93c 	bl	80019f8 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000786:	f000 f991 	bl	8000aac <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	; 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_SPI1_Init+0x64>)
 80007a2:	4a18      	ldr	r2, [pc, #96]	; (8000804 <MX_SPI1_Init+0x68>)
 80007a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_SPI1_Init+0x64>)
 80007a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_SPI1_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_SPI1_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_SPI1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_SPI1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_SPI1_Init+0x64>)
 80007c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_SPI1_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_SPI1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_SPI1_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_SPI1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_SPI1_Init+0x64>)
 80007e8:	220a      	movs	r2, #10
 80007ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_SPI1_Init+0x64>)
 80007ee:	f001 faf5 	bl	8001ddc <HAL_SPI_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007f8:	f000 f958 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200045b8 	.word	0x200045b8
 8000804:	40013000 	.word	0x40013000

08000808 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <MX_USART2_UART_Init+0x50>)
 8000810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000840:	f002 f820 	bl	8002884 <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800084a:	f000 f92f 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20004810 	.word	0x20004810
 8000858:	40004400 	.word	0x40004400

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b41      	ldr	r3, [pc, #260]	; (800097c <MX_GPIO_Init+0x120>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a40      	ldr	r2, [pc, #256]	; (800097c <MX_GPIO_Init+0x120>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b3e      	ldr	r3, [pc, #248]	; (800097c <MX_GPIO_Init+0x120>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b3a      	ldr	r3, [pc, #232]	; (800097c <MX_GPIO_Init+0x120>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a39      	ldr	r2, [pc, #228]	; (800097c <MX_GPIO_Init+0x120>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b37      	ldr	r3, [pc, #220]	; (800097c <MX_GPIO_Init+0x120>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	4b33      	ldr	r3, [pc, #204]	; (800097c <MX_GPIO_Init+0x120>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a32      	ldr	r2, [pc, #200]	; (800097c <MX_GPIO_Init+0x120>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b30      	ldr	r3, [pc, #192]	; (800097c <MX_GPIO_Init+0x120>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b2c      	ldr	r3, [pc, #176]	; (800097c <MX_GPIO_Init+0x120>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a2b      	ldr	r2, [pc, #172]	; (800097c <MX_GPIO_Init+0x120>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <MX_GPIO_Init+0x120>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	4826      	ldr	r0, [pc, #152]	; (8000980 <MX_GPIO_Init+0x124>)
 80008e8:	f000 fdfc 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HOLD_GPIO_Port, HOLD_Pin, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008f2:	4824      	ldr	r0, [pc, #144]	; (8000984 <MX_GPIO_Init+0x128>)
 80008f4:	f000 fdf6 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2140      	movs	r1, #64	; 0x40
 80008fc:	4822      	ldr	r0, [pc, #136]	; (8000988 <MX_GPIO_Init+0x12c>)
 80008fe:	f000 fdf1 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000902:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000908:	4b20      	ldr	r3, [pc, #128]	; (800098c <MX_GPIO_Init+0x130>)
 800090a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	481a      	ldr	r0, [pc, #104]	; (8000980 <MX_GPIO_Init+0x124>)
 8000918:	f000 fc62 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : WP_Pin */
  GPIO_InitStruct.Pin = WP_Pin;
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WP_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	4813      	ldr	r0, [pc, #76]	; (8000980 <MX_GPIO_Init+0x124>)
 8000934:	f000 fc54 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HOLD_Pin */
  GPIO_InitStruct.Pin = HOLD_Pin;
 8000938:	f44f 7300 	mov.w	r3, #512	; 0x200
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HOLD_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	; (8000984 <MX_GPIO_Init+0x128>)
 8000952:	f000 fc45 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS3_Pin */
  GPIO_InitStruct.Pin = CS3_Pin;
 8000956:	2340      	movs	r3, #64	; 0x40
 8000958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS3_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	4806      	ldr	r0, [pc, #24]	; (8000988 <MX_GPIO_Init+0x12c>)
 800096e:	f000 fc37 	bl	80011e0 <HAL_GPIO_Init>

}
 8000972:	bf00      	nop
 8000974:	3728      	adds	r7, #40	; 0x28
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800
 8000980:	40020800 	.word	0x40020800
 8000984:	40020000 	.word	0x40020000
 8000988:	40020400 	.word	0x40020400
 800098c:	10210000 	.word	0x10210000

08000990 <startControlLogic>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startControlLogic */
void startControlLogic(void const * argument)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	static TickType_t time_init = 0;
	uint32_t rowAddr = 0x00000000;
 8000998:	2300      	movs	r3, #0
 800099a:	61bb      	str	r3, [r7, #24]
	uint16_t colAddr = 0x0000;
 800099c:	2300      	movs	r3, #0
 800099e:	82fb      	strh	r3, [r7, #22]
	uint8_t writeData[4] = {0xA1, 0xB1, 0xC1, 0xD1};
 80009a0:	4b24      	ldr	r3, [pc, #144]	; (8000a34 <startControlLogic+0xa4>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	613b      	str	r3, [r7, #16]
	uint8_t readData[4] = {0x00, 0x00, 0x00, 0x00};
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
	uint8_t size = 4;
 80009aa:	2304      	movs	r3, #4
 80009ac:	757b      	strb	r3, [r7, #21]
	uint8_t feature = 0x00;
 80009ae:	2300      	movs	r3, #0
 80009b0:	753b      	strb	r3, [r7, #20]


	HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2180      	movs	r1, #128	; 0x80
 80009b6:	4820      	ldr	r0, [pc, #128]	; (8000a38 <startControlLogic+0xa8>)
 80009b8:	f000 fd94 	bl	80014e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HOLD_GPIO_Port, HOLD_Pin, GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c2:	481e      	ldr	r0, [pc, #120]	; (8000a3c <startControlLogic+0xac>)
 80009c4:	f000 fd8e 	bl	80014e4 <HAL_GPIO_WritePin>
	feature = getFeature(0xB0);
	printf("%2X ", feature);
	feature = getFeature(0xC0);
	printf("%2X ", feature);*/

	nandBufferLoad(rowAddr);
 80009c8:	69b8      	ldr	r0, [r7, #24]
 80009ca:	f004 f95b 	bl	8004c84 <nandBufferLoad>
	writeEnable();
 80009ce:	f004 fa6b 	bl	8004ea8 <writeEnable>
  /* Infinite loop */
	while(ENABLE_CONTROL_LOGIC) {

		if(printDiv) printf("-------------\r\n");
 80009d2:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <startControlLogic+0xb0>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d002      	beq.n	80009e0 <startControlLogic+0x50>
 80009da:	481a      	ldr	r0, [pc, #104]	; (8000a44 <startControlLogic+0xb4>)
 80009dc:	f004 fdfe 	bl	80055dc <puts>
		//toggleLed();

		nandWrite(rowAddr, colAddr, writeData, size);
 80009e0:	8af9      	ldrh	r1, [r7, #22]
 80009e2:	7d7b      	ldrb	r3, [r7, #21]
 80009e4:	f107 0210 	add.w	r2, r7, #16
 80009e8:	69b8      	ldr	r0, [r7, #24]
 80009ea:	f004 fa3e 	bl	8004e6a <nandWrite>
		nandRead(rowAddr, colAddr, readData, size);
 80009ee:	8af9      	ldrh	r1, [r7, #22]
 80009f0:	7d7b      	ldrb	r3, [r7, #21]
 80009f2:	f107 020c 	add.w	r2, r7, #12
 80009f6:	69b8      	ldr	r0, [r7, #24]
 80009f8:	f004 fa20 	bl	8004e3c <nandRead>
		//feature = getFeature(0xA0);
		//nandBufferWrite(colAddr, writeData, size);
		//nandBufferRead(colAddr, readData, size);
		for(int i = 0; i < size; i++){
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
 8000a00:	e00b      	b.n	8000a1a <startControlLogic+0x8a>
			printf("%X ", readData[i]);
 8000a02:	f107 020c 	add.w	r2, r7, #12
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	4413      	add	r3, r2
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480e      	ldr	r0, [pc, #56]	; (8000a48 <startControlLogic+0xb8>)
 8000a10:	f004 fd70 	bl	80054f4 <iprintf>
		for(int i = 0; i < size; i++){
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	3301      	adds	r3, #1
 8000a18:	61fb      	str	r3, [r7, #28]
 8000a1a:	7d7b      	ldrb	r3, [r7, #21]
 8000a1c:	69fa      	ldr	r2, [r7, #28]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	dbef      	blt.n	8000a02 <startControlLogic+0x72>
		}
		printf("\n\r");
 8000a22:	480a      	ldr	r0, [pc, #40]	; (8000a4c <startControlLogic+0xbc>)
 8000a24:	f004 fd66 	bl	80054f4 <iprintf>

		vTaskDelayUntil(&time_init, CONTROL_LOGIC_TASK_DELAY);
 8000a28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <startControlLogic+0xc0>)
 8000a2e:	f002 ffb7 	bl	80039a0 <vTaskDelayUntil>
	while(ENABLE_CONTROL_LOGIC) {
 8000a32:	e7ce      	b.n	80009d2 <startControlLogic+0x42>
 8000a34:	08006474 	.word	0x08006474
 8000a38:	40020800 	.word	0x40020800
 8000a3c:	40020000 	.word	0x40020000
 8000a40:	200002e8 	.word	0x200002e8
 8000a44:	0800645c 	.word	0x0800645c
 8000a48:	0800646c 	.word	0x0800646c
 8000a4c:	08006470 	.word	0x08006470
 8000a50:	200002ec 	.word	0x200002ec

08000a54 <startAcquisition>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAcquisition */
void startAcquisition(void const * argument)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startAcquisition */
	static TickType_t time_init = 0;

	setup_A();
 8000a5c:	f004 fa80 	bl	8004f60 <setup_A>
	printf("\n\n");
 8000a60:	4805      	ldr	r0, [pc, #20]	; (8000a78 <startAcquisition+0x24>)
 8000a62:	f004 fdbb 	bl	80055dc <puts>
  /* Infinite loop */
	while(ENABLE_ACQUISITION) {
 8000a66:	bf00      	nop
		}
		if(time_init > 4000) break;
	}
	//printf("%d\n\r",time_init);
	if(ENABLE_ACQUISITION) printDiv = false;
	vTaskDelete(NULL);
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f002 ff0b 	bl	8003884 <vTaskDelete>

  /* USER CODE END startAcquisition */
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	08006478 	.word	0x08006478

08000a7c <startProcessing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startProcessing */
void startProcessing(void const * argument)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	extern bool imuNominal;
	extern bool alaNominal;
	extern bool bmpNominal;
	extern bool gpsNominal;
  /* Infinite loop */
	while(ENABLE_PROCESSING) {
 8000a84:	bf00      	nop
			imuNominal = false;
			alaNominal = false;
		}
		vTaskDelayUntil(&time_init, PROCESSING_TASK_DELAY);
	}
	vTaskDelete(NULL);
 8000a86:	2000      	movs	r0, #0
 8000a88:	f002 fefc 	bl	8003884 <vTaskDelete>
  /* USER CODE END startProcessing */
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <startMonitoring>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMonitoring */
void startMonitoring(void const * argument)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMonitoring */
	static GPIO_PinState pressed = GPIO_PIN_SET;
	static int counter = 0;
	static TickType_t time_init = 0;
  /* Infinite loop */
	while(ENABLE_MONITORING) {
 8000a9c:	bf00      	nop


		vTaskDelayUntil(&time_init, MONITORING_TASK_DELAY);
	}

	vTaskDelete(NULL);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f002 fef0 	bl	8003884 <vTaskDelete>
  /* USER CODE END startMonitoring */
}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <Error_Handler+0x6>

08000ab4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <RetargetInit+0x28>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <RetargetInit+0x2c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	6898      	ldr	r0, [r3, #8]
 8000ac8:	2300      	movs	r3, #0
 8000aca:	2202      	movs	r2, #2
 8000acc:	2100      	movs	r1, #0
 8000ace:	f004 fd9d 	bl	800560c <setvbuf>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20004a50 	.word	0x20004a50
 8000ae0:	20000010 	.word	0x20000010

08000ae4 <_isatty>:

int _isatty(int fd) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db04      	blt.n	8000afc <_isatty+0x18>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	dc01      	bgt.n	8000afc <_isatty+0x18>
    return 1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	e005      	b.n	8000b08 <_isatty+0x24>

  errno = EBADF;
 8000afc:	f004 fc18 	bl	8005330 <__errno>
 8000b00:	4602      	mov	r2, r0
 8000b02:	2309      	movs	r3, #9
 8000b04:	6013      	str	r3, [r2, #0]
  return 0;
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <_write>:

int _write(int fd, char* ptr, int len) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d002      	beq.n	8000b28 <_write+0x18>
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d111      	bne.n	8000b4c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <_write+0x54>)
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
 8000b34:	68b9      	ldr	r1, [r7, #8]
 8000b36:	f001 fef2 	bl	800291e <HAL_UART_Transmit>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000b3e:	7dfb      	ldrb	r3, [r7, #23]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d101      	bne.n	8000b48 <_write+0x38>
      return len;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	e008      	b.n	8000b5a <_write+0x4a>
    else
      return EIO;
 8000b48:	2305      	movs	r3, #5
 8000b4a:	e006      	b.n	8000b5a <_write+0x4a>
  }
  errno = EBADF;
 8000b4c:	f004 fbf0 	bl	8005330 <__errno>
 8000b50:	4602      	mov	r2, r0
 8000b52:	2309      	movs	r3, #9
 8000b54:	6013      	str	r3, [r2, #0]
  return -1;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20004a50 	.word	0x20004a50

08000b68 <_close>:

int _close(int fd) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	db04      	blt.n	8000b80 <_close+0x18>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	dc01      	bgt.n	8000b80 <_close+0x18>
    return 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	e006      	b.n	8000b8e <_close+0x26>

  errno = EBADF;
 8000b80:	f004 fbd6 	bl	8005330 <__errno>
 8000b84:	4602      	mov	r2, r0
 8000b86:	2309      	movs	r3, #9
 8000b88:	6013      	str	r3, [r2, #0]
  return -1;
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b084      	sub	sp, #16
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	60f8      	str	r0, [r7, #12]
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000ba2:	f004 fbc5 	bl	8005330 <__errno>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	2309      	movs	r3, #9
 8000baa:	6013      	str	r3, [r2, #0]
  return -1;
 8000bac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_read>:

int _read(int fd, char* ptr, int len) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d110      	bne.n	8000bec <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <_read+0x4c>)
 8000bcc:	6818      	ldr	r0, [r3, #0]
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	f001 ff3b 	bl	8002a50 <HAL_UART_Receive>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000bde:	7dfb      	ldrb	r3, [r7, #23]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d101      	bne.n	8000be8 <_read+0x30>
      return 1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e008      	b.n	8000bfa <_read+0x42>
    else
      return EIO;
 8000be8:	2305      	movs	r3, #5
 8000bea:	e006      	b.n	8000bfa <_read+0x42>
  }
  errno = EBADF;
 8000bec:	f004 fba0 	bl	8005330 <__errno>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	2309      	movs	r3, #9
 8000bf4:	6013      	str	r3, [r2, #0]
  return -1;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20004a50 	.word	0x20004a50

08000c08 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	db08      	blt.n	8000c2a <_fstat+0x22>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	dc05      	bgt.n	8000c2a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c24:	605a      	str	r2, [r3, #4]
    return 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	e005      	b.n	8000c36 <_fstat+0x2e>
  }

  errno = EBADF;
 8000c2a:	f004 fb81 	bl	8005330 <__errno>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	2309      	movs	r3, #9
 8000c32:	6013      	str	r3, [r2, #0]
  return 0;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_MspInit+0x54>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	4a11      	ldr	r2, [pc, #68]	; (8000c94 <HAL_MspInit+0x54>)
 8000c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c54:	6453      	str	r3, [r2, #68]	; 0x44
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <HAL_MspInit+0x54>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <HAL_MspInit+0x54>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <HAL_MspInit+0x54>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	6413      	str	r3, [r2, #64]	; 0x40
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_MspInit+0x54>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	210f      	movs	r1, #15
 8000c82:	f06f 0001 	mvn.w	r0, #1
 8000c86:	f000 fa82 	bl	800118e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800

08000c98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <HAL_SPI_MspInit+0x84>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d12b      	bne.n	8000d12 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_SPI_MspInit+0x88>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <HAL_SPI_MspInit+0x88>)
 8000cc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_SPI_MspInit+0x88>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_SPI_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <HAL_SPI_MspInit+0x88>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_SPI_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cf2:	23e0      	movs	r3, #224	; 0xe0
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d02:	2305      	movs	r3, #5
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <HAL_SPI_MspInit+0x8c>)
 8000d0e:	f000 fa67 	bl	80011e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40013000 	.word	0x40013000
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000

08000d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a19      	ldr	r2, [pc, #100]	; (8000dac <HAL_UART_MspInit+0x84>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d12b      	bne.n	8000da2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a10      	ldr	r2, [pc, #64]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d82:	230c      	movs	r3, #12
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d92:	2307      	movs	r3, #7
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <HAL_UART_MspInit+0x8c>)
 8000d9e:	f000 fa1f 	bl	80011e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	; 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40004400 	.word	0x40004400
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020000 	.word	0x40020000

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <NMI_Handler+0x4>

08000dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <HardFault_Handler+0x4>

08000dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <MemManage_Handler+0x4>

08000dca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <BusFault_Handler+0x4>

08000dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <UsageFault_Handler+0x4>

08000dd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de8:	f000 f8d2 	bl	8000f90 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000dec:	f003 f972 	bl	80040d4 <xTaskGetSchedulerState>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d001      	beq.n	8000dfa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000df6:	f003 fba7 	bl	8004548 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e08:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <_sbrk+0x5c>)
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <_sbrk+0x60>)
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <_sbrk+0x64>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <_sbrk+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d207      	bcs.n	8000e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e30:	f004 fa7e 	bl	8005330 <__errno>
 8000e34:	4602      	mov	r2, r0
 8000e36:	230c      	movs	r3, #12
 8000e38:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	e009      	b.n	8000e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <_sbrk+0x64>)
 8000e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20020000 	.word	0x20020000
 8000e60:	00000400 	.word	0x00000400
 8000e64:	200002f0 	.word	0x200002f0
 8000e68:	20004b50 	.word	0x20004b50

08000e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <SystemInit+0x28>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e76:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <SystemInit+0x28>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <SystemInit+0x28>)
 8000e82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e86:	609a      	str	r2, [r3, #8]
#endif
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e9e:	e003      	b.n	8000ea8 <LoopCopyDataInit>

08000ea0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ea2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ea4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ea6:	3104      	adds	r1, #4

08000ea8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ea8:	480b      	ldr	r0, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000eac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000eae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000eb0:	d3f6      	bcc.n	8000ea0 <CopyDataInit>
  ldr  r2, =_sbss
 8000eb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000eb4:	e002      	b.n	8000ebc <LoopFillZerobss>

08000eb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000eb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000eb8:	f842 3b04 	str.w	r3, [r2], #4

08000ebc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ebe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ec0:	d3f9      	bcc.n	8000eb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ec2:	f7ff ffd3 	bl	8000e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f004 fa39 	bl	800533c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eca:	f7ff fb73 	bl	80005b4 <main>
  bx  lr    
 8000ece:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ed0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ed4:	08006794 	.word	0x08006794
  ldr  r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000edc:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000ee0:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000ee4:	20004b50 	.word	0x20004b50

08000ee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC_IRQHandler>
	...

08000eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <HAL_Init+0x40>)
 8000ef6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_Init+0x40>)
 8000f02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <HAL_Init+0x40>)
 8000f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f14:	2003      	movs	r0, #3
 8000f16:	f000 f92f 	bl	8001178 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1a:	200f      	movs	r0, #15
 8000f1c:	f000 f808 	bl	8000f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f20:	f7ff fe8e 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023c00 	.word	0x40023c00

08000f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_InitTick+0x54>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_InitTick+0x58>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f939 	bl	80011c6 <HAL_SYSTICK_Config>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00e      	b.n	8000f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	d80a      	bhi.n	8000f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f64:	2200      	movs	r2, #0
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f000 f90f 	bl	800118e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f70:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <HAL_InitTick+0x5c>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e000      	b.n	8000f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000000 	.word	0x20000000
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000004 	.word	0x20000004

08000f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x20>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x24>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_IncTick+0x24>)
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	20004a54 	.word	0x20004a54

08000fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <HAL_GetTick+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20004a54 	.word	0x20004a54

08000fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd8:	f7ff ffee 	bl	8000fb8 <HAL_GetTick>
 8000fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe8:	d005      	beq.n	8000ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <HAL_Delay+0x40>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ff6:	bf00      	nop
 8000ff8:	f7ff ffde 	bl	8000fb8 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	429a      	cmp	r2, r3
 8001006:	d8f7      	bhi.n	8000ff8 <HAL_Delay+0x28>
  {
  }
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000008 	.word	0x20000008

08001014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <__NVIC_SetPriorityGrouping+0x44>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001030:	4013      	ands	r3, r2
 8001032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800103c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001046:	4a04      	ldr	r2, [pc, #16]	; (8001058 <__NVIC_SetPriorityGrouping+0x44>)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	60d3      	str	r3, [r2, #12]
}
 800104c:	bf00      	nop
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <__NVIC_GetPriorityGrouping+0x18>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	0a1b      	lsrs	r3, r3, #8
 8001066:	f003 0307 	and.w	r3, r3, #7
}
 800106a:	4618      	mov	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	490c      	ldr	r1, [pc, #48]	; (80010c4 <__NVIC_SetPriority+0x4c>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	440b      	add	r3, r1
 800109c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a0:	e00a      	b.n	80010b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4908      	ldr	r1, [pc, #32]	; (80010c8 <__NVIC_SetPriority+0x50>)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	3b04      	subs	r3, #4
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	440b      	add	r3, r1
 80010b6:	761a      	strb	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 0307 	rsb	r3, r3, #7
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	bf28      	it	cs
 80010ea:	2304      	movcs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d902      	bls.n	80010fc <NVIC_EncodePriority+0x30>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3b03      	subs	r3, #3
 80010fa:	e000      	b.n	80010fe <NVIC_EncodePriority+0x32>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001114:	f04f 31ff 	mov.w	r1, #4294967295
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43d9      	mvns	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4313      	orrs	r3, r2
         );
}
 8001126:	4618      	mov	r0, r3
 8001128:	3724      	adds	r7, #36	; 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001144:	d301      	bcc.n	800114a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001146:	2301      	movs	r3, #1
 8001148:	e00f      	b.n	800116a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <SysTick_Config+0x40>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001152:	210f      	movs	r1, #15
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f7ff ff8e 	bl	8001078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <SysTick_Config+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <SysTick_Config+0x40>)
 8001164:	2207      	movs	r2, #7
 8001166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	e000e010 	.word	0xe000e010

08001178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff47 	bl	8001014 <__NVIC_SetPriorityGrouping>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a0:	f7ff ff5c 	bl	800105c <__NVIC_GetPriorityGrouping>
 80011a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	68b9      	ldr	r1, [r7, #8]
 80011aa:	6978      	ldr	r0, [r7, #20]
 80011ac:	f7ff ff8e 	bl	80010cc <NVIC_EncodePriority>
 80011b0:	4602      	mov	r2, r0
 80011b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff5d 	bl	8001078 <__NVIC_SetPriority>
}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ffb0 	bl	8001134 <SysTick_Config>
 80011d4:	4603      	mov	r3, r0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
 80011fa:	e159      	b.n	80014b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011fc:	2201      	movs	r2, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	429a      	cmp	r2, r3
 8001216:	f040 8148 	bne.w	80014aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d00b      	beq.n	800123a <HAL_GPIO_Init+0x5a>
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d007      	beq.n	800123a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800122e:	2b11      	cmp	r3, #17
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b12      	cmp	r3, #18
 8001238:	d130      	bne.n	800129c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	2203      	movs	r2, #3
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001270:	2201      	movs	r2, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f003 0201 	and.w	r2, r3, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0xfc>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b12      	cmp	r3, #18
 80012da:	d123      	bne.n	8001324 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	08da      	lsrs	r2, r3, #3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3208      	adds	r2, #8
 80012e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	220f      	movs	r2, #15
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	691a      	ldr	r2, [r3, #16]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	08da      	lsrs	r2, r3, #3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3208      	adds	r2, #8
 800131e:	69b9      	ldr	r1, [r7, #24]
 8001320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0203 	and.w	r2, r3, #3
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 80a2 	beq.w	80014aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b56      	ldr	r3, [pc, #344]	; (80014c4 <HAL_GPIO_Init+0x2e4>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	4a55      	ldr	r2, [pc, #340]	; (80014c4 <HAL_GPIO_Init+0x2e4>)
 8001370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001374:	6453      	str	r3, [r2, #68]	; 0x44
 8001376:	4b53      	ldr	r3, [pc, #332]	; (80014c4 <HAL_GPIO_Init+0x2e4>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001382:	4a51      	ldr	r2, [pc, #324]	; (80014c8 <HAL_GPIO_Init+0x2e8>)
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	089b      	lsrs	r3, r3, #2
 8001388:	3302      	adds	r3, #2
 800138a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	220f      	movs	r2, #15
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a48      	ldr	r2, [pc, #288]	; (80014cc <HAL_GPIO_Init+0x2ec>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d019      	beq.n	80013e2 <HAL_GPIO_Init+0x202>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a47      	ldr	r2, [pc, #284]	; (80014d0 <HAL_GPIO_Init+0x2f0>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d013      	beq.n	80013de <HAL_GPIO_Init+0x1fe>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a46      	ldr	r2, [pc, #280]	; (80014d4 <HAL_GPIO_Init+0x2f4>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d00d      	beq.n	80013da <HAL_GPIO_Init+0x1fa>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a45      	ldr	r2, [pc, #276]	; (80014d8 <HAL_GPIO_Init+0x2f8>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d007      	beq.n	80013d6 <HAL_GPIO_Init+0x1f6>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a44      	ldr	r2, [pc, #272]	; (80014dc <HAL_GPIO_Init+0x2fc>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_GPIO_Init+0x1f2>
 80013ce:	2304      	movs	r3, #4
 80013d0:	e008      	b.n	80013e4 <HAL_GPIO_Init+0x204>
 80013d2:	2307      	movs	r3, #7
 80013d4:	e006      	b.n	80013e4 <HAL_GPIO_Init+0x204>
 80013d6:	2303      	movs	r3, #3
 80013d8:	e004      	b.n	80013e4 <HAL_GPIO_Init+0x204>
 80013da:	2302      	movs	r3, #2
 80013dc:	e002      	b.n	80013e4 <HAL_GPIO_Init+0x204>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <HAL_GPIO_Init+0x204>
 80013e2:	2300      	movs	r3, #0
 80013e4:	69fa      	ldr	r2, [r7, #28]
 80013e6:	f002 0203 	and.w	r2, r2, #3
 80013ea:	0092      	lsls	r2, r2, #2
 80013ec:	4093      	lsls	r3, r2
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f4:	4934      	ldr	r1, [pc, #208]	; (80014c8 <HAL_GPIO_Init+0x2e8>)
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	089b      	lsrs	r3, r3, #2
 80013fa:	3302      	adds	r3, #2
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001402:	4b37      	ldr	r3, [pc, #220]	; (80014e0 <HAL_GPIO_Init+0x300>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001426:	4a2e      	ldr	r2, [pc, #184]	; (80014e0 <HAL_GPIO_Init+0x300>)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800142c:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <HAL_GPIO_Init+0x300>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001450:	4a23      	ldr	r2, [pc, #140]	; (80014e0 <HAL_GPIO_Init+0x300>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001456:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <HAL_GPIO_Init+0x300>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800147a:	4a19      	ldr	r2, [pc, #100]	; (80014e0 <HAL_GPIO_Init+0x300>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <HAL_GPIO_Init+0x300>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a4:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <HAL_GPIO_Init+0x300>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3301      	adds	r3, #1
 80014ae:	61fb      	str	r3, [r7, #28]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	2b0f      	cmp	r3, #15
 80014b4:	f67f aea2 	bls.w	80011fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014b8:	bf00      	nop
 80014ba:	3724      	adds	r7, #36	; 0x24
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40013800 	.word	0x40013800
 80014cc:	40020000 	.word	0x40020000
 80014d0:	40020400 	.word	0x40020400
 80014d4:	40020800 	.word	0x40020800
 80014d8:	40020c00 	.word	0x40020c00
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40013c00 	.word	0x40013c00

080014e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
 80014f0:	4613      	mov	r3, r2
 80014f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f4:	787b      	ldrb	r3, [r7, #1]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001500:	e003      	b.n	800150a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001502:	887b      	ldrh	r3, [r7, #2]
 8001504:	041a      	lsls	r2, r3, #16
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	619a      	str	r2, [r3, #24]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e25b      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d075      	beq.n	8001622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001536:	4ba3      	ldr	r3, [pc, #652]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b04      	cmp	r3, #4
 8001540:	d00c      	beq.n	800155c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001542:	4ba0      	ldr	r3, [pc, #640]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800154a:	2b08      	cmp	r3, #8
 800154c:	d112      	bne.n	8001574 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800154e:	4b9d      	ldr	r3, [pc, #628]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800155a:	d10b      	bne.n	8001574 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155c:	4b99      	ldr	r3, [pc, #612]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d05b      	beq.n	8001620 <HAL_RCC_OscConfig+0x108>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d157      	bne.n	8001620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e236      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157c:	d106      	bne.n	800158c <HAL_RCC_OscConfig+0x74>
 800157e:	4b91      	ldr	r3, [pc, #580]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a90      	ldr	r2, [pc, #576]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e01d      	b.n	80015c8 <HAL_RCC_OscConfig+0xb0>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x98>
 8001596:	4b8b      	ldr	r3, [pc, #556]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a8a      	ldr	r2, [pc, #552]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 800159c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	4b88      	ldr	r3, [pc, #544]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a87      	ldr	r2, [pc, #540]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 80015a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e00b      	b.n	80015c8 <HAL_RCC_OscConfig+0xb0>
 80015b0:	4b84      	ldr	r3, [pc, #528]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a83      	ldr	r2, [pc, #524]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 80015b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b81      	ldr	r3, [pc, #516]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a80      	ldr	r2, [pc, #512]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 80015c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d013      	beq.n	80015f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff fcf2 	bl	8000fb8 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff fcee 	bl	8000fb8 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b64      	cmp	r3, #100	; 0x64
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e1fb      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	4b76      	ldr	r3, [pc, #472]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0xc0>
 80015f6:	e014      	b.n	8001622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fcde 	bl	8000fb8 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff fcda 	bl	8000fb8 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	; 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e1e7      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001612:	4b6c      	ldr	r3, [pc, #432]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0xe8>
 800161e:	e000      	b.n	8001622 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d063      	beq.n	80016f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800162e:	4b65      	ldr	r3, [pc, #404]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00b      	beq.n	8001652 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800163a:	4b62      	ldr	r3, [pc, #392]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001642:	2b08      	cmp	r3, #8
 8001644:	d11c      	bne.n	8001680 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001646:	4b5f      	ldr	r3, [pc, #380]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d116      	bne.n	8001680 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001652:	4b5c      	ldr	r3, [pc, #368]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d005      	beq.n	800166a <HAL_RCC_OscConfig+0x152>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d001      	beq.n	800166a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e1bb      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166a:	4b56      	ldr	r3, [pc, #344]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4952      	ldr	r1, [pc, #328]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167e:	e03a      	b.n	80016f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d020      	beq.n	80016ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001688:	4b4f      	ldr	r3, [pc, #316]	; (80017c8 <HAL_RCC_OscConfig+0x2b0>)
 800168a:	2201      	movs	r2, #1
 800168c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7ff fc93 	bl	8000fb8 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001696:	f7ff fc8f 	bl	8000fb8 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e19c      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a8:	4b46      	ldr	r3, [pc, #280]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b4:	4b43      	ldr	r3, [pc, #268]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4940      	ldr	r1, [pc, #256]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	600b      	str	r3, [r1, #0]
 80016c8:	e015      	b.n	80016f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ca:	4b3f      	ldr	r3, [pc, #252]	; (80017c8 <HAL_RCC_OscConfig+0x2b0>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fc72 	bl	8000fb8 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d8:	f7ff fc6e 	bl	8000fb8 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e17b      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ea:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d030      	beq.n	8001764 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d016      	beq.n	8001738 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170a:	4b30      	ldr	r3, [pc, #192]	; (80017cc <HAL_RCC_OscConfig+0x2b4>)
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001710:	f7ff fc52 	bl	8000fb8 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001718:	f7ff fc4e 	bl	8000fb8 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e15b      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172a:	4b26      	ldr	r3, [pc, #152]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 800172c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0x200>
 8001736:	e015      	b.n	8001764 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001738:	4b24      	ldr	r3, [pc, #144]	; (80017cc <HAL_RCC_OscConfig+0x2b4>)
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173e:	f7ff fc3b 	bl	8000fb8 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001746:	f7ff fc37 	bl	8000fb8 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e144      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 800175a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f0      	bne.n	8001746 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 80a0 	beq.w	80018b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10f      	bne.n	80017a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <HAL_RCC_OscConfig+0x2ac>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800179e:	2301      	movs	r3, #1
 80017a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_RCC_OscConfig+0x2b8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d121      	bne.n	80017f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HAL_RCC_OscConfig+0x2b8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <HAL_RCC_OscConfig+0x2b8>)
 80017b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ba:	f7ff fbfd 	bl	8000fb8 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c0:	e011      	b.n	80017e6 <HAL_RCC_OscConfig+0x2ce>
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	42470000 	.word	0x42470000
 80017cc:	42470e80 	.word	0x42470e80
 80017d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d4:	f7ff fbf0 	bl	8000fb8 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e0fd      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e6:	4b81      	ldr	r3, [pc, #516]	; (80019ec <HAL_RCC_OscConfig+0x4d4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d106      	bne.n	8001808 <HAL_RCC_OscConfig+0x2f0>
 80017fa:	4b7d      	ldr	r3, [pc, #500]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 80017fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fe:	4a7c      	ldr	r2, [pc, #496]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6713      	str	r3, [r2, #112]	; 0x70
 8001806:	e01c      	b.n	8001842 <HAL_RCC_OscConfig+0x32a>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b05      	cmp	r3, #5
 800180e:	d10c      	bne.n	800182a <HAL_RCC_OscConfig+0x312>
 8001810:	4b77      	ldr	r3, [pc, #476]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 8001812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001814:	4a76      	ldr	r2, [pc, #472]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 8001816:	f043 0304 	orr.w	r3, r3, #4
 800181a:	6713      	str	r3, [r2, #112]	; 0x70
 800181c:	4b74      	ldr	r3, [pc, #464]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 800181e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001820:	4a73      	ldr	r2, [pc, #460]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6713      	str	r3, [r2, #112]	; 0x70
 8001828:	e00b      	b.n	8001842 <HAL_RCC_OscConfig+0x32a>
 800182a:	4b71      	ldr	r3, [pc, #452]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 800182c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182e:	4a70      	ldr	r2, [pc, #448]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 8001830:	f023 0301 	bic.w	r3, r3, #1
 8001834:	6713      	str	r3, [r2, #112]	; 0x70
 8001836:	4b6e      	ldr	r3, [pc, #440]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 8001838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183a:	4a6d      	ldr	r2, [pc, #436]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 800183c:	f023 0304 	bic.w	r3, r3, #4
 8001840:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d015      	beq.n	8001876 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184a:	f7ff fbb5 	bl	8000fb8 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001852:	f7ff fbb1 	bl	8000fb8 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e0bc      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001868:	4b61      	ldr	r3, [pc, #388]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 800186a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0ee      	beq.n	8001852 <HAL_RCC_OscConfig+0x33a>
 8001874:	e014      	b.n	80018a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001876:	f7ff fb9f 	bl	8000fb8 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187c:	e00a      	b.n	8001894 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800187e:	f7ff fb9b 	bl	8000fb8 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	f241 3288 	movw	r2, #5000	; 0x1388
 800188c:	4293      	cmp	r3, r2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e0a6      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001894:	4b56      	ldr	r3, [pc, #344]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 8001896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1ee      	bne.n	800187e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d105      	bne.n	80018b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a6:	4b52      	ldr	r3, [pc, #328]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	4a51      	ldr	r2, [pc, #324]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 80018ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 8092 	beq.w	80019e0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018bc:	4b4c      	ldr	r3, [pc, #304]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 030c 	and.w	r3, r3, #12
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d05c      	beq.n	8001982 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d141      	bne.n	8001954 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d0:	4b48      	ldr	r3, [pc, #288]	; (80019f4 <HAL_RCC_OscConfig+0x4dc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f7ff fb6f 	bl	8000fb8 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018de:	f7ff fb6b 	bl	8000fb8 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e078      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f0:	4b3f      	ldr	r3, [pc, #252]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f0      	bne.n	80018de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69da      	ldr	r2, [r3, #28]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	019b      	lsls	r3, r3, #6
 800190c:	431a      	orrs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001912:	085b      	lsrs	r3, r3, #1
 8001914:	3b01      	subs	r3, #1
 8001916:	041b      	lsls	r3, r3, #16
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191e:	061b      	lsls	r3, r3, #24
 8001920:	4933      	ldr	r1, [pc, #204]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 8001922:	4313      	orrs	r3, r2
 8001924:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001926:	4b33      	ldr	r3, [pc, #204]	; (80019f4 <HAL_RCC_OscConfig+0x4dc>)
 8001928:	2201      	movs	r2, #1
 800192a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff fb44 	bl	8000fb8 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001934:	f7ff fb40 	bl	8000fb8 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e04d      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001946:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x41c>
 8001952:	e045      	b.n	80019e0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001954:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <HAL_RCC_OscConfig+0x4dc>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7ff fb2d 	bl	8000fb8 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001962:	f7ff fb29 	bl	8000fb8 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e036      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001974:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f0      	bne.n	8001962 <HAL_RCC_OscConfig+0x44a>
 8001980:	e02e      	b.n	80019e0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e029      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800198e:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <HAL_RCC_OscConfig+0x4d8>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d11c      	bne.n	80019dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d115      	bne.n	80019dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019b6:	4013      	ands	r3, r2
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019bc:	4293      	cmp	r3, r2
 80019be:	d10d      	bne.n	80019dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d106      	bne.n	80019dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40007000 	.word	0x40007000
 80019f0:	40023800 	.word	0x40023800
 80019f4:	42470060 	.word	0x42470060

080019f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0cc      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a0c:	4b68      	ldr	r3, [pc, #416]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 030f 	and.w	r3, r3, #15
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d90c      	bls.n	8001a34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	4b65      	ldr	r3, [pc, #404]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a22:	4b63      	ldr	r3, [pc, #396]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0b8      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d020      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a4c:	4b59      	ldr	r3, [pc, #356]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	4a58      	ldr	r2, [pc, #352]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a64:	4b53      	ldr	r3, [pc, #332]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4a52      	ldr	r2, [pc, #328]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a70:	4b50      	ldr	r3, [pc, #320]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	494d      	ldr	r1, [pc, #308]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d044      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d107      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a96:	4b47      	ldr	r3, [pc, #284]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d119      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e07f      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d003      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab6:	4b3f      	ldr	r3, [pc, #252]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d109      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e06f      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac6:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e067      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ad6:	4b37      	ldr	r3, [pc, #220]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f023 0203 	bic.w	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	4934      	ldr	r1, [pc, #208]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae8:	f7ff fa66 	bl	8000fb8 <HAL_GetTick>
 8001aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	e00a      	b.n	8001b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af0:	f7ff fa62 	bl	8000fb8 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e04f      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b06:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 020c 	and.w	r2, r3, #12
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d1eb      	bne.n	8001af0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b18:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d20c      	bcs.n	8001b40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b26:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e032      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	4916      	ldr	r1, [pc, #88]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d009      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	490e      	ldr	r1, [pc, #56]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b7e:	f000 f821 	bl	8001bc4 <HAL_RCC_GetSysClockFreq>
 8001b82:	4601      	mov	r1, r0
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b90:	5cd3      	ldrb	r3, [r2, r3]
 8001b92:	fa21 f303 	lsr.w	r3, r1, r3
 8001b96:	4a09      	ldr	r2, [pc, #36]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f9c6 	bl	8000f30 <HAL_InitTick>

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023c00 	.word	0x40023c00
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	080066d4 	.word	0x080066d4
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	20000004 	.word	0x20000004

08001bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bda:	4b63      	ldr	r3, [pc, #396]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d007      	beq.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x32>
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d008      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x38>
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f040 80b4 	bne.w	8001d58 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bf0:	4b5e      	ldr	r3, [pc, #376]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001bf2:	60bb      	str	r3, [r7, #8]
       break;
 8001bf4:	e0b3      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bf6:	4b5e      	ldr	r3, [pc, #376]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001bf8:	60bb      	str	r3, [r7, #8]
      break;
 8001bfa:	e0b0      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bfc:	4b5a      	ldr	r3, [pc, #360]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c06:	4b58      	ldr	r3, [pc, #352]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d04a      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c12:	4b55      	ldr	r3, [pc, #340]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	099b      	lsrs	r3, r3, #6
 8001c18:	f04f 0400 	mov.w	r4, #0
 8001c1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	ea03 0501 	and.w	r5, r3, r1
 8001c28:	ea04 0602 	and.w	r6, r4, r2
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	4632      	mov	r2, r6
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	f04f 0400 	mov.w	r4, #0
 8001c38:	0154      	lsls	r4, r2, #5
 8001c3a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c3e:	014b      	lsls	r3, r1, #5
 8001c40:	4619      	mov	r1, r3
 8001c42:	4622      	mov	r2, r4
 8001c44:	1b49      	subs	r1, r1, r5
 8001c46:	eb62 0206 	sbc.w	r2, r2, r6
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	f04f 0400 	mov.w	r4, #0
 8001c52:	0194      	lsls	r4, r2, #6
 8001c54:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c58:	018b      	lsls	r3, r1, #6
 8001c5a:	1a5b      	subs	r3, r3, r1
 8001c5c:	eb64 0402 	sbc.w	r4, r4, r2
 8001c60:	f04f 0100 	mov.w	r1, #0
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	00e2      	lsls	r2, r4, #3
 8001c6a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c6e:	00d9      	lsls	r1, r3, #3
 8001c70:	460b      	mov	r3, r1
 8001c72:	4614      	mov	r4, r2
 8001c74:	195b      	adds	r3, r3, r5
 8001c76:	eb44 0406 	adc.w	r4, r4, r6
 8001c7a:	f04f 0100 	mov.w	r1, #0
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	0262      	lsls	r2, r4, #9
 8001c84:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001c88:	0259      	lsls	r1, r3, #9
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4614      	mov	r4, r2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	4621      	mov	r1, r4
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f04f 0400 	mov.w	r4, #0
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4623      	mov	r3, r4
 8001c9c:	f7fe faf0 	bl	8000280 <__aeabi_uldivmod>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	460c      	mov	r4, r1
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	e049      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca8:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	099b      	lsrs	r3, r3, #6
 8001cae:	f04f 0400 	mov.w	r4, #0
 8001cb2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	ea03 0501 	and.w	r5, r3, r1
 8001cbe:	ea04 0602 	and.w	r6, r4, r2
 8001cc2:	4629      	mov	r1, r5
 8001cc4:	4632      	mov	r2, r6
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	f04f 0400 	mov.w	r4, #0
 8001cce:	0154      	lsls	r4, r2, #5
 8001cd0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cd4:	014b      	lsls	r3, r1, #5
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4622      	mov	r2, r4
 8001cda:	1b49      	subs	r1, r1, r5
 8001cdc:	eb62 0206 	sbc.w	r2, r2, r6
 8001ce0:	f04f 0300 	mov.w	r3, #0
 8001ce4:	f04f 0400 	mov.w	r4, #0
 8001ce8:	0194      	lsls	r4, r2, #6
 8001cea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cee:	018b      	lsls	r3, r1, #6
 8001cf0:	1a5b      	subs	r3, r3, r1
 8001cf2:	eb64 0402 	sbc.w	r4, r4, r2
 8001cf6:	f04f 0100 	mov.w	r1, #0
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	00e2      	lsls	r2, r4, #3
 8001d00:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d04:	00d9      	lsls	r1, r3, #3
 8001d06:	460b      	mov	r3, r1
 8001d08:	4614      	mov	r4, r2
 8001d0a:	195b      	adds	r3, r3, r5
 8001d0c:	eb44 0406 	adc.w	r4, r4, r6
 8001d10:	f04f 0100 	mov.w	r1, #0
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	02a2      	lsls	r2, r4, #10
 8001d1a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d1e:	0299      	lsls	r1, r3, #10
 8001d20:	460b      	mov	r3, r1
 8001d22:	4614      	mov	r4, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	4621      	mov	r1, r4
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f04f 0400 	mov.w	r4, #0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4623      	mov	r3, r4
 8001d32:	f7fe faa5 	bl	8000280 <__aeabi_uldivmod>
 8001d36:	4603      	mov	r3, r0
 8001d38:	460c      	mov	r4, r1
 8001d3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	0c1b      	lsrs	r3, r3, #16
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	3301      	adds	r3, #1
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	60bb      	str	r3, [r7, #8]
      break;
 8001d56:	e002      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d5a:	60bb      	str	r3, [r7, #8]
      break;
 8001d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	00f42400 	.word	0x00f42400
 8001d70:	007a1200 	.word	0x007a1200

08001d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d78:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	20000000 	.word	0x20000000

08001d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d90:	f7ff fff0 	bl	8001d74 <HAL_RCC_GetHCLKFreq>
 8001d94:	4601      	mov	r1, r0
 8001d96:	4b05      	ldr	r3, [pc, #20]	; (8001dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	0a9b      	lsrs	r3, r3, #10
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	4a03      	ldr	r2, [pc, #12]	; (8001db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da2:	5cd3      	ldrb	r3, [r2, r3]
 8001da4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40023800 	.word	0x40023800
 8001db0:	080066e4 	.word	0x080066e4

08001db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001db8:	f7ff ffdc 	bl	8001d74 <HAL_RCC_GetHCLKFreq>
 8001dbc:	4601      	mov	r1, r0
 8001dbe:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	0b5b      	lsrs	r3, r3, #13
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	4a03      	ldr	r2, [pc, #12]	; (8001dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dca:	5cd3      	ldrb	r3, [r2, r3]
 8001dcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	080066e4 	.word	0x080066e4

08001ddc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e056      	b.n	8001e9c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d106      	bne.n	8001e0e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7fe ff45 	bl	8000c98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2202      	movs	r2, #2
 8001e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e24:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	ea42 0103 	orr.w	r1, r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	0c1b      	lsrs	r3, r3, #16
 8001e6c:	f003 0104 	and.w	r1, r3, #4
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	69da      	ldr	r2, [r3, #28]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_SPI_Transmit+0x22>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e11e      	b.n	8002104 <HAL_SPI_Transmit+0x260>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ece:	f7ff f873 	bl	8000fb8 <HAL_GetTick>
 8001ed2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d002      	beq.n	8001eea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ee8:	e103      	b.n	80020f2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d002      	beq.n	8001ef6 <HAL_SPI_Transmit+0x52>
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d102      	bne.n	8001efc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001efa:	e0fa      	b.n	80020f2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2203      	movs	r2, #3
 8001f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	88fa      	ldrh	r2, [r7, #6]
 8001f14:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	88fa      	ldrh	r2, [r7, #6]
 8001f1a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f42:	d107      	bne.n	8001f54 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5e:	2b40      	cmp	r3, #64	; 0x40
 8001f60:	d007      	beq.n	8001f72 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f7a:	d14b      	bne.n	8002014 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <HAL_SPI_Transmit+0xe6>
 8001f84:	8afb      	ldrh	r3, [r7, #22]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d13e      	bne.n	8002008 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	881a      	ldrh	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	1c9a      	adds	r2, r3, #2
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001fae:	e02b      	b.n	8002008 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d112      	bne.n	8001fe4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	881a      	ldrh	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	1c9a      	adds	r2, r3, #2
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	86da      	strh	r2, [r3, #54]	; 0x36
 8001fe2:	e011      	b.n	8002008 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fe4:	f7fe ffe8 	bl	8000fb8 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d803      	bhi.n	8001ffc <HAL_SPI_Transmit+0x158>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffa:	d102      	bne.n	8002002 <HAL_SPI_Transmit+0x15e>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d102      	bne.n	8002008 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002006:	e074      	b.n	80020f2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800200c:	b29b      	uxth	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1ce      	bne.n	8001fb0 <HAL_SPI_Transmit+0x10c>
 8002012:	e04c      	b.n	80020ae <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <HAL_SPI_Transmit+0x17e>
 800201c:	8afb      	ldrh	r3, [r7, #22]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d140      	bne.n	80020a4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	330c      	adds	r3, #12
 800202c:	7812      	ldrb	r2, [r2, #0]
 800202e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	1c5a      	adds	r2, r3, #1
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800203e:	b29b      	uxth	r3, r3
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002048:	e02c      	b.n	80020a4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b02      	cmp	r3, #2
 8002056:	d113      	bne.n	8002080 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	330c      	adds	r3, #12
 8002062:	7812      	ldrb	r2, [r2, #0]
 8002064:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	86da      	strh	r2, [r3, #54]	; 0x36
 800207e:	e011      	b.n	80020a4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002080:	f7fe ff9a 	bl	8000fb8 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d803      	bhi.n	8002098 <HAL_SPI_Transmit+0x1f4>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002096:	d102      	bne.n	800209e <HAL_SPI_Transmit+0x1fa>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020a2:	e026      	b.n	80020f2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1cd      	bne.n	800204a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	6839      	ldr	r1, [r7, #0]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 fba4 	bl	8002800 <SPI_EndRxTxTransaction>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2220      	movs	r2, #32
 80020c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10a      	bne.n	80020e2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	77fb      	strb	r3, [r7, #31]
 80020ee:	e000      	b.n	80020f2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80020f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002102:	7ffb      	ldrb	r3, [r7, #31]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3720      	adds	r7, #32
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af02      	add	r7, sp, #8
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	4613      	mov	r3, r2
 800211a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002128:	d112      	bne.n	8002150 <HAL_SPI_Receive+0x44>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10e      	bne.n	8002150 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2204      	movs	r2, #4
 8002136:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800213a:	88fa      	ldrh	r2, [r7, #6]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	4613      	mov	r3, r2
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	68b9      	ldr	r1, [r7, #8]
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 f8e9 	bl	800231e <HAL_SPI_TransmitReceive>
 800214c:	4603      	mov	r3, r0
 800214e:	e0e2      	b.n	8002316 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_SPI_Receive+0x52>
 800215a:	2302      	movs	r3, #2
 800215c:	e0db      	b.n	8002316 <HAL_SPI_Receive+0x20a>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002166:	f7fe ff27 	bl	8000fb8 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b01      	cmp	r3, #1
 8002176:	d002      	beq.n	800217e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002178:	2302      	movs	r3, #2
 800217a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800217c:	e0c2      	b.n	8002304 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <HAL_SPI_Receive+0x7e>
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d102      	bne.n	8002190 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800218e:	e0b9      	b.n	8002304 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2204      	movs	r2, #4
 8002194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	88fa      	ldrh	r2, [r7, #6]
 80021a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	88fa      	ldrh	r2, [r7, #6]
 80021ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021d6:	d107      	bne.n	80021e8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021e6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f2:	2b40      	cmp	r3, #64	; 0x40
 80021f4:	d007      	beq.n	8002206 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002204:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d162      	bne.n	80022d4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800220e:	e02e      	b.n	800226e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b01      	cmp	r3, #1
 800221c:	d115      	bne.n	800224a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f103 020c 	add.w	r2, r3, #12
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222a:	7812      	ldrb	r2, [r2, #0]
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800223e:	b29b      	uxth	r3, r3
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002248:	e011      	b.n	800226e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800224a:	f7fe feb5 	bl	8000fb8 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d803      	bhi.n	8002262 <HAL_SPI_Receive+0x156>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d102      	bne.n	8002268 <HAL_SPI_Receive+0x15c>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d102      	bne.n	800226e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800226c:	e04a      	b.n	8002304 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002272:	b29b      	uxth	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1cb      	bne.n	8002210 <HAL_SPI_Receive+0x104>
 8002278:	e031      	b.n	80022de <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b01      	cmp	r3, #1
 8002286:	d113      	bne.n	80022b0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002292:	b292      	uxth	r2, r2
 8002294:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229a:	1c9a      	adds	r2, r3, #2
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022ae:	e011      	b.n	80022d4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022b0:	f7fe fe82 	bl	8000fb8 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d803      	bhi.n	80022c8 <HAL_SPI_Receive+0x1bc>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c6:	d102      	bne.n	80022ce <HAL_SPI_Receive+0x1c2>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d102      	bne.n	80022d4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80022d2:	e017      	b.n	8002304 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1cd      	bne.n	800227a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	6839      	ldr	r1, [r7, #0]
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 fa27 	bl	8002736 <SPI_EndRxTransaction>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2220      	movs	r2, #32
 80022f2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	75fb      	strb	r3, [r7, #23]
 8002300:	e000      	b.n	8002304 <HAL_SPI_Receive+0x1f8>
  }

error :
 8002302:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002314:	7dfb      	ldrb	r3, [r7, #23]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b08c      	sub	sp, #48	; 0x30
 8002322:	af00      	add	r7, sp, #0
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800232c:	2301      	movs	r3, #1
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_SPI_TransmitReceive+0x26>
 8002340:	2302      	movs	r3, #2
 8002342:	e18a      	b.n	800265a <HAL_SPI_TransmitReceive+0x33c>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800234c:	f7fe fe34 	bl	8000fb8 <HAL_GetTick>
 8002350:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002358:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002362:	887b      	ldrh	r3, [r7, #2]
 8002364:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002366:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800236a:	2b01      	cmp	r3, #1
 800236c:	d00f      	beq.n	800238e <HAL_SPI_TransmitReceive+0x70>
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002374:	d107      	bne.n	8002386 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d103      	bne.n	8002386 <HAL_SPI_TransmitReceive+0x68>
 800237e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002382:	2b04      	cmp	r3, #4
 8002384:	d003      	beq.n	800238e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002386:	2302      	movs	r3, #2
 8002388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800238c:	e15b      	b.n	8002646 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_SPI_TransmitReceive+0x82>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <HAL_SPI_TransmitReceive+0x82>
 800239a:	887b      	ldrh	r3, [r7, #2]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d103      	bne.n	80023a8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80023a6:	e14e      	b.n	8002646 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d003      	beq.n	80023bc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2205      	movs	r2, #5
 80023b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	887a      	ldrh	r2, [r7, #2]
 80023cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	887a      	ldrh	r2, [r7, #2]
 80023d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	887a      	ldrh	r2, [r7, #2]
 80023de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	887a      	ldrh	r2, [r7, #2]
 80023e4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fc:	2b40      	cmp	r3, #64	; 0x40
 80023fe:	d007      	beq.n	8002410 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800240e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002418:	d178      	bne.n	800250c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <HAL_SPI_TransmitReceive+0x10a>
 8002422:	8b7b      	ldrh	r3, [r7, #26]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d166      	bne.n	80024f6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	881a      	ldrh	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	1c9a      	adds	r2, r3, #2
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800244c:	e053      	b.n	80024f6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b02      	cmp	r3, #2
 800245a:	d11b      	bne.n	8002494 <HAL_SPI_TransmitReceive+0x176>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002460:	b29b      	uxth	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d016      	beq.n	8002494 <HAL_SPI_TransmitReceive+0x176>
 8002466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002468:	2b01      	cmp	r3, #1
 800246a:	d113      	bne.n	8002494 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	881a      	ldrh	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	1c9a      	adds	r2, r3, #2
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002486:	b29b      	uxth	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d119      	bne.n	80024d6 <HAL_SPI_TransmitReceive+0x1b8>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d014      	beq.n	80024d6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b6:	b292      	uxth	r2, r2
 80024b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024be:	1c9a      	adds	r2, r3, #2
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024d2:	2301      	movs	r3, #1
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024d6:	f7fe fd6f 	bl	8000fb8 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d807      	bhi.n	80024f6 <HAL_SPI_TransmitReceive+0x1d8>
 80024e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ec:	d003      	beq.n	80024f6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024f4:	e0a7      	b.n	8002646 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1a6      	bne.n	800244e <HAL_SPI_TransmitReceive+0x130>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002504:	b29b      	uxth	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1a1      	bne.n	800244e <HAL_SPI_TransmitReceive+0x130>
 800250a:	e07c      	b.n	8002606 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <HAL_SPI_TransmitReceive+0x1fc>
 8002514:	8b7b      	ldrh	r3, [r7, #26]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d16b      	bne.n	80025f2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	330c      	adds	r3, #12
 8002524:	7812      	ldrb	r2, [r2, #0]
 8002526:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002540:	e057      	b.n	80025f2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b02      	cmp	r3, #2
 800254e:	d11c      	bne.n	800258a <HAL_SPI_TransmitReceive+0x26c>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d017      	beq.n	800258a <HAL_SPI_TransmitReceive+0x26c>
 800255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255c:	2b01      	cmp	r3, #1
 800255e:	d114      	bne.n	800258a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	330c      	adds	r3, #12
 800256a:	7812      	ldrb	r2, [r2, #0]
 800256c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b01      	cmp	r3, #1
 8002596:	d119      	bne.n	80025cc <HAL_SPI_TransmitReceive+0x2ae>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d014      	beq.n	80025cc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025c8:	2301      	movs	r3, #1
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025cc:	f7fe fcf4 	bl	8000fb8 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025d8:	429a      	cmp	r2, r3
 80025da:	d803      	bhi.n	80025e4 <HAL_SPI_TransmitReceive+0x2c6>
 80025dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e2:	d102      	bne.n	80025ea <HAL_SPI_TransmitReceive+0x2cc>
 80025e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d103      	bne.n	80025f2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025f0:	e029      	b.n	8002646 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1a2      	bne.n	8002542 <HAL_SPI_TransmitReceive+0x224>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002600:	b29b      	uxth	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d19d      	bne.n	8002542 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002608:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 f8f8 	bl	8002800 <SPI_EndRxTxTransaction>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d006      	beq.n	8002624 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2220      	movs	r2, #32
 8002620:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002622:	e010      	b.n	8002646 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10b      	bne.n	8002644 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	e000      	b.n	8002646 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002644:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002656:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800265a:	4618      	mov	r0, r3
 800265c:	3730      	adds	r7, #48	; 0x30
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b084      	sub	sp, #16
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	4613      	mov	r3, r2
 8002670:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002672:	e04c      	b.n	800270e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267a:	d048      	beq.n	800270e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800267c:	f7fe fc9c 	bl	8000fb8 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d902      	bls.n	8002692 <SPI_WaitFlagStateUntilTimeout+0x30>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d13d      	bne.n	800270e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80026a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026aa:	d111      	bne.n	80026d0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b4:	d004      	beq.n	80026c0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026be:	d107      	bne.n	80026d0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d8:	d10f      	bne.n	80026fa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e00f      	b.n	800272e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4013      	ands	r3, r2
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	429a      	cmp	r2, r3
 800271c:	bf0c      	ite	eq
 800271e:	2301      	moveq	r3, #1
 8002720:	2300      	movne	r3, #0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	461a      	mov	r2, r3
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	429a      	cmp	r2, r3
 800272a:	d1a3      	bne.n	8002674 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b086      	sub	sp, #24
 800273a:	af02      	add	r7, sp, #8
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800274a:	d111      	bne.n	8002770 <SPI_EndRxTransaction+0x3a>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002754:	d004      	beq.n	8002760 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800275e:	d107      	bne.n	8002770 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800276e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002778:	d12a      	bne.n	80027d0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002782:	d012      	beq.n	80027aa <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2200      	movs	r2, #0
 800278c:	2180      	movs	r1, #128	; 0x80
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f7ff ff67 	bl	8002662 <SPI_WaitFlagStateUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d02d      	beq.n	80027f6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279e:	f043 0220 	orr.w	r2, r3, #32
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e026      	b.n	80027f8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2200      	movs	r2, #0
 80027b2:	2101      	movs	r1, #1
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f7ff ff54 	bl	8002662 <SPI_WaitFlagStateUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01a      	beq.n	80027f6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c4:	f043 0220 	orr.w	r2, r3, #32
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e013      	b.n	80027f8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2200      	movs	r2, #0
 80027d8:	2101      	movs	r1, #1
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f7ff ff41 	bl	8002662 <SPI_WaitFlagStateUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ea:	f043 0220 	orr.w	r2, r3, #32
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e000      	b.n	80027f8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800280c:	4b1b      	ldr	r3, [pc, #108]	; (800287c <SPI_EndRxTxTransaction+0x7c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a1b      	ldr	r2, [pc, #108]	; (8002880 <SPI_EndRxTxTransaction+0x80>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	0d5b      	lsrs	r3, r3, #21
 8002818:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800281c:	fb02 f303 	mul.w	r3, r2, r3
 8002820:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800282a:	d112      	bne.n	8002852 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2200      	movs	r2, #0
 8002834:	2180      	movs	r1, #128	; 0x80
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f7ff ff13 	bl	8002662 <SPI_WaitFlagStateUntilTimeout>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d016      	beq.n	8002870 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002846:	f043 0220 	orr.w	r2, r3, #32
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e00f      	b.n	8002872 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00a      	beq.n	800286e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	3b01      	subs	r3, #1
 800285c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002868:	2b80      	cmp	r3, #128	; 0x80
 800286a:	d0f2      	beq.n	8002852 <SPI_EndRxTxTransaction+0x52>
 800286c:	e000      	b.n	8002870 <SPI_EndRxTxTransaction+0x70>
        break;
 800286e:	bf00      	nop
  }

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000000 	.word	0x20000000
 8002880:	165e9f81 	.word	0x165e9f81

08002884 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e03f      	b.n	8002916 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe fa3c 	bl	8000d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2224      	movs	r2, #36	; 0x24
 80028b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f9b1 	bl	8002c30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b088      	sub	sp, #32
 8002922:	af02      	add	r7, sp, #8
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	603b      	str	r3, [r7, #0]
 800292a:	4613      	mov	r3, r2
 800292c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b20      	cmp	r3, #32
 800293c:	f040 8083 	bne.w	8002a46 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <HAL_UART_Transmit+0x2e>
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e07b      	b.n	8002a48 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <HAL_UART_Transmit+0x40>
 800295a:	2302      	movs	r3, #2
 800295c:	e074      	b.n	8002a48 <HAL_UART_Transmit+0x12a>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2221      	movs	r2, #33	; 0x21
 8002970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002974:	f7fe fb20 	bl	8000fb8 <HAL_GetTick>
 8002978:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	88fa      	ldrh	r2, [r7, #6]
 800297e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	88fa      	ldrh	r2, [r7, #6]
 8002984:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800298e:	e042      	b.n	8002a16 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a6:	d122      	bne.n	80029ee <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2200      	movs	r2, #0
 80029b0:	2180      	movs	r1, #128	; 0x80
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 f8f2 	bl	8002b9c <UART_WaitOnFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e042      	b.n	8002a48 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029d4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d103      	bne.n	80029e6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	3302      	adds	r3, #2
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	e017      	b.n	8002a16 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	3301      	adds	r3, #1
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	e013      	b.n	8002a16 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2200      	movs	r2, #0
 80029f6:	2180      	movs	r1, #128	; 0x80
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 f8cf 	bl	8002b9c <UART_WaitOnFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e01f      	b.n	8002a48 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	60ba      	str	r2, [r7, #8]
 8002a0e:	781a      	ldrb	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1b7      	bne.n	8002990 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2200      	movs	r2, #0
 8002a28:	2140      	movs	r1, #64	; 0x40
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f8b6 	bl	8002b9c <UART_WaitOnFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e006      	b.n	8002a48 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e000      	b.n	8002a48 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002a46:	2302      	movs	r3, #2
  }
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b20      	cmp	r3, #32
 8002a6e:	f040 8090 	bne.w	8002b92 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d002      	beq.n	8002a7e <HAL_UART_Receive+0x2e>
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e088      	b.n	8002b94 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_UART_Receive+0x40>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e081      	b.n	8002b94 <HAL_UART_Receive+0x144>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2222      	movs	r2, #34	; 0x22
 8002aa2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002aa6:	f7fe fa87 	bl	8000fb8 <HAL_GetTick>
 8002aaa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	88fa      	ldrh	r2, [r7, #6]
 8002ab0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	88fa      	ldrh	r2, [r7, #6]
 8002ab6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002ac0:	e05c      	b.n	8002b7c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad8:	d12b      	bne.n	8002b32 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2120      	movs	r1, #32
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f859 	bl	8002b9c <UART_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e04f      	b.n	8002b94 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10c      	bne.n	8002b1a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	3302      	adds	r3, #2
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	e030      	b.n	8002b7c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	e024      	b.n	8002b7c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2120      	movs	r1, #32
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f82d 	bl	8002b9c <UART_WaitOnFlagUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e023      	b.n	8002b94 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d108      	bne.n	8002b66 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6859      	ldr	r1, [r3, #4]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	60ba      	str	r2, [r7, #8]
 8002b60:	b2ca      	uxtb	r2, r1
 8002b62:	701a      	strb	r2, [r3, #0]
 8002b64:	e00a      	b.n	8002b7c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	1c59      	adds	r1, r3, #1
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d19d      	bne.n	8002ac2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e000      	b.n	8002b94 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8002b92:	2302      	movs	r3, #2
  }
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bac:	e02c      	b.n	8002c08 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d028      	beq.n	8002c08 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <UART_WaitOnFlagUntilTimeout+0x30>
 8002bbc:	f7fe f9fc 	bl	8000fb8 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d21d      	bcs.n	8002c08 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bda:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e00f      	b.n	8002c28 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	4013      	ands	r3, r2
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	bf0c      	ite	eq
 8002c18:	2301      	moveq	r3, #1
 8002c1a:	2300      	movne	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	461a      	mov	r2, r3
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d0c3      	beq.n	8002bae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c34:	b085      	sub	sp, #20
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c72:	f023 030c 	bic.w	r3, r3, #12
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	68f9      	ldr	r1, [r7, #12]
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c9e:	f040 818b 	bne.w	8002fb8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4ac1      	ldr	r2, [pc, #772]	; (8002fac <UART_SetConfig+0x37c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d005      	beq.n	8002cb8 <UART_SetConfig+0x88>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4abf      	ldr	r2, [pc, #764]	; (8002fb0 <UART_SetConfig+0x380>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	f040 80bd 	bne.w	8002e32 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cb8:	f7ff f87c 	bl	8001db4 <HAL_RCC_GetPCLK2Freq>
 8002cbc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	461d      	mov	r5, r3
 8002cc2:	f04f 0600 	mov.w	r6, #0
 8002cc6:	46a8      	mov	r8, r5
 8002cc8:	46b1      	mov	r9, r6
 8002cca:	eb18 0308 	adds.w	r3, r8, r8
 8002cce:	eb49 0409 	adc.w	r4, r9, r9
 8002cd2:	4698      	mov	r8, r3
 8002cd4:	46a1      	mov	r9, r4
 8002cd6:	eb18 0805 	adds.w	r8, r8, r5
 8002cda:	eb49 0906 	adc.w	r9, r9, r6
 8002cde:	f04f 0100 	mov.w	r1, #0
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002cea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002cee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002cf2:	4688      	mov	r8, r1
 8002cf4:	4691      	mov	r9, r2
 8002cf6:	eb18 0005 	adds.w	r0, r8, r5
 8002cfa:	eb49 0106 	adc.w	r1, r9, r6
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	461d      	mov	r5, r3
 8002d04:	f04f 0600 	mov.w	r6, #0
 8002d08:	196b      	adds	r3, r5, r5
 8002d0a:	eb46 0406 	adc.w	r4, r6, r6
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4623      	mov	r3, r4
 8002d12:	f7fd fab5 	bl	8000280 <__aeabi_uldivmod>
 8002d16:	4603      	mov	r3, r0
 8002d18:	460c      	mov	r4, r1
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4ba5      	ldr	r3, [pc, #660]	; (8002fb4 <UART_SetConfig+0x384>)
 8002d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	461d      	mov	r5, r3
 8002d2c:	f04f 0600 	mov.w	r6, #0
 8002d30:	46a9      	mov	r9, r5
 8002d32:	46b2      	mov	sl, r6
 8002d34:	eb19 0309 	adds.w	r3, r9, r9
 8002d38:	eb4a 040a 	adc.w	r4, sl, sl
 8002d3c:	4699      	mov	r9, r3
 8002d3e:	46a2      	mov	sl, r4
 8002d40:	eb19 0905 	adds.w	r9, r9, r5
 8002d44:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d48:	f04f 0100 	mov.w	r1, #0
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d5c:	4689      	mov	r9, r1
 8002d5e:	4692      	mov	sl, r2
 8002d60:	eb19 0005 	adds.w	r0, r9, r5
 8002d64:	eb4a 0106 	adc.w	r1, sl, r6
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	461d      	mov	r5, r3
 8002d6e:	f04f 0600 	mov.w	r6, #0
 8002d72:	196b      	adds	r3, r5, r5
 8002d74:	eb46 0406 	adc.w	r4, r6, r6
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4623      	mov	r3, r4
 8002d7c:	f7fd fa80 	bl	8000280 <__aeabi_uldivmod>
 8002d80:	4603      	mov	r3, r0
 8002d82:	460c      	mov	r4, r1
 8002d84:	461a      	mov	r2, r3
 8002d86:	4b8b      	ldr	r3, [pc, #556]	; (8002fb4 <UART_SetConfig+0x384>)
 8002d88:	fba3 1302 	umull	r1, r3, r3, r2
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	2164      	movs	r1, #100	; 0x64
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	3332      	adds	r3, #50	; 0x32
 8002d9a:	4a86      	ldr	r2, [pc, #536]	; (8002fb4 <UART_SetConfig+0x384>)
 8002d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002da0:	095b      	lsrs	r3, r3, #5
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002da8:	4498      	add	r8, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	461d      	mov	r5, r3
 8002dae:	f04f 0600 	mov.w	r6, #0
 8002db2:	46a9      	mov	r9, r5
 8002db4:	46b2      	mov	sl, r6
 8002db6:	eb19 0309 	adds.w	r3, r9, r9
 8002dba:	eb4a 040a 	adc.w	r4, sl, sl
 8002dbe:	4699      	mov	r9, r3
 8002dc0:	46a2      	mov	sl, r4
 8002dc2:	eb19 0905 	adds.w	r9, r9, r5
 8002dc6:	eb4a 0a06 	adc.w	sl, sl, r6
 8002dca:	f04f 0100 	mov.w	r1, #0
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dde:	4689      	mov	r9, r1
 8002de0:	4692      	mov	sl, r2
 8002de2:	eb19 0005 	adds.w	r0, r9, r5
 8002de6:	eb4a 0106 	adc.w	r1, sl, r6
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	461d      	mov	r5, r3
 8002df0:	f04f 0600 	mov.w	r6, #0
 8002df4:	196b      	adds	r3, r5, r5
 8002df6:	eb46 0406 	adc.w	r4, r6, r6
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4623      	mov	r3, r4
 8002dfe:	f7fd fa3f 	bl	8000280 <__aeabi_uldivmod>
 8002e02:	4603      	mov	r3, r0
 8002e04:	460c      	mov	r4, r1
 8002e06:	461a      	mov	r2, r3
 8002e08:	4b6a      	ldr	r3, [pc, #424]	; (8002fb4 <UART_SetConfig+0x384>)
 8002e0a:	fba3 1302 	umull	r1, r3, r3, r2
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	2164      	movs	r1, #100	; 0x64
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	3332      	adds	r3, #50	; 0x32
 8002e1c:	4a65      	ldr	r2, [pc, #404]	; (8002fb4 <UART_SetConfig+0x384>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	f003 0207 	and.w	r2, r3, #7
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4442      	add	r2, r8
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	e26f      	b.n	8003312 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e32:	f7fe ffab 	bl	8001d8c <HAL_RCC_GetPCLK1Freq>
 8002e36:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	461d      	mov	r5, r3
 8002e3c:	f04f 0600 	mov.w	r6, #0
 8002e40:	46a8      	mov	r8, r5
 8002e42:	46b1      	mov	r9, r6
 8002e44:	eb18 0308 	adds.w	r3, r8, r8
 8002e48:	eb49 0409 	adc.w	r4, r9, r9
 8002e4c:	4698      	mov	r8, r3
 8002e4e:	46a1      	mov	r9, r4
 8002e50:	eb18 0805 	adds.w	r8, r8, r5
 8002e54:	eb49 0906 	adc.w	r9, r9, r6
 8002e58:	f04f 0100 	mov.w	r1, #0
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e6c:	4688      	mov	r8, r1
 8002e6e:	4691      	mov	r9, r2
 8002e70:	eb18 0005 	adds.w	r0, r8, r5
 8002e74:	eb49 0106 	adc.w	r1, r9, r6
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	461d      	mov	r5, r3
 8002e7e:	f04f 0600 	mov.w	r6, #0
 8002e82:	196b      	adds	r3, r5, r5
 8002e84:	eb46 0406 	adc.w	r4, r6, r6
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4623      	mov	r3, r4
 8002e8c:	f7fd f9f8 	bl	8000280 <__aeabi_uldivmod>
 8002e90:	4603      	mov	r3, r0
 8002e92:	460c      	mov	r4, r1
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <UART_SetConfig+0x384>)
 8002e98:	fba3 2302 	umull	r2, r3, r3, r2
 8002e9c:	095b      	lsrs	r3, r3, #5
 8002e9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	461d      	mov	r5, r3
 8002ea6:	f04f 0600 	mov.w	r6, #0
 8002eaa:	46a9      	mov	r9, r5
 8002eac:	46b2      	mov	sl, r6
 8002eae:	eb19 0309 	adds.w	r3, r9, r9
 8002eb2:	eb4a 040a 	adc.w	r4, sl, sl
 8002eb6:	4699      	mov	r9, r3
 8002eb8:	46a2      	mov	sl, r4
 8002eba:	eb19 0905 	adds.w	r9, r9, r5
 8002ebe:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ec2:	f04f 0100 	mov.w	r1, #0
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ece:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ed2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ed6:	4689      	mov	r9, r1
 8002ed8:	4692      	mov	sl, r2
 8002eda:	eb19 0005 	adds.w	r0, r9, r5
 8002ede:	eb4a 0106 	adc.w	r1, sl, r6
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	461d      	mov	r5, r3
 8002ee8:	f04f 0600 	mov.w	r6, #0
 8002eec:	196b      	adds	r3, r5, r5
 8002eee:	eb46 0406 	adc.w	r4, r6, r6
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4623      	mov	r3, r4
 8002ef6:	f7fd f9c3 	bl	8000280 <__aeabi_uldivmod>
 8002efa:	4603      	mov	r3, r0
 8002efc:	460c      	mov	r4, r1
 8002efe:	461a      	mov	r2, r3
 8002f00:	4b2c      	ldr	r3, [pc, #176]	; (8002fb4 <UART_SetConfig+0x384>)
 8002f02:	fba3 1302 	umull	r1, r3, r3, r2
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	2164      	movs	r1, #100	; 0x64
 8002f0a:	fb01 f303 	mul.w	r3, r1, r3
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	3332      	adds	r3, #50	; 0x32
 8002f14:	4a27      	ldr	r2, [pc, #156]	; (8002fb4 <UART_SetConfig+0x384>)
 8002f16:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f22:	4498      	add	r8, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	461d      	mov	r5, r3
 8002f28:	f04f 0600 	mov.w	r6, #0
 8002f2c:	46a9      	mov	r9, r5
 8002f2e:	46b2      	mov	sl, r6
 8002f30:	eb19 0309 	adds.w	r3, r9, r9
 8002f34:	eb4a 040a 	adc.w	r4, sl, sl
 8002f38:	4699      	mov	r9, r3
 8002f3a:	46a2      	mov	sl, r4
 8002f3c:	eb19 0905 	adds.w	r9, r9, r5
 8002f40:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f44:	f04f 0100 	mov.w	r1, #0
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f58:	4689      	mov	r9, r1
 8002f5a:	4692      	mov	sl, r2
 8002f5c:	eb19 0005 	adds.w	r0, r9, r5
 8002f60:	eb4a 0106 	adc.w	r1, sl, r6
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	461d      	mov	r5, r3
 8002f6a:	f04f 0600 	mov.w	r6, #0
 8002f6e:	196b      	adds	r3, r5, r5
 8002f70:	eb46 0406 	adc.w	r4, r6, r6
 8002f74:	461a      	mov	r2, r3
 8002f76:	4623      	mov	r3, r4
 8002f78:	f7fd f982 	bl	8000280 <__aeabi_uldivmod>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	460c      	mov	r4, r1
 8002f80:	461a      	mov	r2, r3
 8002f82:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <UART_SetConfig+0x384>)
 8002f84:	fba3 1302 	umull	r1, r3, r3, r2
 8002f88:	095b      	lsrs	r3, r3, #5
 8002f8a:	2164      	movs	r1, #100	; 0x64
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	3332      	adds	r3, #50	; 0x32
 8002f96:	4a07      	ldr	r2, [pc, #28]	; (8002fb4 <UART_SetConfig+0x384>)
 8002f98:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	f003 0207 	and.w	r2, r3, #7
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4442      	add	r2, r8
 8002fa8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002faa:	e1b2      	b.n	8003312 <UART_SetConfig+0x6e2>
 8002fac:	40011000 	.word	0x40011000
 8002fb0:	40011400 	.word	0x40011400
 8002fb4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4ad7      	ldr	r2, [pc, #860]	; (800331c <UART_SetConfig+0x6ec>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d005      	beq.n	8002fce <UART_SetConfig+0x39e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4ad6      	ldr	r2, [pc, #856]	; (8003320 <UART_SetConfig+0x6f0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	f040 80d1 	bne.w	8003170 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fce:	f7fe fef1 	bl	8001db4 <HAL_RCC_GetPCLK2Freq>
 8002fd2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	469a      	mov	sl, r3
 8002fd8:	f04f 0b00 	mov.w	fp, #0
 8002fdc:	46d0      	mov	r8, sl
 8002fde:	46d9      	mov	r9, fp
 8002fe0:	eb18 0308 	adds.w	r3, r8, r8
 8002fe4:	eb49 0409 	adc.w	r4, r9, r9
 8002fe8:	4698      	mov	r8, r3
 8002fea:	46a1      	mov	r9, r4
 8002fec:	eb18 080a 	adds.w	r8, r8, sl
 8002ff0:	eb49 090b 	adc.w	r9, r9, fp
 8002ff4:	f04f 0100 	mov.w	r1, #0
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003000:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003004:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003008:	4688      	mov	r8, r1
 800300a:	4691      	mov	r9, r2
 800300c:	eb1a 0508 	adds.w	r5, sl, r8
 8003010:	eb4b 0609 	adc.w	r6, fp, r9
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	4619      	mov	r1, r3
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	f04f 0400 	mov.w	r4, #0
 8003026:	0094      	lsls	r4, r2, #2
 8003028:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800302c:	008b      	lsls	r3, r1, #2
 800302e:	461a      	mov	r2, r3
 8003030:	4623      	mov	r3, r4
 8003032:	4628      	mov	r0, r5
 8003034:	4631      	mov	r1, r6
 8003036:	f7fd f923 	bl	8000280 <__aeabi_uldivmod>
 800303a:	4603      	mov	r3, r0
 800303c:	460c      	mov	r4, r1
 800303e:	461a      	mov	r2, r3
 8003040:	4bb8      	ldr	r3, [pc, #736]	; (8003324 <UART_SetConfig+0x6f4>)
 8003042:	fba3 2302 	umull	r2, r3, r3, r2
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	469b      	mov	fp, r3
 8003050:	f04f 0c00 	mov.w	ip, #0
 8003054:	46d9      	mov	r9, fp
 8003056:	46e2      	mov	sl, ip
 8003058:	eb19 0309 	adds.w	r3, r9, r9
 800305c:	eb4a 040a 	adc.w	r4, sl, sl
 8003060:	4699      	mov	r9, r3
 8003062:	46a2      	mov	sl, r4
 8003064:	eb19 090b 	adds.w	r9, r9, fp
 8003068:	eb4a 0a0c 	adc.w	sl, sl, ip
 800306c:	f04f 0100 	mov.w	r1, #0
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003078:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800307c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003080:	4689      	mov	r9, r1
 8003082:	4692      	mov	sl, r2
 8003084:	eb1b 0509 	adds.w	r5, fp, r9
 8003088:	eb4c 060a 	adc.w	r6, ip, sl
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4619      	mov	r1, r3
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	f04f 0400 	mov.w	r4, #0
 800309e:	0094      	lsls	r4, r2, #2
 80030a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030a4:	008b      	lsls	r3, r1, #2
 80030a6:	461a      	mov	r2, r3
 80030a8:	4623      	mov	r3, r4
 80030aa:	4628      	mov	r0, r5
 80030ac:	4631      	mov	r1, r6
 80030ae:	f7fd f8e7 	bl	8000280 <__aeabi_uldivmod>
 80030b2:	4603      	mov	r3, r0
 80030b4:	460c      	mov	r4, r1
 80030b6:	461a      	mov	r2, r3
 80030b8:	4b9a      	ldr	r3, [pc, #616]	; (8003324 <UART_SetConfig+0x6f4>)
 80030ba:	fba3 1302 	umull	r1, r3, r3, r2
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	2164      	movs	r1, #100	; 0x64
 80030c2:	fb01 f303 	mul.w	r3, r1, r3
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	3332      	adds	r3, #50	; 0x32
 80030cc:	4a95      	ldr	r2, [pc, #596]	; (8003324 <UART_SetConfig+0x6f4>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030d8:	4498      	add	r8, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	469b      	mov	fp, r3
 80030de:	f04f 0c00 	mov.w	ip, #0
 80030e2:	46d9      	mov	r9, fp
 80030e4:	46e2      	mov	sl, ip
 80030e6:	eb19 0309 	adds.w	r3, r9, r9
 80030ea:	eb4a 040a 	adc.w	r4, sl, sl
 80030ee:	4699      	mov	r9, r3
 80030f0:	46a2      	mov	sl, r4
 80030f2:	eb19 090b 	adds.w	r9, r9, fp
 80030f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80030fa:	f04f 0100 	mov.w	r1, #0
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003106:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800310a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800310e:	4689      	mov	r9, r1
 8003110:	4692      	mov	sl, r2
 8003112:	eb1b 0509 	adds.w	r5, fp, r9
 8003116:	eb4c 060a 	adc.w	r6, ip, sl
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4619      	mov	r1, r3
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	f04f 0400 	mov.w	r4, #0
 800312c:	0094      	lsls	r4, r2, #2
 800312e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003132:	008b      	lsls	r3, r1, #2
 8003134:	461a      	mov	r2, r3
 8003136:	4623      	mov	r3, r4
 8003138:	4628      	mov	r0, r5
 800313a:	4631      	mov	r1, r6
 800313c:	f7fd f8a0 	bl	8000280 <__aeabi_uldivmod>
 8003140:	4603      	mov	r3, r0
 8003142:	460c      	mov	r4, r1
 8003144:	461a      	mov	r2, r3
 8003146:	4b77      	ldr	r3, [pc, #476]	; (8003324 <UART_SetConfig+0x6f4>)
 8003148:	fba3 1302 	umull	r1, r3, r3, r2
 800314c:	095b      	lsrs	r3, r3, #5
 800314e:	2164      	movs	r1, #100	; 0x64
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	3332      	adds	r3, #50	; 0x32
 800315a:	4a72      	ldr	r2, [pc, #456]	; (8003324 <UART_SetConfig+0x6f4>)
 800315c:	fba2 2303 	umull	r2, r3, r2, r3
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	f003 020f 	and.w	r2, r3, #15
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4442      	add	r2, r8
 800316c:	609a      	str	r2, [r3, #8]
 800316e:	e0d0      	b.n	8003312 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003170:	f7fe fe0c 	bl	8001d8c <HAL_RCC_GetPCLK1Freq>
 8003174:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	469a      	mov	sl, r3
 800317a:	f04f 0b00 	mov.w	fp, #0
 800317e:	46d0      	mov	r8, sl
 8003180:	46d9      	mov	r9, fp
 8003182:	eb18 0308 	adds.w	r3, r8, r8
 8003186:	eb49 0409 	adc.w	r4, r9, r9
 800318a:	4698      	mov	r8, r3
 800318c:	46a1      	mov	r9, r4
 800318e:	eb18 080a 	adds.w	r8, r8, sl
 8003192:	eb49 090b 	adc.w	r9, r9, fp
 8003196:	f04f 0100 	mov.w	r1, #0
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031aa:	4688      	mov	r8, r1
 80031ac:	4691      	mov	r9, r2
 80031ae:	eb1a 0508 	adds.w	r5, sl, r8
 80031b2:	eb4b 0609 	adc.w	r6, fp, r9
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4619      	mov	r1, r3
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	f04f 0400 	mov.w	r4, #0
 80031c8:	0094      	lsls	r4, r2, #2
 80031ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031ce:	008b      	lsls	r3, r1, #2
 80031d0:	461a      	mov	r2, r3
 80031d2:	4623      	mov	r3, r4
 80031d4:	4628      	mov	r0, r5
 80031d6:	4631      	mov	r1, r6
 80031d8:	f7fd f852 	bl	8000280 <__aeabi_uldivmod>
 80031dc:	4603      	mov	r3, r0
 80031de:	460c      	mov	r4, r1
 80031e0:	461a      	mov	r2, r3
 80031e2:	4b50      	ldr	r3, [pc, #320]	; (8003324 <UART_SetConfig+0x6f4>)
 80031e4:	fba3 2302 	umull	r2, r3, r3, r2
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	469b      	mov	fp, r3
 80031f2:	f04f 0c00 	mov.w	ip, #0
 80031f6:	46d9      	mov	r9, fp
 80031f8:	46e2      	mov	sl, ip
 80031fa:	eb19 0309 	adds.w	r3, r9, r9
 80031fe:	eb4a 040a 	adc.w	r4, sl, sl
 8003202:	4699      	mov	r9, r3
 8003204:	46a2      	mov	sl, r4
 8003206:	eb19 090b 	adds.w	r9, r9, fp
 800320a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800320e:	f04f 0100 	mov.w	r1, #0
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800321a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800321e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003222:	4689      	mov	r9, r1
 8003224:	4692      	mov	sl, r2
 8003226:	eb1b 0509 	adds.w	r5, fp, r9
 800322a:	eb4c 060a 	adc.w	r6, ip, sl
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	4619      	mov	r1, r3
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	f04f 0400 	mov.w	r4, #0
 8003240:	0094      	lsls	r4, r2, #2
 8003242:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003246:	008b      	lsls	r3, r1, #2
 8003248:	461a      	mov	r2, r3
 800324a:	4623      	mov	r3, r4
 800324c:	4628      	mov	r0, r5
 800324e:	4631      	mov	r1, r6
 8003250:	f7fd f816 	bl	8000280 <__aeabi_uldivmod>
 8003254:	4603      	mov	r3, r0
 8003256:	460c      	mov	r4, r1
 8003258:	461a      	mov	r2, r3
 800325a:	4b32      	ldr	r3, [pc, #200]	; (8003324 <UART_SetConfig+0x6f4>)
 800325c:	fba3 1302 	umull	r1, r3, r3, r2
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	2164      	movs	r1, #100	; 0x64
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	3332      	adds	r3, #50	; 0x32
 800326e:	4a2d      	ldr	r2, [pc, #180]	; (8003324 <UART_SetConfig+0x6f4>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800327a:	4498      	add	r8, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	469b      	mov	fp, r3
 8003280:	f04f 0c00 	mov.w	ip, #0
 8003284:	46d9      	mov	r9, fp
 8003286:	46e2      	mov	sl, ip
 8003288:	eb19 0309 	adds.w	r3, r9, r9
 800328c:	eb4a 040a 	adc.w	r4, sl, sl
 8003290:	4699      	mov	r9, r3
 8003292:	46a2      	mov	sl, r4
 8003294:	eb19 090b 	adds.w	r9, r9, fp
 8003298:	eb4a 0a0c 	adc.w	sl, sl, ip
 800329c:	f04f 0100 	mov.w	r1, #0
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032b0:	4689      	mov	r9, r1
 80032b2:	4692      	mov	sl, r2
 80032b4:	eb1b 0509 	adds.w	r5, fp, r9
 80032b8:	eb4c 060a 	adc.w	r6, ip, sl
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	4619      	mov	r1, r3
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	f04f 0400 	mov.w	r4, #0
 80032ce:	0094      	lsls	r4, r2, #2
 80032d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032d4:	008b      	lsls	r3, r1, #2
 80032d6:	461a      	mov	r2, r3
 80032d8:	4623      	mov	r3, r4
 80032da:	4628      	mov	r0, r5
 80032dc:	4631      	mov	r1, r6
 80032de:	f7fc ffcf 	bl	8000280 <__aeabi_uldivmod>
 80032e2:	4603      	mov	r3, r0
 80032e4:	460c      	mov	r4, r1
 80032e6:	461a      	mov	r2, r3
 80032e8:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <UART_SetConfig+0x6f4>)
 80032ea:	fba3 1302 	umull	r1, r3, r3, r2
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	2164      	movs	r1, #100	; 0x64
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	3332      	adds	r3, #50	; 0x32
 80032fc:	4a09      	ldr	r2, [pc, #36]	; (8003324 <UART_SetConfig+0x6f4>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	f003 020f 	and.w	r2, r3, #15
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4442      	add	r2, r8
 800330e:	609a      	str	r2, [r3, #8]
}
 8003310:	e7ff      	b.n	8003312 <UART_SetConfig+0x6e2>
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800331c:	40011000 	.word	0x40011000
 8003320:	40011400 	.word	0x40011400
 8003324:	51eb851f 	.word	0x51eb851f

08003328 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800333a:	2b84      	cmp	r3, #132	; 0x84
 800333c:	d005      	beq.n	800334a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800333e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4413      	add	r3, r2
 8003346:	3303      	adds	r3, #3
 8003348:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800334a:	68fb      	ldr	r3, [r7, #12]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800335c:	f000 fbce 	bl	8003afc <vTaskStartScheduler>
  
  return osOK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	bd80      	pop	{r7, pc}

08003366 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003366:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003368:	b089      	sub	sp, #36	; 0x24
 800336a:	af04      	add	r7, sp, #16
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d020      	beq.n	80033ba <osThreadCreate+0x54>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01c      	beq.n	80033ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685c      	ldr	r4, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681d      	ldr	r5, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691e      	ldr	r6, [r3, #16]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff ffc8 	bl	8003328 <makeFreeRtosPriority>
 8003398:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033a2:	9202      	str	r2, [sp, #8]
 80033a4:	9301      	str	r3, [sp, #4]
 80033a6:	9100      	str	r1, [sp, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	4632      	mov	r2, r6
 80033ac:	4629      	mov	r1, r5
 80033ae:	4620      	mov	r0, r4
 80033b0:	f000 f8d9 	bl	8003566 <xTaskCreateStatic>
 80033b4:	4603      	mov	r3, r0
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	e01c      	b.n	80033f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685c      	ldr	r4, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033c6:	b29e      	uxth	r6, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff ffaa 	bl	8003328 <makeFreeRtosPriority>
 80033d4:	4602      	mov	r2, r0
 80033d6:	f107 030c 	add.w	r3, r7, #12
 80033da:	9301      	str	r3, [sp, #4]
 80033dc:	9200      	str	r2, [sp, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	4632      	mov	r2, r6
 80033e2:	4629      	mov	r1, r5
 80033e4:	4620      	mov	r0, r4
 80033e6:	f000 f918 	bl	800361a <xTaskCreate>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d001      	beq.n	80033f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	e000      	b.n	80033f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80033f4:	68fb      	ldr	r3, [r7, #12]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033fe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f103 0208 	add.w	r2, r3, #8
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f04f 32ff 	mov.w	r2, #4294967295
 8003416:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f103 0208 	add.w	r2, r3, #8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f103 0208 	add.w	r2, r3, #8
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	601a      	str	r2, [r3, #0]
}
 8003494:	bf00      	nop
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b6:	d103      	bne.n	80034c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	e00c      	b.n	80034da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3308      	adds	r3, #8
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	e002      	b.n	80034ce <vListInsert+0x2e>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d2f6      	bcs.n	80034c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	601a      	str	r2, [r3, #0]
}
 8003506:	bf00      	nop
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003512:	b480      	push	{r7}
 8003514:	b085      	sub	sp, #20
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6892      	ldr	r2, [r2, #8]
 8003528:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6852      	ldr	r2, [r2, #4]
 8003532:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	429a      	cmp	r2, r3
 800353c:	d103      	bne.n	8003546 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	1e5a      	subs	r2, r3, #1
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003566:	b580      	push	{r7, lr}
 8003568:	b08e      	sub	sp, #56	; 0x38
 800356a:	af04      	add	r7, sp, #16
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	607a      	str	r2, [r7, #4]
 8003572:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800357a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	623b      	str	r3, [r7, #32]
 800358c:	e7fe      	b.n	800358c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800358e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003590:	2b00      	cmp	r3, #0
 8003592:	d109      	bne.n	80035a8 <xTaskCreateStatic+0x42>
 8003594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003598:	f383 8811 	msr	BASEPRI, r3
 800359c:	f3bf 8f6f 	isb	sy
 80035a0:	f3bf 8f4f 	dsb	sy
 80035a4:	61fb      	str	r3, [r7, #28]
 80035a6:	e7fe      	b.n	80035a6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035a8:	2354      	movs	r3, #84	; 0x54
 80035aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	2b54      	cmp	r3, #84	; 0x54
 80035b0:	d009      	beq.n	80035c6 <xTaskCreateStatic+0x60>
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	61bb      	str	r3, [r7, #24]
 80035c4:	e7fe      	b.n	80035c4 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80035c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80035c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d01e      	beq.n	800360c <xTaskCreateStatic+0xa6>
 80035ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d01b      	beq.n	800360c <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	2202      	movs	r2, #2
 80035e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035e6:	2300      	movs	r3, #0
 80035e8:	9303      	str	r3, [sp, #12]
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	9302      	str	r3, [sp, #8]
 80035ee:	f107 0314 	add.w	r3, r7, #20
 80035f2:	9301      	str	r3, [sp, #4]
 80035f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f850 	bl	80036a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003604:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003606:	f000 f8d3 	bl	80037b0 <prvAddNewTaskToReadyList>
 800360a:	e001      	b.n	8003610 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003610:	697b      	ldr	r3, [r7, #20]
	}
 8003612:	4618      	mov	r0, r3
 8003614:	3728      	adds	r7, #40	; 0x28
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800361a:	b580      	push	{r7, lr}
 800361c:	b08c      	sub	sp, #48	; 0x30
 800361e:	af04      	add	r7, sp, #16
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	4613      	mov	r3, r2
 8003628:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4618      	mov	r0, r3
 8003630:	f000 ffd8 	bl	80045e4 <pvPortMalloc>
 8003634:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00e      	beq.n	800365a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800363c:	2054      	movs	r0, #84	; 0x54
 800363e:	f000 ffd1 	bl	80045e4 <pvPortMalloc>
 8003642:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
 8003650:	e005      	b.n	800365e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003652:	6978      	ldr	r0, [r7, #20]
 8003654:	f001 f888 	bl	8004768 <vPortFree>
 8003658:	e001      	b.n	800365e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800365a:	2300      	movs	r3, #0
 800365c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d017      	beq.n	8003694 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800366c:	88fa      	ldrh	r2, [r7, #6]
 800366e:	2300      	movs	r3, #0
 8003670:	9303      	str	r3, [sp, #12]
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	9302      	str	r3, [sp, #8]
 8003676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003678:	9301      	str	r3, [sp, #4]
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68b9      	ldr	r1, [r7, #8]
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f80e 	bl	80036a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003688:	69f8      	ldr	r0, [r7, #28]
 800368a:	f000 f891 	bl	80037b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800368e:	2301      	movs	r3, #1
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	e002      	b.n	800369a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003694:	f04f 33ff 	mov.w	r3, #4294967295
 8003698:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800369a:	69bb      	ldr	r3, [r7, #24]
	}
 800369c:	4618      	mov	r0, r3
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036bc:	3b01      	subs	r3, #1
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	f023 0307 	bic.w	r3, r3, #7
 80036ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d009      	beq.n	80036ea <prvInitialiseNewTask+0x46>
 80036d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	e7fe      	b.n	80036e8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d01f      	beq.n	8003730 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036f0:	2300      	movs	r3, #0
 80036f2:	61fb      	str	r3, [r7, #28]
 80036f4:	e012      	b.n	800371c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	4413      	add	r3, r2
 80036fc:	7819      	ldrb	r1, [r3, #0]
 80036fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	4413      	add	r3, r2
 8003704:	3334      	adds	r3, #52	; 0x34
 8003706:	460a      	mov	r2, r1
 8003708:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	4413      	add	r3, r2
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d006      	beq.n	8003724 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	3301      	adds	r3, #1
 800371a:	61fb      	str	r3, [r7, #28]
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b0f      	cmp	r3, #15
 8003720:	d9e9      	bls.n	80036f6 <prvInitialiseNewTask+0x52>
 8003722:	e000      	b.n	8003726 <prvInitialiseNewTask+0x82>
			{
				break;
 8003724:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800372e:	e003      	b.n	8003738 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	2b06      	cmp	r3, #6
 800373c:	d901      	bls.n	8003742 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800373e:	2306      	movs	r3, #6
 8003740:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003746:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800374c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800374e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003750:	2200      	movs	r2, #0
 8003752:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003756:	3304      	adds	r3, #4
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fe70 	bl	800343e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800375e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003760:	3318      	adds	r3, #24
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff fe6b 	bl	800343e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800376c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	f1c3 0207 	rsb	r2, r3, #7
 8003774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003776:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800377c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	2200      	movs	r2, #0
 8003782:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	68f9      	ldr	r1, [r7, #12]
 8003790:	69b8      	ldr	r0, [r7, #24]
 8003792:	f000 fd23 	bl	80041dc <pxPortInitialiseStack>
 8003796:	4602      	mov	r2, r0
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037a8:	bf00      	nop
 80037aa:	3720      	adds	r7, #32
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037b8:	f000 fe38 	bl	800442c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037bc:	4b2a      	ldr	r3, [pc, #168]	; (8003868 <prvAddNewTaskToReadyList+0xb8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3301      	adds	r3, #1
 80037c2:	4a29      	ldr	r2, [pc, #164]	; (8003868 <prvAddNewTaskToReadyList+0xb8>)
 80037c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037c6:	4b29      	ldr	r3, [pc, #164]	; (800386c <prvAddNewTaskToReadyList+0xbc>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d109      	bne.n	80037e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037ce:	4a27      	ldr	r2, [pc, #156]	; (800386c <prvAddNewTaskToReadyList+0xbc>)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037d4:	4b24      	ldr	r3, [pc, #144]	; (8003868 <prvAddNewTaskToReadyList+0xb8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d110      	bne.n	80037fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037dc:	f000 fbc0 	bl	8003f60 <prvInitialiseTaskLists>
 80037e0:	e00d      	b.n	80037fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037e2:	4b23      	ldr	r3, [pc, #140]	; (8003870 <prvAddNewTaskToReadyList+0xc0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037ea:	4b20      	ldr	r3, [pc, #128]	; (800386c <prvAddNewTaskToReadyList+0xbc>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d802      	bhi.n	80037fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037f8:	4a1c      	ldr	r2, [pc, #112]	; (800386c <prvAddNewTaskToReadyList+0xbc>)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037fe:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <prvAddNewTaskToReadyList+0xc4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3301      	adds	r3, #1
 8003804:	4a1b      	ldr	r2, [pc, #108]	; (8003874 <prvAddNewTaskToReadyList+0xc4>)
 8003806:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	2201      	movs	r2, #1
 800380e:	409a      	lsls	r2, r3
 8003810:	4b19      	ldr	r3, [pc, #100]	; (8003878 <prvAddNewTaskToReadyList+0xc8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4313      	orrs	r3, r2
 8003816:	4a18      	ldr	r2, [pc, #96]	; (8003878 <prvAddNewTaskToReadyList+0xc8>)
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381e:	4613      	mov	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4a15      	ldr	r2, [pc, #84]	; (800387c <prvAddNewTaskToReadyList+0xcc>)
 8003828:	441a      	add	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3304      	adds	r3, #4
 800382e:	4619      	mov	r1, r3
 8003830:	4610      	mov	r0, r2
 8003832:	f7ff fe11 	bl	8003458 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003836:	f000 fe27 	bl	8004488 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800383a:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <prvAddNewTaskToReadyList+0xc0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00e      	beq.n	8003860 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003842:	4b0a      	ldr	r3, [pc, #40]	; (800386c <prvAddNewTaskToReadyList+0xbc>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	429a      	cmp	r2, r3
 800384e:	d207      	bcs.n	8003860 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <prvAddNewTaskToReadyList+0xd0>)
 8003852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003860:	bf00      	nop
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	200003f4 	.word	0x200003f4
 800386c:	200002f4 	.word	0x200002f4
 8003870:	20000400 	.word	0x20000400
 8003874:	20000410 	.word	0x20000410
 8003878:	200003fc 	.word	0x200003fc
 800387c:	200002f8 	.word	0x200002f8
 8003880:	e000ed04 	.word	0xe000ed04

08003884 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800388c:	f000 fdce 	bl	800442c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d102      	bne.n	800389c <vTaskDelete+0x18>
 8003896:	4b38      	ldr	r3, [pc, #224]	; (8003978 <vTaskDelete+0xf4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	e000      	b.n	800389e <vTaskDelete+0x1a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3304      	adds	r3, #4
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff fe34 	bl	8003512 <uxListRemove>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d115      	bne.n	80038dc <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b4:	4931      	ldr	r1, [pc, #196]	; (800397c <vTaskDelete+0xf8>)
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10a      	bne.n	80038dc <vTaskDelete+0x58>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	2201      	movs	r2, #1
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43da      	mvns	r2, r3
 80038d2:	4b2b      	ldr	r3, [pc, #172]	; (8003980 <vTaskDelete+0xfc>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4013      	ands	r3, r2
 80038d8:	4a29      	ldr	r2, [pc, #164]	; (8003980 <vTaskDelete+0xfc>)
 80038da:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d004      	beq.n	80038ee <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	3318      	adds	r3, #24
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff fe12 	bl	8003512 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80038ee:	4b25      	ldr	r3, [pc, #148]	; (8003984 <vTaskDelete+0x100>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3301      	adds	r3, #1
 80038f4:	4a23      	ldr	r2, [pc, #140]	; (8003984 <vTaskDelete+0x100>)
 80038f6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80038f8:	4b1f      	ldr	r3, [pc, #124]	; (8003978 <vTaskDelete+0xf4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d10b      	bne.n	800391a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	3304      	adds	r3, #4
 8003906:	4619      	mov	r1, r3
 8003908:	481f      	ldr	r0, [pc, #124]	; (8003988 <vTaskDelete+0x104>)
 800390a:	f7ff fda5 	bl	8003458 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800390e:	4b1f      	ldr	r3, [pc, #124]	; (800398c <vTaskDelete+0x108>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3301      	adds	r3, #1
 8003914:	4a1d      	ldr	r2, [pc, #116]	; (800398c <vTaskDelete+0x108>)
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	e009      	b.n	800392e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800391a:	4b1d      	ldr	r3, [pc, #116]	; (8003990 <vTaskDelete+0x10c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3b01      	subs	r3, #1
 8003920:	4a1b      	ldr	r2, [pc, #108]	; (8003990 <vTaskDelete+0x10c>)
 8003922:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 fb87 	bl	8004038 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800392a:	f000 fbb3 	bl	8004094 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800392e:	f000 fdab 	bl	8004488 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003932:	4b18      	ldr	r3, [pc, #96]	; (8003994 <vTaskDelete+0x110>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d01a      	beq.n	8003970 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 800393a:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <vTaskDelete+0xf4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	429a      	cmp	r2, r3
 8003942:	d115      	bne.n	8003970 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003944:	4b14      	ldr	r3, [pc, #80]	; (8003998 <vTaskDelete+0x114>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d009      	beq.n	8003960 <vTaskDelete+0xdc>
 800394c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003950:	f383 8811 	msr	BASEPRI, r3
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	e7fe      	b.n	800395e <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8003960:	4b0e      	ldr	r3, [pc, #56]	; (800399c <vTaskDelete+0x118>)
 8003962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003970:	bf00      	nop
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	200002f4 	.word	0x200002f4
 800397c:	200002f8 	.word	0x200002f8
 8003980:	200003fc 	.word	0x200003fc
 8003984:	20000410 	.word	0x20000410
 8003988:	200003c8 	.word	0x200003c8
 800398c:	200003dc 	.word	0x200003dc
 8003990:	200003f4 	.word	0x200003f4
 8003994:	20000400 	.word	0x20000400
 8003998:	2000041c 	.word	0x2000041c
 800399c:	e000ed04 	.word	0xe000ed04

080039a0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08a      	sub	sp, #40	; 0x28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80039aa:	2300      	movs	r3, #0
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d109      	bne.n	80039c8 <vTaskDelayUntil+0x28>
 80039b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	e7fe      	b.n	80039c6 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <vTaskDelayUntil+0x42>
 80039ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d2:	f383 8811 	msr	BASEPRI, r3
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	e7fe      	b.n	80039e0 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80039e2:	4b29      	ldr	r3, [pc, #164]	; (8003a88 <vTaskDelayUntil+0xe8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d009      	beq.n	80039fe <vTaskDelayUntil+0x5e>
 80039ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ee:	f383 8811 	msr	BASEPRI, r3
 80039f2:	f3bf 8f6f 	isb	sy
 80039f6:	f3bf 8f4f 	dsb	sy
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	e7fe      	b.n	80039fc <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 80039fe:	f000 f8db 	bl	8003bb8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003a02:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <vTaskDelayUntil+0xec>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	4413      	add	r3, r2
 8003a10:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6a3a      	ldr	r2, [r7, #32]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d20b      	bcs.n	8003a34 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d211      	bcs.n	8003a4a <vTaskDelayUntil+0xaa>
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d90d      	bls.n	8003a4a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
 8003a32:	e00a      	b.n	8003a4a <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69fa      	ldr	r2, [r7, #28]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d303      	bcc.n	8003a46 <vTaskDelayUntil+0xa6>
 8003a3e:	69fa      	ldr	r2, [r7, #28]
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d901      	bls.n	8003a4a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8003a46:	2301      	movs	r3, #1
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69fa      	ldr	r2, [r7, #28]
 8003a4e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d006      	beq.n	8003a64 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003a56:	69fa      	ldr	r2, [r7, #28]
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fb56 	bl	8004110 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003a64:	f000 f8b6 	bl	8003bd4 <xTaskResumeAll>
 8003a68:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d107      	bne.n	8003a80 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8003a70:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <vTaskDelayUntil+0xf0>)
 8003a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a80:	bf00      	nop
 8003a82:	3728      	adds	r7, #40	; 0x28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	2000041c 	.word	0x2000041c
 8003a8c:	200003f8 	.word	0x200003f8
 8003a90:	e000ed04 	.word	0xe000ed04

08003a94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d016      	beq.n	8003ad4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003aa6:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <vTaskDelay+0x60>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d009      	beq.n	8003ac2 <vTaskDelay+0x2e>
 8003aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab2:	f383 8811 	msr	BASEPRI, r3
 8003ab6:	f3bf 8f6f 	isb	sy
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	e7fe      	b.n	8003ac0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003ac2:	f000 f879 	bl	8003bb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 fb21 	bl	8004110 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ace:	f000 f881 	bl	8003bd4 <xTaskResumeAll>
 8003ad2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d107      	bne.n	8003aea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003ada:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <vTaskDelay+0x64>)
 8003adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003aea:	bf00      	nop
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	2000041c 	.word	0x2000041c
 8003af8:	e000ed04 	.word	0xe000ed04

08003afc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08a      	sub	sp, #40	; 0x28
 8003b00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b0a:	463a      	mov	r2, r7
 8003b0c:	1d39      	adds	r1, r7, #4
 8003b0e:	f107 0308 	add.w	r3, r7, #8
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fc fd34 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b18:	6839      	ldr	r1, [r7, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	9202      	str	r2, [sp, #8]
 8003b20:	9301      	str	r3, [sp, #4]
 8003b22:	2300      	movs	r3, #0
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	2300      	movs	r3, #0
 8003b28:	460a      	mov	r2, r1
 8003b2a:	491d      	ldr	r1, [pc, #116]	; (8003ba0 <vTaskStartScheduler+0xa4>)
 8003b2c:	481d      	ldr	r0, [pc, #116]	; (8003ba4 <vTaskStartScheduler+0xa8>)
 8003b2e:	f7ff fd1a 	bl	8003566 <xTaskCreateStatic>
 8003b32:	4602      	mov	r2, r0
 8003b34:	4b1c      	ldr	r3, [pc, #112]	; (8003ba8 <vTaskStartScheduler+0xac>)
 8003b36:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b38:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <vTaskStartScheduler+0xac>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b40:	2301      	movs	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	e001      	b.n	8003b4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d115      	bne.n	8003b7c <vTaskStartScheduler+0x80>
 8003b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b62:	4b12      	ldr	r3, [pc, #72]	; (8003bac <vTaskStartScheduler+0xb0>)
 8003b64:	f04f 32ff 	mov.w	r2, #4294967295
 8003b68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b6a:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <vTaskStartScheduler+0xb4>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b70:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <vTaskStartScheduler+0xb8>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b76:	f000 fbbb 	bl	80042f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b7a:	e00d      	b.n	8003b98 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b82:	d109      	bne.n	8003b98 <vTaskStartScheduler+0x9c>
 8003b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	e7fe      	b.n	8003b96 <vTaskStartScheduler+0x9a>
}
 8003b98:	bf00      	nop
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	0800647c 	.word	0x0800647c
 8003ba4:	08003f31 	.word	0x08003f31
 8003ba8:	20000418 	.word	0x20000418
 8003bac:	20000414 	.word	0x20000414
 8003bb0:	20000400 	.word	0x20000400
 8003bb4:	200003f8 	.word	0x200003f8

08003bb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003bbc:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <vTaskSuspendAll+0x18>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	4a03      	ldr	r2, [pc, #12]	; (8003bd0 <vTaskSuspendAll+0x18>)
 8003bc4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003bc6:	bf00      	nop
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	2000041c 	.word	0x2000041c

08003bd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003be2:	4b41      	ldr	r3, [pc, #260]	; (8003ce8 <xTaskResumeAll+0x114>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d109      	bne.n	8003bfe <xTaskResumeAll+0x2a>
 8003bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	e7fe      	b.n	8003bfc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003bfe:	f000 fc15 	bl	800442c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c02:	4b39      	ldr	r3, [pc, #228]	; (8003ce8 <xTaskResumeAll+0x114>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	4a37      	ldr	r2, [pc, #220]	; (8003ce8 <xTaskResumeAll+0x114>)
 8003c0a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c0c:	4b36      	ldr	r3, [pc, #216]	; (8003ce8 <xTaskResumeAll+0x114>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d161      	bne.n	8003cd8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c14:	4b35      	ldr	r3, [pc, #212]	; (8003cec <xTaskResumeAll+0x118>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d05d      	beq.n	8003cd8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c1c:	e02e      	b.n	8003c7c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c1e:	4b34      	ldr	r3, [pc, #208]	; (8003cf0 <xTaskResumeAll+0x11c>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3318      	adds	r3, #24
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fc71 	bl	8003512 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	3304      	adds	r3, #4
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff fc6c 	bl	8003512 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	2201      	movs	r2, #1
 8003c40:	409a      	lsls	r2, r3
 8003c42:	4b2c      	ldr	r3, [pc, #176]	; (8003cf4 <xTaskResumeAll+0x120>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	4a2a      	ldr	r2, [pc, #168]	; (8003cf4 <xTaskResumeAll+0x120>)
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4a27      	ldr	r2, [pc, #156]	; (8003cf8 <xTaskResumeAll+0x124>)
 8003c5a:	441a      	add	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4619      	mov	r1, r3
 8003c62:	4610      	mov	r0, r2
 8003c64:	f7ff fbf8 	bl	8003458 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6c:	4b23      	ldr	r3, [pc, #140]	; (8003cfc <xTaskResumeAll+0x128>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d302      	bcc.n	8003c7c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003c76:	4b22      	ldr	r3, [pc, #136]	; (8003d00 <xTaskResumeAll+0x12c>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c7c:	4b1c      	ldr	r3, [pc, #112]	; (8003cf0 <xTaskResumeAll+0x11c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1cc      	bne.n	8003c1e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c8a:	f000 fa03 	bl	8004094 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003c8e:	4b1d      	ldr	r3, [pc, #116]	; (8003d04 <xTaskResumeAll+0x130>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d010      	beq.n	8003cbc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c9a:	f000 f837 	bl	8003d0c <xTaskIncrementTick>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003ca4:	4b16      	ldr	r3, [pc, #88]	; (8003d00 <xTaskResumeAll+0x12c>)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3b01      	subs	r3, #1
 8003cae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f1      	bne.n	8003c9a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003cb6:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <xTaskResumeAll+0x130>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cbc:	4b10      	ldr	r3, [pc, #64]	; (8003d00 <xTaskResumeAll+0x12c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d009      	beq.n	8003cd8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003cc8:	4b0f      	ldr	r3, [pc, #60]	; (8003d08 <xTaskResumeAll+0x134>)
 8003cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cd8:	f000 fbd6 	bl	8004488 <vPortExitCritical>

	return xAlreadyYielded;
 8003cdc:	68bb      	ldr	r3, [r7, #8]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	2000041c 	.word	0x2000041c
 8003cec:	200003f4 	.word	0x200003f4
 8003cf0:	200003b4 	.word	0x200003b4
 8003cf4:	200003fc 	.word	0x200003fc
 8003cf8:	200002f8 	.word	0x200002f8
 8003cfc:	200002f4 	.word	0x200002f4
 8003d00:	20000408 	.word	0x20000408
 8003d04:	20000404 	.word	0x20000404
 8003d08:	e000ed04 	.word	0xe000ed04

08003d0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d16:	4b4e      	ldr	r3, [pc, #312]	; (8003e50 <xTaskIncrementTick+0x144>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f040 8087 	bne.w	8003e2e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d20:	4b4c      	ldr	r3, [pc, #304]	; (8003e54 <xTaskIncrementTick+0x148>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3301      	adds	r3, #1
 8003d26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d28:	4a4a      	ldr	r2, [pc, #296]	; (8003e54 <xTaskIncrementTick+0x148>)
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d11f      	bne.n	8003d74 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d34:	4b48      	ldr	r3, [pc, #288]	; (8003e58 <xTaskIncrementTick+0x14c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d009      	beq.n	8003d52 <xTaskIncrementTick+0x46>
 8003d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	e7fe      	b.n	8003d50 <xTaskIncrementTick+0x44>
 8003d52:	4b41      	ldr	r3, [pc, #260]	; (8003e58 <xTaskIncrementTick+0x14c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	4b40      	ldr	r3, [pc, #256]	; (8003e5c <xTaskIncrementTick+0x150>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a3e      	ldr	r2, [pc, #248]	; (8003e58 <xTaskIncrementTick+0x14c>)
 8003d5e:	6013      	str	r3, [r2, #0]
 8003d60:	4a3e      	ldr	r2, [pc, #248]	; (8003e5c <xTaskIncrementTick+0x150>)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	4b3e      	ldr	r3, [pc, #248]	; (8003e60 <xTaskIncrementTick+0x154>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	4a3c      	ldr	r2, [pc, #240]	; (8003e60 <xTaskIncrementTick+0x154>)
 8003d6e:	6013      	str	r3, [r2, #0]
 8003d70:	f000 f990 	bl	8004094 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d74:	4b3b      	ldr	r3, [pc, #236]	; (8003e64 <xTaskIncrementTick+0x158>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d348      	bcc.n	8003e10 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d7e:	4b36      	ldr	r3, [pc, #216]	; (8003e58 <xTaskIncrementTick+0x14c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d104      	bne.n	8003d92 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d88:	4b36      	ldr	r3, [pc, #216]	; (8003e64 <xTaskIncrementTick+0x158>)
 8003d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d8e:	601a      	str	r2, [r3, #0]
					break;
 8003d90:	e03e      	b.n	8003e10 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d92:	4b31      	ldr	r3, [pc, #196]	; (8003e58 <xTaskIncrementTick+0x14c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d203      	bcs.n	8003db2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003daa:	4a2e      	ldr	r2, [pc, #184]	; (8003e64 <xTaskIncrementTick+0x158>)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003db0:	e02e      	b.n	8003e10 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	3304      	adds	r3, #4
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fbab 	bl	8003512 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d004      	beq.n	8003dce <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	3318      	adds	r3, #24
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff fba2 	bl	8003512 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	4b24      	ldr	r3, [pc, #144]	; (8003e68 <xTaskIncrementTick+0x15c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	4a22      	ldr	r2, [pc, #136]	; (8003e68 <xTaskIncrementTick+0x15c>)
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4a1f      	ldr	r2, [pc, #124]	; (8003e6c <xTaskIncrementTick+0x160>)
 8003dee:	441a      	add	r2, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	3304      	adds	r3, #4
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f7ff fb2e 	bl	8003458 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e00:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <xTaskIncrementTick+0x164>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d3b9      	bcc.n	8003d7e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e0e:	e7b6      	b.n	8003d7e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e10:	4b17      	ldr	r3, [pc, #92]	; (8003e70 <xTaskIncrementTick+0x164>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e16:	4915      	ldr	r1, [pc, #84]	; (8003e6c <xTaskIncrementTick+0x160>)
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d907      	bls.n	8003e38 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	e004      	b.n	8003e38 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003e2e:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <xTaskIncrementTick+0x168>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3301      	adds	r3, #1
 8003e34:	4a0f      	ldr	r2, [pc, #60]	; (8003e74 <xTaskIncrementTick+0x168>)
 8003e36:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003e38:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <xTaskIncrementTick+0x16c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003e40:	2301      	movs	r3, #1
 8003e42:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003e44:	697b      	ldr	r3, [r7, #20]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	2000041c 	.word	0x2000041c
 8003e54:	200003f8 	.word	0x200003f8
 8003e58:	200003ac 	.word	0x200003ac
 8003e5c:	200003b0 	.word	0x200003b0
 8003e60:	2000040c 	.word	0x2000040c
 8003e64:	20000414 	.word	0x20000414
 8003e68:	200003fc 	.word	0x200003fc
 8003e6c:	200002f8 	.word	0x200002f8
 8003e70:	200002f4 	.word	0x200002f4
 8003e74:	20000404 	.word	0x20000404
 8003e78:	20000408 	.word	0x20000408

08003e7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e82:	4b26      	ldr	r3, [pc, #152]	; (8003f1c <vTaskSwitchContext+0xa0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e8a:	4b25      	ldr	r3, [pc, #148]	; (8003f20 <vTaskSwitchContext+0xa4>)
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e90:	e03e      	b.n	8003f10 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003e92:	4b23      	ldr	r3, [pc, #140]	; (8003f20 <vTaskSwitchContext+0xa4>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e98:	4b22      	ldr	r3, [pc, #136]	; (8003f24 <vTaskSwitchContext+0xa8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	fab3 f383 	clz	r3, r3
 8003ea4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003ea6:	7afb      	ldrb	r3, [r7, #11]
 8003ea8:	f1c3 031f 	rsb	r3, r3, #31
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	491e      	ldr	r1, [pc, #120]	; (8003f28 <vTaskSwitchContext+0xac>)
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d109      	bne.n	8003ed6 <vTaskSwitchContext+0x5a>
	__asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	607b      	str	r3, [r7, #4]
 8003ed4:	e7fe      	b.n	8003ed4 <vTaskSwitchContext+0x58>
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4a11      	ldr	r2, [pc, #68]	; (8003f28 <vTaskSwitchContext+0xac>)
 8003ee2:	4413      	add	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	605a      	str	r2, [r3, #4]
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d104      	bne.n	8003f06 <vTaskSwitchContext+0x8a>
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4a07      	ldr	r2, [pc, #28]	; (8003f2c <vTaskSwitchContext+0xb0>)
 8003f0e:	6013      	str	r3, [r2, #0]
}
 8003f10:	bf00      	nop
 8003f12:	371c      	adds	r7, #28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	2000041c 	.word	0x2000041c
 8003f20:	20000408 	.word	0x20000408
 8003f24:	200003fc 	.word	0x200003fc
 8003f28:	200002f8 	.word	0x200002f8
 8003f2c:	200002f4 	.word	0x200002f4

08003f30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f38:	f000 f852 	bl	8003fe0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f3c:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <prvIdleTask+0x28>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d9f9      	bls.n	8003f38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <prvIdleTask+0x2c>)
 8003f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f54:	e7f0      	b.n	8003f38 <prvIdleTask+0x8>
 8003f56:	bf00      	nop
 8003f58:	200002f8 	.word	0x200002f8
 8003f5c:	e000ed04 	.word	0xe000ed04

08003f60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f66:	2300      	movs	r3, #0
 8003f68:	607b      	str	r3, [r7, #4]
 8003f6a:	e00c      	b.n	8003f86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4a12      	ldr	r2, [pc, #72]	; (8003fc0 <prvInitialiseTaskLists+0x60>)
 8003f78:	4413      	add	r3, r2
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff fa3f 	bl	80033fe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3301      	adds	r3, #1
 8003f84:	607b      	str	r3, [r7, #4]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b06      	cmp	r3, #6
 8003f8a:	d9ef      	bls.n	8003f6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f8c:	480d      	ldr	r0, [pc, #52]	; (8003fc4 <prvInitialiseTaskLists+0x64>)
 8003f8e:	f7ff fa36 	bl	80033fe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f92:	480d      	ldr	r0, [pc, #52]	; (8003fc8 <prvInitialiseTaskLists+0x68>)
 8003f94:	f7ff fa33 	bl	80033fe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f98:	480c      	ldr	r0, [pc, #48]	; (8003fcc <prvInitialiseTaskLists+0x6c>)
 8003f9a:	f7ff fa30 	bl	80033fe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f9e:	480c      	ldr	r0, [pc, #48]	; (8003fd0 <prvInitialiseTaskLists+0x70>)
 8003fa0:	f7ff fa2d 	bl	80033fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fa4:	480b      	ldr	r0, [pc, #44]	; (8003fd4 <prvInitialiseTaskLists+0x74>)
 8003fa6:	f7ff fa2a 	bl	80033fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003faa:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <prvInitialiseTaskLists+0x78>)
 8003fac:	4a05      	ldr	r2, [pc, #20]	; (8003fc4 <prvInitialiseTaskLists+0x64>)
 8003fae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fb0:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <prvInitialiseTaskLists+0x7c>)
 8003fb2:	4a05      	ldr	r2, [pc, #20]	; (8003fc8 <prvInitialiseTaskLists+0x68>)
 8003fb4:	601a      	str	r2, [r3, #0]
}
 8003fb6:	bf00      	nop
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	200002f8 	.word	0x200002f8
 8003fc4:	20000384 	.word	0x20000384
 8003fc8:	20000398 	.word	0x20000398
 8003fcc:	200003b4 	.word	0x200003b4
 8003fd0:	200003c8 	.word	0x200003c8
 8003fd4:	200003e0 	.word	0x200003e0
 8003fd8:	200003ac 	.word	0x200003ac
 8003fdc:	200003b0 	.word	0x200003b0

08003fe0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fe6:	e019      	b.n	800401c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003fe8:	f000 fa20 	bl	800442c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fec:	4b0f      	ldr	r3, [pc, #60]	; (800402c <prvCheckTasksWaitingTermination+0x4c>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff fa8a 	bl	8003512 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ffe:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <prvCheckTasksWaitingTermination+0x50>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3b01      	subs	r3, #1
 8004004:	4a0a      	ldr	r2, [pc, #40]	; (8004030 <prvCheckTasksWaitingTermination+0x50>)
 8004006:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004008:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <prvCheckTasksWaitingTermination+0x54>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3b01      	subs	r3, #1
 800400e:	4a09      	ldr	r2, [pc, #36]	; (8004034 <prvCheckTasksWaitingTermination+0x54>)
 8004010:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004012:	f000 fa39 	bl	8004488 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f80e 	bl	8004038 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <prvCheckTasksWaitingTermination+0x54>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1e1      	bne.n	8003fe8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004024:	bf00      	nop
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	200003c8 	.word	0x200003c8
 8004030:	200003f4 	.word	0x200003f4
 8004034:	200003dc 	.word	0x200003dc

08004038 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004046:	2b00      	cmp	r3, #0
 8004048:	d108      	bne.n	800405c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fb8a 	bl	8004768 <vPortFree>
				vPortFree( pxTCB );
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fb87 	bl	8004768 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800405a:	e017      	b.n	800408c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004062:	2b01      	cmp	r3, #1
 8004064:	d103      	bne.n	800406e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fb7e 	bl	8004768 <vPortFree>
	}
 800406c:	e00e      	b.n	800408c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004074:	2b02      	cmp	r3, #2
 8004076:	d009      	beq.n	800408c <prvDeleteTCB+0x54>
 8004078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	e7fe      	b.n	800408a <prvDeleteTCB+0x52>
	}
 800408c:	bf00      	nop
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800409a:	4b0c      	ldr	r3, [pc, #48]	; (80040cc <prvResetNextTaskUnblockTime+0x38>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d104      	bne.n	80040ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040a4:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <prvResetNextTaskUnblockTime+0x3c>)
 80040a6:	f04f 32ff 	mov.w	r2, #4294967295
 80040aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040ac:	e008      	b.n	80040c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ae:	4b07      	ldr	r3, [pc, #28]	; (80040cc <prvResetNextTaskUnblockTime+0x38>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	4a04      	ldr	r2, [pc, #16]	; (80040d0 <prvResetNextTaskUnblockTime+0x3c>)
 80040be:	6013      	str	r3, [r2, #0]
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	200003ac 	.word	0x200003ac
 80040d0:	20000414 	.word	0x20000414

080040d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80040da:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <xTaskGetSchedulerState+0x34>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d102      	bne.n	80040e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040e2:	2301      	movs	r3, #1
 80040e4:	607b      	str	r3, [r7, #4]
 80040e6:	e008      	b.n	80040fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040e8:	4b08      	ldr	r3, [pc, #32]	; (800410c <xTaskGetSchedulerState+0x38>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d102      	bne.n	80040f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80040f0:	2302      	movs	r3, #2
 80040f2:	607b      	str	r3, [r7, #4]
 80040f4:	e001      	b.n	80040fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80040f6:	2300      	movs	r3, #0
 80040f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80040fa:	687b      	ldr	r3, [r7, #4]
	}
 80040fc:	4618      	mov	r0, r3
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	20000400 	.word	0x20000400
 800410c:	2000041c 	.word	0x2000041c

08004110 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800411a:	4b29      	ldr	r3, [pc, #164]	; (80041c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004120:	4b28      	ldr	r3, [pc, #160]	; (80041c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3304      	adds	r3, #4
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff f9f3 	bl	8003512 <uxListRemove>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10b      	bne.n	800414a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004132:	4b24      	ldr	r3, [pc, #144]	; (80041c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	2201      	movs	r2, #1
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	43da      	mvns	r2, r3
 8004140:	4b21      	ldr	r3, [pc, #132]	; (80041c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4013      	ands	r3, r2
 8004146:	4a20      	ldr	r2, [pc, #128]	; (80041c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004148:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004150:	d10a      	bne.n	8004168 <prvAddCurrentTaskToDelayedList+0x58>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d007      	beq.n	8004168 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004158:	4b1a      	ldr	r3, [pc, #104]	; (80041c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3304      	adds	r3, #4
 800415e:	4619      	mov	r1, r3
 8004160:	481a      	ldr	r0, [pc, #104]	; (80041cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004162:	f7ff f979 	bl	8003458 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004166:	e026      	b.n	80041b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4413      	add	r3, r2
 800416e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004170:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	429a      	cmp	r2, r3
 800417e:	d209      	bcs.n	8004194 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004180:	4b13      	ldr	r3, [pc, #76]	; (80041d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3304      	adds	r3, #4
 800418a:	4619      	mov	r1, r3
 800418c:	4610      	mov	r0, r2
 800418e:	f7ff f987 	bl	80034a0 <vListInsert>
}
 8004192:	e010      	b.n	80041b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004194:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	4b0a      	ldr	r3, [pc, #40]	; (80041c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3304      	adds	r3, #4
 800419e:	4619      	mov	r1, r3
 80041a0:	4610      	mov	r0, r2
 80041a2:	f7ff f97d 	bl	80034a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041a6:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d202      	bcs.n	80041b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80041b0:	4a09      	ldr	r2, [pc, #36]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	6013      	str	r3, [r2, #0]
}
 80041b6:	bf00      	nop
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	200003f8 	.word	0x200003f8
 80041c4:	200002f4 	.word	0x200002f4
 80041c8:	200003fc 	.word	0x200003fc
 80041cc:	200003e0 	.word	0x200003e0
 80041d0:	200003b0 	.word	0x200003b0
 80041d4:	200003ac 	.word	0x200003ac
 80041d8:	20000414 	.word	0x20000414

080041dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	3b04      	subs	r3, #4
 80041ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	3b04      	subs	r3, #4
 80041fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f023 0201 	bic.w	r2, r3, #1
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	3b04      	subs	r3, #4
 800420a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800420c:	4a0c      	ldr	r2, [pc, #48]	; (8004240 <pxPortInitialiseStack+0x64>)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	3b14      	subs	r3, #20
 8004216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	3b04      	subs	r3, #4
 8004222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f06f 0202 	mvn.w	r2, #2
 800422a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3b20      	subs	r3, #32
 8004230:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004232:	68fb      	ldr	r3, [r7, #12]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	08004245 	.word	0x08004245

08004244 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800424a:	2300      	movs	r3, #0
 800424c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800424e:	4b11      	ldr	r3, [pc, #68]	; (8004294 <prvTaskExitError+0x50>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004256:	d009      	beq.n	800426c <prvTaskExitError+0x28>
 8004258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	e7fe      	b.n	800426a <prvTaskExitError+0x26>
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800427e:	bf00      	nop
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0fc      	beq.n	8004280 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004286:	bf00      	nop
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	2000000c 	.word	0x2000000c
	...

080042a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80042a0:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <pxCurrentTCBConst2>)
 80042a2:	6819      	ldr	r1, [r3, #0]
 80042a4:	6808      	ldr	r0, [r1, #0]
 80042a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042aa:	f380 8809 	msr	PSP, r0
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f04f 0000 	mov.w	r0, #0
 80042b6:	f380 8811 	msr	BASEPRI, r0
 80042ba:	4770      	bx	lr
 80042bc:	f3af 8000 	nop.w

080042c0 <pxCurrentTCBConst2>:
 80042c0:	200002f4 	.word	0x200002f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop

080042c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80042c8:	4808      	ldr	r0, [pc, #32]	; (80042ec <prvPortStartFirstTask+0x24>)
 80042ca:	6800      	ldr	r0, [r0, #0]
 80042cc:	6800      	ldr	r0, [r0, #0]
 80042ce:	f380 8808 	msr	MSP, r0
 80042d2:	f04f 0000 	mov.w	r0, #0
 80042d6:	f380 8814 	msr	CONTROL, r0
 80042da:	b662      	cpsie	i
 80042dc:	b661      	cpsie	f
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	df00      	svc	0
 80042e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80042ea:	bf00      	nop
 80042ec:	e000ed08 	.word	0xe000ed08

080042f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042f6:	4b44      	ldr	r3, [pc, #272]	; (8004408 <xPortStartScheduler+0x118>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a44      	ldr	r2, [pc, #272]	; (800440c <xPortStartScheduler+0x11c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d109      	bne.n	8004314 <xPortStartScheduler+0x24>
 8004300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	e7fe      	b.n	8004312 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004314:	4b3c      	ldr	r3, [pc, #240]	; (8004408 <xPortStartScheduler+0x118>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a3d      	ldr	r2, [pc, #244]	; (8004410 <xPortStartScheduler+0x120>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d109      	bne.n	8004332 <xPortStartScheduler+0x42>
 800431e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	e7fe      	b.n	8004330 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004332:	4b38      	ldr	r3, [pc, #224]	; (8004414 <xPortStartScheduler+0x124>)
 8004334:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	22ff      	movs	r2, #255	; 0xff
 8004342:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	b2db      	uxtb	r3, r3
 8004350:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004354:	b2da      	uxtb	r2, r3
 8004356:	4b30      	ldr	r3, [pc, #192]	; (8004418 <xPortStartScheduler+0x128>)
 8004358:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800435a:	4b30      	ldr	r3, [pc, #192]	; (800441c <xPortStartScheduler+0x12c>)
 800435c:	2207      	movs	r2, #7
 800435e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004360:	e009      	b.n	8004376 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004362:	4b2e      	ldr	r3, [pc, #184]	; (800441c <xPortStartScheduler+0x12c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3b01      	subs	r3, #1
 8004368:	4a2c      	ldr	r2, [pc, #176]	; (800441c <xPortStartScheduler+0x12c>)
 800436a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	b2db      	uxtb	r3, r3
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	b2db      	uxtb	r3, r3
 8004374:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004376:	78fb      	ldrb	r3, [r7, #3]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437e:	2b80      	cmp	r3, #128	; 0x80
 8004380:	d0ef      	beq.n	8004362 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004382:	4b26      	ldr	r3, [pc, #152]	; (800441c <xPortStartScheduler+0x12c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f1c3 0307 	rsb	r3, r3, #7
 800438a:	2b04      	cmp	r3, #4
 800438c:	d009      	beq.n	80043a2 <xPortStartScheduler+0xb2>
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	60bb      	str	r3, [r7, #8]
 80043a0:	e7fe      	b.n	80043a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043a2:	4b1e      	ldr	r3, [pc, #120]	; (800441c <xPortStartScheduler+0x12c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	021b      	lsls	r3, r3, #8
 80043a8:	4a1c      	ldr	r2, [pc, #112]	; (800441c <xPortStartScheduler+0x12c>)
 80043aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043ac:	4b1b      	ldr	r3, [pc, #108]	; (800441c <xPortStartScheduler+0x12c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043b4:	4a19      	ldr	r2, [pc, #100]	; (800441c <xPortStartScheduler+0x12c>)
 80043b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043c0:	4b17      	ldr	r3, [pc, #92]	; (8004420 <xPortStartScheduler+0x130>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a16      	ldr	r2, [pc, #88]	; (8004420 <xPortStartScheduler+0x130>)
 80043c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043cc:	4b14      	ldr	r3, [pc, #80]	; (8004420 <xPortStartScheduler+0x130>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a13      	ldr	r2, [pc, #76]	; (8004420 <xPortStartScheduler+0x130>)
 80043d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043d8:	f000 f8d6 	bl	8004588 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043dc:	4b11      	ldr	r3, [pc, #68]	; (8004424 <xPortStartScheduler+0x134>)
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80043e2:	f000 f8f5 	bl	80045d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043e6:	4b10      	ldr	r3, [pc, #64]	; (8004428 <xPortStartScheduler+0x138>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a0f      	ldr	r2, [pc, #60]	; (8004428 <xPortStartScheduler+0x138>)
 80043ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80043f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80043f2:	f7ff ff69 	bl	80042c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80043f6:	f7ff fd41 	bl	8003e7c <vTaskSwitchContext>
	prvTaskExitError();
 80043fa:	f7ff ff23 	bl	8004244 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	e000ed00 	.word	0xe000ed00
 800440c:	410fc271 	.word	0x410fc271
 8004410:	410fc270 	.word	0x410fc270
 8004414:	e000e400 	.word	0xe000e400
 8004418:	20000420 	.word	0x20000420
 800441c:	20000424 	.word	0x20000424
 8004420:	e000ed20 	.word	0xe000ed20
 8004424:	2000000c 	.word	0x2000000c
 8004428:	e000ef34 	.word	0xe000ef34

0800442c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004444:	4b0e      	ldr	r3, [pc, #56]	; (8004480 <vPortEnterCritical+0x54>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3301      	adds	r3, #1
 800444a:	4a0d      	ldr	r2, [pc, #52]	; (8004480 <vPortEnterCritical+0x54>)
 800444c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800444e:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <vPortEnterCritical+0x54>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d10e      	bne.n	8004474 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004456:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <vPortEnterCritical+0x58>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d009      	beq.n	8004474 <vPortEnterCritical+0x48>
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	603b      	str	r3, [r7, #0]
 8004472:	e7fe      	b.n	8004472 <vPortEnterCritical+0x46>
	}
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	2000000c 	.word	0x2000000c
 8004484:	e000ed04 	.word	0xe000ed04

08004488 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800448e:	4b11      	ldr	r3, [pc, #68]	; (80044d4 <vPortExitCritical+0x4c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d109      	bne.n	80044aa <vPortExitCritical+0x22>
 8004496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	607b      	str	r3, [r7, #4]
 80044a8:	e7fe      	b.n	80044a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80044aa:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <vPortExitCritical+0x4c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	4a08      	ldr	r2, [pc, #32]	; (80044d4 <vPortExitCritical+0x4c>)
 80044b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80044b4:	4b07      	ldr	r3, [pc, #28]	; (80044d4 <vPortExitCritical+0x4c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d104      	bne.n	80044c6 <vPortExitCritical+0x3e>
 80044bc:	2300      	movs	r3, #0
 80044be:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	2000000c 	.word	0x2000000c
	...

080044e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80044e0:	f3ef 8009 	mrs	r0, PSP
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	4b15      	ldr	r3, [pc, #84]	; (8004540 <pxCurrentTCBConst>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	f01e 0f10 	tst.w	lr, #16
 80044f0:	bf08      	it	eq
 80044f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fa:	6010      	str	r0, [r2, #0]
 80044fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004500:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004504:	f380 8811 	msr	BASEPRI, r0
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f7ff fcb4 	bl	8003e7c <vTaskSwitchContext>
 8004514:	f04f 0000 	mov.w	r0, #0
 8004518:	f380 8811 	msr	BASEPRI, r0
 800451c:	bc09      	pop	{r0, r3}
 800451e:	6819      	ldr	r1, [r3, #0]
 8004520:	6808      	ldr	r0, [r1, #0]
 8004522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004526:	f01e 0f10 	tst.w	lr, #16
 800452a:	bf08      	it	eq
 800452c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004530:	f380 8809 	msr	PSP, r0
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	f3af 8000 	nop.w

08004540 <pxCurrentTCBConst>:
 8004540:	200002f4 	.word	0x200002f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop

08004548 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004560:	f7ff fbd4 	bl	8003d0c <xTaskIncrementTick>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800456a:	4b06      	ldr	r3, [pc, #24]	; (8004584 <xPortSysTickHandler+0x3c>)
 800456c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	2300      	movs	r3, #0
 8004574:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800457c:	bf00      	nop
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	e000ed04 	.word	0xe000ed04

08004588 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800458c:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <vPortSetupTimerInterrupt+0x34>)
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004592:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <vPortSetupTimerInterrupt+0x38>)
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004598:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <vPortSetupTimerInterrupt+0x3c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a0a      	ldr	r2, [pc, #40]	; (80045c8 <vPortSetupTimerInterrupt+0x40>)
 800459e:	fba2 2303 	umull	r2, r3, r2, r3
 80045a2:	099b      	lsrs	r3, r3, #6
 80045a4:	4a09      	ldr	r2, [pc, #36]	; (80045cc <vPortSetupTimerInterrupt+0x44>)
 80045a6:	3b01      	subs	r3, #1
 80045a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045aa:	4b04      	ldr	r3, [pc, #16]	; (80045bc <vPortSetupTimerInterrupt+0x34>)
 80045ac:	2207      	movs	r2, #7
 80045ae:	601a      	str	r2, [r3, #0]
}
 80045b0:	bf00      	nop
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	e000e010 	.word	0xe000e010
 80045c0:	e000e018 	.word	0xe000e018
 80045c4:	20000000 	.word	0x20000000
 80045c8:	10624dd3 	.word	0x10624dd3
 80045cc:	e000e014 	.word	0xe000e014

080045d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80045d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80045e0 <vPortEnableVFP+0x10>
 80045d4:	6801      	ldr	r1, [r0, #0]
 80045d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80045da:	6001      	str	r1, [r0, #0]
 80045dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80045de:	bf00      	nop
 80045e0:	e000ed88 	.word	0xe000ed88

080045e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08a      	sub	sp, #40	; 0x28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80045ec:	2300      	movs	r3, #0
 80045ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80045f0:	f7ff fae2 	bl	8003bb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80045f4:	4b57      	ldr	r3, [pc, #348]	; (8004754 <pvPortMalloc+0x170>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80045fc:	f000 f90c 	bl	8004818 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004600:	4b55      	ldr	r3, [pc, #340]	; (8004758 <pvPortMalloc+0x174>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4013      	ands	r3, r2
 8004608:	2b00      	cmp	r3, #0
 800460a:	f040 808c 	bne.w	8004726 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d01c      	beq.n	800464e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004614:	2208      	movs	r2, #8
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4413      	add	r3, r2
 800461a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	2b00      	cmp	r3, #0
 8004624:	d013      	beq.n	800464e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f023 0307 	bic.w	r3, r3, #7
 800462c:	3308      	adds	r3, #8
 800462e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	2b00      	cmp	r3, #0
 8004638:	d009      	beq.n	800464e <pvPortMalloc+0x6a>
	__asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	e7fe      	b.n	800464c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d068      	beq.n	8004726 <pvPortMalloc+0x142>
 8004654:	4b41      	ldr	r3, [pc, #260]	; (800475c <pvPortMalloc+0x178>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	429a      	cmp	r2, r3
 800465c:	d863      	bhi.n	8004726 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800465e:	4b40      	ldr	r3, [pc, #256]	; (8004760 <pvPortMalloc+0x17c>)
 8004660:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004662:	4b3f      	ldr	r3, [pc, #252]	; (8004760 <pvPortMalloc+0x17c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004668:	e004      	b.n	8004674 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	429a      	cmp	r2, r3
 800467c:	d903      	bls.n	8004686 <pvPortMalloc+0xa2>
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f1      	bne.n	800466a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004686:	4b33      	ldr	r3, [pc, #204]	; (8004754 <pvPortMalloc+0x170>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800468c:	429a      	cmp	r2, r3
 800468e:	d04a      	beq.n	8004726 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2208      	movs	r2, #8
 8004696:	4413      	add	r3, r2
 8004698:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	1ad2      	subs	r2, r2, r3
 80046aa:	2308      	movs	r3, #8
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d91e      	bls.n	80046f0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4413      	add	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d009      	beq.n	80046d8 <pvPortMalloc+0xf4>
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	e7fe      	b.n	80046d6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	1ad2      	subs	r2, r2, r3
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046ea:	69b8      	ldr	r0, [r7, #24]
 80046ec:	f000 f8f6 	bl	80048dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046f0:	4b1a      	ldr	r3, [pc, #104]	; (800475c <pvPortMalloc+0x178>)
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	4a18      	ldr	r2, [pc, #96]	; (800475c <pvPortMalloc+0x178>)
 80046fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046fe:	4b17      	ldr	r3, [pc, #92]	; (800475c <pvPortMalloc+0x178>)
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	4b18      	ldr	r3, [pc, #96]	; (8004764 <pvPortMalloc+0x180>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d203      	bcs.n	8004712 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800470a:	4b14      	ldr	r3, [pc, #80]	; (800475c <pvPortMalloc+0x178>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a15      	ldr	r2, [pc, #84]	; (8004764 <pvPortMalloc+0x180>)
 8004710:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	4b10      	ldr	r3, [pc, #64]	; (8004758 <pvPortMalloc+0x174>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	431a      	orrs	r2, r3
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004726:	f7ff fa55 	bl	8003bd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	2b00      	cmp	r3, #0
 8004732:	d009      	beq.n	8004748 <pvPortMalloc+0x164>
 8004734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	e7fe      	b.n	8004746 <pvPortMalloc+0x162>
	return pvReturn;
 8004748:	69fb      	ldr	r3, [r7, #28]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3728      	adds	r7, #40	; 0x28
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	20004030 	.word	0x20004030
 8004758:	2000403c 	.word	0x2000403c
 800475c:	20004034 	.word	0x20004034
 8004760:	20004028 	.word	0x20004028
 8004764:	20004038 	.word	0x20004038

08004768 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d046      	beq.n	8004808 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800477a:	2308      	movs	r3, #8
 800477c:	425b      	negs	r3, r3
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4413      	add	r3, r2
 8004782:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	4b20      	ldr	r3, [pc, #128]	; (8004810 <vPortFree+0xa8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4013      	ands	r3, r2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d109      	bne.n	80047aa <vPortFree+0x42>
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	e7fe      	b.n	80047a8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d009      	beq.n	80047c6 <vPortFree+0x5e>
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	60bb      	str	r3, [r7, #8]
 80047c4:	e7fe      	b.n	80047c4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	4b11      	ldr	r3, [pc, #68]	; (8004810 <vPortFree+0xa8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4013      	ands	r3, r2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d019      	beq.n	8004808 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d115      	bne.n	8004808 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <vPortFree+0xa8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	43db      	mvns	r3, r3
 80047e6:	401a      	ands	r2, r3
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80047ec:	f7ff f9e4 	bl	8003bb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	4b07      	ldr	r3, [pc, #28]	; (8004814 <vPortFree+0xac>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4413      	add	r3, r2
 80047fa:	4a06      	ldr	r2, [pc, #24]	; (8004814 <vPortFree+0xac>)
 80047fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047fe:	6938      	ldr	r0, [r7, #16]
 8004800:	f000 f86c 	bl	80048dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004804:	f7ff f9e6 	bl	8003bd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004808:	bf00      	nop
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	2000403c 	.word	0x2000403c
 8004814:	20004034 	.word	0x20004034

08004818 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800481e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004822:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004824:	4b27      	ldr	r3, [pc, #156]	; (80048c4 <prvHeapInit+0xac>)
 8004826:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00c      	beq.n	800484c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3307      	adds	r3, #7
 8004836:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0307 	bic.w	r3, r3, #7
 800483e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	4a1f      	ldr	r2, [pc, #124]	; (80048c4 <prvHeapInit+0xac>)
 8004848:	4413      	add	r3, r2
 800484a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004850:	4a1d      	ldr	r2, [pc, #116]	; (80048c8 <prvHeapInit+0xb0>)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004856:	4b1c      	ldr	r3, [pc, #112]	; (80048c8 <prvHeapInit+0xb0>)
 8004858:	2200      	movs	r2, #0
 800485a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	4413      	add	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004864:	2208      	movs	r2, #8
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1a9b      	subs	r3, r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 0307 	bic.w	r3, r3, #7
 8004872:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4a15      	ldr	r2, [pc, #84]	; (80048cc <prvHeapInit+0xb4>)
 8004878:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800487a:	4b14      	ldr	r3, [pc, #80]	; (80048cc <prvHeapInit+0xb4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2200      	movs	r2, #0
 8004880:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004882:	4b12      	ldr	r3, [pc, #72]	; (80048cc <prvHeapInit+0xb4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	1ad2      	subs	r2, r2, r3
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004898:	4b0c      	ldr	r3, [pc, #48]	; (80048cc <prvHeapInit+0xb4>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	4a0a      	ldr	r2, [pc, #40]	; (80048d0 <prvHeapInit+0xb8>)
 80048a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	4a09      	ldr	r2, [pc, #36]	; (80048d4 <prvHeapInit+0xbc>)
 80048ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048b0:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <prvHeapInit+0xc0>)
 80048b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048b6:	601a      	str	r2, [r3, #0]
}
 80048b8:	bf00      	nop
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	20000428 	.word	0x20000428
 80048c8:	20004028 	.word	0x20004028
 80048cc:	20004030 	.word	0x20004030
 80048d0:	20004038 	.word	0x20004038
 80048d4:	20004034 	.word	0x20004034
 80048d8:	2000403c 	.word	0x2000403c

080048dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048e4:	4b28      	ldr	r3, [pc, #160]	; (8004988 <prvInsertBlockIntoFreeList+0xac>)
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	e002      	b.n	80048f0 <prvInsertBlockIntoFreeList+0x14>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d8f7      	bhi.n	80048ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	4413      	add	r3, r2
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	429a      	cmp	r2, r3
 800490a:	d108      	bne.n	800491e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	441a      	add	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	441a      	add	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d118      	bne.n	8004964 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	4b15      	ldr	r3, [pc, #84]	; (800498c <prvInsertBlockIntoFreeList+0xb0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d00d      	beq.n	800495a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	441a      	add	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	e008      	b.n	800496c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800495a:	4b0c      	ldr	r3, [pc, #48]	; (800498c <prvInsertBlockIntoFreeList+0xb0>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	e003      	b.n	800496c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	429a      	cmp	r2, r3
 8004972:	d002      	beq.n	800497a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	20004028 	.word	0x20004028
 800498c:	20004030 	.word	0x20004030

08004990 <barometerInit>:
 *
 * @author Dawson Moore
 * @author Jeff Kaji
 * @date 01/11/2021
 */
void barometerInit(bool *bmpNomPtr) {
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af04      	add	r7, sp, #16
 8004996:	6078      	str	r0, [r7, #4]
	// Variables
	uint8_t dataIn[2]; // Buffer to load data received
	uint8_t cmd;       // Command sent to device

	//Initialize bmpNominal as true
	sensors.bmpNomPtr = bmpNomPtr;
 8004998:	4a74      	ldr	r2, [pc, #464]	; (8004b6c <barometerInit+0x1dc>)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6353      	str	r3, [r2, #52]	; 0x34
	*(sensors.bmpNomPtr) = true;
 800499e:	4b73      	ldr	r3, [pc, #460]	; (8004b6c <barometerInit+0x1dc>)
 80049a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a2:	2201      	movs	r2, #1
 80049a4:	701a      	strb	r2, [r3, #0]

	//Reset baro after power on
	cmd = 0x1E;
 80049a6:	231e      	movs	r3, #30
 80049a8:	72fb      	strb	r3, [r7, #11]
	if (sendSPI(&cmd, 1, BARO_CS_GPIO_Port, BARO_CS_Pin, SENSORS_SPI_BUS))
 80049aa:	f107 000b 	add.w	r0, r7, #11
 80049ae:	4b70      	ldr	r3, [pc, #448]	; (8004b70 <barometerInit+0x1e0>)
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049b6:	2200      	movs	r2, #0
 80049b8:	2101      	movs	r1, #1
 80049ba:	f000 f8fb 	bl	8004bb4 <sendSPI>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <barometerInit+0x3c>
	{
		handleHalError(BMP);
 80049c4:	2002      	movs	r0, #2
 80049c6:	f000 f941 	bl	8004c4c <handleHalError>
		return;
 80049ca:	e0cb      	b.n	8004b64 <barometerInit+0x1d4>
	}

	//Get value of C1
	cmd = 0xA1;
 80049cc:	23a1      	movs	r3, #161	; 0xa1
 80049ce:	72fb      	strb	r3, [r7, #11]
	if (recieveSPI(&cmd, 1, dataIn, 2, BARO_CS_GPIO_Port, BARO_CS_Pin, SENSORS_SPI_BUS))
 80049d0:	f107 020c 	add.w	r2, r7, #12
 80049d4:	f107 000b 	add.w	r0, r7, #11
 80049d8:	4b65      	ldr	r3, [pc, #404]	; (8004b70 <barometerInit+0x1e0>)
 80049da:	9302      	str	r3, [sp, #8]
 80049dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049e0:	9301      	str	r3, [sp, #4]
 80049e2:	2300      	movs	r3, #0
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	2302      	movs	r3, #2
 80049e8:	2101      	movs	r1, #1
 80049ea:	f000 f905 	bl	8004bf8 <recieveSPI>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <barometerInit+0x6c>
	{
		handleHalError(BMP);
 80049f4:	2002      	movs	r0, #2
 80049f6:	f000 f929 	bl	8004c4c <handleHalError>
		return;
 80049fa:	e0b3      	b.n	8004b64 <barometerInit+0x1d4>
	}
	sensors.senst1 = (dataIn[0] << 8) | dataIn[1];
 80049fc:	7b3b      	ldrb	r3, [r7, #12]
 80049fe:	021b      	lsls	r3, r3, #8
 8004a00:	b21a      	sxth	r2, r3
 8004a02:	7b7b      	ldrb	r3, [r7, #13]
 8004a04:	b21b      	sxth	r3, r3
 8004a06:	4313      	orrs	r3, r2
 8004a08:	b21b      	sxth	r3, r3
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	4b57      	ldr	r3, [pc, #348]	; (8004b6c <barometerInit+0x1dc>)
 8004a0e:	809a      	strh	r2, [r3, #4]

	//Get value of C2
	cmd = 0xA2;
 8004a10:	23a2      	movs	r3, #162	; 0xa2
 8004a12:	72fb      	strb	r3, [r7, #11]
	if (recieveSPI(&cmd, 1, dataIn, 2, BARO_CS_GPIO_Port, BARO_CS_Pin, SENSORS_SPI_BUS))
 8004a14:	f107 020c 	add.w	r2, r7, #12
 8004a18:	f107 000b 	add.w	r0, r7, #11
 8004a1c:	4b54      	ldr	r3, [pc, #336]	; (8004b70 <barometerInit+0x1e0>)
 8004a1e:	9302      	str	r3, [sp, #8]
 8004a20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a24:	9301      	str	r3, [sp, #4]
 8004a26:	2300      	movs	r3, #0
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	f000 f8e3 	bl	8004bf8 <recieveSPI>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <barometerInit+0xb0>
	{
		handleHalError(BMP);
 8004a38:	2002      	movs	r0, #2
 8004a3a:	f000 f907 	bl	8004c4c <handleHalError>
		return;
 8004a3e:	e091      	b.n	8004b64 <barometerInit+0x1d4>
	}
	sensors.offt1 = (dataIn[0] << 8) | dataIn[1];
 8004a40:	7b3b      	ldrb	r3, [r7, #12]
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	b21a      	sxth	r2, r3
 8004a46:	7b7b      	ldrb	r3, [r7, #13]
 8004a48:	b21b      	sxth	r3, r3
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	b21b      	sxth	r3, r3
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	4b46      	ldr	r3, [pc, #280]	; (8004b6c <barometerInit+0x1dc>)
 8004a52:	80da      	strh	r2, [r3, #6]

	//Get value of C3
	cmd = 0xA3;
 8004a54:	23a3      	movs	r3, #163	; 0xa3
 8004a56:	72fb      	strb	r3, [r7, #11]
	if (recieveSPI(&cmd, 1, dataIn, 2, BARO_CS_GPIO_Port, BARO_CS_Pin, SENSORS_SPI_BUS))
 8004a58:	f107 020c 	add.w	r2, r7, #12
 8004a5c:	f107 000b 	add.w	r0, r7, #11
 8004a60:	4b43      	ldr	r3, [pc, #268]	; (8004b70 <barometerInit+0x1e0>)
 8004a62:	9302      	str	r3, [sp, #8]
 8004a64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a68:	9301      	str	r3, [sp, #4]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	2302      	movs	r3, #2
 8004a70:	2101      	movs	r1, #1
 8004a72:	f000 f8c1 	bl	8004bf8 <recieveSPI>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <barometerInit+0xf4>
	{
		handleHalError(BMP);
 8004a7c:	2002      	movs	r0, #2
 8004a7e:	f000 f8e5 	bl	8004c4c <handleHalError>
		return;
 8004a82:	e06f      	b.n	8004b64 <barometerInit+0x1d4>
	}
	sensors.tcs = (dataIn[0] << 8) | dataIn[1];
 8004a84:	7b3b      	ldrb	r3, [r7, #12]
 8004a86:	021b      	lsls	r3, r3, #8
 8004a88:	b21a      	sxth	r2, r3
 8004a8a:	7b7b      	ldrb	r3, [r7, #13]
 8004a8c:	b21b      	sxth	r3, r3
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	b21b      	sxth	r3, r3
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	4b35      	ldr	r3, [pc, #212]	; (8004b6c <barometerInit+0x1dc>)
 8004a96:	811a      	strh	r2, [r3, #8]

	//Get value of C4
	cmd = 0xA4;
 8004a98:	23a4      	movs	r3, #164	; 0xa4
 8004a9a:	72fb      	strb	r3, [r7, #11]
	if (recieveSPI(&cmd, 1, dataIn, 2, BARO_CS_GPIO_Port, BARO_CS_Pin, SENSORS_SPI_BUS))
 8004a9c:	f107 020c 	add.w	r2, r7, #12
 8004aa0:	f107 000b 	add.w	r0, r7, #11
 8004aa4:	4b32      	ldr	r3, [pc, #200]	; (8004b70 <barometerInit+0x1e0>)
 8004aa6:	9302      	str	r3, [sp, #8]
 8004aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004aac:	9301      	str	r3, [sp, #4]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	f000 f89f 	bl	8004bf8 <recieveSPI>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <barometerInit+0x138>
	{
		handleHalError(BMP);
 8004ac0:	2002      	movs	r0, #2
 8004ac2:	f000 f8c3 	bl	8004c4c <handleHalError>
		return;
 8004ac6:	e04d      	b.n	8004b64 <barometerInit+0x1d4>
	}
	sensors.tco = (dataIn[0] << 8) | dataIn[1];
 8004ac8:	7b3b      	ldrb	r3, [r7, #12]
 8004aca:	021b      	lsls	r3, r3, #8
 8004acc:	b21a      	sxth	r2, r3
 8004ace:	7b7b      	ldrb	r3, [r7, #13]
 8004ad0:	b21b      	sxth	r3, r3
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	b21b      	sxth	r3, r3
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	4b24      	ldr	r3, [pc, #144]	; (8004b6c <barometerInit+0x1dc>)
 8004ada:	815a      	strh	r2, [r3, #10]

	//Get value of C5
	cmd = 0xA5;
 8004adc:	23a5      	movs	r3, #165	; 0xa5
 8004ade:	72fb      	strb	r3, [r7, #11]
	if (recieveSPI(&cmd, 1, dataIn, 2, BARO_CS_GPIO_Port, BARO_CS_Pin, SENSORS_SPI_BUS))
 8004ae0:	f107 020c 	add.w	r2, r7, #12
 8004ae4:	f107 000b 	add.w	r0, r7, #11
 8004ae8:	4b21      	ldr	r3, [pc, #132]	; (8004b70 <barometerInit+0x1e0>)
 8004aea:	9302      	str	r3, [sp, #8]
 8004aec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004af0:	9301      	str	r3, [sp, #4]
 8004af2:	2300      	movs	r3, #0
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	2302      	movs	r3, #2
 8004af8:	2101      	movs	r1, #1
 8004afa:	f000 f87d 	bl	8004bf8 <recieveSPI>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <barometerInit+0x17c>
	{
		handleHalError(BMP);
 8004b04:	2002      	movs	r0, #2
 8004b06:	f000 f8a1 	bl	8004c4c <handleHalError>
		return;
 8004b0a:	e02b      	b.n	8004b64 <barometerInit+0x1d4>
	}
	sensors.tref = (dataIn[0] << 8) | dataIn[1];
 8004b0c:	7b3b      	ldrb	r3, [r7, #12]
 8004b0e:	021b      	lsls	r3, r3, #8
 8004b10:	b21a      	sxth	r2, r3
 8004b12:	7b7b      	ldrb	r3, [r7, #13]
 8004b14:	b21b      	sxth	r3, r3
 8004b16:	4313      	orrs	r3, r2
 8004b18:	b21b      	sxth	r3, r3
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <barometerInit+0x1dc>)
 8004b1e:	819a      	strh	r2, [r3, #12]

	//Get value of C6
	cmd = 0xA6;
 8004b20:	23a6      	movs	r3, #166	; 0xa6
 8004b22:	72fb      	strb	r3, [r7, #11]
	if (recieveSPI(&cmd, 1, dataIn, 2, BARO_CS_GPIO_Port, BARO_CS_Pin, SENSORS_SPI_BUS))
 8004b24:	f107 020c 	add.w	r2, r7, #12
 8004b28:	f107 000b 	add.w	r0, r7, #11
 8004b2c:	4b10      	ldr	r3, [pc, #64]	; (8004b70 <barometerInit+0x1e0>)
 8004b2e:	9302      	str	r3, [sp, #8]
 8004b30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b34:	9301      	str	r3, [sp, #4]
 8004b36:	2300      	movs	r3, #0
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	f000 f85b 	bl	8004bf8 <recieveSPI>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <barometerInit+0x1c0>
	{
		handleHalError(BMP);
 8004b48:	2002      	movs	r0, #2
 8004b4a:	f000 f87f 	bl	8004c4c <handleHalError>
		return;
 8004b4e:	e009      	b.n	8004b64 <barometerInit+0x1d4>
	}
	sensors.tempsens = (dataIn[0] << 8) | dataIn[1];
 8004b50:	7b3b      	ldrb	r3, [r7, #12]
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	b21a      	sxth	r2, r3
 8004b56:	7b7b      	ldrb	r3, [r7, #13]
 8004b58:	b21b      	sxth	r3, r3
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	b21b      	sxth	r3, r3
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	4b02      	ldr	r3, [pc, #8]	; (8004b6c <barometerInit+0x1dc>)
 8004b62:	81da      	strh	r2, [r3, #14]
#else
	handleHalError(BMP);
#endif
}
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20004a58 	.word	0x20004a58
 8004b70:	200045b8 	.word	0x200045b8

08004b74 <PSP_GPIO_WritePin>:
GPIO_PinState PSP_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	if(GPIO_Pin == FAKE_GPIO) return 0;
	else return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
}

void PSP_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState, char* name) {
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	607b      	str	r3, [r7, #4]
 8004b7e:	460b      	mov	r3, r1
 8004b80:	817b      	strh	r3, [r7, #10]
 8004b82:	4613      	mov	r3, r2
 8004b84:	727b      	strb	r3, [r7, #9]
	if(GPIO_Pin != FAKE_GPIO) {
 8004b86:	897b      	ldrh	r3, [r7, #10]
 8004b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d006      	beq.n	8004b9e <PSP_GPIO_WritePin+0x2a>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 8004b90:	7a7a      	ldrb	r2, [r7, #9]
 8004b92:	897b      	ldrh	r3, [r7, #10]
 8004b94:	4619      	mov	r1, r3
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7fc fca4 	bl	80014e4 <HAL_GPIO_WritePin>

	}
#if !defined(SUPRESS_SETUP_WARNING) && !defined(SUPRESS_ALL)
	else printf("! Setup Warning: %s not setup on this device.\r\n", name);
#endif
}
 8004b9c:	e003      	b.n	8004ba6 <PSP_GPIO_WritePin+0x32>
	else printf("! Setup Warning: %s not setup on this device.\r\n", name);
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	4803      	ldr	r0, [pc, #12]	; (8004bb0 <PSP_GPIO_WritePin+0x3c>)
 8004ba2:	f000 fca7 	bl	80054f4 <iprintf>
}
 8004ba6:	bf00      	nop
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	08006484 	.word	0x08006484

08004bb4 <sendSPI>:


#ifdef _SPI_CONFIGURED
HAL_StatusTypeDef sendSPI(uint8_t * cmd, int len, GPIO_TypeDef * port, uint16_t pin, SPI_HandleTypeDef *bus)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
 8004bc0:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef state;
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //CS low
 8004bc2:	887b      	ldrh	r3, [r7, #2]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7fc fc8b 	bl	80014e4 <HAL_GPIO_WritePin>
	state = HAL_SPI_Transmit(bus, cmd, len, HAL_MAX_DELAY);
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd6:	68f9      	ldr	r1, [r7, #12]
 8004bd8:	6a38      	ldr	r0, [r7, #32]
 8004bda:	f7fd f963 	bl	8001ea4 <HAL_SPI_Transmit>
 8004bde:	4603      	mov	r3, r0
 8004be0:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);	//CS high
 8004be2:	887b      	ldrh	r3, [r7, #2]
 8004be4:	2201      	movs	r2, #1
 8004be6:	4619      	mov	r1, r3
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7fc fc7b 	bl	80014e4 <HAL_GPIO_WritePin>

	return state;
 8004bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3718      	adds	r7, #24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <recieveSPI>:

HAL_StatusTypeDef recieveSPI(uint8_t * cmd, int cmdLen, uint8_t * data, int dataLen, GPIO_TypeDef * port, uint16_t pin,  SPI_HandleTypeDef *bus)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
 8004c04:	603b      	str	r3, [r7, #0]
	//Note: dataLen should be number of bytes in the register group being read
	HAL_StatusTypeDef state;
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //CS low
 8004c06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c08:	2200      	movs	r2, #0
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	6a38      	ldr	r0, [r7, #32]
 8004c0e:	f7fc fc69 	bl	80014e4 <HAL_GPIO_WritePin>
	state = HAL_SPI_Transmit(bus, cmd, cmdLen, HAL_MAX_DELAY);
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1a:	68f9      	ldr	r1, [r7, #12]
 8004c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c1e:	f7fd f941 	bl	8001ea4 <HAL_SPI_Transmit>
 8004c22:	4603      	mov	r3, r0
 8004c24:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Receive(bus, data, dataLen, HAL_MAX_DELAY);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c2e:	6879      	ldr	r1, [r7, #4]
 8004c30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c32:	f7fd fa6b 	bl	800210c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);	//CS high
 8004c36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c38:	2201      	movs	r2, #1
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	6a38      	ldr	r0, [r7, #32]
 8004c3e:	f7fc fc51 	bl	80014e4 <HAL_GPIO_WritePin>

	return state;
 8004c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <handleHalError>:
#endif
void handleHalError(Device_ID device)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	71fb      	strb	r3, [r7, #7]
	//Basically just to let us know that we ran into an issue during transmission
	//Toggle an LED, send error messages, or something similar
	//I don't know what you guys need, but this is for you to fill out
	// TODO: Implement handleHalError

	switch(device) {
 8004c56:	79fb      	ldrb	r3, [r7, #7]
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d002      	beq.n	8004c62 <handleHalError+0x16>
 8004c5c:	2b05      	cmp	r3, #5
 8004c5e:	d005      	beq.n	8004c6c <handleHalError+0x20>
		break;
	case NAND:
		printf("Storage Error");
		break;
	default:
		break;
 8004c60:	e008      	b.n	8004c74 <handleHalError+0x28>
		*(sensors.bmpNomPtr) = false;
 8004c62:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <handleHalError+0x30>)
 8004c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c66:	2200      	movs	r2, #0
 8004c68:	701a      	strb	r2, [r3, #0]
		break;
 8004c6a:	e003      	b.n	8004c74 <handleHalError+0x28>
		printf("Storage Error");
 8004c6c:	4804      	ldr	r0, [pc, #16]	; (8004c80 <handleHalError+0x34>)
 8004c6e:	f000 fc41 	bl	80054f4 <iprintf>
		break;
 8004c72:	bf00      	nop
	}
}
 8004c74:	bf00      	nop
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	20004a58 	.word	0x20004a58
 8004c80:	080064b4 	.word	0x080064b4

08004c84 <nandBufferLoad>:
 * @author Mark Batistich
 * @date 01/21/2021
 */


void nandBufferLoad(uint32_t rowAddr){
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af02      	add	r7, sp, #8
 8004c8a:	6078      	str	r0, [r7, #4]
//#if CS3_PIN != FAKE_PIN
	// Variables
	uint8_t cmd[4];  // Command sent to device
	uint8_t feature; //feature byte
	bool oip = true; //operation in progress
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	73fb      	strb	r3, [r7, #15]

	//Load data from cell array into buffer
	cmd[0] = R_CELL_ARRAY;
 8004c90:	2313      	movs	r3, #19
 8004c92:	723b      	strb	r3, [r7, #8]
	cmd[3] = rowAddr;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	72fb      	strb	r3, [r7, #11]
	cmd[2] = rowAddr >> 8;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	0a1b      	lsrs	r3, r3, #8
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	72bb      	strb	r3, [r7, #10]
	cmd[1] = rowAddr >> 16;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	0c1b      	lsrs	r3, r3, #16
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	727b      	strb	r3, [r7, #9]
	if (sendSPI(&cmd[0], 4, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 8004caa:	f107 0008 	add.w	r0, r7, #8
 8004cae:	4b10      	ldr	r3, [pc, #64]	; (8004cf0 <nandBufferLoad+0x6c>)
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	2340      	movs	r3, #64	; 0x40
 8004cb4:	4a0f      	ldr	r2, [pc, #60]	; (8004cf4 <nandBufferLoad+0x70>)
 8004cb6:	2104      	movs	r1, #4
 8004cb8:	f7ff ff7c 	bl	8004bb4 <sendSPI>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <nandBufferLoad+0x46>
		handleHalError(BMP);
 8004cc2:	2002      	movs	r0, #2
 8004cc4:	f7ff ffc2 	bl	8004c4c <handleHalError>
 8004cc8:	e00f      	b.n	8004cea <nandBufferLoad+0x66>
		return;
	}

	do{
		feature = getFeature(FEATURE_ADDR_C);
 8004cca:	20c0      	movs	r0, #192	; 0xc0
 8004ccc:	f000 f920 	bl	8004f10 <getFeature>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	73bb      	strb	r3, [r7, #14]
		oip = getBit(feature, 0);
 8004cd4:	7bbb      	ldrb	r3, [r7, #14]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	bf14      	ite	ne
 8004cde:	2301      	movne	r3, #1
 8004ce0:	2300      	moveq	r3, #0
 8004ce2:	73fb      	strb	r3, [r7, #15]
	}while(oip);
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1ef      	bne.n	8004cca <nandBufferLoad+0x46>

}
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	200045b8 	.word	0x200045b8
 8004cf4:	40020400 	.word	0x40020400

08004cf8 <nandBufferRead>:
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */

void nandBufferRead(uint16_t colAddr, uint8_t data[], uint8_t size){
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af04      	add	r7, sp, #16
 8004cfe:	4603      	mov	r3, r0
 8004d00:	6039      	str	r1, [r7, #0]
 8004d02:	80fb      	strh	r3, [r7, #6]
 8004d04:	4613      	mov	r3, r2
 8004d06:	717b      	strb	r3, [r7, #5]
//#if CS3_PIN != FAKE_PIN
	// Variables
	uint8_t cmd[4];       // Command sent to device

	//Read data from the buffer into the data array
	cmd[0] = R_BUFFER;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	733b      	strb	r3, [r7, #12]
	cmd[2] = colAddr;
 8004d0c:	88fb      	ldrh	r3, [r7, #6]
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	73bb      	strb	r3, [r7, #14]
	cmd[1] = colAddr >> 8;
 8004d12:	88fb      	ldrh	r3, [r7, #6]
 8004d14:	0a1b      	lsrs	r3, r3, #8
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	737b      	strb	r3, [r7, #13]
	cmd[3] = 0x00; //dummy byte
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	73fb      	strb	r3, [r7, #15]
	if (recieveSPI(&cmd[0], 4, data, size, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS))
 8004d20:	797a      	ldrb	r2, [r7, #5]
 8004d22:	f107 000c 	add.w	r0, r7, #12
 8004d26:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <nandBufferRead+0x58>)
 8004d28:	9302      	str	r3, [sp, #8]
 8004d2a:	2340      	movs	r3, #64	; 0x40
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <nandBufferRead+0x5c>)
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	4613      	mov	r3, r2
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	2104      	movs	r1, #4
 8004d38:	f7ff ff5e 	bl	8004bf8 <recieveSPI>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <nandBufferRead+0x50>
	{
		handleHalError(BMP);
 8004d42:	2002      	movs	r0, #2
 8004d44:	f7ff ff82 	bl	8004c4c <handleHalError>
		return;
	}
}
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	200045b8 	.word	0x200045b8
 8004d54:	40020400 	.word	0x40020400

08004d58 <nandBufferWrite>:
 * @param colAddr: The 13 bit column address
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
void nandBufferWrite(uint16_t colAddr, uint8_t data[], uint8_t size){
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	4603      	mov	r3, r0
 8004d60:	6039      	str	r1, [r7, #0]
 8004d62:	80fb      	strh	r3, [r7, #6]
 8004d64:	4613      	mov	r3, r2
 8004d66:	717b      	strb	r3, [r7, #5]
	// Variables
	uint8_t cmd[3];       // Command sent to device

	cmd[0] = W_LOAD_RAND;
 8004d68:	2384      	movs	r3, #132	; 0x84
 8004d6a:	733b      	strb	r3, [r7, #12]
	cmd[2] = colAddr;
 8004d6c:	88fb      	ldrh	r3, [r7, #6]
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	73bb      	strb	r3, [r7, #14]
	cmd[1] = colAddr >> 8;
 8004d72:	88fb      	ldrh	r3, [r7, #6]
 8004d74:	0a1b      	lsrs	r3, r3, #8
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	737b      	strb	r3, [r7, #13]

	//HAL_GPIO_WritePin(NAND_CS_GPIO_Port, NAND_CS_Pin, GPIO_PIN_SET);
	//HAL_GPIO_LockPin(NAND_CS_GPIO_Port, NAND_CS_Pin);

	if (sendSPI(&cmd[0], 3, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 8004d7c:	f107 000c 	add.w	r0, r7, #12
 8004d80:	4b0f      	ldr	r3, [pc, #60]	; (8004dc0 <nandBufferWrite+0x68>)
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	2340      	movs	r3, #64	; 0x40
 8004d86:	4a0f      	ldr	r2, [pc, #60]	; (8004dc4 <nandBufferWrite+0x6c>)
 8004d88:	2103      	movs	r1, #3
 8004d8a:	f7ff ff13 	bl	8004bb4 <sendSPI>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <nandBufferWrite+0x44>
		handleHalError(BMP);
 8004d94:	2002      	movs	r0, #2
 8004d96:	f7ff ff59 	bl	8004c4c <handleHalError>
		return;
 8004d9a:	e00e      	b.n	8004dba <nandBufferWrite+0x62>
	}
	if (sendSPI(&data[0], size, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 8004d9c:	7979      	ldrb	r1, [r7, #5]
 8004d9e:	4b08      	ldr	r3, [pc, #32]	; (8004dc0 <nandBufferWrite+0x68>)
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	2340      	movs	r3, #64	; 0x40
 8004da4:	4a07      	ldr	r2, [pc, #28]	; (8004dc4 <nandBufferWrite+0x6c>)
 8004da6:	6838      	ldr	r0, [r7, #0]
 8004da8:	f7ff ff04 	bl	8004bb4 <sendSPI>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <nandBufferWrite+0x62>
		handleHalError(BMP);
 8004db2:	2002      	movs	r0, #2
 8004db4:	f7ff ff4a 	bl	8004c4c <handleHalError>
		return;
 8004db8:	bf00      	nop
	}

}
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	200045b8 	.word	0x200045b8
 8004dc4:	40020400 	.word	0x40020400

08004dc8 <nandBufferExecute>:
 * @param rowAddr: The 17 bit row address
 *
 * @author Mark Batistich
 * @date 01/24 /2021
 */
void nandBufferExecute(uint32_t rowAddr){
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af02      	add	r7, sp, #8
 8004dce:	6078      	str	r0, [r7, #4]
	// Variables
	uint8_t cmd[4];  // Command sent to device
	uint8_t feature; //feature byte
	bool oip = true; //operation in progress
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	73fb      	strb	r3, [r7, #15]
	//bool prg_f = false; //program fail

	//Load data from cell array into buffer
	cmd[0] = W_EXECUTE;
 8004dd4:	2310      	movs	r3, #16
 8004dd6:	723b      	strb	r3, [r7, #8]
	cmd[3] = rowAddr;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	72fb      	strb	r3, [r7, #11]
	cmd[2] = rowAddr >> 8;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	0a1b      	lsrs	r3, r3, #8
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	72bb      	strb	r3, [r7, #10]
	cmd[1] = rowAddr >> 16;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	0c1b      	lsrs	r3, r3, #16
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	727b      	strb	r3, [r7, #9]
	if (sendSPI(&cmd[0], 4, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 8004dee:	f107 0008 	add.w	r0, r7, #8
 8004df2:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <nandBufferExecute+0x6c>)
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	2340      	movs	r3, #64	; 0x40
 8004df8:	4a0f      	ldr	r2, [pc, #60]	; (8004e38 <nandBufferExecute+0x70>)
 8004dfa:	2104      	movs	r1, #4
 8004dfc:	f7ff feda 	bl	8004bb4 <sendSPI>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <nandBufferExecute+0x46>
		handleHalError(BMP);
 8004e06:	2002      	movs	r0, #2
 8004e08:	f7ff ff20 	bl	8004c4c <handleHalError>
 8004e0c:	e00f      	b.n	8004e2e <nandBufferExecute+0x66>
		return;
	}
	do{
		feature = getFeature(FEATURE_ADDR_C);
 8004e0e:	20c0      	movs	r0, #192	; 0xc0
 8004e10:	f000 f87e 	bl	8004f10 <getFeature>
 8004e14:	4603      	mov	r3, r0
 8004e16:	73bb      	strb	r3, [r7, #14]
		oip = getBit(feature, 0);
 8004e18:	7bbb      	ldrb	r3, [r7, #14]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	bf14      	ite	ne
 8004e22:	2301      	movne	r3, #1
 8004e24:	2300      	moveq	r3, #0
 8004e26:	73fb      	strb	r3, [r7, #15]
		//prg_f = getBit(feature, 3);
	}while(oip);
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1ef      	bne.n	8004e0e <nandBufferExecute+0x46>
}
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	200045b8 	.word	0x200045b8
 8004e38:	40020400 	.word	0x40020400

08004e3c <nandRead>:
 * @param colAddr: The 13 bit column address
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
void nandRead(uint32_t rowAddr, uint16_t colAddr, uint8_t data[], uint8_t size){
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	607a      	str	r2, [r7, #4]
 8004e46:	461a      	mov	r2, r3
 8004e48:	460b      	mov	r3, r1
 8004e4a:	817b      	strh	r3, [r7, #10]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	727b      	strb	r3, [r7, #9]
	nandBufferLoad(rowAddr);
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f7ff ff17 	bl	8004c84 <nandBufferLoad>
	nandBufferRead(colAddr, data, size);
 8004e56:	7a7a      	ldrb	r2, [r7, #9]
 8004e58:	897b      	ldrh	r3, [r7, #10]
 8004e5a:	6879      	ldr	r1, [r7, #4]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff ff4b 	bl	8004cf8 <nandBufferRead>
}
 8004e62:	bf00      	nop
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <nandWrite>:
 * @param colAddr: The 13 bit column address
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
void nandWrite(uint32_t rowAddr, uint16_t colAddr, uint8_t data[], uint8_t size){
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	461a      	mov	r2, r3
 8004e76:	460b      	mov	r3, r1
 8004e78:	817b      	strh	r3, [r7, #10]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	727b      	strb	r3, [r7, #9]
	nandBufferLoad(rowAddr);
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f7ff ff00 	bl	8004c84 <nandBufferLoad>
	writeEnable();
 8004e84:	f000 f810 	bl	8004ea8 <writeEnable>
	nandBufferWrite(colAddr, data, size);
 8004e88:	7a7a      	ldrb	r2, [r7, #9]
 8004e8a:	897b      	ldrh	r3, [r7, #10]
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff ff62 	bl	8004d58 <nandBufferWrite>
	nandBufferExecute(rowAddr);
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f7ff ff97 	bl	8004dc8 <nandBufferExecute>
	writeDisable();
 8004e9a:	f000 f81f 	bl	8004edc <writeDisable>
}
 8004e9e:	bf00      	nop
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <writeEnable>:
 * @brief Enables writing
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
void writeEnable(){
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af02      	add	r7, sp, #8
	// Variables
	uint8_t cmd;  // Command sent to device

	// Send Command
	cmd = W_ENABLE;
 8004eae:	2306      	movs	r3, #6
 8004eb0:	71fb      	strb	r3, [r7, #7]
	if (sendSPI(&cmd, 1, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 8004eb2:	1df8      	adds	r0, r7, #7
 8004eb4:	4b07      	ldr	r3, [pc, #28]	; (8004ed4 <writeEnable+0x2c>)
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	2340      	movs	r3, #64	; 0x40
 8004eba:	4a07      	ldr	r2, [pc, #28]	; (8004ed8 <writeEnable+0x30>)
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	f7ff fe79 	bl	8004bb4 <sendSPI>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <writeEnable+0x26>
		handleHalError(BMP);
 8004ec8:	2002      	movs	r0, #2
 8004eca:	f7ff febf 	bl	8004c4c <handleHalError>
		return;
	}
}
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	200045b8 	.word	0x200045b8
 8004ed8:	40020400 	.word	0x40020400

08004edc <writeDisable>:
 * @brief Disables writing
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
void writeDisable(){
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af02      	add	r7, sp, #8
	// Variables
	uint8_t cmd;  // Command sent to device

	// Send Command
	cmd = W_DISABLE;
 8004ee2:	2304      	movs	r3, #4
 8004ee4:	71fb      	strb	r3, [r7, #7]
	if (sendSPI(&cmd, 1, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 8004ee6:	1df8      	adds	r0, r7, #7
 8004ee8:	4b07      	ldr	r3, [pc, #28]	; (8004f08 <writeDisable+0x2c>)
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	2340      	movs	r3, #64	; 0x40
 8004eee:	4a07      	ldr	r2, [pc, #28]	; (8004f0c <writeDisable+0x30>)
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	f7ff fe5f 	bl	8004bb4 <sendSPI>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d002      	beq.n	8004f02 <writeDisable+0x26>
		handleHalError(BMP);
 8004efc:	2002      	movs	r0, #2
 8004efe:	f7ff fea5 	bl	8004c4c <handleHalError>
		return;
	}
}
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	200045b8 	.word	0x200045b8
 8004f0c:	40020400 	.word	0x40020400

08004f10 <getFeature>:
 * @param featureAddr: address of the feature to get
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
uint8_t getFeature(uint8_t featureAddr){
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af04      	add	r7, sp, #16
 8004f16:	4603      	mov	r3, r0
 8004f18:	71fb      	strb	r3, [r7, #7]
	// Variables
	uint8_t cmd[2];  // Command sent to device
	uint8_t feature; //feature byte

	// Send Command
	cmd[0] = GET_FEATURE;
 8004f1a:	230f      	movs	r3, #15
 8004f1c:	733b      	strb	r3, [r7, #12]
	cmd[1] = featureAddr;
 8004f1e:	79fb      	ldrb	r3, [r7, #7]
 8004f20:	737b      	strb	r3, [r7, #13]
	if (recieveSPI(&cmd[0], 2, &feature, 1, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 8004f22:	f107 020b 	add.w	r2, r7, #11
 8004f26:	f107 000c 	add.w	r0, r7, #12
 8004f2a:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <getFeature+0x48>)
 8004f2c:	9302      	str	r3, [sp, #8]
 8004f2e:	2340      	movs	r3, #64	; 0x40
 8004f30:	9301      	str	r3, [sp, #4]
 8004f32:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <getFeature+0x4c>)
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	2301      	movs	r3, #1
 8004f38:	2102      	movs	r1, #2
 8004f3a:	f7ff fe5d 	bl	8004bf8 <recieveSPI>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d004      	beq.n	8004f4e <getFeature+0x3e>
		handleHalError(BMP);
 8004f44:	2002      	movs	r0, #2
 8004f46:	f7ff fe81 	bl	8004c4c <handleHalError>
		return 0x00;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	e000      	b.n	8004f50 <getFeature+0x40>
	}
	return feature;
 8004f4e:	7afb      	ldrb	r3, [r7, #11]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	200045b8 	.word	0x200045b8
 8004f5c:	40020400 	.word	0x40020400

08004f60 <setup_A>:
 * @retval None
 *
 * @author Jeff Kaji
 * @date 12/28/2020
 */
void setup_A() {
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0

	// Initialize local variables
	daqScalingEnabled = true;
 8004f64:	4b17      	ldr	r3, [pc, #92]	; (8004fc4 <setup_A+0x64>)
 8004f66:	2201      	movs	r2, #1
 8004f68:	701a      	strb	r2, [r3, #0]
	daqScaler = DEFAULT_DAQ_SCALER;
 8004f6a:	4b17      	ldr	r3, [pc, #92]	; (8004fc8 <setup_A+0x68>)
 8004f6c:	220a      	movs	r2, #10
 8004f6e:	701a      	strb	r2, [r3, #0]
	gpsNominal = true;
 8004f70:	4b16      	ldr	r3, [pc, #88]	; (8004fcc <setup_A+0x6c>)
 8004f72:	2201      	movs	r2, #1
 8004f74:	701a      	strb	r2, [r3, #0]
	bmpNominal = true;
 8004f76:	4b16      	ldr	r3, [pc, #88]	; (8004fd0 <setup_A+0x70>)
 8004f78:	2201      	movs	r2, #1
 8004f7a:	701a      	strb	r2, [r3, #0]
	imuNominal = true;
 8004f7c:	4b15      	ldr	r3, [pc, #84]	; (8004fd4 <setup_A+0x74>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	701a      	strb	r2, [r3, #0]
	alaNominal = true;
 8004f82:	4b15      	ldr	r3, [pc, #84]	; (8004fd8 <setup_A+0x78>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	701a      	strb	r2, [r3, #0]
	sendDaqStatus = false;
 8004f88:	4b14      	ldr	r3, [pc, #80]	; (8004fdc <setup_A+0x7c>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	701a      	strb	r2, [r3, #0]
	bmpCounter = 0;
 8004f8e:	4b14      	ldr	r3, [pc, #80]	; (8004fe0 <setup_A+0x80>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	701a      	strb	r2, [r3, #0]
	imuCounter = 0;
 8004f94:	4b13      	ldr	r3, [pc, #76]	; (8004fe4 <setup_A+0x84>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	701a      	strb	r2, [r3, #0]


	// Setup sensors
	gpsSetup_A();
 8004f9a:	f000 f829 	bl	8004ff0 <gpsSetup_A>
	bmpSetup_A();
 8004f9e:	f000 f82f 	bl	8005000 <bmpSetup_A>
	imuSetup_A();
 8004fa2:	f000 f83b 	bl	800501c <imuSetup_A>
	alaSetup_A();
 8004fa6:	f000 f841 	bl	800502c <alaSetup_A>

	// Unlock initialized interface structs
	g_daqStatusData.lock = false;
 8004faa:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <setup_A+0x88>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	729a      	strb	r2, [r3, #10]
	g_daqScalingData.lock = false;
 8004fb0:	4b0e      	ldr	r3, [pc, #56]	; (8004fec <setup_A+0x8c>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	709a      	strb	r2, [r3, #2]

	// Send update
	sendUpdate_A();
 8004fb6:	f000 f841 	bl	800503c <sendUpdate_A>
	updateLeds_A();
 8004fba:	f000 f87f 	bl	80050bc <updateLeds_A>
}
 8004fbe:	bf00      	nop
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20004b47 	.word	0x20004b47
 8004fc8:	20004b42 	.word	0x20004b42
 8004fcc:	20004a98 	.word	0x20004a98
 8004fd0:	20004b44 	.word	0x20004b44
 8004fd4:	20004a99 	.word	0x20004a99
 8004fd8:	20004b41 	.word	0x20004b41
 8004fdc:	20004b46 	.word	0x20004b46
 8004fe0:	20004aec 	.word	0x20004aec
 8004fe4:	20004b43 	.word	0x20004b43
 8004fe8:	20004040 	.word	0x20004040
 8004fec:	2000404c 	.word	0x2000404c

08004ff0 <gpsSetup_A>:
 * @retval None
 *
 * @author Jeff Kaji
 * @date 12/31/2020
 */
void gpsSetup_A() {
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
	#ifndef NDEBUG
		_gpsFile = setupSensorFile_DS(GPS, &gpsNominal);
	#else
		// TODO: Implement gpsSetup
		notify(TASK_UPDATE, GPS);
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	f000 f8e2 	bl	80051c0 <notify>
	#endif
}
 8004ffc:	bf00      	nop
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <bmpSetup_A>:
 * @retval None
 *
 * @author Jeff Kaji
 * @date 12/31/2020
 */
void bmpSetup_A() {
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
	#ifndef NDEBUG
		_bmpFile = setupSensorFile_DS(BMP, &bmpNominal);
	#else
		barometerInit(&bmpNominal);
 8005004:	4804      	ldr	r0, [pc, #16]	; (8005018 <bmpSetup_A+0x18>)
 8005006:	f7ff fcc3 	bl	8004990 <barometerInit>
		notify(TASK_UPDATE, BMP);
 800500a:	2102      	movs	r1, #2
 800500c:	2000      	movs	r0, #0
 800500e:	f000 f8d7 	bl	80051c0 <notify>
	#endif
}
 8005012:	bf00      	nop
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20004b44 	.word	0x20004b44

0800501c <imuSetup_A>:
 * @retval None
 *
 * @author Jeff Kaji
 * @date 12/31/2020
 */
void imuSetup_A() {
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
	#ifndef NDEBUG
		_imuFile = setupSensorFile_DS(IMU, &imuNominal);
	#else
		// TODO: Implement imuSetup
		notify(TASK_UPDATE, IMU);
 8005020:	2103      	movs	r1, #3
 8005022:	2000      	movs	r0, #0
 8005024:	f000 f8cc 	bl	80051c0 <notify>
	#endif
}
 8005028:	bf00      	nop
 800502a:	bd80      	pop	{r7, pc}

0800502c <alaSetup_A>:
 * @retval None
 *
 * @author Jeff Kaji
 * @date 12/31/2020
 */
void alaSetup_A() {
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
	#ifndef NDEBUG
		_alaFile = setupSensorFile_DS(ALA, &alaNominal);
	#else
		// TODO: Implement alaSetup
		notify(TASK_UPDATE, ALA);
 8005030:	2104      	movs	r1, #4
 8005032:	2000      	movs	r0, #0
 8005034:	f000 f8c4 	bl	80051c0 <notify>
	#endif
}
 8005038:	bf00      	nop
 800503a:	bd80      	pop	{r7, pc}

0800503c <sendUpdate_A>:
 * @retval None
 *
 * @author Jeff Kaji
 * @date 12/31/2020
 */
void sendUpdate_A() {
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
	while(g_daqStatusData.lock) {
 8005040:	e002      	b.n	8005048 <sendUpdate_A+0xc>
		retryTakeDelay(DEFAULT_TAKE_DELAY);
 8005042:	2032      	movs	r0, #50	; 0x32
 8005044:	f000 f8af 	bl	80051a6 <retryTakeDelay>
	while(g_daqStatusData.lock) {
 8005048:	4b15      	ldr	r3, [pc, #84]	; (80050a0 <sendUpdate_A+0x64>)
 800504a:	7a9b      	ldrb	r3, [r3, #10]
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f7      	bne.n	8005042 <sendUpdate_A+0x6>
	}
	g_daqStatusData.lock = true;
 8005052:	4b13      	ldr	r3, [pc, #76]	; (80050a0 <sendUpdate_A+0x64>)
 8005054:	2201      	movs	r2, #1
 8005056:	729a      	strb	r2, [r3, #10]
	g_daqStatusData.timeStamp = getTimeStamp();
 8005058:	f000 f89e 	bl	8005198 <getTimeStamp>
 800505c:	4602      	mov	r2, r0
 800505e:	4b10      	ldr	r3, [pc, #64]	; (80050a0 <sendUpdate_A+0x64>)
 8005060:	601a      	str	r2, [r3, #0]
	g_daqStatusData.daqScalingEnabled = daqScalingEnabled;
 8005062:	4b10      	ldr	r3, [pc, #64]	; (80050a4 <sendUpdate_A+0x68>)
 8005064:	781a      	ldrb	r2, [r3, #0]
 8005066:	4b0e      	ldr	r3, [pc, #56]	; (80050a0 <sendUpdate_A+0x64>)
 8005068:	711a      	strb	r2, [r3, #4]
	g_daqStatusData.gpsNominal = gpsNominal;
 800506a:	4b0f      	ldr	r3, [pc, #60]	; (80050a8 <sendUpdate_A+0x6c>)
 800506c:	781a      	ldrb	r2, [r3, #0]
 800506e:	4b0c      	ldr	r3, [pc, #48]	; (80050a0 <sendUpdate_A+0x64>)
 8005070:	715a      	strb	r2, [r3, #5]
	g_daqStatusData.bmpNominal = bmpNominal;
 8005072:	4b0e      	ldr	r3, [pc, #56]	; (80050ac <sendUpdate_A+0x70>)
 8005074:	781a      	ldrb	r2, [r3, #0]
 8005076:	4b0a      	ldr	r3, [pc, #40]	; (80050a0 <sendUpdate_A+0x64>)
 8005078:	719a      	strb	r2, [r3, #6]
	g_daqStatusData.imuNominal = imuNominal;
 800507a:	4b0d      	ldr	r3, [pc, #52]	; (80050b0 <sendUpdate_A+0x74>)
 800507c:	781a      	ldrb	r2, [r3, #0]
 800507e:	4b08      	ldr	r3, [pc, #32]	; (80050a0 <sendUpdate_A+0x64>)
 8005080:	71da      	strb	r2, [r3, #7]
	g_daqStatusData.alaNominal = alaNominal;
 8005082:	4b0c      	ldr	r3, [pc, #48]	; (80050b4 <sendUpdate_A+0x78>)
 8005084:	781a      	ldrb	r2, [r3, #0]
 8005086:	4b06      	ldr	r3, [pc, #24]	; (80050a0 <sendUpdate_A+0x64>)
 8005088:	721a      	strb	r2, [r3, #8]
	g_daqStatusData.hasUpdate = true;
 800508a:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <sendUpdate_A+0x64>)
 800508c:	2201      	movs	r2, #1
 800508e:	725a      	strb	r2, [r3, #9]
	g_daqStatusData.lock = false;
 8005090:	4b03      	ldr	r3, [pc, #12]	; (80050a0 <sendUpdate_A+0x64>)
 8005092:	2200      	movs	r2, #0
 8005094:	729a      	strb	r2, [r3, #10]

	#if !defined(SUPRESS_TASK_UPDATES) && !defined(SUPRESS_ALL)
		printf("    Task Update: Acquisition DAQ Status Data sent\r\n");
 8005096:	4808      	ldr	r0, [pc, #32]	; (80050b8 <sendUpdate_A+0x7c>)
 8005098:	f000 faa0 	bl	80055dc <puts>
	#endif
}
 800509c:	bf00      	nop
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20004040 	.word	0x20004040
 80050a4:	20004b47 	.word	0x20004b47
 80050a8:	20004a98 	.word	0x20004a98
 80050ac:	20004b44 	.word	0x20004b44
 80050b0:	20004a99 	.word	0x20004a99
 80050b4:	20004b41 	.word	0x20004b41
 80050b8:	08006534 	.word	0x08006534

080050bc <updateLeds_A>:
 * @brief Updates Sensor LEDs
 *
 * @author Jeff Kaji
 * @date 01/11/2021
 */
void updateLeds_A() {
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
#ifdef NDEBUG
	PSP_GPIO_WritePin(U1S_CHECK_GPIO_Port, U1S_CHECK_Pin, imuNominal, "U1S_CHECK");
 80050c0:	4b2a      	ldr	r3, [pc, #168]	; (800516c <updateLeds_A+0xb0>)
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	461a      	mov	r2, r3
 80050c6:	4b2a      	ldr	r3, [pc, #168]	; (8005170 <updateLeds_A+0xb4>)
 80050c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80050cc:	2000      	movs	r0, #0
 80050ce:	f7ff fd51 	bl	8004b74 <PSP_GPIO_WritePin>
	PSP_GPIO_WritePin(U2S_CHECK_GPIO_Port, U2S_CHECK_Pin, alaNominal, "U2S_CHECK");
 80050d2:	4b28      	ldr	r3, [pc, #160]	; (8005174 <updateLeds_A+0xb8>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	461a      	mov	r2, r3
 80050d8:	4b27      	ldr	r3, [pc, #156]	; (8005178 <updateLeds_A+0xbc>)
 80050da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80050de:	2000      	movs	r0, #0
 80050e0:	f7ff fd48 	bl	8004b74 <PSP_GPIO_WritePin>
	PSP_GPIO_WritePin(U3S_CHECK_GPIO_Port, U3S_CHECK_Pin, bmpNominal, "U3S_CHECK");
 80050e4:	4b25      	ldr	r3, [pc, #148]	; (800517c <updateLeds_A+0xc0>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	461a      	mov	r2, r3
 80050ea:	4b25      	ldr	r3, [pc, #148]	; (8005180 <updateLeds_A+0xc4>)
 80050ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80050f0:	2000      	movs	r0, #0
 80050f2:	f7ff fd3f 	bl	8004b74 <PSP_GPIO_WritePin>
	PSP_GPIO_WritePin(U4S_CHECK_GPIO_Port, U4S_CHECK_Pin, gpsNominal, "U4S_CHECK");
 80050f6:	4b23      	ldr	r3, [pc, #140]	; (8005184 <updateLeds_A+0xc8>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	461a      	mov	r2, r3
 80050fc:	4b22      	ldr	r3, [pc, #136]	; (8005188 <updateLeds_A+0xcc>)
 80050fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005102:	2000      	movs	r0, #0
 8005104:	f7ff fd36 	bl	8004b74 <PSP_GPIO_WritePin>


	if(gpsNominal && bmpNominal && imuNominal && alaNominal) {
 8005108:	4b1e      	ldr	r3, [pc, #120]	; (8005184 <updateLeds_A+0xc8>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d01a      	beq.n	8005146 <updateLeds_A+0x8a>
 8005110:	4b1a      	ldr	r3, [pc, #104]	; (800517c <updateLeds_A+0xc0>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d016      	beq.n	8005146 <updateLeds_A+0x8a>
 8005118:	4b14      	ldr	r3, [pc, #80]	; (800516c <updateLeds_A+0xb0>)
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d012      	beq.n	8005146 <updateLeds_A+0x8a>
 8005120:	4b14      	ldr	r3, [pc, #80]	; (8005174 <updateLeds_A+0xb8>)
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00e      	beq.n	8005146 <updateLeds_A+0x8a>
		PSP_GPIO_WritePin(SENSOR_NOMINAL_GPIO_Port, SENSOR_NOMINAL_Pin, GPIO_PIN_SET, "SENSOR_NOMINAL");
 8005128:	4b18      	ldr	r3, [pc, #96]	; (800518c <updateLeds_A+0xd0>)
 800512a:	2201      	movs	r2, #1
 800512c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005130:	2000      	movs	r0, #0
 8005132:	f7ff fd1f 	bl	8004b74 <PSP_GPIO_WritePin>
		PSP_GPIO_WritePin(SENSOR_ERROR_GPIO_Port, SENSOR_ERROR_Pin, GPIO_PIN_RESET, "SENSOR_ERROR");
 8005136:	4b16      	ldr	r3, [pc, #88]	; (8005190 <updateLeds_A+0xd4>)
 8005138:	2200      	movs	r2, #0
 800513a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800513e:	2000      	movs	r0, #0
 8005140:	f7ff fd18 	bl	8004b74 <PSP_GPIO_WritePin>
 8005144:	e00d      	b.n	8005162 <updateLeds_A+0xa6>
	} else {
		PSP_GPIO_WritePin(SENSOR_NOMINAL_GPIO_Port, SENSOR_NOMINAL_Pin, GPIO_PIN_RESET, "SENSOR_NOMINAL");
 8005146:	4b11      	ldr	r3, [pc, #68]	; (800518c <updateLeds_A+0xd0>)
 8005148:	2200      	movs	r2, #0
 800514a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800514e:	2000      	movs	r0, #0
 8005150:	f7ff fd10 	bl	8004b74 <PSP_GPIO_WritePin>
		PSP_GPIO_WritePin(SENSOR_ERROR_GPIO_Port, SENSOR_ERROR_Pin, GPIO_PIN_SET, "SENSOR_ERROR");
 8005154:	4b0e      	ldr	r3, [pc, #56]	; (8005190 <updateLeds_A+0xd4>)
 8005156:	2201      	movs	r2, #1
 8005158:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800515c:	2000      	movs	r0, #0
 800515e:	f7ff fd09 	bl	8004b74 <PSP_GPIO_WritePin>
	}
	#if !defined(SUPRESS_TASK_UPDATES) && !defined(SUPRESS_ALL)
		printf("    Task Update: Acquisition LEDs Updated\r\n");
 8005162:	480c      	ldr	r0, [pc, #48]	; (8005194 <updateLeds_A+0xd8>)
 8005164:	f000 fa3a 	bl	80055dc <puts>
	#endif
#endif
}
 8005168:	bf00      	nop
 800516a:	bd80      	pop	{r7, pc}
 800516c:	20004a99 	.word	0x20004a99
 8005170:	08006568 	.word	0x08006568
 8005174:	20004b41 	.word	0x20004b41
 8005178:	08006574 	.word	0x08006574
 800517c:	20004b44 	.word	0x20004b44
 8005180:	08006580 	.word	0x08006580
 8005184:	20004a98 	.word	0x20004a98
 8005188:	0800658c 	.word	0x0800658c
 800518c:	08006598 	.word	0x08006598
 8005190:	080065a8 	.word	0x080065a8
 8005194:	080065b8 	.word	0x080065b8

08005198 <getTimeStamp>:
 * @return None
 *
 * @author Jeff Kaji
 * @date 12/24/2020
 */
ui32 getTimeStamp(void) {
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
	#ifndef NDEBUG
		return 0;
	#else
		return HAL_GetTick();
 800519c:	f7fb ff0c 	bl	8000fb8 <HAL_GetTick>
 80051a0:	4603      	mov	r3, r0
	#endif
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <retryTakeDelay>:
 * @retval None
 *
 * @author Jeff Kaji
 * @date 12/28/2020
 */
void retryTakeDelay(int length) {
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b082      	sub	sp, #8
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
#ifdef NDEBUG
	vTaskDelay(length);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fe fc6f 	bl	8003a94 <vTaskDelay>
#endif
}
 80051b6:	bf00      	nop
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <notify>:



void notify(Message_ID message, Device_ID device) {
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	4603      	mov	r3, r0
 80051c8:	460a      	mov	r2, r1
 80051ca:	71fb      	strb	r3, [r7, #7]
 80051cc:	4613      	mov	r3, r2
 80051ce:	71bb      	strb	r3, [r7, #6]
	extern bool alaNominal;
	extern bool bmpNominal;
	extern bool gpsNominal;
	extern bool nandNominal;

	switch(message) {
 80051d0:	79fb      	ldrb	r3, [r7, #7]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <notify+0x1c>
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d004      	beq.n	80051e4 <notify+0x24>
 80051da:	e007      	b.n	80051ec <notify+0x2c>
	case TASK_UPDATE:
		printf("    Task Update: ");
 80051dc:	4844      	ldr	r0, [pc, #272]	; (80052f0 <notify+0x130>)
 80051de:	f000 f989 	bl	80054f4 <iprintf>
		break;
 80051e2:	e003      	b.n	80051ec <notify+0x2c>
	case SETUP_WARNING:
		printf("! Setup Warning: ");
 80051e4:	4843      	ldr	r0, [pc, #268]	; (80052f4 <notify+0x134>)
 80051e6:	f000 f985 	bl	80054f4 <iprintf>
		break;
 80051ea:	bf00      	nop
	}

	switch(device) {
 80051ec:	79bb      	ldrb	r3, [r7, #6]
 80051ee:	2b05      	cmp	r3, #5
 80051f0:	d826      	bhi.n	8005240 <notify+0x80>
 80051f2:	a201      	add	r2, pc, #4	; (adr r2, 80051f8 <notify+0x38>)
 80051f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f8:	08005211 	.word	0x08005211
 80051fc:	08005219 	.word	0x08005219
 8005200:	08005221 	.word	0x08005221
 8005204:	08005229 	.word	0x08005229
 8005208:	08005231 	.word	0x08005231
 800520c:	08005239 	.word	0x08005239
	case SYSTEM:
		printf("System: ");
 8005210:	4839      	ldr	r0, [pc, #228]	; (80052f8 <notify+0x138>)
 8005212:	f000 f96f 	bl	80054f4 <iprintf>
		break;
 8005216:	e013      	b.n	8005240 <notify+0x80>
	case GPS:
		printf("   GPS: ");
 8005218:	4838      	ldr	r0, [pc, #224]	; (80052fc <notify+0x13c>)
 800521a:	f000 f96b 	bl	80054f4 <iprintf>
		break;
 800521e:	e00f      	b.n	8005240 <notify+0x80>
	case BMP:
		printf("   BMP: ");
 8005220:	4837      	ldr	r0, [pc, #220]	; (8005300 <notify+0x140>)
 8005222:	f000 f967 	bl	80054f4 <iprintf>
		break;
 8005226:	e00b      	b.n	8005240 <notify+0x80>
	case IMU:
		printf("   IMU: ");
 8005228:	4836      	ldr	r0, [pc, #216]	; (8005304 <notify+0x144>)
 800522a:	f000 f963 	bl	80054f4 <iprintf>
		break;
 800522e:	e007      	b.n	8005240 <notify+0x80>
	case ALA:
		printf("   ALA: ");
 8005230:	4835      	ldr	r0, [pc, #212]	; (8005308 <notify+0x148>)
 8005232:	f000 f95f 	bl	80054f4 <iprintf>
		break;
 8005236:	e003      	b.n	8005240 <notify+0x80>
	case NAND:
		printf("  NAND: ");
 8005238:	4834      	ldr	r0, [pc, #208]	; (800530c <notify+0x14c>)
 800523a:	f000 f95b 	bl	80054f4 <iprintf>
		break;
 800523e:	bf00      	nop
	}

	switch(message) {
 8005240:	79fb      	ldrb	r3, [r7, #7]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d000      	beq.n	8005248 <notify+0x88>
			break;
		default:
			break;
		}
	default:
		break;
 8005246:	e04e      	b.n	80052e6 <notify+0x126>
		switch(device) {
 8005248:	79bb      	ldrb	r3, [r7, #6]
 800524a:	3b01      	subs	r3, #1
 800524c:	2b04      	cmp	r3, #4
 800524e:	d849      	bhi.n	80052e4 <notify+0x124>
 8005250:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <notify+0x98>)
 8005252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005256:	bf00      	nop
 8005258:	0800526d 	.word	0x0800526d
 800525c:	08005285 	.word	0x08005285
 8005260:	0800529d 	.word	0x0800529d
 8005264:	080052b5 	.word	0x080052b5
 8005268:	080052cd 	.word	0x080052cd
			printf("Nominal Status: %s\r\n", gpsNominal ? "True" : "False");
 800526c:	4b28      	ldr	r3, [pc, #160]	; (8005310 <notify+0x150>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <notify+0xb8>
 8005274:	4b27      	ldr	r3, [pc, #156]	; (8005314 <notify+0x154>)
 8005276:	e000      	b.n	800527a <notify+0xba>
 8005278:	4b27      	ldr	r3, [pc, #156]	; (8005318 <notify+0x158>)
 800527a:	4619      	mov	r1, r3
 800527c:	4827      	ldr	r0, [pc, #156]	; (800531c <notify+0x15c>)
 800527e:	f000 f939 	bl	80054f4 <iprintf>
			break;
 8005282:	e030      	b.n	80052e6 <notify+0x126>
			printf("Nominal Status: %s\r\n", bmpNominal ? "True" : "False");
 8005284:	4b26      	ldr	r3, [pc, #152]	; (8005320 <notify+0x160>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <notify+0xd0>
 800528c:	4b21      	ldr	r3, [pc, #132]	; (8005314 <notify+0x154>)
 800528e:	e000      	b.n	8005292 <notify+0xd2>
 8005290:	4b21      	ldr	r3, [pc, #132]	; (8005318 <notify+0x158>)
 8005292:	4619      	mov	r1, r3
 8005294:	4821      	ldr	r0, [pc, #132]	; (800531c <notify+0x15c>)
 8005296:	f000 f92d 	bl	80054f4 <iprintf>
			break;
 800529a:	e024      	b.n	80052e6 <notify+0x126>
			printf("Nominal Status: %s\r\n", imuNominal ? "True" : "False");
 800529c:	4b21      	ldr	r3, [pc, #132]	; (8005324 <notify+0x164>)
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <notify+0xe8>
 80052a4:	4b1b      	ldr	r3, [pc, #108]	; (8005314 <notify+0x154>)
 80052a6:	e000      	b.n	80052aa <notify+0xea>
 80052a8:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <notify+0x158>)
 80052aa:	4619      	mov	r1, r3
 80052ac:	481b      	ldr	r0, [pc, #108]	; (800531c <notify+0x15c>)
 80052ae:	f000 f921 	bl	80054f4 <iprintf>
			break;
 80052b2:	e018      	b.n	80052e6 <notify+0x126>
			printf("Nominal Status: %s\r\n", alaNominal ? "True" : "False");
 80052b4:	4b1c      	ldr	r3, [pc, #112]	; (8005328 <notify+0x168>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <notify+0x100>
 80052bc:	4b15      	ldr	r3, [pc, #84]	; (8005314 <notify+0x154>)
 80052be:	e000      	b.n	80052c2 <notify+0x102>
 80052c0:	4b15      	ldr	r3, [pc, #84]	; (8005318 <notify+0x158>)
 80052c2:	4619      	mov	r1, r3
 80052c4:	4815      	ldr	r0, [pc, #84]	; (800531c <notify+0x15c>)
 80052c6:	f000 f915 	bl	80054f4 <iprintf>
			break;
 80052ca:	e00c      	b.n	80052e6 <notify+0x126>
			printf("Nominal Status: %s\r\n", nandNominal ? "True" : "False");
 80052cc:	4b17      	ldr	r3, [pc, #92]	; (800532c <notify+0x16c>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <notify+0x118>
 80052d4:	4b0f      	ldr	r3, [pc, #60]	; (8005314 <notify+0x154>)
 80052d6:	e000      	b.n	80052da <notify+0x11a>
 80052d8:	4b0f      	ldr	r3, [pc, #60]	; (8005318 <notify+0x158>)
 80052da:	4619      	mov	r1, r3
 80052dc:	480f      	ldr	r0, [pc, #60]	; (800531c <notify+0x15c>)
 80052de:	f000 f909 	bl	80054f4 <iprintf>
			break;
 80052e2:	e000      	b.n	80052e6 <notify+0x126>
			break;
 80052e4:	bf00      	nop
		break;
 80052e6:	bf00      	nop
	}


}
 80052e8:	bf00      	nop
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	0800663c 	.word	0x0800663c
 80052f4:	08006650 	.word	0x08006650
 80052f8:	08006664 	.word	0x08006664
 80052fc:	08006670 	.word	0x08006670
 8005300:	0800667c 	.word	0x0800667c
 8005304:	08006688 	.word	0x08006688
 8005308:	08006694 	.word	0x08006694
 800530c:	080066a0 	.word	0x080066a0
 8005310:	20004a98 	.word	0x20004a98
 8005314:	080066ac 	.word	0x080066ac
 8005318:	080066b4 	.word	0x080066b4
 800531c:	080066bc 	.word	0x080066bc
 8005320:	20004b44 	.word	0x20004b44
 8005324:	20004a99 	.word	0x20004a99
 8005328:	20004b41 	.word	0x20004b41
 800532c:	2000404f 	.word	0x2000404f

08005330 <__errno>:
 8005330:	4b01      	ldr	r3, [pc, #4]	; (8005338 <__errno+0x8>)
 8005332:	6818      	ldr	r0, [r3, #0]
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	20000010 	.word	0x20000010

0800533c <__libc_init_array>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	4e0d      	ldr	r6, [pc, #52]	; (8005374 <__libc_init_array+0x38>)
 8005340:	4c0d      	ldr	r4, [pc, #52]	; (8005378 <__libc_init_array+0x3c>)
 8005342:	1ba4      	subs	r4, r4, r6
 8005344:	10a4      	asrs	r4, r4, #2
 8005346:	2500      	movs	r5, #0
 8005348:	42a5      	cmp	r5, r4
 800534a:	d109      	bne.n	8005360 <__libc_init_array+0x24>
 800534c:	4e0b      	ldr	r6, [pc, #44]	; (800537c <__libc_init_array+0x40>)
 800534e:	4c0c      	ldr	r4, [pc, #48]	; (8005380 <__libc_init_array+0x44>)
 8005350:	f001 f81e 	bl	8006390 <_init>
 8005354:	1ba4      	subs	r4, r4, r6
 8005356:	10a4      	asrs	r4, r4, #2
 8005358:	2500      	movs	r5, #0
 800535a:	42a5      	cmp	r5, r4
 800535c:	d105      	bne.n	800536a <__libc_init_array+0x2e>
 800535e:	bd70      	pop	{r4, r5, r6, pc}
 8005360:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005364:	4798      	blx	r3
 8005366:	3501      	adds	r5, #1
 8005368:	e7ee      	b.n	8005348 <__libc_init_array+0xc>
 800536a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800536e:	4798      	blx	r3
 8005370:	3501      	adds	r5, #1
 8005372:	e7f2      	b.n	800535a <__libc_init_array+0x1e>
 8005374:	0800678c 	.word	0x0800678c
 8005378:	0800678c 	.word	0x0800678c
 800537c:	0800678c 	.word	0x0800678c
 8005380:	08006790 	.word	0x08006790

08005384 <malloc>:
 8005384:	4b02      	ldr	r3, [pc, #8]	; (8005390 <malloc+0xc>)
 8005386:	4601      	mov	r1, r0
 8005388:	6818      	ldr	r0, [r3, #0]
 800538a:	f000 b859 	b.w	8005440 <_malloc_r>
 800538e:	bf00      	nop
 8005390:	20000010 	.word	0x20000010

08005394 <memset>:
 8005394:	4402      	add	r2, r0
 8005396:	4603      	mov	r3, r0
 8005398:	4293      	cmp	r3, r2
 800539a:	d100      	bne.n	800539e <memset+0xa>
 800539c:	4770      	bx	lr
 800539e:	f803 1b01 	strb.w	r1, [r3], #1
 80053a2:	e7f9      	b.n	8005398 <memset+0x4>

080053a4 <_free_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4605      	mov	r5, r0
 80053a8:	2900      	cmp	r1, #0
 80053aa:	d045      	beq.n	8005438 <_free_r+0x94>
 80053ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053b0:	1f0c      	subs	r4, r1, #4
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	bfb8      	it	lt
 80053b6:	18e4      	addlt	r4, r4, r3
 80053b8:	f000 fc74 	bl	8005ca4 <__malloc_lock>
 80053bc:	4a1f      	ldr	r2, [pc, #124]	; (800543c <_free_r+0x98>)
 80053be:	6813      	ldr	r3, [r2, #0]
 80053c0:	4610      	mov	r0, r2
 80053c2:	b933      	cbnz	r3, 80053d2 <_free_r+0x2e>
 80053c4:	6063      	str	r3, [r4, #4]
 80053c6:	6014      	str	r4, [r2, #0]
 80053c8:	4628      	mov	r0, r5
 80053ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053ce:	f000 bc6a 	b.w	8005ca6 <__malloc_unlock>
 80053d2:	42a3      	cmp	r3, r4
 80053d4:	d90c      	bls.n	80053f0 <_free_r+0x4c>
 80053d6:	6821      	ldr	r1, [r4, #0]
 80053d8:	1862      	adds	r2, r4, r1
 80053da:	4293      	cmp	r3, r2
 80053dc:	bf04      	itt	eq
 80053de:	681a      	ldreq	r2, [r3, #0]
 80053e0:	685b      	ldreq	r3, [r3, #4]
 80053e2:	6063      	str	r3, [r4, #4]
 80053e4:	bf04      	itt	eq
 80053e6:	1852      	addeq	r2, r2, r1
 80053e8:	6022      	streq	r2, [r4, #0]
 80053ea:	6004      	str	r4, [r0, #0]
 80053ec:	e7ec      	b.n	80053c8 <_free_r+0x24>
 80053ee:	4613      	mov	r3, r2
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	b10a      	cbz	r2, 80053f8 <_free_r+0x54>
 80053f4:	42a2      	cmp	r2, r4
 80053f6:	d9fa      	bls.n	80053ee <_free_r+0x4a>
 80053f8:	6819      	ldr	r1, [r3, #0]
 80053fa:	1858      	adds	r0, r3, r1
 80053fc:	42a0      	cmp	r0, r4
 80053fe:	d10b      	bne.n	8005418 <_free_r+0x74>
 8005400:	6820      	ldr	r0, [r4, #0]
 8005402:	4401      	add	r1, r0
 8005404:	1858      	adds	r0, r3, r1
 8005406:	4282      	cmp	r2, r0
 8005408:	6019      	str	r1, [r3, #0]
 800540a:	d1dd      	bne.n	80053c8 <_free_r+0x24>
 800540c:	6810      	ldr	r0, [r2, #0]
 800540e:	6852      	ldr	r2, [r2, #4]
 8005410:	605a      	str	r2, [r3, #4]
 8005412:	4401      	add	r1, r0
 8005414:	6019      	str	r1, [r3, #0]
 8005416:	e7d7      	b.n	80053c8 <_free_r+0x24>
 8005418:	d902      	bls.n	8005420 <_free_r+0x7c>
 800541a:	230c      	movs	r3, #12
 800541c:	602b      	str	r3, [r5, #0]
 800541e:	e7d3      	b.n	80053c8 <_free_r+0x24>
 8005420:	6820      	ldr	r0, [r4, #0]
 8005422:	1821      	adds	r1, r4, r0
 8005424:	428a      	cmp	r2, r1
 8005426:	bf04      	itt	eq
 8005428:	6811      	ldreq	r1, [r2, #0]
 800542a:	6852      	ldreq	r2, [r2, #4]
 800542c:	6062      	str	r2, [r4, #4]
 800542e:	bf04      	itt	eq
 8005430:	1809      	addeq	r1, r1, r0
 8005432:	6021      	streq	r1, [r4, #0]
 8005434:	605c      	str	r4, [r3, #4]
 8005436:	e7c7      	b.n	80053c8 <_free_r+0x24>
 8005438:	bd38      	pop	{r3, r4, r5, pc}
 800543a:	bf00      	nop
 800543c:	20004050 	.word	0x20004050

08005440 <_malloc_r>:
 8005440:	b570      	push	{r4, r5, r6, lr}
 8005442:	1ccd      	adds	r5, r1, #3
 8005444:	f025 0503 	bic.w	r5, r5, #3
 8005448:	3508      	adds	r5, #8
 800544a:	2d0c      	cmp	r5, #12
 800544c:	bf38      	it	cc
 800544e:	250c      	movcc	r5, #12
 8005450:	2d00      	cmp	r5, #0
 8005452:	4606      	mov	r6, r0
 8005454:	db01      	blt.n	800545a <_malloc_r+0x1a>
 8005456:	42a9      	cmp	r1, r5
 8005458:	d903      	bls.n	8005462 <_malloc_r+0x22>
 800545a:	230c      	movs	r3, #12
 800545c:	6033      	str	r3, [r6, #0]
 800545e:	2000      	movs	r0, #0
 8005460:	bd70      	pop	{r4, r5, r6, pc}
 8005462:	f000 fc1f 	bl	8005ca4 <__malloc_lock>
 8005466:	4a21      	ldr	r2, [pc, #132]	; (80054ec <_malloc_r+0xac>)
 8005468:	6814      	ldr	r4, [r2, #0]
 800546a:	4621      	mov	r1, r4
 800546c:	b991      	cbnz	r1, 8005494 <_malloc_r+0x54>
 800546e:	4c20      	ldr	r4, [pc, #128]	; (80054f0 <_malloc_r+0xb0>)
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	b91b      	cbnz	r3, 800547c <_malloc_r+0x3c>
 8005474:	4630      	mov	r0, r6
 8005476:	f000 f8b9 	bl	80055ec <_sbrk_r>
 800547a:	6020      	str	r0, [r4, #0]
 800547c:	4629      	mov	r1, r5
 800547e:	4630      	mov	r0, r6
 8005480:	f000 f8b4 	bl	80055ec <_sbrk_r>
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	d124      	bne.n	80054d2 <_malloc_r+0x92>
 8005488:	230c      	movs	r3, #12
 800548a:	6033      	str	r3, [r6, #0]
 800548c:	4630      	mov	r0, r6
 800548e:	f000 fc0a 	bl	8005ca6 <__malloc_unlock>
 8005492:	e7e4      	b.n	800545e <_malloc_r+0x1e>
 8005494:	680b      	ldr	r3, [r1, #0]
 8005496:	1b5b      	subs	r3, r3, r5
 8005498:	d418      	bmi.n	80054cc <_malloc_r+0x8c>
 800549a:	2b0b      	cmp	r3, #11
 800549c:	d90f      	bls.n	80054be <_malloc_r+0x7e>
 800549e:	600b      	str	r3, [r1, #0]
 80054a0:	50cd      	str	r5, [r1, r3]
 80054a2:	18cc      	adds	r4, r1, r3
 80054a4:	4630      	mov	r0, r6
 80054a6:	f000 fbfe 	bl	8005ca6 <__malloc_unlock>
 80054aa:	f104 000b 	add.w	r0, r4, #11
 80054ae:	1d23      	adds	r3, r4, #4
 80054b0:	f020 0007 	bic.w	r0, r0, #7
 80054b4:	1ac3      	subs	r3, r0, r3
 80054b6:	d0d3      	beq.n	8005460 <_malloc_r+0x20>
 80054b8:	425a      	negs	r2, r3
 80054ba:	50e2      	str	r2, [r4, r3]
 80054bc:	e7d0      	b.n	8005460 <_malloc_r+0x20>
 80054be:	428c      	cmp	r4, r1
 80054c0:	684b      	ldr	r3, [r1, #4]
 80054c2:	bf16      	itet	ne
 80054c4:	6063      	strne	r3, [r4, #4]
 80054c6:	6013      	streq	r3, [r2, #0]
 80054c8:	460c      	movne	r4, r1
 80054ca:	e7eb      	b.n	80054a4 <_malloc_r+0x64>
 80054cc:	460c      	mov	r4, r1
 80054ce:	6849      	ldr	r1, [r1, #4]
 80054d0:	e7cc      	b.n	800546c <_malloc_r+0x2c>
 80054d2:	1cc4      	adds	r4, r0, #3
 80054d4:	f024 0403 	bic.w	r4, r4, #3
 80054d8:	42a0      	cmp	r0, r4
 80054da:	d005      	beq.n	80054e8 <_malloc_r+0xa8>
 80054dc:	1a21      	subs	r1, r4, r0
 80054de:	4630      	mov	r0, r6
 80054e0:	f000 f884 	bl	80055ec <_sbrk_r>
 80054e4:	3001      	adds	r0, #1
 80054e6:	d0cf      	beq.n	8005488 <_malloc_r+0x48>
 80054e8:	6025      	str	r5, [r4, #0]
 80054ea:	e7db      	b.n	80054a4 <_malloc_r+0x64>
 80054ec:	20004050 	.word	0x20004050
 80054f0:	20004054 	.word	0x20004054

080054f4 <iprintf>:
 80054f4:	b40f      	push	{r0, r1, r2, r3}
 80054f6:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <iprintf+0x2c>)
 80054f8:	b513      	push	{r0, r1, r4, lr}
 80054fa:	681c      	ldr	r4, [r3, #0]
 80054fc:	b124      	cbz	r4, 8005508 <iprintf+0x14>
 80054fe:	69a3      	ldr	r3, [r4, #24]
 8005500:	b913      	cbnz	r3, 8005508 <iprintf+0x14>
 8005502:	4620      	mov	r0, r4
 8005504:	f000 fae0 	bl	8005ac8 <__sinit>
 8005508:	ab05      	add	r3, sp, #20
 800550a:	9a04      	ldr	r2, [sp, #16]
 800550c:	68a1      	ldr	r1, [r4, #8]
 800550e:	9301      	str	r3, [sp, #4]
 8005510:	4620      	mov	r0, r4
 8005512:	f000 fbf3 	bl	8005cfc <_vfiprintf_r>
 8005516:	b002      	add	sp, #8
 8005518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800551c:	b004      	add	sp, #16
 800551e:	4770      	bx	lr
 8005520:	20000010 	.word	0x20000010

08005524 <_puts_r>:
 8005524:	b570      	push	{r4, r5, r6, lr}
 8005526:	460e      	mov	r6, r1
 8005528:	4605      	mov	r5, r0
 800552a:	b118      	cbz	r0, 8005534 <_puts_r+0x10>
 800552c:	6983      	ldr	r3, [r0, #24]
 800552e:	b90b      	cbnz	r3, 8005534 <_puts_r+0x10>
 8005530:	f000 faca 	bl	8005ac8 <__sinit>
 8005534:	69ab      	ldr	r3, [r5, #24]
 8005536:	68ac      	ldr	r4, [r5, #8]
 8005538:	b913      	cbnz	r3, 8005540 <_puts_r+0x1c>
 800553a:	4628      	mov	r0, r5
 800553c:	f000 fac4 	bl	8005ac8 <__sinit>
 8005540:	4b23      	ldr	r3, [pc, #140]	; (80055d0 <_puts_r+0xac>)
 8005542:	429c      	cmp	r4, r3
 8005544:	d117      	bne.n	8005576 <_puts_r+0x52>
 8005546:	686c      	ldr	r4, [r5, #4]
 8005548:	89a3      	ldrh	r3, [r4, #12]
 800554a:	071b      	lsls	r3, r3, #28
 800554c:	d51d      	bpl.n	800558a <_puts_r+0x66>
 800554e:	6923      	ldr	r3, [r4, #16]
 8005550:	b1db      	cbz	r3, 800558a <_puts_r+0x66>
 8005552:	3e01      	subs	r6, #1
 8005554:	68a3      	ldr	r3, [r4, #8]
 8005556:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800555a:	3b01      	subs	r3, #1
 800555c:	60a3      	str	r3, [r4, #8]
 800555e:	b9e9      	cbnz	r1, 800559c <_puts_r+0x78>
 8005560:	2b00      	cmp	r3, #0
 8005562:	da2e      	bge.n	80055c2 <_puts_r+0x9e>
 8005564:	4622      	mov	r2, r4
 8005566:	210a      	movs	r1, #10
 8005568:	4628      	mov	r0, r5
 800556a:	f000 f8fd 	bl	8005768 <__swbuf_r>
 800556e:	3001      	adds	r0, #1
 8005570:	d011      	beq.n	8005596 <_puts_r+0x72>
 8005572:	200a      	movs	r0, #10
 8005574:	e011      	b.n	800559a <_puts_r+0x76>
 8005576:	4b17      	ldr	r3, [pc, #92]	; (80055d4 <_puts_r+0xb0>)
 8005578:	429c      	cmp	r4, r3
 800557a:	d101      	bne.n	8005580 <_puts_r+0x5c>
 800557c:	68ac      	ldr	r4, [r5, #8]
 800557e:	e7e3      	b.n	8005548 <_puts_r+0x24>
 8005580:	4b15      	ldr	r3, [pc, #84]	; (80055d8 <_puts_r+0xb4>)
 8005582:	429c      	cmp	r4, r3
 8005584:	bf08      	it	eq
 8005586:	68ec      	ldreq	r4, [r5, #12]
 8005588:	e7de      	b.n	8005548 <_puts_r+0x24>
 800558a:	4621      	mov	r1, r4
 800558c:	4628      	mov	r0, r5
 800558e:	f000 f93d 	bl	800580c <__swsetup_r>
 8005592:	2800      	cmp	r0, #0
 8005594:	d0dd      	beq.n	8005552 <_puts_r+0x2e>
 8005596:	f04f 30ff 	mov.w	r0, #4294967295
 800559a:	bd70      	pop	{r4, r5, r6, pc}
 800559c:	2b00      	cmp	r3, #0
 800559e:	da04      	bge.n	80055aa <_puts_r+0x86>
 80055a0:	69a2      	ldr	r2, [r4, #24]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	dc06      	bgt.n	80055b4 <_puts_r+0x90>
 80055a6:	290a      	cmp	r1, #10
 80055a8:	d004      	beq.n	80055b4 <_puts_r+0x90>
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	6022      	str	r2, [r4, #0]
 80055b0:	7019      	strb	r1, [r3, #0]
 80055b2:	e7cf      	b.n	8005554 <_puts_r+0x30>
 80055b4:	4622      	mov	r2, r4
 80055b6:	4628      	mov	r0, r5
 80055b8:	f000 f8d6 	bl	8005768 <__swbuf_r>
 80055bc:	3001      	adds	r0, #1
 80055be:	d1c9      	bne.n	8005554 <_puts_r+0x30>
 80055c0:	e7e9      	b.n	8005596 <_puts_r+0x72>
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	200a      	movs	r0, #10
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	6022      	str	r2, [r4, #0]
 80055ca:	7018      	strb	r0, [r3, #0]
 80055cc:	e7e5      	b.n	800559a <_puts_r+0x76>
 80055ce:	bf00      	nop
 80055d0:	08006710 	.word	0x08006710
 80055d4:	08006730 	.word	0x08006730
 80055d8:	080066f0 	.word	0x080066f0

080055dc <puts>:
 80055dc:	4b02      	ldr	r3, [pc, #8]	; (80055e8 <puts+0xc>)
 80055de:	4601      	mov	r1, r0
 80055e0:	6818      	ldr	r0, [r3, #0]
 80055e2:	f7ff bf9f 	b.w	8005524 <_puts_r>
 80055e6:	bf00      	nop
 80055e8:	20000010 	.word	0x20000010

080055ec <_sbrk_r>:
 80055ec:	b538      	push	{r3, r4, r5, lr}
 80055ee:	4c06      	ldr	r4, [pc, #24]	; (8005608 <_sbrk_r+0x1c>)
 80055f0:	2300      	movs	r3, #0
 80055f2:	4605      	mov	r5, r0
 80055f4:	4608      	mov	r0, r1
 80055f6:	6023      	str	r3, [r4, #0]
 80055f8:	f7fb fc02 	bl	8000e00 <_sbrk>
 80055fc:	1c43      	adds	r3, r0, #1
 80055fe:	d102      	bne.n	8005606 <_sbrk_r+0x1a>
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	b103      	cbz	r3, 8005606 <_sbrk_r+0x1a>
 8005604:	602b      	str	r3, [r5, #0]
 8005606:	bd38      	pop	{r3, r4, r5, pc}
 8005608:	20004b4c 	.word	0x20004b4c

0800560c <setvbuf>:
 800560c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005610:	461d      	mov	r5, r3
 8005612:	4b51      	ldr	r3, [pc, #324]	; (8005758 <setvbuf+0x14c>)
 8005614:	681e      	ldr	r6, [r3, #0]
 8005616:	4604      	mov	r4, r0
 8005618:	460f      	mov	r7, r1
 800561a:	4690      	mov	r8, r2
 800561c:	b126      	cbz	r6, 8005628 <setvbuf+0x1c>
 800561e:	69b3      	ldr	r3, [r6, #24]
 8005620:	b913      	cbnz	r3, 8005628 <setvbuf+0x1c>
 8005622:	4630      	mov	r0, r6
 8005624:	f000 fa50 	bl	8005ac8 <__sinit>
 8005628:	4b4c      	ldr	r3, [pc, #304]	; (800575c <setvbuf+0x150>)
 800562a:	429c      	cmp	r4, r3
 800562c:	d152      	bne.n	80056d4 <setvbuf+0xc8>
 800562e:	6874      	ldr	r4, [r6, #4]
 8005630:	f1b8 0f02 	cmp.w	r8, #2
 8005634:	d006      	beq.n	8005644 <setvbuf+0x38>
 8005636:	f1b8 0f01 	cmp.w	r8, #1
 800563a:	f200 8089 	bhi.w	8005750 <setvbuf+0x144>
 800563e:	2d00      	cmp	r5, #0
 8005640:	f2c0 8086 	blt.w	8005750 <setvbuf+0x144>
 8005644:	4621      	mov	r1, r4
 8005646:	4630      	mov	r0, r6
 8005648:	f000 f9d4 	bl	80059f4 <_fflush_r>
 800564c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800564e:	b141      	cbz	r1, 8005662 <setvbuf+0x56>
 8005650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005654:	4299      	cmp	r1, r3
 8005656:	d002      	beq.n	800565e <setvbuf+0x52>
 8005658:	4630      	mov	r0, r6
 800565a:	f7ff fea3 	bl	80053a4 <_free_r>
 800565e:	2300      	movs	r3, #0
 8005660:	6363      	str	r3, [r4, #52]	; 0x34
 8005662:	2300      	movs	r3, #0
 8005664:	61a3      	str	r3, [r4, #24]
 8005666:	6063      	str	r3, [r4, #4]
 8005668:	89a3      	ldrh	r3, [r4, #12]
 800566a:	061b      	lsls	r3, r3, #24
 800566c:	d503      	bpl.n	8005676 <setvbuf+0x6a>
 800566e:	6921      	ldr	r1, [r4, #16]
 8005670:	4630      	mov	r0, r6
 8005672:	f7ff fe97 	bl	80053a4 <_free_r>
 8005676:	89a3      	ldrh	r3, [r4, #12]
 8005678:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800567c:	f023 0303 	bic.w	r3, r3, #3
 8005680:	f1b8 0f02 	cmp.w	r8, #2
 8005684:	81a3      	strh	r3, [r4, #12]
 8005686:	d05d      	beq.n	8005744 <setvbuf+0x138>
 8005688:	ab01      	add	r3, sp, #4
 800568a:	466a      	mov	r2, sp
 800568c:	4621      	mov	r1, r4
 800568e:	4630      	mov	r0, r6
 8005690:	f000 faa4 	bl	8005bdc <__swhatbuf_r>
 8005694:	89a3      	ldrh	r3, [r4, #12]
 8005696:	4318      	orrs	r0, r3
 8005698:	81a0      	strh	r0, [r4, #12]
 800569a:	bb2d      	cbnz	r5, 80056e8 <setvbuf+0xdc>
 800569c:	9d00      	ldr	r5, [sp, #0]
 800569e:	4628      	mov	r0, r5
 80056a0:	f7ff fe70 	bl	8005384 <malloc>
 80056a4:	4607      	mov	r7, r0
 80056a6:	2800      	cmp	r0, #0
 80056a8:	d14e      	bne.n	8005748 <setvbuf+0x13c>
 80056aa:	f8dd 9000 	ldr.w	r9, [sp]
 80056ae:	45a9      	cmp	r9, r5
 80056b0:	d13c      	bne.n	800572c <setvbuf+0x120>
 80056b2:	f04f 30ff 	mov.w	r0, #4294967295
 80056b6:	89a3      	ldrh	r3, [r4, #12]
 80056b8:	f043 0302 	orr.w	r3, r3, #2
 80056bc:	81a3      	strh	r3, [r4, #12]
 80056be:	2300      	movs	r3, #0
 80056c0:	60a3      	str	r3, [r4, #8]
 80056c2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80056c6:	6023      	str	r3, [r4, #0]
 80056c8:	6123      	str	r3, [r4, #16]
 80056ca:	2301      	movs	r3, #1
 80056cc:	6163      	str	r3, [r4, #20]
 80056ce:	b003      	add	sp, #12
 80056d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056d4:	4b22      	ldr	r3, [pc, #136]	; (8005760 <setvbuf+0x154>)
 80056d6:	429c      	cmp	r4, r3
 80056d8:	d101      	bne.n	80056de <setvbuf+0xd2>
 80056da:	68b4      	ldr	r4, [r6, #8]
 80056dc:	e7a8      	b.n	8005630 <setvbuf+0x24>
 80056de:	4b21      	ldr	r3, [pc, #132]	; (8005764 <setvbuf+0x158>)
 80056e0:	429c      	cmp	r4, r3
 80056e2:	bf08      	it	eq
 80056e4:	68f4      	ldreq	r4, [r6, #12]
 80056e6:	e7a3      	b.n	8005630 <setvbuf+0x24>
 80056e8:	2f00      	cmp	r7, #0
 80056ea:	d0d8      	beq.n	800569e <setvbuf+0x92>
 80056ec:	69b3      	ldr	r3, [r6, #24]
 80056ee:	b913      	cbnz	r3, 80056f6 <setvbuf+0xea>
 80056f0:	4630      	mov	r0, r6
 80056f2:	f000 f9e9 	bl	8005ac8 <__sinit>
 80056f6:	f1b8 0f01 	cmp.w	r8, #1
 80056fa:	bf08      	it	eq
 80056fc:	89a3      	ldrheq	r3, [r4, #12]
 80056fe:	6027      	str	r7, [r4, #0]
 8005700:	bf04      	itt	eq
 8005702:	f043 0301 	orreq.w	r3, r3, #1
 8005706:	81a3      	strheq	r3, [r4, #12]
 8005708:	89a3      	ldrh	r3, [r4, #12]
 800570a:	f013 0008 	ands.w	r0, r3, #8
 800570e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8005712:	d01b      	beq.n	800574c <setvbuf+0x140>
 8005714:	f013 0001 	ands.w	r0, r3, #1
 8005718:	bf18      	it	ne
 800571a:	426d      	negne	r5, r5
 800571c:	f04f 0300 	mov.w	r3, #0
 8005720:	bf1d      	ittte	ne
 8005722:	60a3      	strne	r3, [r4, #8]
 8005724:	61a5      	strne	r5, [r4, #24]
 8005726:	4618      	movne	r0, r3
 8005728:	60a5      	streq	r5, [r4, #8]
 800572a:	e7d0      	b.n	80056ce <setvbuf+0xc2>
 800572c:	4648      	mov	r0, r9
 800572e:	f7ff fe29 	bl	8005384 <malloc>
 8005732:	4607      	mov	r7, r0
 8005734:	2800      	cmp	r0, #0
 8005736:	d0bc      	beq.n	80056b2 <setvbuf+0xa6>
 8005738:	89a3      	ldrh	r3, [r4, #12]
 800573a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800573e:	81a3      	strh	r3, [r4, #12]
 8005740:	464d      	mov	r5, r9
 8005742:	e7d3      	b.n	80056ec <setvbuf+0xe0>
 8005744:	2000      	movs	r0, #0
 8005746:	e7b6      	b.n	80056b6 <setvbuf+0xaa>
 8005748:	46a9      	mov	r9, r5
 800574a:	e7f5      	b.n	8005738 <setvbuf+0x12c>
 800574c:	60a0      	str	r0, [r4, #8]
 800574e:	e7be      	b.n	80056ce <setvbuf+0xc2>
 8005750:	f04f 30ff 	mov.w	r0, #4294967295
 8005754:	e7bb      	b.n	80056ce <setvbuf+0xc2>
 8005756:	bf00      	nop
 8005758:	20000010 	.word	0x20000010
 800575c:	08006710 	.word	0x08006710
 8005760:	08006730 	.word	0x08006730
 8005764:	080066f0 	.word	0x080066f0

08005768 <__swbuf_r>:
 8005768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576a:	460e      	mov	r6, r1
 800576c:	4614      	mov	r4, r2
 800576e:	4605      	mov	r5, r0
 8005770:	b118      	cbz	r0, 800577a <__swbuf_r+0x12>
 8005772:	6983      	ldr	r3, [r0, #24]
 8005774:	b90b      	cbnz	r3, 800577a <__swbuf_r+0x12>
 8005776:	f000 f9a7 	bl	8005ac8 <__sinit>
 800577a:	4b21      	ldr	r3, [pc, #132]	; (8005800 <__swbuf_r+0x98>)
 800577c:	429c      	cmp	r4, r3
 800577e:	d12a      	bne.n	80057d6 <__swbuf_r+0x6e>
 8005780:	686c      	ldr	r4, [r5, #4]
 8005782:	69a3      	ldr	r3, [r4, #24]
 8005784:	60a3      	str	r3, [r4, #8]
 8005786:	89a3      	ldrh	r3, [r4, #12]
 8005788:	071a      	lsls	r2, r3, #28
 800578a:	d52e      	bpl.n	80057ea <__swbuf_r+0x82>
 800578c:	6923      	ldr	r3, [r4, #16]
 800578e:	b363      	cbz	r3, 80057ea <__swbuf_r+0x82>
 8005790:	6923      	ldr	r3, [r4, #16]
 8005792:	6820      	ldr	r0, [r4, #0]
 8005794:	1ac0      	subs	r0, r0, r3
 8005796:	6963      	ldr	r3, [r4, #20]
 8005798:	b2f6      	uxtb	r6, r6
 800579a:	4283      	cmp	r3, r0
 800579c:	4637      	mov	r7, r6
 800579e:	dc04      	bgt.n	80057aa <__swbuf_r+0x42>
 80057a0:	4621      	mov	r1, r4
 80057a2:	4628      	mov	r0, r5
 80057a4:	f000 f926 	bl	80059f4 <_fflush_r>
 80057a8:	bb28      	cbnz	r0, 80057f6 <__swbuf_r+0x8e>
 80057aa:	68a3      	ldr	r3, [r4, #8]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	60a3      	str	r3, [r4, #8]
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	6022      	str	r2, [r4, #0]
 80057b6:	701e      	strb	r6, [r3, #0]
 80057b8:	6963      	ldr	r3, [r4, #20]
 80057ba:	3001      	adds	r0, #1
 80057bc:	4283      	cmp	r3, r0
 80057be:	d004      	beq.n	80057ca <__swbuf_r+0x62>
 80057c0:	89a3      	ldrh	r3, [r4, #12]
 80057c2:	07db      	lsls	r3, r3, #31
 80057c4:	d519      	bpl.n	80057fa <__swbuf_r+0x92>
 80057c6:	2e0a      	cmp	r6, #10
 80057c8:	d117      	bne.n	80057fa <__swbuf_r+0x92>
 80057ca:	4621      	mov	r1, r4
 80057cc:	4628      	mov	r0, r5
 80057ce:	f000 f911 	bl	80059f4 <_fflush_r>
 80057d2:	b190      	cbz	r0, 80057fa <__swbuf_r+0x92>
 80057d4:	e00f      	b.n	80057f6 <__swbuf_r+0x8e>
 80057d6:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <__swbuf_r+0x9c>)
 80057d8:	429c      	cmp	r4, r3
 80057da:	d101      	bne.n	80057e0 <__swbuf_r+0x78>
 80057dc:	68ac      	ldr	r4, [r5, #8]
 80057de:	e7d0      	b.n	8005782 <__swbuf_r+0x1a>
 80057e0:	4b09      	ldr	r3, [pc, #36]	; (8005808 <__swbuf_r+0xa0>)
 80057e2:	429c      	cmp	r4, r3
 80057e4:	bf08      	it	eq
 80057e6:	68ec      	ldreq	r4, [r5, #12]
 80057e8:	e7cb      	b.n	8005782 <__swbuf_r+0x1a>
 80057ea:	4621      	mov	r1, r4
 80057ec:	4628      	mov	r0, r5
 80057ee:	f000 f80d 	bl	800580c <__swsetup_r>
 80057f2:	2800      	cmp	r0, #0
 80057f4:	d0cc      	beq.n	8005790 <__swbuf_r+0x28>
 80057f6:	f04f 37ff 	mov.w	r7, #4294967295
 80057fa:	4638      	mov	r0, r7
 80057fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057fe:	bf00      	nop
 8005800:	08006710 	.word	0x08006710
 8005804:	08006730 	.word	0x08006730
 8005808:	080066f0 	.word	0x080066f0

0800580c <__swsetup_r>:
 800580c:	4b32      	ldr	r3, [pc, #200]	; (80058d8 <__swsetup_r+0xcc>)
 800580e:	b570      	push	{r4, r5, r6, lr}
 8005810:	681d      	ldr	r5, [r3, #0]
 8005812:	4606      	mov	r6, r0
 8005814:	460c      	mov	r4, r1
 8005816:	b125      	cbz	r5, 8005822 <__swsetup_r+0x16>
 8005818:	69ab      	ldr	r3, [r5, #24]
 800581a:	b913      	cbnz	r3, 8005822 <__swsetup_r+0x16>
 800581c:	4628      	mov	r0, r5
 800581e:	f000 f953 	bl	8005ac8 <__sinit>
 8005822:	4b2e      	ldr	r3, [pc, #184]	; (80058dc <__swsetup_r+0xd0>)
 8005824:	429c      	cmp	r4, r3
 8005826:	d10f      	bne.n	8005848 <__swsetup_r+0x3c>
 8005828:	686c      	ldr	r4, [r5, #4]
 800582a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800582e:	b29a      	uxth	r2, r3
 8005830:	0715      	lsls	r5, r2, #28
 8005832:	d42c      	bmi.n	800588e <__swsetup_r+0x82>
 8005834:	06d0      	lsls	r0, r2, #27
 8005836:	d411      	bmi.n	800585c <__swsetup_r+0x50>
 8005838:	2209      	movs	r2, #9
 800583a:	6032      	str	r2, [r6, #0]
 800583c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005840:	81a3      	strh	r3, [r4, #12]
 8005842:	f04f 30ff 	mov.w	r0, #4294967295
 8005846:	e03e      	b.n	80058c6 <__swsetup_r+0xba>
 8005848:	4b25      	ldr	r3, [pc, #148]	; (80058e0 <__swsetup_r+0xd4>)
 800584a:	429c      	cmp	r4, r3
 800584c:	d101      	bne.n	8005852 <__swsetup_r+0x46>
 800584e:	68ac      	ldr	r4, [r5, #8]
 8005850:	e7eb      	b.n	800582a <__swsetup_r+0x1e>
 8005852:	4b24      	ldr	r3, [pc, #144]	; (80058e4 <__swsetup_r+0xd8>)
 8005854:	429c      	cmp	r4, r3
 8005856:	bf08      	it	eq
 8005858:	68ec      	ldreq	r4, [r5, #12]
 800585a:	e7e6      	b.n	800582a <__swsetup_r+0x1e>
 800585c:	0751      	lsls	r1, r2, #29
 800585e:	d512      	bpl.n	8005886 <__swsetup_r+0x7a>
 8005860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005862:	b141      	cbz	r1, 8005876 <__swsetup_r+0x6a>
 8005864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005868:	4299      	cmp	r1, r3
 800586a:	d002      	beq.n	8005872 <__swsetup_r+0x66>
 800586c:	4630      	mov	r0, r6
 800586e:	f7ff fd99 	bl	80053a4 <_free_r>
 8005872:	2300      	movs	r3, #0
 8005874:	6363      	str	r3, [r4, #52]	; 0x34
 8005876:	89a3      	ldrh	r3, [r4, #12]
 8005878:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800587c:	81a3      	strh	r3, [r4, #12]
 800587e:	2300      	movs	r3, #0
 8005880:	6063      	str	r3, [r4, #4]
 8005882:	6923      	ldr	r3, [r4, #16]
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	f043 0308 	orr.w	r3, r3, #8
 800588c:	81a3      	strh	r3, [r4, #12]
 800588e:	6923      	ldr	r3, [r4, #16]
 8005890:	b94b      	cbnz	r3, 80058a6 <__swsetup_r+0x9a>
 8005892:	89a3      	ldrh	r3, [r4, #12]
 8005894:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800589c:	d003      	beq.n	80058a6 <__swsetup_r+0x9a>
 800589e:	4621      	mov	r1, r4
 80058a0:	4630      	mov	r0, r6
 80058a2:	f000 f9bf 	bl	8005c24 <__smakebuf_r>
 80058a6:	89a2      	ldrh	r2, [r4, #12]
 80058a8:	f012 0301 	ands.w	r3, r2, #1
 80058ac:	d00c      	beq.n	80058c8 <__swsetup_r+0xbc>
 80058ae:	2300      	movs	r3, #0
 80058b0:	60a3      	str	r3, [r4, #8]
 80058b2:	6963      	ldr	r3, [r4, #20]
 80058b4:	425b      	negs	r3, r3
 80058b6:	61a3      	str	r3, [r4, #24]
 80058b8:	6923      	ldr	r3, [r4, #16]
 80058ba:	b953      	cbnz	r3, 80058d2 <__swsetup_r+0xc6>
 80058bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80058c4:	d1ba      	bne.n	800583c <__swsetup_r+0x30>
 80058c6:	bd70      	pop	{r4, r5, r6, pc}
 80058c8:	0792      	lsls	r2, r2, #30
 80058ca:	bf58      	it	pl
 80058cc:	6963      	ldrpl	r3, [r4, #20]
 80058ce:	60a3      	str	r3, [r4, #8]
 80058d0:	e7f2      	b.n	80058b8 <__swsetup_r+0xac>
 80058d2:	2000      	movs	r0, #0
 80058d4:	e7f7      	b.n	80058c6 <__swsetup_r+0xba>
 80058d6:	bf00      	nop
 80058d8:	20000010 	.word	0x20000010
 80058dc:	08006710 	.word	0x08006710
 80058e0:	08006730 	.word	0x08006730
 80058e4:	080066f0 	.word	0x080066f0

080058e8 <__sflush_r>:
 80058e8:	898a      	ldrh	r2, [r1, #12]
 80058ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ee:	4605      	mov	r5, r0
 80058f0:	0710      	lsls	r0, r2, #28
 80058f2:	460c      	mov	r4, r1
 80058f4:	d458      	bmi.n	80059a8 <__sflush_r+0xc0>
 80058f6:	684b      	ldr	r3, [r1, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	dc05      	bgt.n	8005908 <__sflush_r+0x20>
 80058fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	dc02      	bgt.n	8005908 <__sflush_r+0x20>
 8005902:	2000      	movs	r0, #0
 8005904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005908:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800590a:	2e00      	cmp	r6, #0
 800590c:	d0f9      	beq.n	8005902 <__sflush_r+0x1a>
 800590e:	2300      	movs	r3, #0
 8005910:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005914:	682f      	ldr	r7, [r5, #0]
 8005916:	6a21      	ldr	r1, [r4, #32]
 8005918:	602b      	str	r3, [r5, #0]
 800591a:	d032      	beq.n	8005982 <__sflush_r+0x9a>
 800591c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800591e:	89a3      	ldrh	r3, [r4, #12]
 8005920:	075a      	lsls	r2, r3, #29
 8005922:	d505      	bpl.n	8005930 <__sflush_r+0x48>
 8005924:	6863      	ldr	r3, [r4, #4]
 8005926:	1ac0      	subs	r0, r0, r3
 8005928:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800592a:	b10b      	cbz	r3, 8005930 <__sflush_r+0x48>
 800592c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800592e:	1ac0      	subs	r0, r0, r3
 8005930:	2300      	movs	r3, #0
 8005932:	4602      	mov	r2, r0
 8005934:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005936:	6a21      	ldr	r1, [r4, #32]
 8005938:	4628      	mov	r0, r5
 800593a:	47b0      	blx	r6
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	89a3      	ldrh	r3, [r4, #12]
 8005940:	d106      	bne.n	8005950 <__sflush_r+0x68>
 8005942:	6829      	ldr	r1, [r5, #0]
 8005944:	291d      	cmp	r1, #29
 8005946:	d848      	bhi.n	80059da <__sflush_r+0xf2>
 8005948:	4a29      	ldr	r2, [pc, #164]	; (80059f0 <__sflush_r+0x108>)
 800594a:	40ca      	lsrs	r2, r1
 800594c:	07d6      	lsls	r6, r2, #31
 800594e:	d544      	bpl.n	80059da <__sflush_r+0xf2>
 8005950:	2200      	movs	r2, #0
 8005952:	6062      	str	r2, [r4, #4]
 8005954:	04d9      	lsls	r1, r3, #19
 8005956:	6922      	ldr	r2, [r4, #16]
 8005958:	6022      	str	r2, [r4, #0]
 800595a:	d504      	bpl.n	8005966 <__sflush_r+0x7e>
 800595c:	1c42      	adds	r2, r0, #1
 800595e:	d101      	bne.n	8005964 <__sflush_r+0x7c>
 8005960:	682b      	ldr	r3, [r5, #0]
 8005962:	b903      	cbnz	r3, 8005966 <__sflush_r+0x7e>
 8005964:	6560      	str	r0, [r4, #84]	; 0x54
 8005966:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005968:	602f      	str	r7, [r5, #0]
 800596a:	2900      	cmp	r1, #0
 800596c:	d0c9      	beq.n	8005902 <__sflush_r+0x1a>
 800596e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005972:	4299      	cmp	r1, r3
 8005974:	d002      	beq.n	800597c <__sflush_r+0x94>
 8005976:	4628      	mov	r0, r5
 8005978:	f7ff fd14 	bl	80053a4 <_free_r>
 800597c:	2000      	movs	r0, #0
 800597e:	6360      	str	r0, [r4, #52]	; 0x34
 8005980:	e7c0      	b.n	8005904 <__sflush_r+0x1c>
 8005982:	2301      	movs	r3, #1
 8005984:	4628      	mov	r0, r5
 8005986:	47b0      	blx	r6
 8005988:	1c41      	adds	r1, r0, #1
 800598a:	d1c8      	bne.n	800591e <__sflush_r+0x36>
 800598c:	682b      	ldr	r3, [r5, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0c5      	beq.n	800591e <__sflush_r+0x36>
 8005992:	2b1d      	cmp	r3, #29
 8005994:	d001      	beq.n	800599a <__sflush_r+0xb2>
 8005996:	2b16      	cmp	r3, #22
 8005998:	d101      	bne.n	800599e <__sflush_r+0xb6>
 800599a:	602f      	str	r7, [r5, #0]
 800599c:	e7b1      	b.n	8005902 <__sflush_r+0x1a>
 800599e:	89a3      	ldrh	r3, [r4, #12]
 80059a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059a4:	81a3      	strh	r3, [r4, #12]
 80059a6:	e7ad      	b.n	8005904 <__sflush_r+0x1c>
 80059a8:	690f      	ldr	r7, [r1, #16]
 80059aa:	2f00      	cmp	r7, #0
 80059ac:	d0a9      	beq.n	8005902 <__sflush_r+0x1a>
 80059ae:	0793      	lsls	r3, r2, #30
 80059b0:	680e      	ldr	r6, [r1, #0]
 80059b2:	bf08      	it	eq
 80059b4:	694b      	ldreq	r3, [r1, #20]
 80059b6:	600f      	str	r7, [r1, #0]
 80059b8:	bf18      	it	ne
 80059ba:	2300      	movne	r3, #0
 80059bc:	eba6 0807 	sub.w	r8, r6, r7
 80059c0:	608b      	str	r3, [r1, #8]
 80059c2:	f1b8 0f00 	cmp.w	r8, #0
 80059c6:	dd9c      	ble.n	8005902 <__sflush_r+0x1a>
 80059c8:	4643      	mov	r3, r8
 80059ca:	463a      	mov	r2, r7
 80059cc:	6a21      	ldr	r1, [r4, #32]
 80059ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059d0:	4628      	mov	r0, r5
 80059d2:	47b0      	blx	r6
 80059d4:	2800      	cmp	r0, #0
 80059d6:	dc06      	bgt.n	80059e6 <__sflush_r+0xfe>
 80059d8:	89a3      	ldrh	r3, [r4, #12]
 80059da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059de:	81a3      	strh	r3, [r4, #12]
 80059e0:	f04f 30ff 	mov.w	r0, #4294967295
 80059e4:	e78e      	b.n	8005904 <__sflush_r+0x1c>
 80059e6:	4407      	add	r7, r0
 80059e8:	eba8 0800 	sub.w	r8, r8, r0
 80059ec:	e7e9      	b.n	80059c2 <__sflush_r+0xda>
 80059ee:	bf00      	nop
 80059f0:	20400001 	.word	0x20400001

080059f4 <_fflush_r>:
 80059f4:	b538      	push	{r3, r4, r5, lr}
 80059f6:	690b      	ldr	r3, [r1, #16]
 80059f8:	4605      	mov	r5, r0
 80059fa:	460c      	mov	r4, r1
 80059fc:	b1db      	cbz	r3, 8005a36 <_fflush_r+0x42>
 80059fe:	b118      	cbz	r0, 8005a08 <_fflush_r+0x14>
 8005a00:	6983      	ldr	r3, [r0, #24]
 8005a02:	b90b      	cbnz	r3, 8005a08 <_fflush_r+0x14>
 8005a04:	f000 f860 	bl	8005ac8 <__sinit>
 8005a08:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <_fflush_r+0x48>)
 8005a0a:	429c      	cmp	r4, r3
 8005a0c:	d109      	bne.n	8005a22 <_fflush_r+0x2e>
 8005a0e:	686c      	ldr	r4, [r5, #4]
 8005a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a14:	b17b      	cbz	r3, 8005a36 <_fflush_r+0x42>
 8005a16:	4621      	mov	r1, r4
 8005a18:	4628      	mov	r0, r5
 8005a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a1e:	f7ff bf63 	b.w	80058e8 <__sflush_r>
 8005a22:	4b07      	ldr	r3, [pc, #28]	; (8005a40 <_fflush_r+0x4c>)
 8005a24:	429c      	cmp	r4, r3
 8005a26:	d101      	bne.n	8005a2c <_fflush_r+0x38>
 8005a28:	68ac      	ldr	r4, [r5, #8]
 8005a2a:	e7f1      	b.n	8005a10 <_fflush_r+0x1c>
 8005a2c:	4b05      	ldr	r3, [pc, #20]	; (8005a44 <_fflush_r+0x50>)
 8005a2e:	429c      	cmp	r4, r3
 8005a30:	bf08      	it	eq
 8005a32:	68ec      	ldreq	r4, [r5, #12]
 8005a34:	e7ec      	b.n	8005a10 <_fflush_r+0x1c>
 8005a36:	2000      	movs	r0, #0
 8005a38:	bd38      	pop	{r3, r4, r5, pc}
 8005a3a:	bf00      	nop
 8005a3c:	08006710 	.word	0x08006710
 8005a40:	08006730 	.word	0x08006730
 8005a44:	080066f0 	.word	0x080066f0

08005a48 <std>:
 8005a48:	2300      	movs	r3, #0
 8005a4a:	b510      	push	{r4, lr}
 8005a4c:	4604      	mov	r4, r0
 8005a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8005a52:	6083      	str	r3, [r0, #8]
 8005a54:	8181      	strh	r1, [r0, #12]
 8005a56:	6643      	str	r3, [r0, #100]	; 0x64
 8005a58:	81c2      	strh	r2, [r0, #14]
 8005a5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a5e:	6183      	str	r3, [r0, #24]
 8005a60:	4619      	mov	r1, r3
 8005a62:	2208      	movs	r2, #8
 8005a64:	305c      	adds	r0, #92	; 0x5c
 8005a66:	f7ff fc95 	bl	8005394 <memset>
 8005a6a:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <std+0x38>)
 8005a6c:	6263      	str	r3, [r4, #36]	; 0x24
 8005a6e:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <std+0x3c>)
 8005a70:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a72:	4b05      	ldr	r3, [pc, #20]	; (8005a88 <std+0x40>)
 8005a74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a76:	4b05      	ldr	r3, [pc, #20]	; (8005a8c <std+0x44>)
 8005a78:	6224      	str	r4, [r4, #32]
 8005a7a:	6323      	str	r3, [r4, #48]	; 0x30
 8005a7c:	bd10      	pop	{r4, pc}
 8005a7e:	bf00      	nop
 8005a80:	08006239 	.word	0x08006239
 8005a84:	0800625b 	.word	0x0800625b
 8005a88:	08006293 	.word	0x08006293
 8005a8c:	080062b7 	.word	0x080062b7

08005a90 <_cleanup_r>:
 8005a90:	4901      	ldr	r1, [pc, #4]	; (8005a98 <_cleanup_r+0x8>)
 8005a92:	f000 b885 	b.w	8005ba0 <_fwalk_reent>
 8005a96:	bf00      	nop
 8005a98:	080059f5 	.word	0x080059f5

08005a9c <__sfmoreglue>:
 8005a9c:	b570      	push	{r4, r5, r6, lr}
 8005a9e:	1e4a      	subs	r2, r1, #1
 8005aa0:	2568      	movs	r5, #104	; 0x68
 8005aa2:	4355      	muls	r5, r2
 8005aa4:	460e      	mov	r6, r1
 8005aa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005aaa:	f7ff fcc9 	bl	8005440 <_malloc_r>
 8005aae:	4604      	mov	r4, r0
 8005ab0:	b140      	cbz	r0, 8005ac4 <__sfmoreglue+0x28>
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	e9c0 1600 	strd	r1, r6, [r0]
 8005ab8:	300c      	adds	r0, #12
 8005aba:	60a0      	str	r0, [r4, #8]
 8005abc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ac0:	f7ff fc68 	bl	8005394 <memset>
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	bd70      	pop	{r4, r5, r6, pc}

08005ac8 <__sinit>:
 8005ac8:	6983      	ldr	r3, [r0, #24]
 8005aca:	b510      	push	{r4, lr}
 8005acc:	4604      	mov	r4, r0
 8005ace:	bb33      	cbnz	r3, 8005b1e <__sinit+0x56>
 8005ad0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005ad4:	6503      	str	r3, [r0, #80]	; 0x50
 8005ad6:	4b12      	ldr	r3, [pc, #72]	; (8005b20 <__sinit+0x58>)
 8005ad8:	4a12      	ldr	r2, [pc, #72]	; (8005b24 <__sinit+0x5c>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6282      	str	r2, [r0, #40]	; 0x28
 8005ade:	4298      	cmp	r0, r3
 8005ae0:	bf04      	itt	eq
 8005ae2:	2301      	moveq	r3, #1
 8005ae4:	6183      	streq	r3, [r0, #24]
 8005ae6:	f000 f81f 	bl	8005b28 <__sfp>
 8005aea:	6060      	str	r0, [r4, #4]
 8005aec:	4620      	mov	r0, r4
 8005aee:	f000 f81b 	bl	8005b28 <__sfp>
 8005af2:	60a0      	str	r0, [r4, #8]
 8005af4:	4620      	mov	r0, r4
 8005af6:	f000 f817 	bl	8005b28 <__sfp>
 8005afa:	2200      	movs	r2, #0
 8005afc:	60e0      	str	r0, [r4, #12]
 8005afe:	2104      	movs	r1, #4
 8005b00:	6860      	ldr	r0, [r4, #4]
 8005b02:	f7ff ffa1 	bl	8005a48 <std>
 8005b06:	2201      	movs	r2, #1
 8005b08:	2109      	movs	r1, #9
 8005b0a:	68a0      	ldr	r0, [r4, #8]
 8005b0c:	f7ff ff9c 	bl	8005a48 <std>
 8005b10:	2202      	movs	r2, #2
 8005b12:	2112      	movs	r1, #18
 8005b14:	68e0      	ldr	r0, [r4, #12]
 8005b16:	f7ff ff97 	bl	8005a48 <std>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	61a3      	str	r3, [r4, #24]
 8005b1e:	bd10      	pop	{r4, pc}
 8005b20:	080066ec 	.word	0x080066ec
 8005b24:	08005a91 	.word	0x08005a91

08005b28 <__sfp>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	4b1b      	ldr	r3, [pc, #108]	; (8005b98 <__sfp+0x70>)
 8005b2c:	681e      	ldr	r6, [r3, #0]
 8005b2e:	69b3      	ldr	r3, [r6, #24]
 8005b30:	4607      	mov	r7, r0
 8005b32:	b913      	cbnz	r3, 8005b3a <__sfp+0x12>
 8005b34:	4630      	mov	r0, r6
 8005b36:	f7ff ffc7 	bl	8005ac8 <__sinit>
 8005b3a:	3648      	adds	r6, #72	; 0x48
 8005b3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b40:	3b01      	subs	r3, #1
 8005b42:	d503      	bpl.n	8005b4c <__sfp+0x24>
 8005b44:	6833      	ldr	r3, [r6, #0]
 8005b46:	b133      	cbz	r3, 8005b56 <__sfp+0x2e>
 8005b48:	6836      	ldr	r6, [r6, #0]
 8005b4a:	e7f7      	b.n	8005b3c <__sfp+0x14>
 8005b4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b50:	b16d      	cbz	r5, 8005b6e <__sfp+0x46>
 8005b52:	3468      	adds	r4, #104	; 0x68
 8005b54:	e7f4      	b.n	8005b40 <__sfp+0x18>
 8005b56:	2104      	movs	r1, #4
 8005b58:	4638      	mov	r0, r7
 8005b5a:	f7ff ff9f 	bl	8005a9c <__sfmoreglue>
 8005b5e:	6030      	str	r0, [r6, #0]
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d1f1      	bne.n	8005b48 <__sfp+0x20>
 8005b64:	230c      	movs	r3, #12
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	4604      	mov	r4, r0
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b6e:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <__sfp+0x74>)
 8005b70:	6665      	str	r5, [r4, #100]	; 0x64
 8005b72:	e9c4 5500 	strd	r5, r5, [r4]
 8005b76:	60a5      	str	r5, [r4, #8]
 8005b78:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005b7c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005b80:	2208      	movs	r2, #8
 8005b82:	4629      	mov	r1, r5
 8005b84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b88:	f7ff fc04 	bl	8005394 <memset>
 8005b8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b94:	e7e9      	b.n	8005b6a <__sfp+0x42>
 8005b96:	bf00      	nop
 8005b98:	080066ec 	.word	0x080066ec
 8005b9c:	ffff0001 	.word	0xffff0001

08005ba0 <_fwalk_reent>:
 8005ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ba4:	4680      	mov	r8, r0
 8005ba6:	4689      	mov	r9, r1
 8005ba8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005bac:	2600      	movs	r6, #0
 8005bae:	b914      	cbnz	r4, 8005bb6 <_fwalk_reent+0x16>
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bb6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005bba:	3f01      	subs	r7, #1
 8005bbc:	d501      	bpl.n	8005bc2 <_fwalk_reent+0x22>
 8005bbe:	6824      	ldr	r4, [r4, #0]
 8005bc0:	e7f5      	b.n	8005bae <_fwalk_reent+0xe>
 8005bc2:	89ab      	ldrh	r3, [r5, #12]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d907      	bls.n	8005bd8 <_fwalk_reent+0x38>
 8005bc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	d003      	beq.n	8005bd8 <_fwalk_reent+0x38>
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	4640      	mov	r0, r8
 8005bd4:	47c8      	blx	r9
 8005bd6:	4306      	orrs	r6, r0
 8005bd8:	3568      	adds	r5, #104	; 0x68
 8005bda:	e7ee      	b.n	8005bba <_fwalk_reent+0x1a>

08005bdc <__swhatbuf_r>:
 8005bdc:	b570      	push	{r4, r5, r6, lr}
 8005bde:	460e      	mov	r6, r1
 8005be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be4:	2900      	cmp	r1, #0
 8005be6:	b096      	sub	sp, #88	; 0x58
 8005be8:	4614      	mov	r4, r2
 8005bea:	461d      	mov	r5, r3
 8005bec:	da07      	bge.n	8005bfe <__swhatbuf_r+0x22>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	602b      	str	r3, [r5, #0]
 8005bf2:	89b3      	ldrh	r3, [r6, #12]
 8005bf4:	061a      	lsls	r2, r3, #24
 8005bf6:	d410      	bmi.n	8005c1a <__swhatbuf_r+0x3e>
 8005bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bfc:	e00e      	b.n	8005c1c <__swhatbuf_r+0x40>
 8005bfe:	466a      	mov	r2, sp
 8005c00:	f000 fb80 	bl	8006304 <_fstat_r>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	dbf2      	blt.n	8005bee <__swhatbuf_r+0x12>
 8005c08:	9a01      	ldr	r2, [sp, #4]
 8005c0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c12:	425a      	negs	r2, r3
 8005c14:	415a      	adcs	r2, r3
 8005c16:	602a      	str	r2, [r5, #0]
 8005c18:	e7ee      	b.n	8005bf8 <__swhatbuf_r+0x1c>
 8005c1a:	2340      	movs	r3, #64	; 0x40
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	6023      	str	r3, [r4, #0]
 8005c20:	b016      	add	sp, #88	; 0x58
 8005c22:	bd70      	pop	{r4, r5, r6, pc}

08005c24 <__smakebuf_r>:
 8005c24:	898b      	ldrh	r3, [r1, #12]
 8005c26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c28:	079d      	lsls	r5, r3, #30
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	460c      	mov	r4, r1
 8005c2e:	d507      	bpl.n	8005c40 <__smakebuf_r+0x1c>
 8005c30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c34:	6023      	str	r3, [r4, #0]
 8005c36:	6123      	str	r3, [r4, #16]
 8005c38:	2301      	movs	r3, #1
 8005c3a:	6163      	str	r3, [r4, #20]
 8005c3c:	b002      	add	sp, #8
 8005c3e:	bd70      	pop	{r4, r5, r6, pc}
 8005c40:	ab01      	add	r3, sp, #4
 8005c42:	466a      	mov	r2, sp
 8005c44:	f7ff ffca 	bl	8005bdc <__swhatbuf_r>
 8005c48:	9900      	ldr	r1, [sp, #0]
 8005c4a:	4605      	mov	r5, r0
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	f7ff fbf7 	bl	8005440 <_malloc_r>
 8005c52:	b948      	cbnz	r0, 8005c68 <__smakebuf_r+0x44>
 8005c54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c58:	059a      	lsls	r2, r3, #22
 8005c5a:	d4ef      	bmi.n	8005c3c <__smakebuf_r+0x18>
 8005c5c:	f023 0303 	bic.w	r3, r3, #3
 8005c60:	f043 0302 	orr.w	r3, r3, #2
 8005c64:	81a3      	strh	r3, [r4, #12]
 8005c66:	e7e3      	b.n	8005c30 <__smakebuf_r+0xc>
 8005c68:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <__smakebuf_r+0x7c>)
 8005c6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c6c:	89a3      	ldrh	r3, [r4, #12]
 8005c6e:	6020      	str	r0, [r4, #0]
 8005c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c74:	81a3      	strh	r3, [r4, #12]
 8005c76:	9b00      	ldr	r3, [sp, #0]
 8005c78:	6163      	str	r3, [r4, #20]
 8005c7a:	9b01      	ldr	r3, [sp, #4]
 8005c7c:	6120      	str	r0, [r4, #16]
 8005c7e:	b15b      	cbz	r3, 8005c98 <__smakebuf_r+0x74>
 8005c80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c84:	4630      	mov	r0, r6
 8005c86:	f000 fb4f 	bl	8006328 <_isatty_r>
 8005c8a:	b128      	cbz	r0, 8005c98 <__smakebuf_r+0x74>
 8005c8c:	89a3      	ldrh	r3, [r4, #12]
 8005c8e:	f023 0303 	bic.w	r3, r3, #3
 8005c92:	f043 0301 	orr.w	r3, r3, #1
 8005c96:	81a3      	strh	r3, [r4, #12]
 8005c98:	89a3      	ldrh	r3, [r4, #12]
 8005c9a:	431d      	orrs	r5, r3
 8005c9c:	81a5      	strh	r5, [r4, #12]
 8005c9e:	e7cd      	b.n	8005c3c <__smakebuf_r+0x18>
 8005ca0:	08005a91 	.word	0x08005a91

08005ca4 <__malloc_lock>:
 8005ca4:	4770      	bx	lr

08005ca6 <__malloc_unlock>:
 8005ca6:	4770      	bx	lr

08005ca8 <__sfputc_r>:
 8005ca8:	6893      	ldr	r3, [r2, #8]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	b410      	push	{r4}
 8005cb0:	6093      	str	r3, [r2, #8]
 8005cb2:	da08      	bge.n	8005cc6 <__sfputc_r+0x1e>
 8005cb4:	6994      	ldr	r4, [r2, #24]
 8005cb6:	42a3      	cmp	r3, r4
 8005cb8:	db01      	blt.n	8005cbe <__sfputc_r+0x16>
 8005cba:	290a      	cmp	r1, #10
 8005cbc:	d103      	bne.n	8005cc6 <__sfputc_r+0x1e>
 8005cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cc2:	f7ff bd51 	b.w	8005768 <__swbuf_r>
 8005cc6:	6813      	ldr	r3, [r2, #0]
 8005cc8:	1c58      	adds	r0, r3, #1
 8005cca:	6010      	str	r0, [r2, #0]
 8005ccc:	7019      	strb	r1, [r3, #0]
 8005cce:	4608      	mov	r0, r1
 8005cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <__sfputs_r>:
 8005cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd8:	4606      	mov	r6, r0
 8005cda:	460f      	mov	r7, r1
 8005cdc:	4614      	mov	r4, r2
 8005cde:	18d5      	adds	r5, r2, r3
 8005ce0:	42ac      	cmp	r4, r5
 8005ce2:	d101      	bne.n	8005ce8 <__sfputs_r+0x12>
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	e007      	b.n	8005cf8 <__sfputs_r+0x22>
 8005ce8:	463a      	mov	r2, r7
 8005cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cee:	4630      	mov	r0, r6
 8005cf0:	f7ff ffda 	bl	8005ca8 <__sfputc_r>
 8005cf4:	1c43      	adds	r3, r0, #1
 8005cf6:	d1f3      	bne.n	8005ce0 <__sfputs_r+0xa>
 8005cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005cfc <_vfiprintf_r>:
 8005cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d00:	460c      	mov	r4, r1
 8005d02:	b09d      	sub	sp, #116	; 0x74
 8005d04:	4617      	mov	r7, r2
 8005d06:	461d      	mov	r5, r3
 8005d08:	4606      	mov	r6, r0
 8005d0a:	b118      	cbz	r0, 8005d14 <_vfiprintf_r+0x18>
 8005d0c:	6983      	ldr	r3, [r0, #24]
 8005d0e:	b90b      	cbnz	r3, 8005d14 <_vfiprintf_r+0x18>
 8005d10:	f7ff feda 	bl	8005ac8 <__sinit>
 8005d14:	4b7c      	ldr	r3, [pc, #496]	; (8005f08 <_vfiprintf_r+0x20c>)
 8005d16:	429c      	cmp	r4, r3
 8005d18:	d158      	bne.n	8005dcc <_vfiprintf_r+0xd0>
 8005d1a:	6874      	ldr	r4, [r6, #4]
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	0718      	lsls	r0, r3, #28
 8005d20:	d55e      	bpl.n	8005de0 <_vfiprintf_r+0xe4>
 8005d22:	6923      	ldr	r3, [r4, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d05b      	beq.n	8005de0 <_vfiprintf_r+0xe4>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d2c:	2320      	movs	r3, #32
 8005d2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d32:	2330      	movs	r3, #48	; 0x30
 8005d34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d38:	9503      	str	r5, [sp, #12]
 8005d3a:	f04f 0b01 	mov.w	fp, #1
 8005d3e:	46b8      	mov	r8, r7
 8005d40:	4645      	mov	r5, r8
 8005d42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d46:	b10b      	cbz	r3, 8005d4c <_vfiprintf_r+0x50>
 8005d48:	2b25      	cmp	r3, #37	; 0x25
 8005d4a:	d154      	bne.n	8005df6 <_vfiprintf_r+0xfa>
 8005d4c:	ebb8 0a07 	subs.w	sl, r8, r7
 8005d50:	d00b      	beq.n	8005d6a <_vfiprintf_r+0x6e>
 8005d52:	4653      	mov	r3, sl
 8005d54:	463a      	mov	r2, r7
 8005d56:	4621      	mov	r1, r4
 8005d58:	4630      	mov	r0, r6
 8005d5a:	f7ff ffbc 	bl	8005cd6 <__sfputs_r>
 8005d5e:	3001      	adds	r0, #1
 8005d60:	f000 80c2 	beq.w	8005ee8 <_vfiprintf_r+0x1ec>
 8005d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d66:	4453      	add	r3, sl
 8005d68:	9309      	str	r3, [sp, #36]	; 0x24
 8005d6a:	f898 3000 	ldrb.w	r3, [r8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 80ba 	beq.w	8005ee8 <_vfiprintf_r+0x1ec>
 8005d74:	2300      	movs	r3, #0
 8005d76:	f04f 32ff 	mov.w	r2, #4294967295
 8005d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d7e:	9304      	str	r3, [sp, #16]
 8005d80:	9307      	str	r3, [sp, #28]
 8005d82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d86:	931a      	str	r3, [sp, #104]	; 0x68
 8005d88:	46a8      	mov	r8, r5
 8005d8a:	2205      	movs	r2, #5
 8005d8c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005d90:	485e      	ldr	r0, [pc, #376]	; (8005f0c <_vfiprintf_r+0x210>)
 8005d92:	f7fa fa25 	bl	80001e0 <memchr>
 8005d96:	9b04      	ldr	r3, [sp, #16]
 8005d98:	bb78      	cbnz	r0, 8005dfa <_vfiprintf_r+0xfe>
 8005d9a:	06d9      	lsls	r1, r3, #27
 8005d9c:	bf44      	itt	mi
 8005d9e:	2220      	movmi	r2, #32
 8005da0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005da4:	071a      	lsls	r2, r3, #28
 8005da6:	bf44      	itt	mi
 8005da8:	222b      	movmi	r2, #43	; 0x2b
 8005daa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005dae:	782a      	ldrb	r2, [r5, #0]
 8005db0:	2a2a      	cmp	r2, #42	; 0x2a
 8005db2:	d02a      	beq.n	8005e0a <_vfiprintf_r+0x10e>
 8005db4:	9a07      	ldr	r2, [sp, #28]
 8005db6:	46a8      	mov	r8, r5
 8005db8:	2000      	movs	r0, #0
 8005dba:	250a      	movs	r5, #10
 8005dbc:	4641      	mov	r1, r8
 8005dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dc2:	3b30      	subs	r3, #48	; 0x30
 8005dc4:	2b09      	cmp	r3, #9
 8005dc6:	d969      	bls.n	8005e9c <_vfiprintf_r+0x1a0>
 8005dc8:	b360      	cbz	r0, 8005e24 <_vfiprintf_r+0x128>
 8005dca:	e024      	b.n	8005e16 <_vfiprintf_r+0x11a>
 8005dcc:	4b50      	ldr	r3, [pc, #320]	; (8005f10 <_vfiprintf_r+0x214>)
 8005dce:	429c      	cmp	r4, r3
 8005dd0:	d101      	bne.n	8005dd6 <_vfiprintf_r+0xda>
 8005dd2:	68b4      	ldr	r4, [r6, #8]
 8005dd4:	e7a2      	b.n	8005d1c <_vfiprintf_r+0x20>
 8005dd6:	4b4f      	ldr	r3, [pc, #316]	; (8005f14 <_vfiprintf_r+0x218>)
 8005dd8:	429c      	cmp	r4, r3
 8005dda:	bf08      	it	eq
 8005ddc:	68f4      	ldreq	r4, [r6, #12]
 8005dde:	e79d      	b.n	8005d1c <_vfiprintf_r+0x20>
 8005de0:	4621      	mov	r1, r4
 8005de2:	4630      	mov	r0, r6
 8005de4:	f7ff fd12 	bl	800580c <__swsetup_r>
 8005de8:	2800      	cmp	r0, #0
 8005dea:	d09d      	beq.n	8005d28 <_vfiprintf_r+0x2c>
 8005dec:	f04f 30ff 	mov.w	r0, #4294967295
 8005df0:	b01d      	add	sp, #116	; 0x74
 8005df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df6:	46a8      	mov	r8, r5
 8005df8:	e7a2      	b.n	8005d40 <_vfiprintf_r+0x44>
 8005dfa:	4a44      	ldr	r2, [pc, #272]	; (8005f0c <_vfiprintf_r+0x210>)
 8005dfc:	1a80      	subs	r0, r0, r2
 8005dfe:	fa0b f000 	lsl.w	r0, fp, r0
 8005e02:	4318      	orrs	r0, r3
 8005e04:	9004      	str	r0, [sp, #16]
 8005e06:	4645      	mov	r5, r8
 8005e08:	e7be      	b.n	8005d88 <_vfiprintf_r+0x8c>
 8005e0a:	9a03      	ldr	r2, [sp, #12]
 8005e0c:	1d11      	adds	r1, r2, #4
 8005e0e:	6812      	ldr	r2, [r2, #0]
 8005e10:	9103      	str	r1, [sp, #12]
 8005e12:	2a00      	cmp	r2, #0
 8005e14:	db01      	blt.n	8005e1a <_vfiprintf_r+0x11e>
 8005e16:	9207      	str	r2, [sp, #28]
 8005e18:	e004      	b.n	8005e24 <_vfiprintf_r+0x128>
 8005e1a:	4252      	negs	r2, r2
 8005e1c:	f043 0302 	orr.w	r3, r3, #2
 8005e20:	9207      	str	r2, [sp, #28]
 8005e22:	9304      	str	r3, [sp, #16]
 8005e24:	f898 3000 	ldrb.w	r3, [r8]
 8005e28:	2b2e      	cmp	r3, #46	; 0x2e
 8005e2a:	d10e      	bne.n	8005e4a <_vfiprintf_r+0x14e>
 8005e2c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005e30:	2b2a      	cmp	r3, #42	; 0x2a
 8005e32:	d138      	bne.n	8005ea6 <_vfiprintf_r+0x1aa>
 8005e34:	9b03      	ldr	r3, [sp, #12]
 8005e36:	1d1a      	adds	r2, r3, #4
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	9203      	str	r2, [sp, #12]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	bfb8      	it	lt
 8005e40:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e44:	f108 0802 	add.w	r8, r8, #2
 8005e48:	9305      	str	r3, [sp, #20]
 8005e4a:	4d33      	ldr	r5, [pc, #204]	; (8005f18 <_vfiprintf_r+0x21c>)
 8005e4c:	f898 1000 	ldrb.w	r1, [r8]
 8005e50:	2203      	movs	r2, #3
 8005e52:	4628      	mov	r0, r5
 8005e54:	f7fa f9c4 	bl	80001e0 <memchr>
 8005e58:	b140      	cbz	r0, 8005e6c <_vfiprintf_r+0x170>
 8005e5a:	2340      	movs	r3, #64	; 0x40
 8005e5c:	1b40      	subs	r0, r0, r5
 8005e5e:	fa03 f000 	lsl.w	r0, r3, r0
 8005e62:	9b04      	ldr	r3, [sp, #16]
 8005e64:	4303      	orrs	r3, r0
 8005e66:	f108 0801 	add.w	r8, r8, #1
 8005e6a:	9304      	str	r3, [sp, #16]
 8005e6c:	f898 1000 	ldrb.w	r1, [r8]
 8005e70:	482a      	ldr	r0, [pc, #168]	; (8005f1c <_vfiprintf_r+0x220>)
 8005e72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e76:	2206      	movs	r2, #6
 8005e78:	f108 0701 	add.w	r7, r8, #1
 8005e7c:	f7fa f9b0 	bl	80001e0 <memchr>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d037      	beq.n	8005ef4 <_vfiprintf_r+0x1f8>
 8005e84:	4b26      	ldr	r3, [pc, #152]	; (8005f20 <_vfiprintf_r+0x224>)
 8005e86:	bb1b      	cbnz	r3, 8005ed0 <_vfiprintf_r+0x1d4>
 8005e88:	9b03      	ldr	r3, [sp, #12]
 8005e8a:	3307      	adds	r3, #7
 8005e8c:	f023 0307 	bic.w	r3, r3, #7
 8005e90:	3308      	adds	r3, #8
 8005e92:	9303      	str	r3, [sp, #12]
 8005e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e96:	444b      	add	r3, r9
 8005e98:	9309      	str	r3, [sp, #36]	; 0x24
 8005e9a:	e750      	b.n	8005d3e <_vfiprintf_r+0x42>
 8005e9c:	fb05 3202 	mla	r2, r5, r2, r3
 8005ea0:	2001      	movs	r0, #1
 8005ea2:	4688      	mov	r8, r1
 8005ea4:	e78a      	b.n	8005dbc <_vfiprintf_r+0xc0>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f108 0801 	add.w	r8, r8, #1
 8005eac:	9305      	str	r3, [sp, #20]
 8005eae:	4619      	mov	r1, r3
 8005eb0:	250a      	movs	r5, #10
 8005eb2:	4640      	mov	r0, r8
 8005eb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005eb8:	3a30      	subs	r2, #48	; 0x30
 8005eba:	2a09      	cmp	r2, #9
 8005ebc:	d903      	bls.n	8005ec6 <_vfiprintf_r+0x1ca>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d0c3      	beq.n	8005e4a <_vfiprintf_r+0x14e>
 8005ec2:	9105      	str	r1, [sp, #20]
 8005ec4:	e7c1      	b.n	8005e4a <_vfiprintf_r+0x14e>
 8005ec6:	fb05 2101 	mla	r1, r5, r1, r2
 8005eca:	2301      	movs	r3, #1
 8005ecc:	4680      	mov	r8, r0
 8005ece:	e7f0      	b.n	8005eb2 <_vfiprintf_r+0x1b6>
 8005ed0:	ab03      	add	r3, sp, #12
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	4622      	mov	r2, r4
 8005ed6:	4b13      	ldr	r3, [pc, #76]	; (8005f24 <_vfiprintf_r+0x228>)
 8005ed8:	a904      	add	r1, sp, #16
 8005eda:	4630      	mov	r0, r6
 8005edc:	f3af 8000 	nop.w
 8005ee0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005ee4:	4681      	mov	r9, r0
 8005ee6:	d1d5      	bne.n	8005e94 <_vfiprintf_r+0x198>
 8005ee8:	89a3      	ldrh	r3, [r4, #12]
 8005eea:	065b      	lsls	r3, r3, #25
 8005eec:	f53f af7e 	bmi.w	8005dec <_vfiprintf_r+0xf0>
 8005ef0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ef2:	e77d      	b.n	8005df0 <_vfiprintf_r+0xf4>
 8005ef4:	ab03      	add	r3, sp, #12
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	4622      	mov	r2, r4
 8005efa:	4b0a      	ldr	r3, [pc, #40]	; (8005f24 <_vfiprintf_r+0x228>)
 8005efc:	a904      	add	r1, sp, #16
 8005efe:	4630      	mov	r0, r6
 8005f00:	f000 f888 	bl	8006014 <_printf_i>
 8005f04:	e7ec      	b.n	8005ee0 <_vfiprintf_r+0x1e4>
 8005f06:	bf00      	nop
 8005f08:	08006710 	.word	0x08006710
 8005f0c:	08006750 	.word	0x08006750
 8005f10:	08006730 	.word	0x08006730
 8005f14:	080066f0 	.word	0x080066f0
 8005f18:	08006756 	.word	0x08006756
 8005f1c:	0800675a 	.word	0x0800675a
 8005f20:	00000000 	.word	0x00000000
 8005f24:	08005cd7 	.word	0x08005cd7

08005f28 <_printf_common>:
 8005f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f2c:	4691      	mov	r9, r2
 8005f2e:	461f      	mov	r7, r3
 8005f30:	688a      	ldr	r2, [r1, #8]
 8005f32:	690b      	ldr	r3, [r1, #16]
 8005f34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	bfb8      	it	lt
 8005f3c:	4613      	movlt	r3, r2
 8005f3e:	f8c9 3000 	str.w	r3, [r9]
 8005f42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f46:	4606      	mov	r6, r0
 8005f48:	460c      	mov	r4, r1
 8005f4a:	b112      	cbz	r2, 8005f52 <_printf_common+0x2a>
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	f8c9 3000 	str.w	r3, [r9]
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	0699      	lsls	r1, r3, #26
 8005f56:	bf42      	ittt	mi
 8005f58:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f5c:	3302      	addmi	r3, #2
 8005f5e:	f8c9 3000 	strmi.w	r3, [r9]
 8005f62:	6825      	ldr	r5, [r4, #0]
 8005f64:	f015 0506 	ands.w	r5, r5, #6
 8005f68:	d107      	bne.n	8005f7a <_printf_common+0x52>
 8005f6a:	f104 0a19 	add.w	sl, r4, #25
 8005f6e:	68e3      	ldr	r3, [r4, #12]
 8005f70:	f8d9 2000 	ldr.w	r2, [r9]
 8005f74:	1a9b      	subs	r3, r3, r2
 8005f76:	42ab      	cmp	r3, r5
 8005f78:	dc28      	bgt.n	8005fcc <_printf_common+0xa4>
 8005f7a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f7e:	6822      	ldr	r2, [r4, #0]
 8005f80:	3300      	adds	r3, #0
 8005f82:	bf18      	it	ne
 8005f84:	2301      	movne	r3, #1
 8005f86:	0692      	lsls	r2, r2, #26
 8005f88:	d42d      	bmi.n	8005fe6 <_printf_common+0xbe>
 8005f8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f8e:	4639      	mov	r1, r7
 8005f90:	4630      	mov	r0, r6
 8005f92:	47c0      	blx	r8
 8005f94:	3001      	adds	r0, #1
 8005f96:	d020      	beq.n	8005fda <_printf_common+0xb2>
 8005f98:	6823      	ldr	r3, [r4, #0]
 8005f9a:	68e5      	ldr	r5, [r4, #12]
 8005f9c:	f8d9 2000 	ldr.w	r2, [r9]
 8005fa0:	f003 0306 	and.w	r3, r3, #6
 8005fa4:	2b04      	cmp	r3, #4
 8005fa6:	bf08      	it	eq
 8005fa8:	1aad      	subeq	r5, r5, r2
 8005faa:	68a3      	ldr	r3, [r4, #8]
 8005fac:	6922      	ldr	r2, [r4, #16]
 8005fae:	bf0c      	ite	eq
 8005fb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fb4:	2500      	movne	r5, #0
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	bfc4      	itt	gt
 8005fba:	1a9b      	subgt	r3, r3, r2
 8005fbc:	18ed      	addgt	r5, r5, r3
 8005fbe:	f04f 0900 	mov.w	r9, #0
 8005fc2:	341a      	adds	r4, #26
 8005fc4:	454d      	cmp	r5, r9
 8005fc6:	d11a      	bne.n	8005ffe <_printf_common+0xd6>
 8005fc8:	2000      	movs	r0, #0
 8005fca:	e008      	b.n	8005fde <_printf_common+0xb6>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	4652      	mov	r2, sl
 8005fd0:	4639      	mov	r1, r7
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	47c0      	blx	r8
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	d103      	bne.n	8005fe2 <_printf_common+0xba>
 8005fda:	f04f 30ff 	mov.w	r0, #4294967295
 8005fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe2:	3501      	adds	r5, #1
 8005fe4:	e7c3      	b.n	8005f6e <_printf_common+0x46>
 8005fe6:	18e1      	adds	r1, r4, r3
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	2030      	movs	r0, #48	; 0x30
 8005fec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ff0:	4422      	add	r2, r4
 8005ff2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ff6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ffa:	3302      	adds	r3, #2
 8005ffc:	e7c5      	b.n	8005f8a <_printf_common+0x62>
 8005ffe:	2301      	movs	r3, #1
 8006000:	4622      	mov	r2, r4
 8006002:	4639      	mov	r1, r7
 8006004:	4630      	mov	r0, r6
 8006006:	47c0      	blx	r8
 8006008:	3001      	adds	r0, #1
 800600a:	d0e6      	beq.n	8005fda <_printf_common+0xb2>
 800600c:	f109 0901 	add.w	r9, r9, #1
 8006010:	e7d8      	b.n	8005fc4 <_printf_common+0x9c>
	...

08006014 <_printf_i>:
 8006014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006018:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800601c:	460c      	mov	r4, r1
 800601e:	7e09      	ldrb	r1, [r1, #24]
 8006020:	b085      	sub	sp, #20
 8006022:	296e      	cmp	r1, #110	; 0x6e
 8006024:	4617      	mov	r7, r2
 8006026:	4606      	mov	r6, r0
 8006028:	4698      	mov	r8, r3
 800602a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800602c:	f000 80b3 	beq.w	8006196 <_printf_i+0x182>
 8006030:	d822      	bhi.n	8006078 <_printf_i+0x64>
 8006032:	2963      	cmp	r1, #99	; 0x63
 8006034:	d036      	beq.n	80060a4 <_printf_i+0x90>
 8006036:	d80a      	bhi.n	800604e <_printf_i+0x3a>
 8006038:	2900      	cmp	r1, #0
 800603a:	f000 80b9 	beq.w	80061b0 <_printf_i+0x19c>
 800603e:	2958      	cmp	r1, #88	; 0x58
 8006040:	f000 8083 	beq.w	800614a <_printf_i+0x136>
 8006044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006048:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800604c:	e032      	b.n	80060b4 <_printf_i+0xa0>
 800604e:	2964      	cmp	r1, #100	; 0x64
 8006050:	d001      	beq.n	8006056 <_printf_i+0x42>
 8006052:	2969      	cmp	r1, #105	; 0x69
 8006054:	d1f6      	bne.n	8006044 <_printf_i+0x30>
 8006056:	6820      	ldr	r0, [r4, #0]
 8006058:	6813      	ldr	r3, [r2, #0]
 800605a:	0605      	lsls	r5, r0, #24
 800605c:	f103 0104 	add.w	r1, r3, #4
 8006060:	d52a      	bpl.n	80060b8 <_printf_i+0xa4>
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6011      	str	r1, [r2, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	da03      	bge.n	8006072 <_printf_i+0x5e>
 800606a:	222d      	movs	r2, #45	; 0x2d
 800606c:	425b      	negs	r3, r3
 800606e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006072:	486f      	ldr	r0, [pc, #444]	; (8006230 <_printf_i+0x21c>)
 8006074:	220a      	movs	r2, #10
 8006076:	e039      	b.n	80060ec <_printf_i+0xd8>
 8006078:	2973      	cmp	r1, #115	; 0x73
 800607a:	f000 809d 	beq.w	80061b8 <_printf_i+0x1a4>
 800607e:	d808      	bhi.n	8006092 <_printf_i+0x7e>
 8006080:	296f      	cmp	r1, #111	; 0x6f
 8006082:	d020      	beq.n	80060c6 <_printf_i+0xb2>
 8006084:	2970      	cmp	r1, #112	; 0x70
 8006086:	d1dd      	bne.n	8006044 <_printf_i+0x30>
 8006088:	6823      	ldr	r3, [r4, #0]
 800608a:	f043 0320 	orr.w	r3, r3, #32
 800608e:	6023      	str	r3, [r4, #0]
 8006090:	e003      	b.n	800609a <_printf_i+0x86>
 8006092:	2975      	cmp	r1, #117	; 0x75
 8006094:	d017      	beq.n	80060c6 <_printf_i+0xb2>
 8006096:	2978      	cmp	r1, #120	; 0x78
 8006098:	d1d4      	bne.n	8006044 <_printf_i+0x30>
 800609a:	2378      	movs	r3, #120	; 0x78
 800609c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060a0:	4864      	ldr	r0, [pc, #400]	; (8006234 <_printf_i+0x220>)
 80060a2:	e055      	b.n	8006150 <_printf_i+0x13c>
 80060a4:	6813      	ldr	r3, [r2, #0]
 80060a6:	1d19      	adds	r1, r3, #4
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6011      	str	r1, [r2, #0]
 80060ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060b4:	2301      	movs	r3, #1
 80060b6:	e08c      	b.n	80061d2 <_printf_i+0x1be>
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6011      	str	r1, [r2, #0]
 80060bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060c0:	bf18      	it	ne
 80060c2:	b21b      	sxthne	r3, r3
 80060c4:	e7cf      	b.n	8006066 <_printf_i+0x52>
 80060c6:	6813      	ldr	r3, [r2, #0]
 80060c8:	6825      	ldr	r5, [r4, #0]
 80060ca:	1d18      	adds	r0, r3, #4
 80060cc:	6010      	str	r0, [r2, #0]
 80060ce:	0628      	lsls	r0, r5, #24
 80060d0:	d501      	bpl.n	80060d6 <_printf_i+0xc2>
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	e002      	b.n	80060dc <_printf_i+0xc8>
 80060d6:	0668      	lsls	r0, r5, #25
 80060d8:	d5fb      	bpl.n	80060d2 <_printf_i+0xbe>
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	4854      	ldr	r0, [pc, #336]	; (8006230 <_printf_i+0x21c>)
 80060de:	296f      	cmp	r1, #111	; 0x6f
 80060e0:	bf14      	ite	ne
 80060e2:	220a      	movne	r2, #10
 80060e4:	2208      	moveq	r2, #8
 80060e6:	2100      	movs	r1, #0
 80060e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060ec:	6865      	ldr	r5, [r4, #4]
 80060ee:	60a5      	str	r5, [r4, #8]
 80060f0:	2d00      	cmp	r5, #0
 80060f2:	f2c0 8095 	blt.w	8006220 <_printf_i+0x20c>
 80060f6:	6821      	ldr	r1, [r4, #0]
 80060f8:	f021 0104 	bic.w	r1, r1, #4
 80060fc:	6021      	str	r1, [r4, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d13d      	bne.n	800617e <_printf_i+0x16a>
 8006102:	2d00      	cmp	r5, #0
 8006104:	f040 808e 	bne.w	8006224 <_printf_i+0x210>
 8006108:	4665      	mov	r5, ip
 800610a:	2a08      	cmp	r2, #8
 800610c:	d10b      	bne.n	8006126 <_printf_i+0x112>
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	07db      	lsls	r3, r3, #31
 8006112:	d508      	bpl.n	8006126 <_printf_i+0x112>
 8006114:	6923      	ldr	r3, [r4, #16]
 8006116:	6862      	ldr	r2, [r4, #4]
 8006118:	429a      	cmp	r2, r3
 800611a:	bfde      	ittt	le
 800611c:	2330      	movle	r3, #48	; 0x30
 800611e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006122:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006126:	ebac 0305 	sub.w	r3, ip, r5
 800612a:	6123      	str	r3, [r4, #16]
 800612c:	f8cd 8000 	str.w	r8, [sp]
 8006130:	463b      	mov	r3, r7
 8006132:	aa03      	add	r2, sp, #12
 8006134:	4621      	mov	r1, r4
 8006136:	4630      	mov	r0, r6
 8006138:	f7ff fef6 	bl	8005f28 <_printf_common>
 800613c:	3001      	adds	r0, #1
 800613e:	d14d      	bne.n	80061dc <_printf_i+0x1c8>
 8006140:	f04f 30ff 	mov.w	r0, #4294967295
 8006144:	b005      	add	sp, #20
 8006146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800614a:	4839      	ldr	r0, [pc, #228]	; (8006230 <_printf_i+0x21c>)
 800614c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006150:	6813      	ldr	r3, [r2, #0]
 8006152:	6821      	ldr	r1, [r4, #0]
 8006154:	1d1d      	adds	r5, r3, #4
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6015      	str	r5, [r2, #0]
 800615a:	060a      	lsls	r2, r1, #24
 800615c:	d50b      	bpl.n	8006176 <_printf_i+0x162>
 800615e:	07ca      	lsls	r2, r1, #31
 8006160:	bf44      	itt	mi
 8006162:	f041 0120 	orrmi.w	r1, r1, #32
 8006166:	6021      	strmi	r1, [r4, #0]
 8006168:	b91b      	cbnz	r3, 8006172 <_printf_i+0x15e>
 800616a:	6822      	ldr	r2, [r4, #0]
 800616c:	f022 0220 	bic.w	r2, r2, #32
 8006170:	6022      	str	r2, [r4, #0]
 8006172:	2210      	movs	r2, #16
 8006174:	e7b7      	b.n	80060e6 <_printf_i+0xd2>
 8006176:	064d      	lsls	r5, r1, #25
 8006178:	bf48      	it	mi
 800617a:	b29b      	uxthmi	r3, r3
 800617c:	e7ef      	b.n	800615e <_printf_i+0x14a>
 800617e:	4665      	mov	r5, ip
 8006180:	fbb3 f1f2 	udiv	r1, r3, r2
 8006184:	fb02 3311 	mls	r3, r2, r1, r3
 8006188:	5cc3      	ldrb	r3, [r0, r3]
 800618a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800618e:	460b      	mov	r3, r1
 8006190:	2900      	cmp	r1, #0
 8006192:	d1f5      	bne.n	8006180 <_printf_i+0x16c>
 8006194:	e7b9      	b.n	800610a <_printf_i+0xf6>
 8006196:	6813      	ldr	r3, [r2, #0]
 8006198:	6825      	ldr	r5, [r4, #0]
 800619a:	6961      	ldr	r1, [r4, #20]
 800619c:	1d18      	adds	r0, r3, #4
 800619e:	6010      	str	r0, [r2, #0]
 80061a0:	0628      	lsls	r0, r5, #24
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	d501      	bpl.n	80061aa <_printf_i+0x196>
 80061a6:	6019      	str	r1, [r3, #0]
 80061a8:	e002      	b.n	80061b0 <_printf_i+0x19c>
 80061aa:	066a      	lsls	r2, r5, #25
 80061ac:	d5fb      	bpl.n	80061a6 <_printf_i+0x192>
 80061ae:	8019      	strh	r1, [r3, #0]
 80061b0:	2300      	movs	r3, #0
 80061b2:	6123      	str	r3, [r4, #16]
 80061b4:	4665      	mov	r5, ip
 80061b6:	e7b9      	b.n	800612c <_printf_i+0x118>
 80061b8:	6813      	ldr	r3, [r2, #0]
 80061ba:	1d19      	adds	r1, r3, #4
 80061bc:	6011      	str	r1, [r2, #0]
 80061be:	681d      	ldr	r5, [r3, #0]
 80061c0:	6862      	ldr	r2, [r4, #4]
 80061c2:	2100      	movs	r1, #0
 80061c4:	4628      	mov	r0, r5
 80061c6:	f7fa f80b 	bl	80001e0 <memchr>
 80061ca:	b108      	cbz	r0, 80061d0 <_printf_i+0x1bc>
 80061cc:	1b40      	subs	r0, r0, r5
 80061ce:	6060      	str	r0, [r4, #4]
 80061d0:	6863      	ldr	r3, [r4, #4]
 80061d2:	6123      	str	r3, [r4, #16]
 80061d4:	2300      	movs	r3, #0
 80061d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061da:	e7a7      	b.n	800612c <_printf_i+0x118>
 80061dc:	6923      	ldr	r3, [r4, #16]
 80061de:	462a      	mov	r2, r5
 80061e0:	4639      	mov	r1, r7
 80061e2:	4630      	mov	r0, r6
 80061e4:	47c0      	blx	r8
 80061e6:	3001      	adds	r0, #1
 80061e8:	d0aa      	beq.n	8006140 <_printf_i+0x12c>
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	079b      	lsls	r3, r3, #30
 80061ee:	d413      	bmi.n	8006218 <_printf_i+0x204>
 80061f0:	68e0      	ldr	r0, [r4, #12]
 80061f2:	9b03      	ldr	r3, [sp, #12]
 80061f4:	4298      	cmp	r0, r3
 80061f6:	bfb8      	it	lt
 80061f8:	4618      	movlt	r0, r3
 80061fa:	e7a3      	b.n	8006144 <_printf_i+0x130>
 80061fc:	2301      	movs	r3, #1
 80061fe:	464a      	mov	r2, r9
 8006200:	4639      	mov	r1, r7
 8006202:	4630      	mov	r0, r6
 8006204:	47c0      	blx	r8
 8006206:	3001      	adds	r0, #1
 8006208:	d09a      	beq.n	8006140 <_printf_i+0x12c>
 800620a:	3501      	adds	r5, #1
 800620c:	68e3      	ldr	r3, [r4, #12]
 800620e:	9a03      	ldr	r2, [sp, #12]
 8006210:	1a9b      	subs	r3, r3, r2
 8006212:	42ab      	cmp	r3, r5
 8006214:	dcf2      	bgt.n	80061fc <_printf_i+0x1e8>
 8006216:	e7eb      	b.n	80061f0 <_printf_i+0x1dc>
 8006218:	2500      	movs	r5, #0
 800621a:	f104 0919 	add.w	r9, r4, #25
 800621e:	e7f5      	b.n	800620c <_printf_i+0x1f8>
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1ac      	bne.n	800617e <_printf_i+0x16a>
 8006224:	7803      	ldrb	r3, [r0, #0]
 8006226:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800622a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800622e:	e76c      	b.n	800610a <_printf_i+0xf6>
 8006230:	08006761 	.word	0x08006761
 8006234:	08006772 	.word	0x08006772

08006238 <__sread>:
 8006238:	b510      	push	{r4, lr}
 800623a:	460c      	mov	r4, r1
 800623c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006240:	f000 f894 	bl	800636c <_read_r>
 8006244:	2800      	cmp	r0, #0
 8006246:	bfab      	itete	ge
 8006248:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800624a:	89a3      	ldrhlt	r3, [r4, #12]
 800624c:	181b      	addge	r3, r3, r0
 800624e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006252:	bfac      	ite	ge
 8006254:	6563      	strge	r3, [r4, #84]	; 0x54
 8006256:	81a3      	strhlt	r3, [r4, #12]
 8006258:	bd10      	pop	{r4, pc}

0800625a <__swrite>:
 800625a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800625e:	461f      	mov	r7, r3
 8006260:	898b      	ldrh	r3, [r1, #12]
 8006262:	05db      	lsls	r3, r3, #23
 8006264:	4605      	mov	r5, r0
 8006266:	460c      	mov	r4, r1
 8006268:	4616      	mov	r6, r2
 800626a:	d505      	bpl.n	8006278 <__swrite+0x1e>
 800626c:	2302      	movs	r3, #2
 800626e:	2200      	movs	r2, #0
 8006270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006274:	f000 f868 	bl	8006348 <_lseek_r>
 8006278:	89a3      	ldrh	r3, [r4, #12]
 800627a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800627e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006282:	81a3      	strh	r3, [r4, #12]
 8006284:	4632      	mov	r2, r6
 8006286:	463b      	mov	r3, r7
 8006288:	4628      	mov	r0, r5
 800628a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800628e:	f000 b817 	b.w	80062c0 <_write_r>

08006292 <__sseek>:
 8006292:	b510      	push	{r4, lr}
 8006294:	460c      	mov	r4, r1
 8006296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800629a:	f000 f855 	bl	8006348 <_lseek_r>
 800629e:	1c43      	adds	r3, r0, #1
 80062a0:	89a3      	ldrh	r3, [r4, #12]
 80062a2:	bf15      	itete	ne
 80062a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80062a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062ae:	81a3      	strheq	r3, [r4, #12]
 80062b0:	bf18      	it	ne
 80062b2:	81a3      	strhne	r3, [r4, #12]
 80062b4:	bd10      	pop	{r4, pc}

080062b6 <__sclose>:
 80062b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ba:	f000 b813 	b.w	80062e4 <_close_r>
	...

080062c0 <_write_r>:
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	4c07      	ldr	r4, [pc, #28]	; (80062e0 <_write_r+0x20>)
 80062c4:	4605      	mov	r5, r0
 80062c6:	4608      	mov	r0, r1
 80062c8:	4611      	mov	r1, r2
 80062ca:	2200      	movs	r2, #0
 80062cc:	6022      	str	r2, [r4, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	f7fa fc1e 	bl	8000b10 <_write>
 80062d4:	1c43      	adds	r3, r0, #1
 80062d6:	d102      	bne.n	80062de <_write_r+0x1e>
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	b103      	cbz	r3, 80062de <_write_r+0x1e>
 80062dc:	602b      	str	r3, [r5, #0]
 80062de:	bd38      	pop	{r3, r4, r5, pc}
 80062e0:	20004b4c 	.word	0x20004b4c

080062e4 <_close_r>:
 80062e4:	b538      	push	{r3, r4, r5, lr}
 80062e6:	4c06      	ldr	r4, [pc, #24]	; (8006300 <_close_r+0x1c>)
 80062e8:	2300      	movs	r3, #0
 80062ea:	4605      	mov	r5, r0
 80062ec:	4608      	mov	r0, r1
 80062ee:	6023      	str	r3, [r4, #0]
 80062f0:	f7fa fc3a 	bl	8000b68 <_close>
 80062f4:	1c43      	adds	r3, r0, #1
 80062f6:	d102      	bne.n	80062fe <_close_r+0x1a>
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	b103      	cbz	r3, 80062fe <_close_r+0x1a>
 80062fc:	602b      	str	r3, [r5, #0]
 80062fe:	bd38      	pop	{r3, r4, r5, pc}
 8006300:	20004b4c 	.word	0x20004b4c

08006304 <_fstat_r>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	4c07      	ldr	r4, [pc, #28]	; (8006324 <_fstat_r+0x20>)
 8006308:	2300      	movs	r3, #0
 800630a:	4605      	mov	r5, r0
 800630c:	4608      	mov	r0, r1
 800630e:	4611      	mov	r1, r2
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	f7fa fc79 	bl	8000c08 <_fstat>
 8006316:	1c43      	adds	r3, r0, #1
 8006318:	d102      	bne.n	8006320 <_fstat_r+0x1c>
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	b103      	cbz	r3, 8006320 <_fstat_r+0x1c>
 800631e:	602b      	str	r3, [r5, #0]
 8006320:	bd38      	pop	{r3, r4, r5, pc}
 8006322:	bf00      	nop
 8006324:	20004b4c 	.word	0x20004b4c

08006328 <_isatty_r>:
 8006328:	b538      	push	{r3, r4, r5, lr}
 800632a:	4c06      	ldr	r4, [pc, #24]	; (8006344 <_isatty_r+0x1c>)
 800632c:	2300      	movs	r3, #0
 800632e:	4605      	mov	r5, r0
 8006330:	4608      	mov	r0, r1
 8006332:	6023      	str	r3, [r4, #0]
 8006334:	f7fa fbd6 	bl	8000ae4 <_isatty>
 8006338:	1c43      	adds	r3, r0, #1
 800633a:	d102      	bne.n	8006342 <_isatty_r+0x1a>
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	b103      	cbz	r3, 8006342 <_isatty_r+0x1a>
 8006340:	602b      	str	r3, [r5, #0]
 8006342:	bd38      	pop	{r3, r4, r5, pc}
 8006344:	20004b4c 	.word	0x20004b4c

08006348 <_lseek_r>:
 8006348:	b538      	push	{r3, r4, r5, lr}
 800634a:	4c07      	ldr	r4, [pc, #28]	; (8006368 <_lseek_r+0x20>)
 800634c:	4605      	mov	r5, r0
 800634e:	4608      	mov	r0, r1
 8006350:	4611      	mov	r1, r2
 8006352:	2200      	movs	r2, #0
 8006354:	6022      	str	r2, [r4, #0]
 8006356:	461a      	mov	r2, r3
 8006358:	f7fa fc1d 	bl	8000b96 <_lseek>
 800635c:	1c43      	adds	r3, r0, #1
 800635e:	d102      	bne.n	8006366 <_lseek_r+0x1e>
 8006360:	6823      	ldr	r3, [r4, #0]
 8006362:	b103      	cbz	r3, 8006366 <_lseek_r+0x1e>
 8006364:	602b      	str	r3, [r5, #0]
 8006366:	bd38      	pop	{r3, r4, r5, pc}
 8006368:	20004b4c 	.word	0x20004b4c

0800636c <_read_r>:
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	4c07      	ldr	r4, [pc, #28]	; (800638c <_read_r+0x20>)
 8006370:	4605      	mov	r5, r0
 8006372:	4608      	mov	r0, r1
 8006374:	4611      	mov	r1, r2
 8006376:	2200      	movs	r2, #0
 8006378:	6022      	str	r2, [r4, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	f7fa fc1c 	bl	8000bb8 <_read>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d102      	bne.n	800638a <_read_r+0x1e>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	b103      	cbz	r3, 800638a <_read_r+0x1e>
 8006388:	602b      	str	r3, [r5, #0]
 800638a:	bd38      	pop	{r3, r4, r5, pc}
 800638c:	20004b4c 	.word	0x20004b4c

08006390 <_init>:
 8006390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006392:	bf00      	nop
 8006394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006396:	bc08      	pop	{r3}
 8006398:	469e      	mov	lr, r3
 800639a:	4770      	bx	lr

0800639c <_fini>:
 800639c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639e:	bf00      	nop
 80063a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063a2:	bc08      	pop	{r3}
 80063a4:	469e      	mov	lr, r3
 80063a6:	4770      	bx	lr
