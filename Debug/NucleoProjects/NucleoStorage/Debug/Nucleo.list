
Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006964  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08006b04  08006b04  00016b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cf8  08006cf8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006cf8  08006cf8  00016cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d00  08006d00  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d00  08006d00  00016d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d04  08006d04  00016d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b40  20000074  08006d7c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bb4  08006d7c  00024bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000176f0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000304c  00000000  00000000  00037794  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f28  00000000  00000000  0003a7e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e00  00000000  00000000  0003b708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a2d6  00000000  00000000  0003c508  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000de4c  00000000  00000000  000567de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096ef5  00000000  00000000  0006462a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fb51f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004480  00000000  00000000  000fb59c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006aec 	.word	0x08006aec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006aec 	.word	0x08006aec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000090 	.word	0x20000090
 80005b0:	200000e4 	.word	0x200000e4

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b09e      	sub	sp, #120	; 0x78
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 ff51 	bl	8001460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f88d 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 fa43 	bl	8000a4c <MX_GPIO_Init>
  MX_SPI1_Init();
 80005c6:	f000 f943 	bl	8000850 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 fa0d 	bl	80009e8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005ce:	f000 f8ed 	bl	80007ac <MX_ADC1_Init>
  MX_SPI2_Init();
 80005d2:	f000 f973 	bl	80008bc <MX_SPI2_Init>
  MX_SPI3_Init();
 80005d6:	f000 f9a7 	bl	8000928 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80005da:	f000 f9db 	bl	8000994 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80005de:	f000 fa2d 	bl	8000a3c <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 80005e2:	4833      	ldr	r0, [pc, #204]	; (80006b0 <main+0xfc>)
 80005e4:	f000 fbde 	bl	8000da4 <RetargetInit>
  for(int i = 0; i < 500; i++) printf(" \r\n");
 80005e8:	2300      	movs	r3, #0
 80005ea:	677b      	str	r3, [r7, #116]	; 0x74
 80005ec:	e005      	b.n	80005fa <main+0x46>
 80005ee:	4831      	ldr	r0, [pc, #196]	; (80006b4 <main+0x100>)
 80005f0:	f005 fba2 	bl	8005d38 <puts>
 80005f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005f6:	3301      	adds	r3, #1
 80005f8:	677b      	str	r3, [r7, #116]	; 0x74
 80005fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000600:	dbf5      	blt.n	80005ee <main+0x3a>
  HAL_Delay(250);
 8000602:	20fa      	movs	r0, #250	; 0xfa
 8000604:	f000 ff9e 	bl	8001544 <HAL_Delay>
  printf("Starting:\r\n");
 8000608:	482b      	ldr	r0, [pc, #172]	; (80006b8 <main+0x104>)
 800060a:	f005 fb95 	bl	8005d38 <puts>
  HAL_Delay(250);
 800060e:	20fa      	movs	r0, #250	; 0xfa
 8000610:	f000 ff98 	bl	8001544 <HAL_Delay>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ControlLogic */
  osThreadStaticDef(ControlLogic, startControlLogic, osPriorityNormal, 0, 128, ControlLogicBuffer, &ControlLogicControlBlock);
 8000614:	4b29      	ldr	r3, [pc, #164]	; (80006bc <main+0x108>)
 8000616:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800061a:	461d      	mov	r5, r3
 800061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlLogicHandle = osThreadCreate(osThread(ControlLogic), NULL);
 8000628:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f003 fbc5 	bl	8003dbe <osThreadCreate>
 8000634:	4602      	mov	r2, r0
 8000636:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <main+0x10c>)
 8000638:	601a      	str	r2, [r3, #0]

  /* definition and creation of Acquisition */
  osThreadStaticDef(Acquisition, startAcquisition, osPriorityRealtime, 0, 128, AcquisitionBuffer, &AcquisitionControlBlock);
 800063a:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <main+0x110>)
 800063c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000640:	461d      	mov	r5, r3
 8000642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000646:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800064a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AcquisitionHandle = osThreadCreate(osThread(Acquisition), NULL);
 800064e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f003 fbb2 	bl	8003dbe <osThreadCreate>
 800065a:	4602      	mov	r2, r0
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <main+0x114>)
 800065e:	601a      	str	r2, [r3, #0]

  /* definition and creation of Processing */
  osThreadStaticDef(Processing, startProcessing, osPriorityNormal, 0, 128, ProcessingBuffer, &ProcessingControlBlock);
 8000660:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <main+0x118>)
 8000662:	f107 0420 	add.w	r4, r7, #32
 8000666:	461d      	mov	r5, r3
 8000668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000670:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ProcessingHandle = osThreadCreate(osThread(Processing), NULL);
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f003 fb9f 	bl	8003dbe <osThreadCreate>
 8000680:	4602      	mov	r2, r0
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <main+0x11c>)
 8000684:	601a      	str	r2, [r3, #0]

  /* definition and creation of Monitoring */
  osThreadStaticDef(Monitoring, startMonitoring, osPriorityLow, 0, 128, MonitoringBuffer, &MonitoringControlBlock);
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <main+0x120>)
 8000688:	1d3c      	adds	r4, r7, #4
 800068a:	461d      	mov	r5, r3
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MonitoringHandle = osThreadCreate(osThread(Monitoring), NULL);
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f003 fb8e 	bl	8003dbe <osThreadCreate>
 80006a2:	4602      	mov	r2, r0
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <main+0x124>)
 80006a6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006a8:	f003 fb82 	bl	8003db0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <main+0xf8>
 80006ae:	bf00      	nop
 80006b0:	20004948 	.word	0x20004948
 80006b4:	08006b04 	.word	0x08006b04
 80006b8:	08006b08 	.word	0x08006b08
 80006bc:	08006b24 	.word	0x08006b24
 80006c0:	200046dc 	.word	0x200046dc
 80006c4:	08006b4c 	.word	0x08006b4c
 80006c8:	200046d8 	.word	0x200046d8
 80006cc:	08006b74 	.word	0x08006b74
 80006d0:	2000459c 	.word	0x2000459c
 80006d4:	08006b9c 	.word	0x08006b9c
 80006d8:	200046d4 	.word	0x200046d4

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2230      	movs	r2, #48	; 0x30
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f005 fa00 	bl	8005af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <SystemClock_Config+0xc8>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a26      	ldr	r2, [pc, #152]	; (80007a4 <SystemClock_Config+0xc8>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <SystemClock_Config+0xc8>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <SystemClock_Config+0xcc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a20      	ldr	r2, [pc, #128]	; (80007a8 <SystemClock_Config+0xcc>)
 8000726:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <SystemClock_Config+0xcc>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000738:	2301      	movs	r3, #1
 800073a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800073c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000742:	2302      	movs	r3, #2
 8000744:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000746:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800074c:	2304      	movs	r3, #4
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000750:	2348      	movs	r3, #72	; 0x48
 8000752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000754:	2302      	movs	r3, #2
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000758:	2303      	movs	r3, #3
 800075a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	4618      	mov	r0, r3
 8000762:	f001 fc05 	bl	8001f70 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800076c:	f000 fb15 	bl	8000d9a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2302      	movs	r3, #2
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000780:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2102      	movs	r1, #2
 800078c:	4618      	mov	r0, r3
 800078e:	f001 fe5f 	bl	8002450 <HAL_RCC_ClockConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000798:	f000 faff 	bl	8000d9a <Error_Handler>
  }
}
 800079c:	bf00      	nop
 800079e:	3750      	adds	r7, #80	; 0x50
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007be:	4b21      	ldr	r3, [pc, #132]	; (8000844 <MX_ADC1_Init+0x98>)
 80007c0:	4a21      	ldr	r2, [pc, #132]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_ADC1_Init+0x98>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ca:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <MX_ADC1_Init+0x98>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007d0:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_ADC1_Init+0x98>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007d6:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_ADC1_Init+0x98>)
 80007d8:	2200      	movs	r2, #0
 80007da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_ADC1_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_ADC1_Init+0x98>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_ADC1_Init+0x98>)
 80007ec:	4a17      	ldr	r2, [pc, #92]	; (800084c <MX_ADC1_Init+0xa0>)
 80007ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_ADC1_Init+0x98>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_ADC1_Init+0x98>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_ADC1_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_ADC1_Init+0x98>)
 8000806:	2201      	movs	r2, #1
 8000808:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800080a:	480e      	ldr	r0, [pc, #56]	; (8000844 <MX_ADC1_Init+0x98>)
 800080c:	f000 febc 	bl	8001588 <HAL_ADC_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000816:	f000 fac0 	bl	8000d9a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800081e:	2301      	movs	r3, #1
 8000820:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000826:	463b      	mov	r3, r7
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	; (8000844 <MX_ADC1_Init+0x98>)
 800082c:	f000 fef0 	bl	8001610 <HAL_ADC_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000836:	f000 fab0 	bl	8000d9a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200045f8 	.word	0x200045f8
 8000848:	40012000 	.word	0x40012000
 800084c:	0f000001 	.word	0x0f000001

08000850 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_SPI1_Init+0x64>)
 8000856:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <MX_SPI1_Init+0x68>)
 8000858:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_SPI1_Init+0x64>)
 800085c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000860:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_SPI1_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_SPI1_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_SPI1_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_SPI1_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_SPI1_Init+0x64>)
 800087c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000880:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_SPI1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <MX_SPI1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_SPI1_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <MX_SPI1_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_SPI1_Init+0x64>)
 800089c:	220a      	movs	r2, #10
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_SPI1_Init+0x64>)
 80008a2:	f001 ffc7 	bl	8002834 <HAL_SPI_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008ac:	f000 fa75 	bl	8000d9a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200046e0 	.word	0x200046e0
 80008b8:	40013000 	.word	0x40013000

080008bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_SPI2_Init+0x64>)
 80008c2:	4a18      	ldr	r2, [pc, #96]	; (8000924 <MX_SPI2_Init+0x68>)
 80008c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <MX_SPI2_Init+0x64>)
 80008c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_SPI2_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_SPI2_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_SPI2_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_SPI2_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_SPI2_Init+0x64>)
 80008e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_SPI2_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <MX_SPI2_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_SPI2_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <MX_SPI2_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_SPI2_Init+0x64>)
 8000908:	220a      	movs	r2, #10
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_SPI2_Init+0x64>)
 800090e:	f001 ff91 	bl	8002834 <HAL_SPI_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000918:	f000 fa3f 	bl	8000d9a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2000429c 	.word	0x2000429c
 8000924:	40003800 	.word	0x40003800

08000928 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <MX_SPI3_Init+0x64>)
 800092e:	4a18      	ldr	r2, [pc, #96]	; (8000990 <MX_SPI3_Init+0x68>)
 8000930:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000932:	4b16      	ldr	r3, [pc, #88]	; (800098c <MX_SPI3_Init+0x64>)
 8000934:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000938:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_SPI3_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <MX_SPI3_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_SPI3_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_SPI3_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_SPI3_Init+0x64>)
 8000954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000958:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_SPI3_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000960:	4b0a      	ldr	r3, [pc, #40]	; (800098c <MX_SPI3_Init+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_SPI3_Init+0x64>)
 8000968:	2200      	movs	r2, #0
 800096a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <MX_SPI3_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_SPI3_Init+0x64>)
 8000974:	220a      	movs	r2, #10
 8000976:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000978:	4804      	ldr	r0, [pc, #16]	; (800098c <MX_SPI3_Init+0x64>)
 800097a:	f001 ff5b 	bl	8002834 <HAL_SPI_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000984:	f000 fa09 	bl	8000d9a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	200045a0 	.word	0x200045a0
 8000990:	40003c00 	.word	0x40003c00

08000994 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_USART1_UART_Init+0x4c>)
 800099a:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <MX_USART1_UART_Init+0x50>)
 800099c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_USART1_UART_Init+0x4c>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_USART1_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_USART1_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_USART1_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_USART1_UART_Init+0x4c>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_USART1_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_USART1_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_USART1_UART_Init+0x4c>)
 80009cc:	f002 fc86 	bl	80032dc <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009d6:	f000 f9e0 	bl	8000d9a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20004640 	.word	0x20004640
 80009e4:	40011000 	.word	0x40011000

080009e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <MX_USART2_UART_Init+0x50>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a20:	f002 fc5c 	bl	80032dc <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a2a:	f000 f9b6 	bl	8000d9a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20004948 	.word	0x20004948
 8000a38:	40004400 	.word	0x40004400

08000a3c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b4a      	ldr	r3, [pc, #296]	; (8000b90 <MX_GPIO_Init+0x144>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a49      	ldr	r2, [pc, #292]	; (8000b90 <MX_GPIO_Init+0x144>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b47      	ldr	r3, [pc, #284]	; (8000b90 <MX_GPIO_Init+0x144>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b43      	ldr	r3, [pc, #268]	; (8000b90 <MX_GPIO_Init+0x144>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a42      	ldr	r2, [pc, #264]	; (8000b90 <MX_GPIO_Init+0x144>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b40      	ldr	r3, [pc, #256]	; (8000b90 <MX_GPIO_Init+0x144>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	4b3c      	ldr	r3, [pc, #240]	; (8000b90 <MX_GPIO_Init+0x144>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a3b      	ldr	r2, [pc, #236]	; (8000b90 <MX_GPIO_Init+0x144>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <MX_GPIO_Init+0x144>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b35      	ldr	r3, [pc, #212]	; (8000b90 <MX_GPIO_Init+0x144>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a34      	ldr	r2, [pc, #208]	; (8000b90 <MX_GPIO_Init+0x144>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b32      	ldr	r3, [pc, #200]	; (8000b90 <MX_GPIO_Init+0x144>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2180      	movs	r1, #128	; 0x80
 8000ad6:	482f      	ldr	r0, [pc, #188]	; (8000b94 <MX_GPIO_Init+0x148>)
 8000ad8:	f001 fa30 	bl	8001f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HOLD_GPIO_Port, HOLD_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae2:	482d      	ldr	r0, [pc, #180]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000ae4:	f001 fa2a 	bl	8001f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS3_Pin|LED_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000aee:	482b      	ldr	r0, [pc, #172]	; (8000b9c <MX_GPIO_Init+0x150>)
 8000af0:	f001 fa24 	bl	8001f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000af4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000afa:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <MX_GPIO_Init+0x154>)
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4822      	ldr	r0, [pc, #136]	; (8000b94 <MX_GPIO_Init+0x148>)
 8000b0a:	f001 f895 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : WP_Pin */
  GPIO_InitStruct.Pin = WP_Pin;
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WP_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	481b      	ldr	r0, [pc, #108]	; (8000b94 <MX_GPIO_Init+0x148>)
 8000b26:	f001 f887 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : HOLD_Pin */
  GPIO_InitStruct.Pin = HOLD_Pin;
 8000b2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HOLD_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	4815      	ldr	r0, [pc, #84]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000b44:	f001 f878 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000b48:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b5a:	230a      	movs	r3, #10
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	480c      	ldr	r0, [pc, #48]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000b66:	f001 f867 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS3_Pin LED_Pin */
  GPIO_InitStruct.Pin = CS3_Pin|LED_Pin;
 8000b6a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	4806      	ldr	r0, [pc, #24]	; (8000b9c <MX_GPIO_Init+0x150>)
 8000b84:	f001 f858 	bl	8001c38 <HAL_GPIO_Init>

}
 8000b88:	bf00      	nop
 8000b8a:	3728      	adds	r7, #40	; 0x28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020800 	.word	0x40020800
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	40020400 	.word	0x40020400
 8000ba0:	10210000 	.word	0x10210000

08000ba4 <startControlLogic>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startControlLogic */
void startControlLogic(void const * argument)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b097      	sub	sp, #92	; 0x5c
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	static TickType_t time_init = 0;
	uint32_t rowAddr = 0x00000000;
 8000bac:	2300      	movs	r3, #0
 8000bae:	653b      	str	r3, [r7, #80]	; 0x50
	uint16_t colAddr = 0x0000;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t writeData1[16] = {0x01, 0x02, 0x03, 0x04, 0x11, 0x12, 0x13, 0x14, 0x21, 0x22, 0x23, 0x24, 0x31, 0x32, 0x33, 0x34};
 8000bb6:	4b5a      	ldr	r3, [pc, #360]	; (8000d20 <startControlLogic+0x17c>)
 8000bb8:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000bbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t writeData2[16] = {0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA};
 8000bc2:	4b58      	ldr	r3, [pc, #352]	; (8000d24 <startControlLogic+0x180>)
 8000bc4:	f107 0420 	add.w	r4, r7, #32
 8000bc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t readData[16] = {0x00};
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
	uint8_t size = 16;
 8000bdc:	2310      	movs	r3, #16
 8000bde:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	uint8_t feature = 0x00;
 8000be2:	2300      	movs	r3, #0
 8000be4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	uint32_t goodRows = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t badRows = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t i = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	657b      	str	r3, [r7, #84]	; 0x54
	bool badRow = false;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	bool nandNominal = false;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	73fb      	strb	r3, [r7, #15]

	if(ENABLE_CONTROL_LOGIC || true){
		HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_SET);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2180      	movs	r1, #128	; 0x80
 8000c02:	4849      	ldr	r0, [pc, #292]	; (8000d28 <startControlLogic+0x184>)
 8000c04:	f001 f99a 	bl	8001f3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOLD_GPIO_Port, HOLD_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c0e:	4847      	ldr	r0, [pc, #284]	; (8000d2c <startControlLogic+0x188>)
 8000c10:	f001 f994 	bl	8001f3c <HAL_GPIO_WritePin>

		nandInit(&nandNominal);
 8000c14:	f107 030f 	add.w	r3, r7, #15
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f004 fd03 	bl	8005624 <nandInit>

		setFeature(0xA0, 0x00);
 8000c1e:	2100      	movs	r1, #0
 8000c20:	20a0      	movs	r0, #160	; 0xa0
 8000c22:	f004 fed1 	bl	80059c8 <setFeature>
		feature = getFeature(0xA0);
 8000c26:	20a0      	movs	r0, #160	; 0xa0
 8000c28:	f004 fea6 	bl	8005978 <getFeature>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		printf("Feature %02X ", feature);
 8000c32:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000c36:	4619      	mov	r1, r3
 8000c38:	483d      	ldr	r0, [pc, #244]	; (8000d30 <startControlLogic+0x18c>)
 8000c3a:	f005 f809 	bl	8005c50 <iprintf>
		feature = getFeature(0xB0);
 8000c3e:	20b0      	movs	r0, #176	; 0xb0
 8000c40:	f004 fe9a 	bl	8005978 <getFeature>
 8000c44:	4603      	mov	r3, r0
 8000c46:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		printf("%02X\n\r", feature);
 8000c4a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4838      	ldr	r0, [pc, #224]	; (8000d34 <startControlLogic+0x190>)
 8000c52:	f004 fffd 	bl	8005c50 <iprintf>
		printf("\n\r");
		writeEnable();
		//HAL_Delay(10);
		nandBufferExecute(rowAddr);*/
		//nandBufferRead(colAddr, readData, sizeR);
		eraseBlock(rowAddr);
 8000c56:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000c58:	f004 feda 	bl	8005a10 <eraseBlock>
		nandWrite(rowAddr, colAddr, writeData1, size);
 8000c5c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000c60:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000c64:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 8000c68:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000c6a:	f004 fe32 	bl	80058d2 <nandWrite>
		nandRead(rowAddr, colAddr, readData, size);
 8000c6e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000c72:	f107 0210 	add.w	r2, r7, #16
 8000c76:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 8000c7a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000c7c:	f004 fe12 	bl	80058a4 <nandRead>
		for(i = 0; i < size; i++) printf("%02X ", readData[i]);
 8000c80:	2300      	movs	r3, #0
 8000c82:	657b      	str	r3, [r7, #84]	; 0x54
 8000c84:	e00b      	b.n	8000c9e <startControlLogic+0xfa>
 8000c86:	f107 0210 	add.w	r2, r7, #16
 8000c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c8c:	4413      	add	r3, r2
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	4829      	ldr	r0, [pc, #164]	; (8000d38 <startControlLogic+0x194>)
 8000c94:	f004 ffdc 	bl	8005c50 <iprintf>
 8000c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	657b      	str	r3, [r7, #84]	; 0x54
 8000c9e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000ca2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d3ee      	bcc.n	8000c86 <startControlLogic+0xe2>
		printf("\n\r");
 8000ca8:	4824      	ldr	r0, [pc, #144]	; (8000d3c <startControlLogic+0x198>)
 8000caa:	f004 ffd1 	bl	8005c50 <iprintf>

		nandWrite(rowAddr, colAddr, writeData2, size);
 8000cae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000cb2:	f107 0220 	add.w	r2, r7, #32
 8000cb6:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 8000cba:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000cbc:	f004 fe09 	bl	80058d2 <nandWrite>
		nandRead(rowAddr, colAddr, readData, size);
 8000cc0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000cc4:	f107 0210 	add.w	r2, r7, #16
 8000cc8:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 8000ccc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000cce:	f004 fde9 	bl	80058a4 <nandRead>
		for(i = 0; i < size; i++) printf("%02X ", readData[i]);
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	657b      	str	r3, [r7, #84]	; 0x54
 8000cd6:	e00b      	b.n	8000cf0 <startControlLogic+0x14c>
 8000cd8:	f107 0210 	add.w	r2, r7, #16
 8000cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cde:	4413      	add	r3, r2
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4814      	ldr	r0, [pc, #80]	; (8000d38 <startControlLogic+0x194>)
 8000ce6:	f004 ffb3 	bl	8005c50 <iprintf>
 8000cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cec:	3301      	adds	r3, #1
 8000cee:	657b      	str	r3, [r7, #84]	; 0x54
 8000cf0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000cf4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d3ee      	bcc.n	8000cd8 <startControlLogic+0x134>
		printf("\n\r");
 8000cfa:	4810      	ldr	r0, [pc, #64]	; (8000d3c <startControlLogic+0x198>)
 8000cfc:	f004 ffa8 	bl	8005c50 <iprintf>
				//printf("\n\rgood row: %d", rowAddr);
				goodRows++;
			}

		}*/
		printf("\n\rDone");
 8000d00:	480f      	ldr	r0, [pc, #60]	; (8000d40 <startControlLogic+0x19c>)
 8000d02:	f004 ffa5 	bl	8005c50 <iprintf>

	}
  /* Infinite loop */
	while(ENABLE_CONTROL_LOGIC) {
		if(printDiv) printf("-------------\r\n");
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <startControlLogic+0x1a0>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d002      	beq.n	8000d14 <startControlLogic+0x170>
 8000d0e:	480e      	ldr	r0, [pc, #56]	; (8000d48 <startControlLogic+0x1a4>)
 8000d10:	f005 f812 	bl	8005d38 <puts>
		//toggleLed();
		vTaskDelayUntil(&time_init, CONTROL_LOGIC_TASK_DELAY);
 8000d14:	490d      	ldr	r1, [pc, #52]	; (8000d4c <startControlLogic+0x1a8>)
 8000d16:	480e      	ldr	r0, [pc, #56]	; (8000d50 <startControlLogic+0x1ac>)
 8000d18:	f003 fb6e 	bl	80043f8 <vTaskDelayUntil>
		if(printDiv) printf("-------------\r\n");
 8000d1c:	e7f3      	b.n	8000d06 <startControlLogic+0x162>
 8000d1e:	bf00      	nop
 8000d20:	08006bf4 	.word	0x08006bf4
 8000d24:	08006c04 	.word	0x08006c04
 8000d28:	40020800 	.word	0x40020800
 8000d2c:	40020000 	.word	0x40020000
 8000d30:	08006bb8 	.word	0x08006bb8
 8000d34:	08006bc8 	.word	0x08006bc8
 8000d38:	08006bd0 	.word	0x08006bd0
 8000d3c:	08006bd8 	.word	0x08006bd8
 8000d40:	08006bdc 	.word	0x08006bdc
 8000d44:	200002e4 	.word	0x200002e4
 8000d48:	08006be4 	.word	0x08006be4
 8000d4c:	000186a0 	.word	0x000186a0
 8000d50:	200002e8 	.word	0x200002e8

08000d54 <startAcquisition>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAcquisition */
void startAcquisition(void const * argument)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	if(ENABLE_ACQUISITION){
		setup_A();
		printf("\n\n");
	}
  /* Infinite loop */
	while(ENABLE_ACQUISITION) {
 8000d5c:	bf00      	nop
		}
		if(time_init > 4000) break;
	}
	//printf("%d\n\r",time_init);
	if(ENABLE_ACQUISITION) printDiv = false;
	vTaskDelete(NULL);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f003 fabc 	bl	80042dc <vTaskDelete>

  /* USER CODE END startAcquisition */
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <startProcessing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startProcessing */
void startProcessing(void const * argument)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
		HAL_Delay(1000);
		*/
		vTaskDelayUntil(&time_init, PROCESSING_TASK_DELAY);
	}
	}
	vTaskDelete(NULL);
 8000d74:	2000      	movs	r0, #0
 8000d76:	f003 fab1 	bl	80042dc <vTaskDelete>
  /* USER CODE END startProcessing */
}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <startMonitoring>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMonitoring */
void startMonitoring(void const * argument)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMonitoring */
	static GPIO_PinState pressed = GPIO_PIN_SET;
	static int counter = 0;
	static TickType_t time_init = 0;
  /* Infinite loop */
	while(ENABLE_MONITORING) {
 8000d8a:	bf00      	nop


		vTaskDelayUntil(&time_init, MONITORING_TASK_DELAY);
	}

	vTaskDelete(NULL);
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f003 faa5 	bl	80042dc <vTaskDelete>
  /* USER CODE END startMonitoring */
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9e:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <Error_Handler+0x6>
	...

08000da4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <RetargetInit+0x28>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <RetargetInit+0x2c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6898      	ldr	r0, [r3, #8]
 8000db8:	2300      	movs	r3, #0
 8000dba:	2202      	movs	r2, #2
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	f004 ffd3 	bl	8005d68 <setvbuf>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20004ba4 	.word	0x20004ba4
 8000dd0:	20000010 	.word	0x20000010

08000dd4 <_isatty>:

int _isatty(int fd) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	db04      	blt.n	8000dec <_isatty+0x18>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	dc01      	bgt.n	8000dec <_isatty+0x18>
    return 1;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e005      	b.n	8000df8 <_isatty+0x24>

  errno = EBADF;
 8000dec:	f004 fe4e 	bl	8005a8c <__errno>
 8000df0:	4602      	mov	r2, r0
 8000df2:	2309      	movs	r3, #9
 8000df4:	6013      	str	r3, [r2, #0]
  return 0;
 8000df6:	2300      	movs	r3, #0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <_write>:

int _write(int fd, char* ptr, int len) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d002      	beq.n	8000e18 <_write+0x18>
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d111      	bne.n	8000e3c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <_write+0x54>)
 8000e1a:	6818      	ldr	r0, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	f04f 33ff 	mov.w	r3, #4294967295
 8000e24:	68b9      	ldr	r1, [r7, #8]
 8000e26:	f002 faa6 	bl	8003376 <HAL_UART_Transmit>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000e2e:	7dfb      	ldrb	r3, [r7, #23]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d101      	bne.n	8000e38 <_write+0x38>
      return len;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	e008      	b.n	8000e4a <_write+0x4a>
    else
      return EIO;
 8000e38:	2305      	movs	r3, #5
 8000e3a:	e006      	b.n	8000e4a <_write+0x4a>
  }
  errno = EBADF;
 8000e3c:	f004 fe26 	bl	8005a8c <__errno>
 8000e40:	4602      	mov	r2, r0
 8000e42:	2309      	movs	r3, #9
 8000e44:	6013      	str	r3, [r2, #0]
  return -1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20004ba4 	.word	0x20004ba4

08000e58 <_close>:

int _close(int fd) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db04      	blt.n	8000e70 <_close+0x18>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	dc01      	bgt.n	8000e70 <_close+0x18>
    return 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	e006      	b.n	8000e7e <_close+0x26>

  errno = EBADF;
 8000e70:	f004 fe0c 	bl	8005a8c <__errno>
 8000e74:	4602      	mov	r2, r0
 8000e76:	2309      	movs	r3, #9
 8000e78:	6013      	str	r3, [r2, #0]
  return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b084      	sub	sp, #16
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000e92:	f004 fdfb 	bl	8005a8c <__errno>
 8000e96:	4602      	mov	r2, r0
 8000e98:	2309      	movs	r3, #9
 8000e9a:	6013      	str	r3, [r2, #0]
  return -1;
 8000e9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <_read>:

int _read(int fd, char* ptr, int len) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d110      	bne.n	8000edc <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <_read+0x4c>)
 8000ebc:	6818      	ldr	r0, [r3, #0]
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	f002 faef 	bl	80034a8 <HAL_UART_Receive>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000ece:	7dfb      	ldrb	r3, [r7, #23]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d101      	bne.n	8000ed8 <_read+0x30>
      return 1;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e008      	b.n	8000eea <_read+0x42>
    else
      return EIO;
 8000ed8:	2305      	movs	r3, #5
 8000eda:	e006      	b.n	8000eea <_read+0x42>
  }
  errno = EBADF;
 8000edc:	f004 fdd6 	bl	8005a8c <__errno>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	2309      	movs	r3, #9
 8000ee4:	6013      	str	r3, [r2, #0]
  return -1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20004ba4 	.word	0x20004ba4

08000ef8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	db08      	blt.n	8000f1a <_fstat+0x22>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	dc05      	bgt.n	8000f1a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f14:	605a      	str	r2, [r3, #4]
    return 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e005      	b.n	8000f26 <_fstat+0x2e>
  }

  errno = EBADF;
 8000f1a:	f004 fdb7 	bl	8005a8c <__errno>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	2309      	movs	r3, #9
 8000f22:	6013      	str	r3, [r2, #0]
  return 0;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_MspInit+0x54>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	4a11      	ldr	r2, [pc, #68]	; (8000f84 <HAL_MspInit+0x54>)
 8000f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f44:	6453      	str	r3, [r2, #68]	; 0x44
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <HAL_MspInit+0x54>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_MspInit+0x54>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_MspInit+0x54>)
 8000f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f60:	6413      	str	r3, [r2, #64]	; 0x40
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_MspInit+0x54>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	210f      	movs	r1, #15
 8000f72:	f06f 0001 	mvn.w	r0, #1
 8000f76:	f000 fe36 	bl	8001be6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800

08000f88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a17      	ldr	r2, [pc, #92]	; (8001004 <HAL_ADC_MspInit+0x7c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d127      	bne.n	8000ffa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_ADC_MspInit+0x80>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a15      	ldr	r2, [pc, #84]	; (8001008 <HAL_ADC_MspInit+0x80>)
 8000fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_ADC_MspInit+0x80>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_ADC_MspInit+0x80>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <HAL_ADC_MspInit+0x80>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <HAL_ADC_MspInit+0x80>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000fe2:	2313      	movs	r3, #19
 8000fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <HAL_ADC_MspInit+0x84>)
 8000ff6:	f000 fe1f 	bl	8001c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ffa:	bf00      	nop
 8000ffc:	3728      	adds	r7, #40	; 0x28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40012000 	.word	0x40012000
 8001008:	40023800 	.word	0x40023800
 800100c:	40020000 	.word	0x40020000

08001010 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b090      	sub	sp, #64	; 0x40
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a6a      	ldr	r2, [pc, #424]	; (80011d8 <HAL_SPI_MspInit+0x1c8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d12c      	bne.n	800108c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
 8001036:	4b69      	ldr	r3, [pc, #420]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	4a68      	ldr	r2, [pc, #416]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 800103c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001040:	6453      	str	r3, [r2, #68]	; 0x44
 8001042:	4b66      	ldr	r3, [pc, #408]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
 800104c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
 8001052:	4b62      	ldr	r3, [pc, #392]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a61      	ldr	r2, [pc, #388]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b5f      	ldr	r3, [pc, #380]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
 8001068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800106a:	23e0      	movs	r3, #224	; 0xe0
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800107a:	2305      	movs	r3, #5
 800107c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001082:	4619      	mov	r1, r3
 8001084:	4856      	ldr	r0, [pc, #344]	; (80011e0 <HAL_SPI_MspInit+0x1d0>)
 8001086:	f000 fdd7 	bl	8001c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800108a:	e0a1      	b.n	80011d0 <HAL_SPI_MspInit+0x1c0>
  else if(hspi->Instance==SPI2)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a54      	ldr	r2, [pc, #336]	; (80011e4 <HAL_SPI_MspInit+0x1d4>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d14b      	bne.n	800112e <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
 800109a:	4b50      	ldr	r3, [pc, #320]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	4a4f      	ldr	r2, [pc, #316]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a4:	6413      	str	r3, [r2, #64]	; 0x40
 80010a6:	4b4d      	ldr	r3, [pc, #308]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ae:	623b      	str	r3, [r7, #32]
 80010b0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
 80010b6:	4b49      	ldr	r3, [pc, #292]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a48      	ldr	r2, [pc, #288]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b46      	ldr	r3, [pc, #280]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	61fb      	str	r3, [r7, #28]
 80010cc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
 80010d2:	4b42      	ldr	r3, [pc, #264]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a41      	ldr	r2, [pc, #260]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	61bb      	str	r3, [r7, #24]
 80010e8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010ea:	230c      	movs	r3, #12
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f6:	2303      	movs	r3, #3
 80010f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010fa:	2305      	movs	r3, #5
 80010fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001102:	4619      	mov	r1, r3
 8001104:	4838      	ldr	r0, [pc, #224]	; (80011e8 <HAL_SPI_MspInit+0x1d8>)
 8001106:	f000 fd97 	bl	8001c38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800110a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800111c:	2305      	movs	r3, #5
 800111e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001120:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001124:	4619      	mov	r1, r3
 8001126:	4831      	ldr	r0, [pc, #196]	; (80011ec <HAL_SPI_MspInit+0x1dc>)
 8001128:	f000 fd86 	bl	8001c38 <HAL_GPIO_Init>
}
 800112c:	e050      	b.n	80011d0 <HAL_SPI_MspInit+0x1c0>
  else if(hspi->Instance==SPI3)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a2f      	ldr	r2, [pc, #188]	; (80011f0 <HAL_SPI_MspInit+0x1e0>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d14b      	bne.n	80011d0 <HAL_SPI_MspInit+0x1c0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	4b27      	ldr	r3, [pc, #156]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	4a26      	ldr	r2, [pc, #152]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 8001142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001146:	6413      	str	r3, [r2, #64]	; 0x40
 8001148:	4b24      	ldr	r3, [pc, #144]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	4b20      	ldr	r3, [pc, #128]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	4a1f      	ldr	r2, [pc, #124]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 800115e:	f043 0302 	orr.w	r3, r3, #2
 8001162:	6313      	str	r3, [r2, #48]	; 0x30
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	4b19      	ldr	r3, [pc, #100]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	4a18      	ldr	r2, [pc, #96]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	6313      	str	r3, [r2, #48]	; 0x30
 8001180:	4b16      	ldr	r3, [pc, #88]	; (80011dc <HAL_SPI_MspInit+0x1cc>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800118c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800119e:	2307      	movs	r3, #7
 80011a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a6:	4619      	mov	r1, r3
 80011a8:	4810      	ldr	r0, [pc, #64]	; (80011ec <HAL_SPI_MspInit+0x1dc>)
 80011aa:	f000 fd45 	bl	8001c38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011c0:	2306      	movs	r3, #6
 80011c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c8:	4619      	mov	r1, r3
 80011ca:	4807      	ldr	r0, [pc, #28]	; (80011e8 <HAL_SPI_MspInit+0x1d8>)
 80011cc:	f000 fd34 	bl	8001c38 <HAL_GPIO_Init>
}
 80011d0:	bf00      	nop
 80011d2:	3740      	adds	r7, #64	; 0x40
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40013000 	.word	0x40013000
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40003800 	.word	0x40003800
 80011e8:	40020800 	.word	0x40020800
 80011ec:	40020400 	.word	0x40020400
 80011f0:	40003c00 	.word	0x40003c00

080011f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08c      	sub	sp, #48	; 0x30
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a41      	ldr	r2, [pc, #260]	; (8001318 <HAL_UART_MspInit+0x124>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d14b      	bne.n	80012ae <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
 800121a:	4b40      	ldr	r3, [pc, #256]	; (800131c <HAL_UART_MspInit+0x128>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	4a3f      	ldr	r2, [pc, #252]	; (800131c <HAL_UART_MspInit+0x128>)
 8001220:	f043 0310 	orr.w	r3, r3, #16
 8001224:	6453      	str	r3, [r2, #68]	; 0x44
 8001226:	4b3d      	ldr	r3, [pc, #244]	; (800131c <HAL_UART_MspInit+0x128>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	f003 0310 	and.w	r3, r3, #16
 800122e:	61bb      	str	r3, [r7, #24]
 8001230:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	4b39      	ldr	r3, [pc, #228]	; (800131c <HAL_UART_MspInit+0x128>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a38      	ldr	r2, [pc, #224]	; (800131c <HAL_UART_MspInit+0x128>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b36      	ldr	r3, [pc, #216]	; (800131c <HAL_UART_MspInit+0x128>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b32      	ldr	r3, [pc, #200]	; (800131c <HAL_UART_MspInit+0x128>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a31      	ldr	r2, [pc, #196]	; (800131c <HAL_UART_MspInit+0x128>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b2f      	ldr	r3, [pc, #188]	; (800131c <HAL_UART_MspInit+0x128>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800126a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800126e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800127c:	2307      	movs	r3, #7
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	4826      	ldr	r0, [pc, #152]	; (8001320 <HAL_UART_MspInit+0x12c>)
 8001288:	f000 fcd6 	bl	8001c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800129c:	2307      	movs	r3, #7
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	481f      	ldr	r0, [pc, #124]	; (8001324 <HAL_UART_MspInit+0x130>)
 80012a8:	f000 fcc6 	bl	8001c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012ac:	e030      	b.n	8001310 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a1d      	ldr	r2, [pc, #116]	; (8001328 <HAL_UART_MspInit+0x134>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d12b      	bne.n	8001310 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	4b17      	ldr	r3, [pc, #92]	; (800131c <HAL_UART_MspInit+0x128>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	4a16      	ldr	r2, [pc, #88]	; (800131c <HAL_UART_MspInit+0x128>)
 80012c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c6:	6413      	str	r3, [r2, #64]	; 0x40
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <HAL_UART_MspInit+0x128>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	4b10      	ldr	r3, [pc, #64]	; (800131c <HAL_UART_MspInit+0x128>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	4a0f      	ldr	r2, [pc, #60]	; (800131c <HAL_UART_MspInit+0x128>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6313      	str	r3, [r2, #48]	; 0x30
 80012e4:	4b0d      	ldr	r3, [pc, #52]	; (800131c <HAL_UART_MspInit+0x128>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012f0:	230c      	movs	r3, #12
 80012f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001300:	2307      	movs	r3, #7
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <HAL_UART_MspInit+0x12c>)
 800130c:	f000 fc94 	bl	8001c38 <HAL_GPIO_Init>
}
 8001310:	bf00      	nop
 8001312:	3730      	adds	r7, #48	; 0x30
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40011000 	.word	0x40011000
 800131c:	40023800 	.word	0x40023800
 8001320:	40020000 	.word	0x40020000
 8001324:	40020400 	.word	0x40020400
 8001328:	40004400 	.word	0x40004400

0800132c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <NMI_Handler+0x4>

08001332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001336:	e7fe      	b.n	8001336 <HardFault_Handler+0x4>

08001338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800133c:	e7fe      	b.n	800133c <MemManage_Handler+0x4>

0800133e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <UsageFault_Handler+0x4>

0800134a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135c:	f000 f8d2 	bl	8001504 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001360:	f003 fbb0 	bl	8004ac4 <xTaskGetSchedulerState>
 8001364:	4603      	mov	r3, r0
 8001366:	2b01      	cmp	r3, #1
 8001368:	d001      	beq.n	800136e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800136a:	f003 fde5 	bl	8004f38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800137c:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <_sbrk+0x5c>)
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <_sbrk+0x60>)
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d102      	bne.n	8001396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <_sbrk+0x64>)
 8001392:	4a12      	ldr	r2, [pc, #72]	; (80013dc <_sbrk+0x68>)
 8001394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <_sbrk+0x64>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d207      	bcs.n	80013b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a4:	f004 fb72 	bl	8005a8c <__errno>
 80013a8:	4602      	mov	r2, r0
 80013aa:	230c      	movs	r3, #12
 80013ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	e009      	b.n	80013c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <_sbrk+0x64>)
 80013c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013c6:	68fb      	ldr	r3, [r7, #12]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20020000 	.word	0x20020000
 80013d4:	00000400 	.word	0x00000400
 80013d8:	200002ec 	.word	0x200002ec
 80013dc:	20004bb8 	.word	0x20004bb8

080013e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <SystemInit+0x28>)
 80013e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ea:	4a07      	ldr	r2, [pc, #28]	; (8001408 <SystemInit+0x28>)
 80013ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <SystemInit+0x28>)
 80013f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013fa:	609a      	str	r2, [r3, #8]
#endif
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800140c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001444 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001410:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001412:	e003      	b.n	800141c <LoopCopyDataInit>

08001414 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001416:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001418:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800141a:	3104      	adds	r1, #4

0800141c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800141c:	480b      	ldr	r0, [pc, #44]	; (800144c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001420:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001422:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001424:	d3f6      	bcc.n	8001414 <CopyDataInit>
  ldr  r2, =_sbss
 8001426:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001428:	e002      	b.n	8001430 <LoopFillZerobss>

0800142a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800142a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800142c:	f842 3b04 	str.w	r3, [r2], #4

08001430 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001432:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001434:	d3f9      	bcc.n	800142a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001436:	f7ff ffd3 	bl	80013e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800143a:	f004 fb2d 	bl	8005a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800143e:	f7ff f8b9 	bl	80005b4 <main>
  bx  lr    
 8001442:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001444:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001448:	08006d08 	.word	0x08006d08
  ldr  r0, =_sdata
 800144c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001450:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001454:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001458:	20004bb4 	.word	0x20004bb4

0800145c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800145c:	e7fe      	b.n	800145c <ADC_IRQHandler>
	...

08001460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_Init+0x40>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <HAL_Init+0x40>)
 800146a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800146e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_Init+0x40>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <HAL_Init+0x40>)
 8001476:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800147a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_Init+0x40>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <HAL_Init+0x40>)
 8001482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001486:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001488:	2003      	movs	r0, #3
 800148a:	f000 fba1 	bl	8001bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148e:	200f      	movs	r0, #15
 8001490:	f000 f808 	bl	80014a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001494:	f7ff fd4c 	bl	8000f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023c00 	.word	0x40023c00

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_InitTick+0x54>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x58>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80014be:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 fbab 	bl	8001c1e <HAL_SYSTICK_Config>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00e      	b.n	80014f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	d80a      	bhi.n	80014ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d8:	2200      	movs	r2, #0
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f000 fb81 	bl	8001be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e4:	4a06      	ldr	r2, [pc, #24]	; (8001500 <HAL_InitTick+0x5c>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000008 	.word	0x20000008
 8001500:	20000004 	.word	0x20000004

08001504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_IncTick+0x20>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x24>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
 8001514:	4a04      	ldr	r2, [pc, #16]	; (8001528 <HAL_IncTick+0x24>)
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000008 	.word	0x20000008
 8001528:	20004ba8 	.word	0x20004ba8

0800152c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return uwTick;
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <HAL_GetTick+0x14>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20004ba8 	.word	0x20004ba8

08001544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800154c:	f7ff ffee 	bl	800152c <HAL_GetTick>
 8001550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155c:	d005      	beq.n	800156a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_Delay+0x40>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4413      	add	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800156a:	bf00      	nop
 800156c:	f7ff ffde 	bl	800152c <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	429a      	cmp	r2, r3
 800157a:	d8f7      	bhi.n	800156c <HAL_Delay+0x28>
  {
  }
}
 800157c:	bf00      	nop
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000008 	.word	0x20000008

08001588 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e033      	b.n	8001606 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d109      	bne.n	80015ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fcee 	bl	8000f88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d118      	bne.n	80015f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015ce:	f023 0302 	bic.w	r3, r3, #2
 80015d2:	f043 0202 	orr.w	r2, r3, #2
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 f94a 	bl	8001874 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f023 0303 	bic.w	r3, r3, #3
 80015ee:	f043 0201 	orr.w	r2, r3, #1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40
 80015f6:	e001      	b.n	80015fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_ADC_ConfigChannel+0x1c>
 8001628:	2302      	movs	r3, #2
 800162a:	e113      	b.n	8001854 <HAL_ADC_ConfigChannel+0x244>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b09      	cmp	r3, #9
 800163a:	d925      	bls.n	8001688 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68d9      	ldr	r1, [r3, #12]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	b29b      	uxth	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	3b1e      	subs	r3, #30
 8001652:	2207      	movs	r2, #7
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43da      	mvns	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	400a      	ands	r2, r1
 8001660:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68d9      	ldr	r1, [r3, #12]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	b29b      	uxth	r3, r3
 8001672:	4618      	mov	r0, r3
 8001674:	4603      	mov	r3, r0
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4403      	add	r3, r0
 800167a:	3b1e      	subs	r3, #30
 800167c:	409a      	lsls	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	e022      	b.n	80016ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6919      	ldr	r1, [r3, #16]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	4613      	mov	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4413      	add	r3, r2
 800169c:	2207      	movs	r2, #7
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	400a      	ands	r2, r1
 80016aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6919      	ldr	r1, [r3, #16]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	4618      	mov	r0, r3
 80016be:	4603      	mov	r3, r0
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4403      	add	r3, r0
 80016c4:	409a      	lsls	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d824      	bhi.n	8001720 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	3b05      	subs	r3, #5
 80016e8:	221f      	movs	r2, #31
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	400a      	ands	r2, r1
 80016f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	b29b      	uxth	r3, r3
 8001704:	4618      	mov	r0, r3
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	3b05      	subs	r3, #5
 8001712:	fa00 f203 	lsl.w	r2, r0, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	635a      	str	r2, [r3, #52]	; 0x34
 800171e:	e04c      	b.n	80017ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b0c      	cmp	r3, #12
 8001726:	d824      	bhi.n	8001772 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	3b23      	subs	r3, #35	; 0x23
 800173a:	221f      	movs	r2, #31
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43da      	mvns	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	400a      	ands	r2, r1
 8001748:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	b29b      	uxth	r3, r3
 8001756:	4618      	mov	r0, r3
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	3b23      	subs	r3, #35	; 0x23
 8001764:	fa00 f203 	lsl.w	r2, r0, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	631a      	str	r2, [r3, #48]	; 0x30
 8001770:	e023      	b.n	80017ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	3b41      	subs	r3, #65	; 0x41
 8001784:	221f      	movs	r2, #31
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43da      	mvns	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	400a      	ands	r2, r1
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4618      	mov	r0, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	3b41      	subs	r3, #65	; 0x41
 80017ae:	fa00 f203 	lsl.w	r2, r0, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017ba:	4b29      	ldr	r3, [pc, #164]	; (8001860 <HAL_ADC_ConfigChannel+0x250>)
 80017bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a28      	ldr	r2, [pc, #160]	; (8001864 <HAL_ADC_ConfigChannel+0x254>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d10f      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x1d8>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b12      	cmp	r3, #18
 80017ce:	d10b      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <HAL_ADC_ConfigChannel+0x254>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d12b      	bne.n	800184a <HAL_ADC_ConfigChannel+0x23a>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <HAL_ADC_ConfigChannel+0x258>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d003      	beq.n	8001804 <HAL_ADC_ConfigChannel+0x1f4>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b11      	cmp	r3, #17
 8001802:	d122      	bne.n	800184a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a11      	ldr	r2, [pc, #68]	; (8001868 <HAL_ADC_ConfigChannel+0x258>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d111      	bne.n	800184a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_ADC_ConfigChannel+0x25c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a11      	ldr	r2, [pc, #68]	; (8001870 <HAL_ADC_ConfigChannel+0x260>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9a      	lsrs	r2, r3, #18
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800183c:	e002      	b.n	8001844 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3b01      	subs	r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f9      	bne.n	800183e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	40012300 	.word	0x40012300
 8001864:	40012000 	.word	0x40012000
 8001868:	10000012 	.word	0x10000012
 800186c:	20000000 	.word	0x20000000
 8001870:	431bde83 	.word	0x431bde83

08001874 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800187c:	4b79      	ldr	r3, [pc, #484]	; (8001a64 <ADC_Init+0x1f0>)
 800187e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	431a      	orrs	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6859      	ldr	r1, [r3, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	021a      	lsls	r2, r3, #8
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6859      	ldr	r1, [r3, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6899      	ldr	r1, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	4a58      	ldr	r2, [pc, #352]	; (8001a68 <ADC_Init+0x1f4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d022      	beq.n	8001952 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800191a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6899      	ldr	r1, [r3, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800193c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6899      	ldr	r1, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	e00f      	b.n	8001972 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001960:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001970:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0202 	bic.w	r2, r2, #2
 8001980:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6899      	ldr	r1, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	7e1b      	ldrb	r3, [r3, #24]
 800198c:	005a      	lsls	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d01b      	beq.n	80019d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6859      	ldr	r1, [r3, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	3b01      	subs	r3, #1
 80019cc:	035a      	lsls	r2, r3, #13
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	430a      	orrs	r2, r1
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	e007      	b.n	80019e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	051a      	lsls	r2, r3, #20
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6899      	ldr	r1, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a2a:	025a      	lsls	r2, r3, #9
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6899      	ldr	r1, [r3, #8]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	029a      	lsls	r2, r3, #10
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	609a      	str	r2, [r3, #8]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	40012300 	.word	0x40012300
 8001a68:	0f000001 	.word	0x0f000001

08001a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9e:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	60d3      	str	r3, [r2, #12]
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <__NVIC_GetPriorityGrouping+0x18>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	f003 0307 	and.w	r3, r3, #7
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db0a      	blt.n	8001afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	490c      	ldr	r1, [pc, #48]	; (8001b1c <__NVIC_SetPriority+0x4c>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	440b      	add	r3, r1
 8001af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af8:	e00a      	b.n	8001b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4908      	ldr	r1, [pc, #32]	; (8001b20 <__NVIC_SetPriority+0x50>)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	3b04      	subs	r3, #4
 8001b08:	0112      	lsls	r2, r2, #4
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	761a      	strb	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000e100 	.word	0xe000e100
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f1c3 0307 	rsb	r3, r3, #7
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	bf28      	it	cs
 8001b42:	2304      	movcs	r3, #4
 8001b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d902      	bls.n	8001b54 <NVIC_EncodePriority+0x30>
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3b03      	subs	r3, #3
 8001b52:	e000      	b.n	8001b56 <NVIC_EncodePriority+0x32>
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	401a      	ands	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	4313      	orrs	r3, r2
         );
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3724      	adds	r7, #36	; 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b9c:	d301      	bcc.n	8001ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00f      	b.n	8001bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <SysTick_Config+0x40>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001baa:	210f      	movs	r1, #15
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f7ff ff8e 	bl	8001ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <SysTick_Config+0x40>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bba:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <SysTick_Config+0x40>)
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	e000e010 	.word	0xe000e010

08001bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff47 	bl	8001a6c <__NVIC_SetPriorityGrouping>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf8:	f7ff ff5c 	bl	8001ab4 <__NVIC_GetPriorityGrouping>
 8001bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	6978      	ldr	r0, [r7, #20]
 8001c04:	f7ff ff8e 	bl	8001b24 <NVIC_EncodePriority>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff5d 	bl	8001ad0 <__NVIC_SetPriority>
}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ffb0 	bl	8001b8c <SysTick_Config>
 8001c2c:	4603      	mov	r3, r0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b089      	sub	sp, #36	; 0x24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	e159      	b.n	8001f08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c54:	2201      	movs	r2, #1
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	f040 8148 	bne.w	8001f02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d00b      	beq.n	8001c92 <HAL_GPIO_Init+0x5a>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d007      	beq.n	8001c92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c86:	2b11      	cmp	r3, #17
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b12      	cmp	r3, #18
 8001c90:	d130      	bne.n	8001cf4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 0201 	and.w	r2, r3, #1
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	2203      	movs	r2, #3
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0xfc>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b12      	cmp	r3, #18
 8001d32:	d123      	bne.n	8001d7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	08da      	lsrs	r2, r3, #3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3208      	adds	r2, #8
 8001d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	220f      	movs	r2, #15
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	08da      	lsrs	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3208      	adds	r2, #8
 8001d76:	69b9      	ldr	r1, [r7, #24]
 8001d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	2203      	movs	r2, #3
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0203 	and.w	r2, r3, #3
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80a2 	beq.w	8001f02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b56      	ldr	r3, [pc, #344]	; (8001f1c <HAL_GPIO_Init+0x2e4>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	4a55      	ldr	r2, [pc, #340]	; (8001f1c <HAL_GPIO_Init+0x2e4>)
 8001dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dce:	4b53      	ldr	r3, [pc, #332]	; (8001f1c <HAL_GPIO_Init+0x2e4>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dda:	4a51      	ldr	r2, [pc, #324]	; (8001f20 <HAL_GPIO_Init+0x2e8>)
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	089b      	lsrs	r3, r3, #2
 8001de0:	3302      	adds	r3, #2
 8001de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	220f      	movs	r2, #15
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a48      	ldr	r2, [pc, #288]	; (8001f24 <HAL_GPIO_Init+0x2ec>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d019      	beq.n	8001e3a <HAL_GPIO_Init+0x202>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a47      	ldr	r2, [pc, #284]	; (8001f28 <HAL_GPIO_Init+0x2f0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d013      	beq.n	8001e36 <HAL_GPIO_Init+0x1fe>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a46      	ldr	r2, [pc, #280]	; (8001f2c <HAL_GPIO_Init+0x2f4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00d      	beq.n	8001e32 <HAL_GPIO_Init+0x1fa>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a45      	ldr	r2, [pc, #276]	; (8001f30 <HAL_GPIO_Init+0x2f8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d007      	beq.n	8001e2e <HAL_GPIO_Init+0x1f6>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a44      	ldr	r2, [pc, #272]	; (8001f34 <HAL_GPIO_Init+0x2fc>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d101      	bne.n	8001e2a <HAL_GPIO_Init+0x1f2>
 8001e26:	2304      	movs	r3, #4
 8001e28:	e008      	b.n	8001e3c <HAL_GPIO_Init+0x204>
 8001e2a:	2307      	movs	r3, #7
 8001e2c:	e006      	b.n	8001e3c <HAL_GPIO_Init+0x204>
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e004      	b.n	8001e3c <HAL_GPIO_Init+0x204>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e002      	b.n	8001e3c <HAL_GPIO_Init+0x204>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <HAL_GPIO_Init+0x204>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	69fa      	ldr	r2, [r7, #28]
 8001e3e:	f002 0203 	and.w	r2, r2, #3
 8001e42:	0092      	lsls	r2, r2, #2
 8001e44:	4093      	lsls	r3, r2
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e4c:	4934      	ldr	r1, [pc, #208]	; (8001f20 <HAL_GPIO_Init+0x2e8>)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	089b      	lsrs	r3, r3, #2
 8001e52:	3302      	adds	r3, #2
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e5a:	4b37      	ldr	r3, [pc, #220]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e7e:	4a2e      	ldr	r2, [pc, #184]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e84:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ea8:	4a23      	ldr	r2, [pc, #140]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eae:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ed2:	4a19      	ldr	r2, [pc, #100]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed8:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001efc:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3301      	adds	r3, #1
 8001f06:	61fb      	str	r3, [r7, #28]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	2b0f      	cmp	r3, #15
 8001f0c:	f67f aea2 	bls.w	8001c54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f10:	bf00      	nop
 8001f12:	3724      	adds	r7, #36	; 0x24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40013800 	.word	0x40013800
 8001f24:	40020000 	.word	0x40020000
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020c00 	.word	0x40020c00
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40013c00 	.word	0x40013c00

08001f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f4c:	787b      	ldrb	r3, [r7, #1]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f52:	887a      	ldrh	r2, [r7, #2]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f58:	e003      	b.n	8001f62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f5a:	887b      	ldrh	r3, [r7, #2]
 8001f5c:	041a      	lsls	r2, r3, #16
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	619a      	str	r2, [r3, #24]
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e25b      	b.n	800243a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d075      	beq.n	800207a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f8e:	4ba3      	ldr	r3, [pc, #652]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d00c      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f9a:	4ba0      	ldr	r3, [pc, #640]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d112      	bne.n	8001fcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fa6:	4b9d      	ldr	r3, [pc, #628]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fb2:	d10b      	bne.n	8001fcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb4:	4b99      	ldr	r3, [pc, #612]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d05b      	beq.n	8002078 <HAL_RCC_OscConfig+0x108>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d157      	bne.n	8002078 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e236      	b.n	800243a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd4:	d106      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x74>
 8001fd6:	4b91      	ldr	r3, [pc, #580]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a90      	ldr	r2, [pc, #576]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 8001fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e01d      	b.n	8002020 <HAL_RCC_OscConfig+0xb0>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fec:	d10c      	bne.n	8002008 <HAL_RCC_OscConfig+0x98>
 8001fee:	4b8b      	ldr	r3, [pc, #556]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a8a      	ldr	r2, [pc, #552]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 8001ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	4b88      	ldr	r3, [pc, #544]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a87      	ldr	r2, [pc, #540]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 8002000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	e00b      	b.n	8002020 <HAL_RCC_OscConfig+0xb0>
 8002008:	4b84      	ldr	r3, [pc, #528]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a83      	ldr	r2, [pc, #524]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 800200e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	4b81      	ldr	r3, [pc, #516]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a80      	ldr	r2, [pc, #512]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 800201a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800201e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d013      	beq.n	8002050 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7ff fa80 	bl	800152c <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002030:	f7ff fa7c 	bl	800152c <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b64      	cmp	r3, #100	; 0x64
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e1fb      	b.n	800243a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002042:	4b76      	ldr	r3, [pc, #472]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0xc0>
 800204e:	e014      	b.n	800207a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7ff fa6c 	bl	800152c <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002058:	f7ff fa68 	bl	800152c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	; 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e1e7      	b.n	800243a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206a:	4b6c      	ldr	r3, [pc, #432]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0xe8>
 8002076:	e000      	b.n	800207a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d063      	beq.n	800214e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002086:	4b65      	ldr	r3, [pc, #404]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00b      	beq.n	80020aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002092:	4b62      	ldr	r3, [pc, #392]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800209a:	2b08      	cmp	r3, #8
 800209c:	d11c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800209e:	4b5f      	ldr	r3, [pc, #380]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d116      	bne.n	80020d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020aa:	4b5c      	ldr	r3, [pc, #368]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d005      	beq.n	80020c2 <HAL_RCC_OscConfig+0x152>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d001      	beq.n	80020c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e1bb      	b.n	800243a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c2:	4b56      	ldr	r3, [pc, #344]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4952      	ldr	r1, [pc, #328]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d6:	e03a      	b.n	800214e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d020      	beq.n	8002122 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e0:	4b4f      	ldr	r3, [pc, #316]	; (8002220 <HAL_RCC_OscConfig+0x2b0>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e6:	f7ff fa21 	bl	800152c <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ee:	f7ff fa1d 	bl	800152c <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e19c      	b.n	800243a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002100:	4b46      	ldr	r3, [pc, #280]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210c:	4b43      	ldr	r3, [pc, #268]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4940      	ldr	r1, [pc, #256]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 800211c:	4313      	orrs	r3, r2
 800211e:	600b      	str	r3, [r1, #0]
 8002120:	e015      	b.n	800214e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002122:	4b3f      	ldr	r3, [pc, #252]	; (8002220 <HAL_RCC_OscConfig+0x2b0>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7ff fa00 	bl	800152c <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002130:	f7ff f9fc 	bl	800152c <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e17b      	b.n	800243a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002142:	4b36      	ldr	r3, [pc, #216]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d030      	beq.n	80021bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d016      	beq.n	8002190 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002162:	4b30      	ldr	r3, [pc, #192]	; (8002224 <HAL_RCC_OscConfig+0x2b4>)
 8002164:	2201      	movs	r2, #1
 8002166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002168:	f7ff f9e0 	bl	800152c <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002170:	f7ff f9dc 	bl	800152c <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e15b      	b.n	800243a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002182:	4b26      	ldr	r3, [pc, #152]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 8002184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x200>
 800218e:	e015      	b.n	80021bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002190:	4b24      	ldr	r3, [pc, #144]	; (8002224 <HAL_RCC_OscConfig+0x2b4>)
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002196:	f7ff f9c9 	bl	800152c <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800219e:	f7ff f9c5 	bl	800152c <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e144      	b.n	800243a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b0:	4b1a      	ldr	r3, [pc, #104]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 80021b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1f0      	bne.n	800219e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80a0 	beq.w	800230a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ca:	2300      	movs	r3, #0
 80021cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ce:	4b13      	ldr	r3, [pc, #76]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10f      	bne.n	80021fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	4b0f      	ldr	r3, [pc, #60]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	4a0e      	ldr	r2, [pc, #56]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <HAL_RCC_OscConfig+0x2ac>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f6:	2301      	movs	r3, #1
 80021f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fa:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_RCC_OscConfig+0x2b8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d121      	bne.n	800224a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <HAL_RCC_OscConfig+0x2b8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a07      	ldr	r2, [pc, #28]	; (8002228 <HAL_RCC_OscConfig+0x2b8>)
 800220c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002212:	f7ff f98b 	bl	800152c <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002218:	e011      	b.n	800223e <HAL_RCC_OscConfig+0x2ce>
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800
 8002220:	42470000 	.word	0x42470000
 8002224:	42470e80 	.word	0x42470e80
 8002228:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222c:	f7ff f97e 	bl	800152c <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e0fd      	b.n	800243a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223e:	4b81      	ldr	r3, [pc, #516]	; (8002444 <HAL_RCC_OscConfig+0x4d4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d106      	bne.n	8002260 <HAL_RCC_OscConfig+0x2f0>
 8002252:	4b7d      	ldr	r3, [pc, #500]	; (8002448 <HAL_RCC_OscConfig+0x4d8>)
 8002254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002256:	4a7c      	ldr	r2, [pc, #496]	; (8002448 <HAL_RCC_OscConfig+0x4d8>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6713      	str	r3, [r2, #112]	; 0x70
 800225e:	e01c      	b.n	800229a <HAL_RCC_OscConfig+0x32a>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b05      	cmp	r3, #5
 8002266:	d10c      	bne.n	8002282 <HAL_RCC_OscConfig+0x312>
 8002268:	4b77      	ldr	r3, [pc, #476]	; (8002448 <HAL_RCC_OscConfig+0x4d8>)
 800226a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226c:	4a76      	ldr	r2, [pc, #472]	; (8002448 <HAL_RCC_OscConfig+0x4d8>)
 800226e:	f043 0304 	orr.w	r3, r3, #4
 8002272:	6713      	str	r3, [r2, #112]	; 0x70
 8002274:	4b74      	ldr	r3, [pc, #464]	; (8002448 <HAL_RCC_OscConfig+0x4d8>)
 8002276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002278:	4a73      	ldr	r2, [pc, #460]	; (8002448 <HAL_RCC_OscConfig+0x4d8>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	6713      	str	r3, [r2, #112]	; 0x70
 8002280:	e00b      	b.n	800229a <HAL_RCC_OscConfig+0x32a>
 8002282:	4b71      	ldr	r3, [pc, #452]	; (8002448 <HAL_RCC_OscConfig+0x4d8>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002286:	4a70      	ldr	r2, [pc, #448]	; (8002448 <HAL_RCC_OscConfig+0x4d8>)
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	6713      	str	r3, [r2, #112]	; 0x70
 800228e:	4b6e      	ldr	r3, [pc, #440]	; (8002448 <HAL_RCC_OscConfig+0x4d8>)
 8002290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002292:	4a6d      	ldr	r2, [pc, #436]	; (8002448 <HAL_RCC_OscConfig+0x4d8>)
 8002294:	f023 0304 	bic.w	r3, r3, #4
 8002298:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d015      	beq.n	80022ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a2:	f7ff f943 	bl	800152c <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a8:	e00a      	b.n	80022c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022aa:	f7ff f93f 	bl	800152c <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e0bc      	b.n	800243a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c0:	4b61      	ldr	r3, [pc, #388]	; (8002448 <HAL_RCC_OscConfig+0x4d8>)
 80022c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0ee      	beq.n	80022aa <HAL_RCC_OscConfig+0x33a>
 80022cc:	e014      	b.n	80022f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ce:	f7ff f92d 	bl	800152c <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d4:	e00a      	b.n	80022ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d6:	f7ff f929 	bl	800152c <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e0a6      	b.n	800243a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ec:	4b56      	ldr	r3, [pc, #344]	; (8002448 <HAL_RCC_OscConfig+0x4d8>)
 80022ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1ee      	bne.n	80022d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022f8:	7dfb      	ldrb	r3, [r7, #23]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d105      	bne.n	800230a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022fe:	4b52      	ldr	r3, [pc, #328]	; (8002448 <HAL_RCC_OscConfig+0x4d8>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	4a51      	ldr	r2, [pc, #324]	; (8002448 <HAL_RCC_OscConfig+0x4d8>)
 8002304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002308:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 8092 	beq.w	8002438 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002314:	4b4c      	ldr	r3, [pc, #304]	; (8002448 <HAL_RCC_OscConfig+0x4d8>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b08      	cmp	r3, #8
 800231e:	d05c      	beq.n	80023da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d141      	bne.n	80023ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002328:	4b48      	ldr	r3, [pc, #288]	; (800244c <HAL_RCC_OscConfig+0x4dc>)
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232e:	f7ff f8fd 	bl	800152c <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002336:	f7ff f8f9 	bl	800152c <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e078      	b.n	800243a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002348:	4b3f      	ldr	r3, [pc, #252]	; (8002448 <HAL_RCC_OscConfig+0x4d8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f0      	bne.n	8002336 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69da      	ldr	r2, [r3, #28]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	019b      	lsls	r3, r3, #6
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	085b      	lsrs	r3, r3, #1
 800236c:	3b01      	subs	r3, #1
 800236e:	041b      	lsls	r3, r3, #16
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	061b      	lsls	r3, r3, #24
 8002378:	4933      	ldr	r1, [pc, #204]	; (8002448 <HAL_RCC_OscConfig+0x4d8>)
 800237a:	4313      	orrs	r3, r2
 800237c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800237e:	4b33      	ldr	r3, [pc, #204]	; (800244c <HAL_RCC_OscConfig+0x4dc>)
 8002380:	2201      	movs	r2, #1
 8002382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7ff f8d2 	bl	800152c <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238c:	f7ff f8ce 	bl	800152c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e04d      	b.n	800243a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239e:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <HAL_RCC_OscConfig+0x4d8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x41c>
 80023aa:	e045      	b.n	8002438 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ac:	4b27      	ldr	r3, [pc, #156]	; (800244c <HAL_RCC_OscConfig+0x4dc>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b2:	f7ff f8bb 	bl	800152c <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ba:	f7ff f8b7 	bl	800152c <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e036      	b.n	800243a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023cc:	4b1e      	ldr	r3, [pc, #120]	; (8002448 <HAL_RCC_OscConfig+0x4d8>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f0      	bne.n	80023ba <HAL_RCC_OscConfig+0x44a>
 80023d8:	e02e      	b.n	8002438 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e029      	b.n	800243a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023e6:	4b18      	ldr	r3, [pc, #96]	; (8002448 <HAL_RCC_OscConfig+0x4d8>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d11c      	bne.n	8002434 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d115      	bne.n	8002434 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800240e:	4013      	ands	r3, r2
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002414:	4293      	cmp	r3, r2
 8002416:	d10d      	bne.n	8002434 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002422:	429a      	cmp	r2, r3
 8002424:	d106      	bne.n	8002434 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40007000 	.word	0x40007000
 8002448:	40023800 	.word	0x40023800
 800244c:	42470060 	.word	0x42470060

08002450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0cc      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002464:	4b68      	ldr	r3, [pc, #416]	; (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d90c      	bls.n	800248c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4b65      	ldr	r3, [pc, #404]	; (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	4b63      	ldr	r3, [pc, #396]	; (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0b8      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d020      	beq.n	80024da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a4:	4b59      	ldr	r3, [pc, #356]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	4a58      	ldr	r2, [pc, #352]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024bc:	4b53      	ldr	r3, [pc, #332]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	4a52      	ldr	r2, [pc, #328]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c8:	4b50      	ldr	r3, [pc, #320]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	494d      	ldr	r1, [pc, #308]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d044      	beq.n	8002570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d107      	bne.n	80024fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	4b47      	ldr	r3, [pc, #284]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d119      	bne.n	800252e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e07f      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d003      	beq.n	800250e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800250a:	2b03      	cmp	r3, #3
 800250c:	d107      	bne.n	800251e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250e:	4b3f      	ldr	r3, [pc, #252]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d109      	bne.n	800252e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e06f      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251e:	4b3b      	ldr	r3, [pc, #236]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e067      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800252e:	4b37      	ldr	r3, [pc, #220]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f023 0203 	bic.w	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	4934      	ldr	r1, [pc, #208]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	4313      	orrs	r3, r2
 800253e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002540:	f7fe fff4 	bl	800152c <HAL_GetTick>
 8002544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002546:	e00a      	b.n	800255e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002548:	f7fe fff0 	bl	800152c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	; 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e04f      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255e:	4b2b      	ldr	r3, [pc, #172]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 020c 	and.w	r2, r3, #12
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	429a      	cmp	r2, r3
 800256e:	d1eb      	bne.n	8002548 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002570:	4b25      	ldr	r3, [pc, #148]	; (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d20c      	bcs.n	8002598 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b22      	ldr	r3, [pc, #136]	; (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	4b20      	ldr	r3, [pc, #128]	; (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e032      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a4:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	4916      	ldr	r1, [pc, #88]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025c2:	4b12      	ldr	r3, [pc, #72]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	490e      	ldr	r1, [pc, #56]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025d6:	f000 f821 	bl	800261c <HAL_RCC_GetSysClockFreq>
 80025da:	4601      	mov	r1, r0
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	5cd3      	ldrb	r3, [r2, r3]
 80025ea:	fa21 f303 	lsr.w	r3, r1, r3
 80025ee:	4a09      	ldr	r2, [pc, #36]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80025f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_RCC_ClockConfig+0x1c8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe ff54 	bl	80014a4 <HAL_InitTick>

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40023c00 	.word	0x40023c00
 800260c:	40023800 	.word	0x40023800
 8002610:	08006c48 	.word	0x08006c48
 8002614:	20000000 	.word	0x20000000
 8002618:	20000004 	.word	0x20000004

0800261c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800261c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	2300      	movs	r3, #0
 800262c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002632:	4b63      	ldr	r3, [pc, #396]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b04      	cmp	r3, #4
 800263c:	d007      	beq.n	800264e <HAL_RCC_GetSysClockFreq+0x32>
 800263e:	2b08      	cmp	r3, #8
 8002640:	d008      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x38>
 8002642:	2b00      	cmp	r3, #0
 8002644:	f040 80b4 	bne.w	80027b0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002648:	4b5e      	ldr	r3, [pc, #376]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800264a:	60bb      	str	r3, [r7, #8]
       break;
 800264c:	e0b3      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800264e:	4b5e      	ldr	r3, [pc, #376]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002650:	60bb      	str	r3, [r7, #8]
      break;
 8002652:	e0b0      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002654:	4b5a      	ldr	r3, [pc, #360]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800265c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800265e:	4b58      	ldr	r3, [pc, #352]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d04a      	beq.n	8002700 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800266a:	4b55      	ldr	r3, [pc, #340]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	099b      	lsrs	r3, r3, #6
 8002670:	f04f 0400 	mov.w	r4, #0
 8002674:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	ea03 0501 	and.w	r5, r3, r1
 8002680:	ea04 0602 	and.w	r6, r4, r2
 8002684:	4629      	mov	r1, r5
 8002686:	4632      	mov	r2, r6
 8002688:	f04f 0300 	mov.w	r3, #0
 800268c:	f04f 0400 	mov.w	r4, #0
 8002690:	0154      	lsls	r4, r2, #5
 8002692:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002696:	014b      	lsls	r3, r1, #5
 8002698:	4619      	mov	r1, r3
 800269a:	4622      	mov	r2, r4
 800269c:	1b49      	subs	r1, r1, r5
 800269e:	eb62 0206 	sbc.w	r2, r2, r6
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	f04f 0400 	mov.w	r4, #0
 80026aa:	0194      	lsls	r4, r2, #6
 80026ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026b0:	018b      	lsls	r3, r1, #6
 80026b2:	1a5b      	subs	r3, r3, r1
 80026b4:	eb64 0402 	sbc.w	r4, r4, r2
 80026b8:	f04f 0100 	mov.w	r1, #0
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	00e2      	lsls	r2, r4, #3
 80026c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026c6:	00d9      	lsls	r1, r3, #3
 80026c8:	460b      	mov	r3, r1
 80026ca:	4614      	mov	r4, r2
 80026cc:	195b      	adds	r3, r3, r5
 80026ce:	eb44 0406 	adc.w	r4, r4, r6
 80026d2:	f04f 0100 	mov.w	r1, #0
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	0262      	lsls	r2, r4, #9
 80026dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80026e0:	0259      	lsls	r1, r3, #9
 80026e2:	460b      	mov	r3, r1
 80026e4:	4614      	mov	r4, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	4621      	mov	r1, r4
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f04f 0400 	mov.w	r4, #0
 80026f0:	461a      	mov	r2, r3
 80026f2:	4623      	mov	r3, r4
 80026f4:	f7fd fdc4 	bl	8000280 <__aeabi_uldivmod>
 80026f8:	4603      	mov	r3, r0
 80026fa:	460c      	mov	r4, r1
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	e049      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002700:	4b2f      	ldr	r3, [pc, #188]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	099b      	lsrs	r3, r3, #6
 8002706:	f04f 0400 	mov.w	r4, #0
 800270a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	ea03 0501 	and.w	r5, r3, r1
 8002716:	ea04 0602 	and.w	r6, r4, r2
 800271a:	4629      	mov	r1, r5
 800271c:	4632      	mov	r2, r6
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	f04f 0400 	mov.w	r4, #0
 8002726:	0154      	lsls	r4, r2, #5
 8002728:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800272c:	014b      	lsls	r3, r1, #5
 800272e:	4619      	mov	r1, r3
 8002730:	4622      	mov	r2, r4
 8002732:	1b49      	subs	r1, r1, r5
 8002734:	eb62 0206 	sbc.w	r2, r2, r6
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	f04f 0400 	mov.w	r4, #0
 8002740:	0194      	lsls	r4, r2, #6
 8002742:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002746:	018b      	lsls	r3, r1, #6
 8002748:	1a5b      	subs	r3, r3, r1
 800274a:	eb64 0402 	sbc.w	r4, r4, r2
 800274e:	f04f 0100 	mov.w	r1, #0
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	00e2      	lsls	r2, r4, #3
 8002758:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800275c:	00d9      	lsls	r1, r3, #3
 800275e:	460b      	mov	r3, r1
 8002760:	4614      	mov	r4, r2
 8002762:	195b      	adds	r3, r3, r5
 8002764:	eb44 0406 	adc.w	r4, r4, r6
 8002768:	f04f 0100 	mov.w	r1, #0
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	02a2      	lsls	r2, r4, #10
 8002772:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002776:	0299      	lsls	r1, r3, #10
 8002778:	460b      	mov	r3, r1
 800277a:	4614      	mov	r4, r2
 800277c:	4618      	mov	r0, r3
 800277e:	4621      	mov	r1, r4
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f04f 0400 	mov.w	r4, #0
 8002786:	461a      	mov	r2, r3
 8002788:	4623      	mov	r3, r4
 800278a:	f7fd fd79 	bl	8000280 <__aeabi_uldivmod>
 800278e:	4603      	mov	r3, r0
 8002790:	460c      	mov	r4, r1
 8002792:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002794:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	0c1b      	lsrs	r3, r3, #16
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	3301      	adds	r3, #1
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ac:	60bb      	str	r3, [r7, #8]
      break;
 80027ae:	e002      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027b0:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80027b2:	60bb      	str	r3, [r7, #8]
      break;
 80027b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027b6:	68bb      	ldr	r3, [r7, #8]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027c0:	40023800 	.word	0x40023800
 80027c4:	00f42400 	.word	0x00f42400
 80027c8:	007a1200 	.word	0x007a1200

080027cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d0:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027d2:	681b      	ldr	r3, [r3, #0]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	20000000 	.word	0x20000000

080027e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027e8:	f7ff fff0 	bl	80027cc <HAL_RCC_GetHCLKFreq>
 80027ec:	4601      	mov	r1, r0
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	0a9b      	lsrs	r3, r3, #10
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	4a03      	ldr	r2, [pc, #12]	; (8002808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027fa:	5cd3      	ldrb	r3, [r2, r3]
 80027fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002800:	4618      	mov	r0, r3
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40023800 	.word	0x40023800
 8002808:	08006c58 	.word	0x08006c58

0800280c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002810:	f7ff ffdc 	bl	80027cc <HAL_RCC_GetHCLKFreq>
 8002814:	4601      	mov	r1, r0
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	0b5b      	lsrs	r3, r3, #13
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4a03      	ldr	r2, [pc, #12]	; (8002830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002822:	5cd3      	ldrb	r3, [r2, r3]
 8002824:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40023800 	.word	0x40023800
 8002830:	08006c58 	.word	0x08006c58

08002834 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e056      	b.n	80028f4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d106      	bne.n	8002866 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7fe fbd5 	bl	8001010 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2202      	movs	r2, #2
 800286a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800287c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	431a      	orrs	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	ea42 0103 	orr.w	r1, r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	0c1b      	lsrs	r3, r3, #16
 80028c4:	f003 0104 	and.w	r1, r3, #4
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	69da      	ldr	r2, [r3, #28]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	4613      	mov	r3, r2
 800290a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_SPI_Transmit+0x22>
 800291a:	2302      	movs	r3, #2
 800291c:	e11e      	b.n	8002b5c <HAL_SPI_Transmit+0x260>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002926:	f7fe fe01 	bl	800152c <HAL_GetTick>
 800292a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800292c:	88fb      	ldrh	r3, [r7, #6]
 800292e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b01      	cmp	r3, #1
 800293a:	d002      	beq.n	8002942 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800293c:	2302      	movs	r3, #2
 800293e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002940:	e103      	b.n	8002b4a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <HAL_SPI_Transmit+0x52>
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d102      	bne.n	8002954 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002952:	e0fa      	b.n	8002b4a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2203      	movs	r2, #3
 8002958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	88fa      	ldrh	r2, [r7, #6]
 800296c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	88fa      	ldrh	r2, [r7, #6]
 8002972:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800299a:	d107      	bne.n	80029ac <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b6:	2b40      	cmp	r3, #64	; 0x40
 80029b8:	d007      	beq.n	80029ca <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029d2:	d14b      	bne.n	8002a6c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <HAL_SPI_Transmit+0xe6>
 80029dc:	8afb      	ldrh	r3, [r7, #22]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d13e      	bne.n	8002a60 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	881a      	ldrh	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	1c9a      	adds	r2, r3, #2
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a06:	e02b      	b.n	8002a60 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d112      	bne.n	8002a3c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	881a      	ldrh	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	1c9a      	adds	r2, r3, #2
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a3a:	e011      	b.n	8002a60 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a3c:	f7fe fd76 	bl	800152c <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d803      	bhi.n	8002a54 <HAL_SPI_Transmit+0x158>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a52:	d102      	bne.n	8002a5a <HAL_SPI_Transmit+0x15e>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d102      	bne.n	8002a60 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a5e:	e074      	b.n	8002b4a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1ce      	bne.n	8002a08 <HAL_SPI_Transmit+0x10c>
 8002a6a:	e04c      	b.n	8002b06 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <HAL_SPI_Transmit+0x17e>
 8002a74:	8afb      	ldrh	r3, [r7, #22]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d140      	bne.n	8002afc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	330c      	adds	r3, #12
 8002a84:	7812      	ldrb	r2, [r2, #0]
 8002a86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002aa0:	e02c      	b.n	8002afc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d113      	bne.n	8002ad8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	330c      	adds	r3, #12
 8002aba:	7812      	ldrb	r2, [r2, #0]
 8002abc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ad6:	e011      	b.n	8002afc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ad8:	f7fe fd28 	bl	800152c <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d803      	bhi.n	8002af0 <HAL_SPI_Transmit+0x1f4>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aee:	d102      	bne.n	8002af6 <HAL_SPI_Transmit+0x1fa>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d102      	bne.n	8002afc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002afa:	e026      	b.n	8002b4a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1cd      	bne.n	8002aa2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	6839      	ldr	r1, [r7, #0]
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 fba4 	bl	8003258 <SPI_EndRxTxTransaction>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10a      	bne.n	8002b3a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	77fb      	strb	r3, [r7, #31]
 8002b46:	e000      	b.n	8002b4a <HAL_SPI_Transmit+0x24e>
  }

error:
 8002b48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	4613      	mov	r3, r2
 8002b72:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b80:	d112      	bne.n	8002ba8 <HAL_SPI_Receive+0x44>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10e      	bne.n	8002ba8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b92:	88fa      	ldrh	r2, [r7, #6]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 f8e9 	bl	8002d76 <HAL_SPI_TransmitReceive>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	e0e2      	b.n	8002d6e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_SPI_Receive+0x52>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e0db      	b.n	8002d6e <HAL_SPI_Receive+0x20a>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bbe:	f7fe fcb5 	bl	800152c <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d002      	beq.n	8002bd6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002bd4:	e0c2      	b.n	8002d5c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_SPI_Receive+0x7e>
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d102      	bne.n	8002be8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002be6:	e0b9      	b.n	8002d5c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2204      	movs	r2, #4
 8002bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	88fa      	ldrh	r2, [r7, #6]
 8002c00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	88fa      	ldrh	r2, [r7, #6]
 8002c06:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c2e:	d107      	bne.n	8002c40 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c3e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4a:	2b40      	cmp	r3, #64	; 0x40
 8002c4c:	d007      	beq.n	8002c5e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c5c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d162      	bne.n	8002d2c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c66:	e02e      	b.n	8002cc6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d115      	bne.n	8002ca2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f103 020c 	add.w	r2, r3, #12
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c82:	7812      	ldrb	r2, [r2, #0]
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ca0:	e011      	b.n	8002cc6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ca2:	f7fe fc43 	bl	800152c <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d803      	bhi.n	8002cba <HAL_SPI_Receive+0x156>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb8:	d102      	bne.n	8002cc0 <HAL_SPI_Receive+0x15c>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d102      	bne.n	8002cc6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002cc4:	e04a      	b.n	8002d5c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1cb      	bne.n	8002c68 <HAL_SPI_Receive+0x104>
 8002cd0:	e031      	b.n	8002d36 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d113      	bne.n	8002d08 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	b292      	uxth	r2, r2
 8002cec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf2:	1c9a      	adds	r2, r3, #2
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d06:	e011      	b.n	8002d2c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d08:	f7fe fc10 	bl	800152c <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d803      	bhi.n	8002d20 <HAL_SPI_Receive+0x1bc>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1e:	d102      	bne.n	8002d26 <HAL_SPI_Receive+0x1c2>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d102      	bne.n	8002d2c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d2a:	e017      	b.n	8002d5c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1cd      	bne.n	8002cd2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	6839      	ldr	r1, [r7, #0]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 fa27 	bl	800318e <SPI_EndRxTransaction>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	75fb      	strb	r3, [r7, #23]
 8002d58:	e000      	b.n	8002d5c <HAL_SPI_Receive+0x1f8>
  }

error :
 8002d5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b08c      	sub	sp, #48	; 0x30
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d84:	2301      	movs	r3, #1
 8002d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_SPI_TransmitReceive+0x26>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e18a      	b.n	80030b2 <HAL_SPI_TransmitReceive+0x33c>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002da4:	f7fe fbc2 	bl	800152c <HAL_GetTick>
 8002da8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002dba:	887b      	ldrh	r3, [r7, #2]
 8002dbc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002dbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d00f      	beq.n	8002de6 <HAL_SPI_TransmitReceive+0x70>
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dcc:	d107      	bne.n	8002dde <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d103      	bne.n	8002dde <HAL_SPI_TransmitReceive+0x68>
 8002dd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d003      	beq.n	8002de6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002dde:	2302      	movs	r3, #2
 8002de0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002de4:	e15b      	b.n	800309e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_SPI_TransmitReceive+0x82>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <HAL_SPI_TransmitReceive+0x82>
 8002df2:	887b      	ldrh	r3, [r7, #2]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d103      	bne.n	8002e00 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002dfe:	e14e      	b.n	800309e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d003      	beq.n	8002e14 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2205      	movs	r2, #5
 8002e10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	887a      	ldrh	r2, [r7, #2]
 8002e24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	887a      	ldrh	r2, [r7, #2]
 8002e2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	887a      	ldrh	r2, [r7, #2]
 8002e36:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	887a      	ldrh	r2, [r7, #2]
 8002e3c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e54:	2b40      	cmp	r3, #64	; 0x40
 8002e56:	d007      	beq.n	8002e68 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e70:	d178      	bne.n	8002f64 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <HAL_SPI_TransmitReceive+0x10a>
 8002e7a:	8b7b      	ldrh	r3, [r7, #26]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d166      	bne.n	8002f4e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	881a      	ldrh	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	1c9a      	adds	r2, r3, #2
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ea4:	e053      	b.n	8002f4e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d11b      	bne.n	8002eec <HAL_SPI_TransmitReceive+0x176>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d016      	beq.n	8002eec <HAL_SPI_TransmitReceive+0x176>
 8002ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d113      	bne.n	8002eec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	881a      	ldrh	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	1c9a      	adds	r2, r3, #2
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d119      	bne.n	8002f2e <HAL_SPI_TransmitReceive+0x1b8>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d014      	beq.n	8002f2e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0e:	b292      	uxth	r2, r2
 8002f10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	1c9a      	adds	r2, r3, #2
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f2e:	f7fe fafd 	bl	800152c <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d807      	bhi.n	8002f4e <HAL_SPI_TransmitReceive+0x1d8>
 8002f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d003      	beq.n	8002f4e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f4c:	e0a7      	b.n	800309e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1a6      	bne.n	8002ea6 <HAL_SPI_TransmitReceive+0x130>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1a1      	bne.n	8002ea6 <HAL_SPI_TransmitReceive+0x130>
 8002f62:	e07c      	b.n	800305e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <HAL_SPI_TransmitReceive+0x1fc>
 8002f6c:	8b7b      	ldrh	r3, [r7, #26]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d16b      	bne.n	800304a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	330c      	adds	r3, #12
 8002f7c:	7812      	ldrb	r2, [r2, #0]
 8002f7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f98:	e057      	b.n	800304a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d11c      	bne.n	8002fe2 <HAL_SPI_TransmitReceive+0x26c>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d017      	beq.n	8002fe2 <HAL_SPI_TransmitReceive+0x26c>
 8002fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d114      	bne.n	8002fe2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	330c      	adds	r3, #12
 8002fc2:	7812      	ldrb	r2, [r2, #0]
 8002fc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	1c5a      	adds	r2, r3, #1
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d119      	bne.n	8003024 <HAL_SPI_TransmitReceive+0x2ae>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d014      	beq.n	8003024 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003020:	2301      	movs	r3, #1
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003024:	f7fe fa82 	bl	800152c <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003030:	429a      	cmp	r2, r3
 8003032:	d803      	bhi.n	800303c <HAL_SPI_TransmitReceive+0x2c6>
 8003034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303a:	d102      	bne.n	8003042 <HAL_SPI_TransmitReceive+0x2cc>
 800303c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303e:	2b00      	cmp	r3, #0
 8003040:	d103      	bne.n	800304a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003048:	e029      	b.n	800309e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1a2      	bne.n	8002f9a <HAL_SPI_TransmitReceive+0x224>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d19d      	bne.n	8002f9a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800305e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003060:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f8f8 	bl	8003258 <SPI_EndRxTxTransaction>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d006      	beq.n	800307c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800307a:	e010      	b.n	800309e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10b      	bne.n	800309c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	e000      	b.n	800309e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800309c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3730      	adds	r7, #48	; 0x30
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b084      	sub	sp, #16
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	603b      	str	r3, [r7, #0]
 80030c6:	4613      	mov	r3, r2
 80030c8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030ca:	e04c      	b.n	8003166 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d2:	d048      	beq.n	8003166 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80030d4:	f7fe fa2a 	bl	800152c <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d902      	bls.n	80030ea <SPI_WaitFlagStateUntilTimeout+0x30>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d13d      	bne.n	8003166 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003102:	d111      	bne.n	8003128 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800310c:	d004      	beq.n	8003118 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003116:	d107      	bne.n	8003128 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003126:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003130:	d10f      	bne.n	8003152 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003150:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e00f      	b.n	8003186 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	4013      	ands	r3, r2
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	429a      	cmp	r2, r3
 8003174:	bf0c      	ite	eq
 8003176:	2301      	moveq	r3, #1
 8003178:	2300      	movne	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	429a      	cmp	r2, r3
 8003182:	d1a3      	bne.n	80030cc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b086      	sub	sp, #24
 8003192:	af02      	add	r7, sp, #8
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031a2:	d111      	bne.n	80031c8 <SPI_EndRxTransaction+0x3a>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ac:	d004      	beq.n	80031b8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b6:	d107      	bne.n	80031c8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031c6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031d0:	d12a      	bne.n	8003228 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031da:	d012      	beq.n	8003202 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2200      	movs	r2, #0
 80031e4:	2180      	movs	r1, #128	; 0x80
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f7ff ff67 	bl	80030ba <SPI_WaitFlagStateUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d02d      	beq.n	800324e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f6:	f043 0220 	orr.w	r2, r3, #32
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e026      	b.n	8003250 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2200      	movs	r2, #0
 800320a:	2101      	movs	r1, #1
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f7ff ff54 	bl	80030ba <SPI_WaitFlagStateUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d01a      	beq.n	800324e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	f043 0220 	orr.w	r2, r3, #32
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e013      	b.n	8003250 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2200      	movs	r2, #0
 8003230:	2101      	movs	r1, #1
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f7ff ff41 	bl	80030ba <SPI_WaitFlagStateUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003242:	f043 0220 	orr.w	r2, r3, #32
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e000      	b.n	8003250 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af02      	add	r7, sp, #8
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003264:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <SPI_EndRxTxTransaction+0x7c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a1b      	ldr	r2, [pc, #108]	; (80032d8 <SPI_EndRxTxTransaction+0x80>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	0d5b      	lsrs	r3, r3, #21
 8003270:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003274:	fb02 f303 	mul.w	r3, r2, r3
 8003278:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003282:	d112      	bne.n	80032aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2200      	movs	r2, #0
 800328c:	2180      	movs	r1, #128	; 0x80
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f7ff ff13 	bl	80030ba <SPI_WaitFlagStateUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d016      	beq.n	80032c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	f043 0220 	orr.w	r2, r3, #32
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e00f      	b.n	80032ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c0:	2b80      	cmp	r3, #128	; 0x80
 80032c2:	d0f2      	beq.n	80032aa <SPI_EndRxTxTransaction+0x52>
 80032c4:	e000      	b.n	80032c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80032c6:	bf00      	nop
  }

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20000000 	.word	0x20000000
 80032d8:	165e9f81 	.word	0x165e9f81

080032dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e03f      	b.n	800336e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d106      	bne.n	8003308 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7fd ff76 	bl	80011f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2224      	movs	r2, #36	; 0x24
 800330c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800331e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f9b1 	bl	8003688 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003334:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695a      	ldr	r2, [r3, #20]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003344:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003354:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b088      	sub	sp, #32
 800337a:	af02      	add	r7, sp, #8
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	603b      	str	r3, [r7, #0]
 8003382:	4613      	mov	r3, r2
 8003384:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b20      	cmp	r3, #32
 8003394:	f040 8083 	bne.w	800349e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <HAL_UART_Transmit+0x2e>
 800339e:	88fb      	ldrh	r3, [r7, #6]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e07b      	b.n	80034a0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_UART_Transmit+0x40>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e074      	b.n	80034a0 <HAL_UART_Transmit+0x12a>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2221      	movs	r2, #33	; 0x21
 80033c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80033cc:	f7fe f8ae 	bl	800152c <HAL_GetTick>
 80033d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	88fa      	ldrh	r2, [r7, #6]
 80033d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	88fa      	ldrh	r2, [r7, #6]
 80033dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80033e6:	e042      	b.n	800346e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033fe:	d122      	bne.n	8003446 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2200      	movs	r2, #0
 8003408:	2180      	movs	r1, #128	; 0x80
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 f8f2 	bl	80035f4 <UART_WaitOnFlagUntilTimeout>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e042      	b.n	80034a0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800342c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d103      	bne.n	800343e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	3302      	adds	r3, #2
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	e017      	b.n	800346e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	3301      	adds	r3, #1
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	e013      	b.n	800346e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2200      	movs	r2, #0
 800344e:	2180      	movs	r1, #128	; 0x80
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f8cf 	bl	80035f4 <UART_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e01f      	b.n	80034a0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	60ba      	str	r2, [r7, #8]
 8003466:	781a      	ldrb	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1b7      	bne.n	80033e8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2200      	movs	r2, #0
 8003480:	2140      	movs	r1, #64	; 0x40
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f8b6 	bl	80035f4 <UART_WaitOnFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e006      	b.n	80034a0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	e000      	b.n	80034a0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800349e:	2302      	movs	r3, #2
  }
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	f040 8090 	bne.w	80035ea <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HAL_UART_Receive+0x2e>
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e088      	b.n	80035ec <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_UART_Receive+0x40>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e081      	b.n	80035ec <HAL_UART_Receive+0x144>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2222      	movs	r2, #34	; 0x22
 80034fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034fe:	f7fe f815 	bl	800152c <HAL_GetTick>
 8003502:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	88fa      	ldrh	r2, [r7, #6]
 8003508:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	88fa      	ldrh	r2, [r7, #6]
 800350e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003518:	e05c      	b.n	80035d4 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003530:	d12b      	bne.n	800358a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2200      	movs	r2, #0
 800353a:	2120      	movs	r1, #32
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f859 	bl	80035f4 <UART_WaitOnFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e04f      	b.n	80035ec <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10c      	bne.n	8003572 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	b29b      	uxth	r3, r3
 8003560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003564:	b29a      	uxth	r2, r3
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	3302      	adds	r3, #2
 800356e:	60bb      	str	r3, [r7, #8]
 8003570:	e030      	b.n	80035d4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	b29b      	uxth	r3, r3
 800357a:	b2db      	uxtb	r3, r3
 800357c:	b29a      	uxth	r2, r3
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	3301      	adds	r3, #1
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	e024      	b.n	80035d4 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2200      	movs	r2, #0
 8003592:	2120      	movs	r1, #32
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 f82d 	bl	80035f4 <UART_WaitOnFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e023      	b.n	80035ec <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d108      	bne.n	80035be <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6859      	ldr	r1, [r3, #4]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	60ba      	str	r2, [r7, #8]
 80035b8:	b2ca      	uxtb	r2, r1
 80035ba:	701a      	strb	r2, [r3, #0]
 80035bc:	e00a      	b.n	80035d4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	1c59      	adds	r1, r3, #1
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d19d      	bne.n	800351a <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	e000      	b.n	80035ec <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80035ea:	2302      	movs	r3, #2
  }
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003604:	e02c      	b.n	8003660 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d028      	beq.n	8003660 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d007      	beq.n	8003624 <UART_WaitOnFlagUntilTimeout+0x30>
 8003614:	f7fd ff8a 	bl	800152c <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	429a      	cmp	r2, r3
 8003622:	d21d      	bcs.n	8003660 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003632:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695a      	ldr	r2, [r3, #20]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0201 	bic.w	r2, r2, #1
 8003642:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e00f      	b.n	8003680 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	4013      	ands	r3, r2
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	429a      	cmp	r2, r3
 800366e:	bf0c      	ite	eq
 8003670:	2301      	moveq	r3, #1
 8003672:	2300      	movne	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	461a      	mov	r2, r3
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	429a      	cmp	r2, r3
 800367c:	d0c3      	beq.n	8003606 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80036ca:	f023 030c 	bic.w	r3, r3, #12
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	68f9      	ldr	r1, [r7, #12]
 80036d4:	430b      	orrs	r3, r1
 80036d6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036f6:	f040 818b 	bne.w	8003a10 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4ac1      	ldr	r2, [pc, #772]	; (8003a04 <UART_SetConfig+0x37c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d005      	beq.n	8003710 <UART_SetConfig+0x88>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4abf      	ldr	r2, [pc, #764]	; (8003a08 <UART_SetConfig+0x380>)
 800370a:	4293      	cmp	r3, r2
 800370c:	f040 80bd 	bne.w	800388a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003710:	f7ff f87c 	bl	800280c <HAL_RCC_GetPCLK2Freq>
 8003714:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	461d      	mov	r5, r3
 800371a:	f04f 0600 	mov.w	r6, #0
 800371e:	46a8      	mov	r8, r5
 8003720:	46b1      	mov	r9, r6
 8003722:	eb18 0308 	adds.w	r3, r8, r8
 8003726:	eb49 0409 	adc.w	r4, r9, r9
 800372a:	4698      	mov	r8, r3
 800372c:	46a1      	mov	r9, r4
 800372e:	eb18 0805 	adds.w	r8, r8, r5
 8003732:	eb49 0906 	adc.w	r9, r9, r6
 8003736:	f04f 0100 	mov.w	r1, #0
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003742:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003746:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800374a:	4688      	mov	r8, r1
 800374c:	4691      	mov	r9, r2
 800374e:	eb18 0005 	adds.w	r0, r8, r5
 8003752:	eb49 0106 	adc.w	r1, r9, r6
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	461d      	mov	r5, r3
 800375c:	f04f 0600 	mov.w	r6, #0
 8003760:	196b      	adds	r3, r5, r5
 8003762:	eb46 0406 	adc.w	r4, r6, r6
 8003766:	461a      	mov	r2, r3
 8003768:	4623      	mov	r3, r4
 800376a:	f7fc fd89 	bl	8000280 <__aeabi_uldivmod>
 800376e:	4603      	mov	r3, r0
 8003770:	460c      	mov	r4, r1
 8003772:	461a      	mov	r2, r3
 8003774:	4ba5      	ldr	r3, [pc, #660]	; (8003a0c <UART_SetConfig+0x384>)
 8003776:	fba3 2302 	umull	r2, r3, r3, r2
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	461d      	mov	r5, r3
 8003784:	f04f 0600 	mov.w	r6, #0
 8003788:	46a9      	mov	r9, r5
 800378a:	46b2      	mov	sl, r6
 800378c:	eb19 0309 	adds.w	r3, r9, r9
 8003790:	eb4a 040a 	adc.w	r4, sl, sl
 8003794:	4699      	mov	r9, r3
 8003796:	46a2      	mov	sl, r4
 8003798:	eb19 0905 	adds.w	r9, r9, r5
 800379c:	eb4a 0a06 	adc.w	sl, sl, r6
 80037a0:	f04f 0100 	mov.w	r1, #0
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037b4:	4689      	mov	r9, r1
 80037b6:	4692      	mov	sl, r2
 80037b8:	eb19 0005 	adds.w	r0, r9, r5
 80037bc:	eb4a 0106 	adc.w	r1, sl, r6
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	461d      	mov	r5, r3
 80037c6:	f04f 0600 	mov.w	r6, #0
 80037ca:	196b      	adds	r3, r5, r5
 80037cc:	eb46 0406 	adc.w	r4, r6, r6
 80037d0:	461a      	mov	r2, r3
 80037d2:	4623      	mov	r3, r4
 80037d4:	f7fc fd54 	bl	8000280 <__aeabi_uldivmod>
 80037d8:	4603      	mov	r3, r0
 80037da:	460c      	mov	r4, r1
 80037dc:	461a      	mov	r2, r3
 80037de:	4b8b      	ldr	r3, [pc, #556]	; (8003a0c <UART_SetConfig+0x384>)
 80037e0:	fba3 1302 	umull	r1, r3, r3, r2
 80037e4:	095b      	lsrs	r3, r3, #5
 80037e6:	2164      	movs	r1, #100	; 0x64
 80037e8:	fb01 f303 	mul.w	r3, r1, r3
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	3332      	adds	r3, #50	; 0x32
 80037f2:	4a86      	ldr	r2, [pc, #536]	; (8003a0c <UART_SetConfig+0x384>)
 80037f4:	fba2 2303 	umull	r2, r3, r2, r3
 80037f8:	095b      	lsrs	r3, r3, #5
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003800:	4498      	add	r8, r3
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	461d      	mov	r5, r3
 8003806:	f04f 0600 	mov.w	r6, #0
 800380a:	46a9      	mov	r9, r5
 800380c:	46b2      	mov	sl, r6
 800380e:	eb19 0309 	adds.w	r3, r9, r9
 8003812:	eb4a 040a 	adc.w	r4, sl, sl
 8003816:	4699      	mov	r9, r3
 8003818:	46a2      	mov	sl, r4
 800381a:	eb19 0905 	adds.w	r9, r9, r5
 800381e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003822:	f04f 0100 	mov.w	r1, #0
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800382e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003832:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003836:	4689      	mov	r9, r1
 8003838:	4692      	mov	sl, r2
 800383a:	eb19 0005 	adds.w	r0, r9, r5
 800383e:	eb4a 0106 	adc.w	r1, sl, r6
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	461d      	mov	r5, r3
 8003848:	f04f 0600 	mov.w	r6, #0
 800384c:	196b      	adds	r3, r5, r5
 800384e:	eb46 0406 	adc.w	r4, r6, r6
 8003852:	461a      	mov	r2, r3
 8003854:	4623      	mov	r3, r4
 8003856:	f7fc fd13 	bl	8000280 <__aeabi_uldivmod>
 800385a:	4603      	mov	r3, r0
 800385c:	460c      	mov	r4, r1
 800385e:	461a      	mov	r2, r3
 8003860:	4b6a      	ldr	r3, [pc, #424]	; (8003a0c <UART_SetConfig+0x384>)
 8003862:	fba3 1302 	umull	r1, r3, r3, r2
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	2164      	movs	r1, #100	; 0x64
 800386a:	fb01 f303 	mul.w	r3, r1, r3
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	3332      	adds	r3, #50	; 0x32
 8003874:	4a65      	ldr	r2, [pc, #404]	; (8003a0c <UART_SetConfig+0x384>)
 8003876:	fba2 2303 	umull	r2, r3, r2, r3
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	f003 0207 	and.w	r2, r3, #7
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4442      	add	r2, r8
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	e26f      	b.n	8003d6a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800388a:	f7fe ffab 	bl	80027e4 <HAL_RCC_GetPCLK1Freq>
 800388e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	461d      	mov	r5, r3
 8003894:	f04f 0600 	mov.w	r6, #0
 8003898:	46a8      	mov	r8, r5
 800389a:	46b1      	mov	r9, r6
 800389c:	eb18 0308 	adds.w	r3, r8, r8
 80038a0:	eb49 0409 	adc.w	r4, r9, r9
 80038a4:	4698      	mov	r8, r3
 80038a6:	46a1      	mov	r9, r4
 80038a8:	eb18 0805 	adds.w	r8, r8, r5
 80038ac:	eb49 0906 	adc.w	r9, r9, r6
 80038b0:	f04f 0100 	mov.w	r1, #0
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80038bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80038c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80038c4:	4688      	mov	r8, r1
 80038c6:	4691      	mov	r9, r2
 80038c8:	eb18 0005 	adds.w	r0, r8, r5
 80038cc:	eb49 0106 	adc.w	r1, r9, r6
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	461d      	mov	r5, r3
 80038d6:	f04f 0600 	mov.w	r6, #0
 80038da:	196b      	adds	r3, r5, r5
 80038dc:	eb46 0406 	adc.w	r4, r6, r6
 80038e0:	461a      	mov	r2, r3
 80038e2:	4623      	mov	r3, r4
 80038e4:	f7fc fccc 	bl	8000280 <__aeabi_uldivmod>
 80038e8:	4603      	mov	r3, r0
 80038ea:	460c      	mov	r4, r1
 80038ec:	461a      	mov	r2, r3
 80038ee:	4b47      	ldr	r3, [pc, #284]	; (8003a0c <UART_SetConfig+0x384>)
 80038f0:	fba3 2302 	umull	r2, r3, r3, r2
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	461d      	mov	r5, r3
 80038fe:	f04f 0600 	mov.w	r6, #0
 8003902:	46a9      	mov	r9, r5
 8003904:	46b2      	mov	sl, r6
 8003906:	eb19 0309 	adds.w	r3, r9, r9
 800390a:	eb4a 040a 	adc.w	r4, sl, sl
 800390e:	4699      	mov	r9, r3
 8003910:	46a2      	mov	sl, r4
 8003912:	eb19 0905 	adds.w	r9, r9, r5
 8003916:	eb4a 0a06 	adc.w	sl, sl, r6
 800391a:	f04f 0100 	mov.w	r1, #0
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003926:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800392a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800392e:	4689      	mov	r9, r1
 8003930:	4692      	mov	sl, r2
 8003932:	eb19 0005 	adds.w	r0, r9, r5
 8003936:	eb4a 0106 	adc.w	r1, sl, r6
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	461d      	mov	r5, r3
 8003940:	f04f 0600 	mov.w	r6, #0
 8003944:	196b      	adds	r3, r5, r5
 8003946:	eb46 0406 	adc.w	r4, r6, r6
 800394a:	461a      	mov	r2, r3
 800394c:	4623      	mov	r3, r4
 800394e:	f7fc fc97 	bl	8000280 <__aeabi_uldivmod>
 8003952:	4603      	mov	r3, r0
 8003954:	460c      	mov	r4, r1
 8003956:	461a      	mov	r2, r3
 8003958:	4b2c      	ldr	r3, [pc, #176]	; (8003a0c <UART_SetConfig+0x384>)
 800395a:	fba3 1302 	umull	r1, r3, r3, r2
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	2164      	movs	r1, #100	; 0x64
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	3332      	adds	r3, #50	; 0x32
 800396c:	4a27      	ldr	r2, [pc, #156]	; (8003a0c <UART_SetConfig+0x384>)
 800396e:	fba2 2303 	umull	r2, r3, r2, r3
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800397a:	4498      	add	r8, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	461d      	mov	r5, r3
 8003980:	f04f 0600 	mov.w	r6, #0
 8003984:	46a9      	mov	r9, r5
 8003986:	46b2      	mov	sl, r6
 8003988:	eb19 0309 	adds.w	r3, r9, r9
 800398c:	eb4a 040a 	adc.w	r4, sl, sl
 8003990:	4699      	mov	r9, r3
 8003992:	46a2      	mov	sl, r4
 8003994:	eb19 0905 	adds.w	r9, r9, r5
 8003998:	eb4a 0a06 	adc.w	sl, sl, r6
 800399c:	f04f 0100 	mov.w	r1, #0
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039b0:	4689      	mov	r9, r1
 80039b2:	4692      	mov	sl, r2
 80039b4:	eb19 0005 	adds.w	r0, r9, r5
 80039b8:	eb4a 0106 	adc.w	r1, sl, r6
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	461d      	mov	r5, r3
 80039c2:	f04f 0600 	mov.w	r6, #0
 80039c6:	196b      	adds	r3, r5, r5
 80039c8:	eb46 0406 	adc.w	r4, r6, r6
 80039cc:	461a      	mov	r2, r3
 80039ce:	4623      	mov	r3, r4
 80039d0:	f7fc fc56 	bl	8000280 <__aeabi_uldivmod>
 80039d4:	4603      	mov	r3, r0
 80039d6:	460c      	mov	r4, r1
 80039d8:	461a      	mov	r2, r3
 80039da:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <UART_SetConfig+0x384>)
 80039dc:	fba3 1302 	umull	r1, r3, r3, r2
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	2164      	movs	r1, #100	; 0x64
 80039e4:	fb01 f303 	mul.w	r3, r1, r3
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	3332      	adds	r3, #50	; 0x32
 80039ee:	4a07      	ldr	r2, [pc, #28]	; (8003a0c <UART_SetConfig+0x384>)
 80039f0:	fba2 2303 	umull	r2, r3, r2, r3
 80039f4:	095b      	lsrs	r3, r3, #5
 80039f6:	f003 0207 	and.w	r2, r3, #7
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4442      	add	r2, r8
 8003a00:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003a02:	e1b2      	b.n	8003d6a <UART_SetConfig+0x6e2>
 8003a04:	40011000 	.word	0x40011000
 8003a08:	40011400 	.word	0x40011400
 8003a0c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4ad7      	ldr	r2, [pc, #860]	; (8003d74 <UART_SetConfig+0x6ec>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d005      	beq.n	8003a26 <UART_SetConfig+0x39e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4ad6      	ldr	r2, [pc, #856]	; (8003d78 <UART_SetConfig+0x6f0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	f040 80d1 	bne.w	8003bc8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a26:	f7fe fef1 	bl	800280c <HAL_RCC_GetPCLK2Freq>
 8003a2a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	469a      	mov	sl, r3
 8003a30:	f04f 0b00 	mov.w	fp, #0
 8003a34:	46d0      	mov	r8, sl
 8003a36:	46d9      	mov	r9, fp
 8003a38:	eb18 0308 	adds.w	r3, r8, r8
 8003a3c:	eb49 0409 	adc.w	r4, r9, r9
 8003a40:	4698      	mov	r8, r3
 8003a42:	46a1      	mov	r9, r4
 8003a44:	eb18 080a 	adds.w	r8, r8, sl
 8003a48:	eb49 090b 	adc.w	r9, r9, fp
 8003a4c:	f04f 0100 	mov.w	r1, #0
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a58:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a5c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a60:	4688      	mov	r8, r1
 8003a62:	4691      	mov	r9, r2
 8003a64:	eb1a 0508 	adds.w	r5, sl, r8
 8003a68:	eb4b 0609 	adc.w	r6, fp, r9
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	4619      	mov	r1, r3
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	f04f 0400 	mov.w	r4, #0
 8003a7e:	0094      	lsls	r4, r2, #2
 8003a80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a84:	008b      	lsls	r3, r1, #2
 8003a86:	461a      	mov	r2, r3
 8003a88:	4623      	mov	r3, r4
 8003a8a:	4628      	mov	r0, r5
 8003a8c:	4631      	mov	r1, r6
 8003a8e:	f7fc fbf7 	bl	8000280 <__aeabi_uldivmod>
 8003a92:	4603      	mov	r3, r0
 8003a94:	460c      	mov	r4, r1
 8003a96:	461a      	mov	r2, r3
 8003a98:	4bb8      	ldr	r3, [pc, #736]	; (8003d7c <UART_SetConfig+0x6f4>)
 8003a9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	469b      	mov	fp, r3
 8003aa8:	f04f 0c00 	mov.w	ip, #0
 8003aac:	46d9      	mov	r9, fp
 8003aae:	46e2      	mov	sl, ip
 8003ab0:	eb19 0309 	adds.w	r3, r9, r9
 8003ab4:	eb4a 040a 	adc.w	r4, sl, sl
 8003ab8:	4699      	mov	r9, r3
 8003aba:	46a2      	mov	sl, r4
 8003abc:	eb19 090b 	adds.w	r9, r9, fp
 8003ac0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ac4:	f04f 0100 	mov.w	r1, #0
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ad0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ad4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ad8:	4689      	mov	r9, r1
 8003ada:	4692      	mov	sl, r2
 8003adc:	eb1b 0509 	adds.w	r5, fp, r9
 8003ae0:	eb4c 060a 	adc.w	r6, ip, sl
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	4619      	mov	r1, r3
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	f04f 0400 	mov.w	r4, #0
 8003af6:	0094      	lsls	r4, r2, #2
 8003af8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003afc:	008b      	lsls	r3, r1, #2
 8003afe:	461a      	mov	r2, r3
 8003b00:	4623      	mov	r3, r4
 8003b02:	4628      	mov	r0, r5
 8003b04:	4631      	mov	r1, r6
 8003b06:	f7fc fbbb 	bl	8000280 <__aeabi_uldivmod>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	460c      	mov	r4, r1
 8003b0e:	461a      	mov	r2, r3
 8003b10:	4b9a      	ldr	r3, [pc, #616]	; (8003d7c <UART_SetConfig+0x6f4>)
 8003b12:	fba3 1302 	umull	r1, r3, r3, r2
 8003b16:	095b      	lsrs	r3, r3, #5
 8003b18:	2164      	movs	r1, #100	; 0x64
 8003b1a:	fb01 f303 	mul.w	r3, r1, r3
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	3332      	adds	r3, #50	; 0x32
 8003b24:	4a95      	ldr	r2, [pc, #596]	; (8003d7c <UART_SetConfig+0x6f4>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b30:	4498      	add	r8, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	469b      	mov	fp, r3
 8003b36:	f04f 0c00 	mov.w	ip, #0
 8003b3a:	46d9      	mov	r9, fp
 8003b3c:	46e2      	mov	sl, ip
 8003b3e:	eb19 0309 	adds.w	r3, r9, r9
 8003b42:	eb4a 040a 	adc.w	r4, sl, sl
 8003b46:	4699      	mov	r9, r3
 8003b48:	46a2      	mov	sl, r4
 8003b4a:	eb19 090b 	adds.w	r9, r9, fp
 8003b4e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b52:	f04f 0100 	mov.w	r1, #0
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b66:	4689      	mov	r9, r1
 8003b68:	4692      	mov	sl, r2
 8003b6a:	eb1b 0509 	adds.w	r5, fp, r9
 8003b6e:	eb4c 060a 	adc.w	r6, ip, sl
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	4619      	mov	r1, r3
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	f04f 0400 	mov.w	r4, #0
 8003b84:	0094      	lsls	r4, r2, #2
 8003b86:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b8a:	008b      	lsls	r3, r1, #2
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4623      	mov	r3, r4
 8003b90:	4628      	mov	r0, r5
 8003b92:	4631      	mov	r1, r6
 8003b94:	f7fc fb74 	bl	8000280 <__aeabi_uldivmod>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	460c      	mov	r4, r1
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4b77      	ldr	r3, [pc, #476]	; (8003d7c <UART_SetConfig+0x6f4>)
 8003ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba4:	095b      	lsrs	r3, r3, #5
 8003ba6:	2164      	movs	r1, #100	; 0x64
 8003ba8:	fb01 f303 	mul.w	r3, r1, r3
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	3332      	adds	r3, #50	; 0x32
 8003bb2:	4a72      	ldr	r2, [pc, #456]	; (8003d7c <UART_SetConfig+0x6f4>)
 8003bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb8:	095b      	lsrs	r3, r3, #5
 8003bba:	f003 020f 	and.w	r2, r3, #15
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4442      	add	r2, r8
 8003bc4:	609a      	str	r2, [r3, #8]
 8003bc6:	e0d0      	b.n	8003d6a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bc8:	f7fe fe0c 	bl	80027e4 <HAL_RCC_GetPCLK1Freq>
 8003bcc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	469a      	mov	sl, r3
 8003bd2:	f04f 0b00 	mov.w	fp, #0
 8003bd6:	46d0      	mov	r8, sl
 8003bd8:	46d9      	mov	r9, fp
 8003bda:	eb18 0308 	adds.w	r3, r8, r8
 8003bde:	eb49 0409 	adc.w	r4, r9, r9
 8003be2:	4698      	mov	r8, r3
 8003be4:	46a1      	mov	r9, r4
 8003be6:	eb18 080a 	adds.w	r8, r8, sl
 8003bea:	eb49 090b 	adc.w	r9, r9, fp
 8003bee:	f04f 0100 	mov.w	r1, #0
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bfa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bfe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c02:	4688      	mov	r8, r1
 8003c04:	4691      	mov	r9, r2
 8003c06:	eb1a 0508 	adds.w	r5, sl, r8
 8003c0a:	eb4b 0609 	adc.w	r6, fp, r9
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	4619      	mov	r1, r3
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	f04f 0400 	mov.w	r4, #0
 8003c20:	0094      	lsls	r4, r2, #2
 8003c22:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c26:	008b      	lsls	r3, r1, #2
 8003c28:	461a      	mov	r2, r3
 8003c2a:	4623      	mov	r3, r4
 8003c2c:	4628      	mov	r0, r5
 8003c2e:	4631      	mov	r1, r6
 8003c30:	f7fc fb26 	bl	8000280 <__aeabi_uldivmod>
 8003c34:	4603      	mov	r3, r0
 8003c36:	460c      	mov	r4, r1
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4b50      	ldr	r3, [pc, #320]	; (8003d7c <UART_SetConfig+0x6f4>)
 8003c3c:	fba3 2302 	umull	r2, r3, r3, r2
 8003c40:	095b      	lsrs	r3, r3, #5
 8003c42:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	469b      	mov	fp, r3
 8003c4a:	f04f 0c00 	mov.w	ip, #0
 8003c4e:	46d9      	mov	r9, fp
 8003c50:	46e2      	mov	sl, ip
 8003c52:	eb19 0309 	adds.w	r3, r9, r9
 8003c56:	eb4a 040a 	adc.w	r4, sl, sl
 8003c5a:	4699      	mov	r9, r3
 8003c5c:	46a2      	mov	sl, r4
 8003c5e:	eb19 090b 	adds.w	r9, r9, fp
 8003c62:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c66:	f04f 0100 	mov.w	r1, #0
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c7a:	4689      	mov	r9, r1
 8003c7c:	4692      	mov	sl, r2
 8003c7e:	eb1b 0509 	adds.w	r5, fp, r9
 8003c82:	eb4c 060a 	adc.w	r6, ip, sl
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	f04f 0400 	mov.w	r4, #0
 8003c98:	0094      	lsls	r4, r2, #2
 8003c9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c9e:	008b      	lsls	r3, r1, #2
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4623      	mov	r3, r4
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	4631      	mov	r1, r6
 8003ca8:	f7fc faea 	bl	8000280 <__aeabi_uldivmod>
 8003cac:	4603      	mov	r3, r0
 8003cae:	460c      	mov	r4, r1
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4b32      	ldr	r3, [pc, #200]	; (8003d7c <UART_SetConfig+0x6f4>)
 8003cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	2164      	movs	r1, #100	; 0x64
 8003cbc:	fb01 f303 	mul.w	r3, r1, r3
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	3332      	adds	r3, #50	; 0x32
 8003cc6:	4a2d      	ldr	r2, [pc, #180]	; (8003d7c <UART_SetConfig+0x6f4>)
 8003cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ccc:	095b      	lsrs	r3, r3, #5
 8003cce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd2:	4498      	add	r8, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	469b      	mov	fp, r3
 8003cd8:	f04f 0c00 	mov.w	ip, #0
 8003cdc:	46d9      	mov	r9, fp
 8003cde:	46e2      	mov	sl, ip
 8003ce0:	eb19 0309 	adds.w	r3, r9, r9
 8003ce4:	eb4a 040a 	adc.w	r4, sl, sl
 8003ce8:	4699      	mov	r9, r3
 8003cea:	46a2      	mov	sl, r4
 8003cec:	eb19 090b 	adds.w	r9, r9, fp
 8003cf0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003cf4:	f04f 0100 	mov.w	r1, #0
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d08:	4689      	mov	r9, r1
 8003d0a:	4692      	mov	sl, r2
 8003d0c:	eb1b 0509 	adds.w	r5, fp, r9
 8003d10:	eb4c 060a 	adc.w	r6, ip, sl
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	f04f 0400 	mov.w	r4, #0
 8003d26:	0094      	lsls	r4, r2, #2
 8003d28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d2c:	008b      	lsls	r3, r1, #2
 8003d2e:	461a      	mov	r2, r3
 8003d30:	4623      	mov	r3, r4
 8003d32:	4628      	mov	r0, r5
 8003d34:	4631      	mov	r1, r6
 8003d36:	f7fc faa3 	bl	8000280 <__aeabi_uldivmod>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	460c      	mov	r4, r1
 8003d3e:	461a      	mov	r2, r3
 8003d40:	4b0e      	ldr	r3, [pc, #56]	; (8003d7c <UART_SetConfig+0x6f4>)
 8003d42:	fba3 1302 	umull	r1, r3, r3, r2
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	2164      	movs	r1, #100	; 0x64
 8003d4a:	fb01 f303 	mul.w	r3, r1, r3
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	3332      	adds	r3, #50	; 0x32
 8003d54:	4a09      	ldr	r2, [pc, #36]	; (8003d7c <UART_SetConfig+0x6f4>)
 8003d56:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	f003 020f 	and.w	r2, r3, #15
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4442      	add	r2, r8
 8003d66:	609a      	str	r2, [r3, #8]
}
 8003d68:	e7ff      	b.n	8003d6a <UART_SetConfig+0x6e2>
 8003d6a:	bf00      	nop
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d74:	40011000 	.word	0x40011000
 8003d78:	40011400 	.word	0x40011400
 8003d7c:	51eb851f 	.word	0x51eb851f

08003d80 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d92:	2b84      	cmp	r3, #132	; 0x84
 8003d94:	d005      	beq.n	8003da2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003d96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	3303      	adds	r3, #3
 8003da0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003da2:	68fb      	ldr	r3, [r7, #12]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003db4:	f000 fb9a 	bl	80044ec <vTaskStartScheduler>
  
  return osOK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003dbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dc0:	b089      	sub	sp, #36	; 0x24
 8003dc2:	af04      	add	r7, sp, #16
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d020      	beq.n	8003e12 <osThreadCreate+0x54>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01c      	beq.n	8003e12 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685c      	ldr	r4, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681d      	ldr	r5, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691e      	ldr	r6, [r3, #16]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff ffc8 	bl	8003d80 <makeFreeRtosPriority>
 8003df0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dfa:	9202      	str	r2, [sp, #8]
 8003dfc:	9301      	str	r3, [sp, #4]
 8003dfe:	9100      	str	r1, [sp, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	4632      	mov	r2, r6
 8003e04:	4629      	mov	r1, r5
 8003e06:	4620      	mov	r0, r4
 8003e08:	f000 f8d9 	bl	8003fbe <xTaskCreateStatic>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	e01c      	b.n	8003e4c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685c      	ldr	r4, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e1e:	b29e      	uxth	r6, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff ffaa 	bl	8003d80 <makeFreeRtosPriority>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	f107 030c 	add.w	r3, r7, #12
 8003e32:	9301      	str	r3, [sp, #4]
 8003e34:	9200      	str	r2, [sp, #0]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	4632      	mov	r2, r6
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	f000 f918 	bl	8004072 <xTaskCreate>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d001      	beq.n	8003e4c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	e000      	b.n	8003e4e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e56 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f103 0208 	add.w	r2, r3, #8
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e6e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f103 0208 	add.w	r2, r3, #8
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f103 0208 	add.w	r2, r3, #8
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	601a      	str	r2, [r3, #0]
}
 8003eec:	bf00      	nop
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0e:	d103      	bne.n	8003f18 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	e00c      	b.n	8003f32 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3308      	adds	r3, #8
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	e002      	b.n	8003f26 <vListInsert+0x2e>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d2f6      	bcs.n	8003f20 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	601a      	str	r2, [r3, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b085      	sub	sp, #20
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6892      	ldr	r2, [r2, #8]
 8003f80:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6852      	ldr	r2, [r2, #4]
 8003f8a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d103      	bne.n	8003f9e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	1e5a      	subs	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b08e      	sub	sp, #56	; 0x38
 8003fc2:	af04      	add	r7, sp, #16
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	607a      	str	r2, [r7, #4]
 8003fca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d109      	bne.n	8003fe6 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	623b      	str	r3, [r7, #32]
 8003fe4:	e7fe      	b.n	8003fe4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d109      	bne.n	8004000 <xTaskCreateStatic+0x42>
 8003fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	e7fe      	b.n	8003ffe <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004000:	2354      	movs	r3, #84	; 0x54
 8004002:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	2b54      	cmp	r3, #84	; 0x54
 8004008:	d009      	beq.n	800401e <xTaskCreateStatic+0x60>
 800400a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	61bb      	str	r3, [r7, #24]
 800401c:	e7fe      	b.n	800401c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800401e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004022:	2b00      	cmp	r3, #0
 8004024:	d01e      	beq.n	8004064 <xTaskCreateStatic+0xa6>
 8004026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004028:	2b00      	cmp	r3, #0
 800402a:	d01b      	beq.n	8004064 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800402c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004034:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	2202      	movs	r2, #2
 800403a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800403e:	2300      	movs	r3, #0
 8004040:	9303      	str	r3, [sp, #12]
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	9302      	str	r3, [sp, #8]
 8004046:	f107 0314 	add.w	r3, r7, #20
 800404a:	9301      	str	r3, [sp, #4]
 800404c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	68b9      	ldr	r1, [r7, #8]
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 f850 	bl	80040fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800405c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800405e:	f000 f8d3 	bl	8004208 <prvAddNewTaskToReadyList>
 8004062:	e001      	b.n	8004068 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004068:	697b      	ldr	r3, [r7, #20]
	}
 800406a:	4618      	mov	r0, r3
 800406c:	3728      	adds	r7, #40	; 0x28
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004072:	b580      	push	{r7, lr}
 8004074:	b08c      	sub	sp, #48	; 0x30
 8004076:	af04      	add	r7, sp, #16
 8004078:	60f8      	str	r0, [r7, #12]
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	603b      	str	r3, [r7, #0]
 800407e:	4613      	mov	r3, r2
 8004080:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004082:	88fb      	ldrh	r3, [r7, #6]
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4618      	mov	r0, r3
 8004088:	f000 ffa4 	bl	8004fd4 <pvPortMalloc>
 800408c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00e      	beq.n	80040b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004094:	2054      	movs	r0, #84	; 0x54
 8004096:	f000 ff9d 	bl	8004fd4 <pvPortMalloc>
 800409a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
 80040a8:	e005      	b.n	80040b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80040aa:	6978      	ldr	r0, [r7, #20]
 80040ac:	f001 f854 	bl	8005158 <vPortFree>
 80040b0:	e001      	b.n	80040b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d017      	beq.n	80040ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040c4:	88fa      	ldrh	r2, [r7, #6]
 80040c6:	2300      	movs	r3, #0
 80040c8:	9303      	str	r3, [sp, #12]
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	9302      	str	r3, [sp, #8]
 80040ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d0:	9301      	str	r3, [sp, #4]
 80040d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f80e 	bl	80040fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040e0:	69f8      	ldr	r0, [r7, #28]
 80040e2:	f000 f891 	bl	8004208 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040e6:	2301      	movs	r3, #1
 80040e8:	61bb      	str	r3, [r7, #24]
 80040ea:	e002      	b.n	80040f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040ec:	f04f 33ff 	mov.w	r3, #4294967295
 80040f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040f2:	69bb      	ldr	r3, [r7, #24]
	}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3720      	adds	r7, #32
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
 8004108:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004114:	3b01      	subs	r3, #1
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	f023 0307 	bic.w	r3, r3, #7
 8004122:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	2b00      	cmp	r3, #0
 800412c:	d009      	beq.n	8004142 <prvInitialiseNewTask+0x46>
 800412e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004132:	f383 8811 	msr	BASEPRI, r3
 8004136:	f3bf 8f6f 	isb	sy
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	e7fe      	b.n	8004140 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01f      	beq.n	8004188 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004148:	2300      	movs	r3, #0
 800414a:	61fb      	str	r3, [r7, #28]
 800414c:	e012      	b.n	8004174 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	4413      	add	r3, r2
 8004154:	7819      	ldrb	r1, [r3, #0]
 8004156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	4413      	add	r3, r2
 800415c:	3334      	adds	r3, #52	; 0x34
 800415e:	460a      	mov	r2, r1
 8004160:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	4413      	add	r3, r2
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d006      	beq.n	800417c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	3301      	adds	r3, #1
 8004172:	61fb      	str	r3, [r7, #28]
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	2b0f      	cmp	r3, #15
 8004178:	d9e9      	bls.n	800414e <prvInitialiseNewTask+0x52>
 800417a:	e000      	b.n	800417e <prvInitialiseNewTask+0x82>
			{
				break;
 800417c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004186:	e003      	b.n	8004190 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004192:	2b06      	cmp	r3, #6
 8004194:	d901      	bls.n	800419a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004196:	2306      	movs	r3, #6
 8004198:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800419e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80041a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041a4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	2200      	movs	r2, #0
 80041aa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80041ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ae:	3304      	adds	r3, #4
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff fe70 	bl	8003e96 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	3318      	adds	r3, #24
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff fe6b 	bl	8003e96 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c8:	f1c3 0207 	rsb	r2, r3, #7
 80041cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041d4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	2200      	movs	r2, #0
 80041da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	68f9      	ldr	r1, [r7, #12]
 80041e8:	69b8      	ldr	r0, [r7, #24]
 80041ea:	f000 fcef 	bl	8004bcc <pxPortInitialiseStack>
 80041ee:	4602      	mov	r2, r0
 80041f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80041f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004200:	bf00      	nop
 8004202:	3720      	adds	r7, #32
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004210:	f000 fe04 	bl	8004e1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004214:	4b2a      	ldr	r3, [pc, #168]	; (80042c0 <prvAddNewTaskToReadyList+0xb8>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3301      	adds	r3, #1
 800421a:	4a29      	ldr	r2, [pc, #164]	; (80042c0 <prvAddNewTaskToReadyList+0xb8>)
 800421c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800421e:	4b29      	ldr	r3, [pc, #164]	; (80042c4 <prvAddNewTaskToReadyList+0xbc>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d109      	bne.n	800423a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004226:	4a27      	ldr	r2, [pc, #156]	; (80042c4 <prvAddNewTaskToReadyList+0xbc>)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800422c:	4b24      	ldr	r3, [pc, #144]	; (80042c0 <prvAddNewTaskToReadyList+0xb8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d110      	bne.n	8004256 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004234:	f000 fb8c 	bl	8004950 <prvInitialiseTaskLists>
 8004238:	e00d      	b.n	8004256 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800423a:	4b23      	ldr	r3, [pc, #140]	; (80042c8 <prvAddNewTaskToReadyList+0xc0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d109      	bne.n	8004256 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004242:	4b20      	ldr	r3, [pc, #128]	; (80042c4 <prvAddNewTaskToReadyList+0xbc>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	429a      	cmp	r2, r3
 800424e:	d802      	bhi.n	8004256 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004250:	4a1c      	ldr	r2, [pc, #112]	; (80042c4 <prvAddNewTaskToReadyList+0xbc>)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004256:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <prvAddNewTaskToReadyList+0xc4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3301      	adds	r3, #1
 800425c:	4a1b      	ldr	r2, [pc, #108]	; (80042cc <prvAddNewTaskToReadyList+0xc4>)
 800425e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	2201      	movs	r2, #1
 8004266:	409a      	lsls	r2, r3
 8004268:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <prvAddNewTaskToReadyList+0xc8>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4313      	orrs	r3, r2
 800426e:	4a18      	ldr	r2, [pc, #96]	; (80042d0 <prvAddNewTaskToReadyList+0xc8>)
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004276:	4613      	mov	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4a15      	ldr	r2, [pc, #84]	; (80042d4 <prvAddNewTaskToReadyList+0xcc>)
 8004280:	441a      	add	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3304      	adds	r3, #4
 8004286:	4619      	mov	r1, r3
 8004288:	4610      	mov	r0, r2
 800428a:	f7ff fe11 	bl	8003eb0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800428e:	f000 fdf3 	bl	8004e78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004292:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <prvAddNewTaskToReadyList+0xc0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00e      	beq.n	80042b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800429a:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <prvAddNewTaskToReadyList+0xbc>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d207      	bcs.n	80042b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <prvAddNewTaskToReadyList+0xd0>)
 80042aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042b8:	bf00      	nop
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	200003f0 	.word	0x200003f0
 80042c4:	200002f0 	.word	0x200002f0
 80042c8:	200003fc 	.word	0x200003fc
 80042cc:	2000040c 	.word	0x2000040c
 80042d0:	200003f8 	.word	0x200003f8
 80042d4:	200002f4 	.word	0x200002f4
 80042d8:	e000ed04 	.word	0xe000ed04

080042dc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80042e4:	f000 fd9a 	bl	8004e1c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d102      	bne.n	80042f4 <vTaskDelete+0x18>
 80042ee:	4b38      	ldr	r3, [pc, #224]	; (80043d0 <vTaskDelete+0xf4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	e000      	b.n	80042f6 <vTaskDelete+0x1a>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	3304      	adds	r3, #4
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff fe34 	bl	8003f6a <uxListRemove>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d115      	bne.n	8004334 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430c:	4931      	ldr	r1, [pc, #196]	; (80043d4 <vTaskDelete+0xf8>)
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10a      	bne.n	8004334 <vTaskDelete+0x58>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	2201      	movs	r2, #1
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	43da      	mvns	r2, r3
 800432a:	4b2b      	ldr	r3, [pc, #172]	; (80043d8 <vTaskDelete+0xfc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4013      	ands	r3, r2
 8004330:	4a29      	ldr	r2, [pc, #164]	; (80043d8 <vTaskDelete+0xfc>)
 8004332:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	2b00      	cmp	r3, #0
 800433a:	d004      	beq.n	8004346 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	3318      	adds	r3, #24
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff fe12 	bl	8003f6a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004346:	4b25      	ldr	r3, [pc, #148]	; (80043dc <vTaskDelete+0x100>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3301      	adds	r3, #1
 800434c:	4a23      	ldr	r2, [pc, #140]	; (80043dc <vTaskDelete+0x100>)
 800434e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004350:	4b1f      	ldr	r3, [pc, #124]	; (80043d0 <vTaskDelete+0xf4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	429a      	cmp	r2, r3
 8004358:	d10b      	bne.n	8004372 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	3304      	adds	r3, #4
 800435e:	4619      	mov	r1, r3
 8004360:	481f      	ldr	r0, [pc, #124]	; (80043e0 <vTaskDelete+0x104>)
 8004362:	f7ff fda5 	bl	8003eb0 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004366:	4b1f      	ldr	r3, [pc, #124]	; (80043e4 <vTaskDelete+0x108>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3301      	adds	r3, #1
 800436c:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <vTaskDelete+0x108>)
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	e009      	b.n	8004386 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004372:	4b1d      	ldr	r3, [pc, #116]	; (80043e8 <vTaskDelete+0x10c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3b01      	subs	r3, #1
 8004378:	4a1b      	ldr	r2, [pc, #108]	; (80043e8 <vTaskDelete+0x10c>)
 800437a:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 fb53 	bl	8004a28 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004382:	f000 fb7f 	bl	8004a84 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8004386:	f000 fd77 	bl	8004e78 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800438a:	4b18      	ldr	r3, [pc, #96]	; (80043ec <vTaskDelete+0x110>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d01a      	beq.n	80043c8 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8004392:	4b0f      	ldr	r3, [pc, #60]	; (80043d0 <vTaskDelete+0xf4>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	429a      	cmp	r2, r3
 800439a:	d115      	bne.n	80043c8 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800439c:	4b14      	ldr	r3, [pc, #80]	; (80043f0 <vTaskDelete+0x114>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d009      	beq.n	80043b8 <vTaskDelete+0xdc>
 80043a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	e7fe      	b.n	80043b6 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 80043b8:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <vTaskDelete+0x118>)
 80043ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80043c8:	bf00      	nop
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	200002f0 	.word	0x200002f0
 80043d4:	200002f4 	.word	0x200002f4
 80043d8:	200003f8 	.word	0x200003f8
 80043dc:	2000040c 	.word	0x2000040c
 80043e0:	200003c4 	.word	0x200003c4
 80043e4:	200003d8 	.word	0x200003d8
 80043e8:	200003f0 	.word	0x200003f0
 80043ec:	200003fc 	.word	0x200003fc
 80043f0:	20000418 	.word	0x20000418
 80043f4:	e000ed04 	.word	0xe000ed04

080043f8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b08a      	sub	sp, #40	; 0x28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004402:	2300      	movs	r3, #0
 8004404:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d109      	bne.n	8004420 <vTaskDelayUntil+0x28>
 800440c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	e7fe      	b.n	800441e <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d109      	bne.n	800443a <vTaskDelayUntil+0x42>
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	613b      	str	r3, [r7, #16]
 8004438:	e7fe      	b.n	8004438 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800443a:	4b29      	ldr	r3, [pc, #164]	; (80044e0 <vTaskDelayUntil+0xe8>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d009      	beq.n	8004456 <vTaskDelayUntil+0x5e>
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	e7fe      	b.n	8004454 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8004456:	f000 f8a7 	bl	80045a8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800445a:	4b22      	ldr	r3, [pc, #136]	; (80044e4 <vTaskDelayUntil+0xec>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	4413      	add	r3, r2
 8004468:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6a3a      	ldr	r2, [r7, #32]
 8004470:	429a      	cmp	r2, r3
 8004472:	d20b      	bcs.n	800448c <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	69fa      	ldr	r2, [r7, #28]
 800447a:	429a      	cmp	r2, r3
 800447c:	d211      	bcs.n	80044a2 <vTaskDelayUntil+0xaa>
 800447e:	69fa      	ldr	r2, [r7, #28]
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	429a      	cmp	r2, r3
 8004484:	d90d      	bls.n	80044a2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8004486:	2301      	movs	r3, #1
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
 800448a:	e00a      	b.n	80044a2 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	429a      	cmp	r2, r3
 8004494:	d303      	bcc.n	800449e <vTaskDelayUntil+0xa6>
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	429a      	cmp	r2, r3
 800449c:	d901      	bls.n	80044a2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800449e:	2301      	movs	r3, #1
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69fa      	ldr	r2, [r7, #28]
 80044a6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d006      	beq.n	80044bc <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2100      	movs	r1, #0
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 fb22 	bl	8004b00 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80044bc:	f000 f882 	bl	80045c4 <xTaskResumeAll>
 80044c0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d107      	bne.n	80044d8 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 80044c8:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <vTaskDelayUntil+0xf0>)
 80044ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044d8:	bf00      	nop
 80044da:	3728      	adds	r7, #40	; 0x28
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	20000418 	.word	0x20000418
 80044e4:	200003f4 	.word	0x200003f4
 80044e8:	e000ed04 	.word	0xe000ed04

080044ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08a      	sub	sp, #40	; 0x28
 80044f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044fa:	463a      	mov	r2, r7
 80044fc:	1d39      	adds	r1, r7, #4
 80044fe:	f107 0308 	add.w	r3, r7, #8
 8004502:	4618      	mov	r0, r3
 8004504:	f7fc f83c 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004508:	6839      	ldr	r1, [r7, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	9202      	str	r2, [sp, #8]
 8004510:	9301      	str	r3, [sp, #4]
 8004512:	2300      	movs	r3, #0
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	2300      	movs	r3, #0
 8004518:	460a      	mov	r2, r1
 800451a:	491d      	ldr	r1, [pc, #116]	; (8004590 <vTaskStartScheduler+0xa4>)
 800451c:	481d      	ldr	r0, [pc, #116]	; (8004594 <vTaskStartScheduler+0xa8>)
 800451e:	f7ff fd4e 	bl	8003fbe <xTaskCreateStatic>
 8004522:	4602      	mov	r2, r0
 8004524:	4b1c      	ldr	r3, [pc, #112]	; (8004598 <vTaskStartScheduler+0xac>)
 8004526:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004528:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <vTaskStartScheduler+0xac>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004530:	2301      	movs	r3, #1
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	e001      	b.n	800453a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d115      	bne.n	800456c <vTaskStartScheduler+0x80>
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004552:	4b12      	ldr	r3, [pc, #72]	; (800459c <vTaskStartScheduler+0xb0>)
 8004554:	f04f 32ff 	mov.w	r2, #4294967295
 8004558:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800455a:	4b11      	ldr	r3, [pc, #68]	; (80045a0 <vTaskStartScheduler+0xb4>)
 800455c:	2201      	movs	r2, #1
 800455e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004560:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <vTaskStartScheduler+0xb8>)
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004566:	f000 fbbb 	bl	8004ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800456a:	e00d      	b.n	8004588 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004572:	d109      	bne.n	8004588 <vTaskStartScheduler+0x9c>
 8004574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	e7fe      	b.n	8004586 <vTaskStartScheduler+0x9a>
}
 8004588:	bf00      	nop
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	08006c14 	.word	0x08006c14
 8004594:	08004921 	.word	0x08004921
 8004598:	20000414 	.word	0x20000414
 800459c:	20000410 	.word	0x20000410
 80045a0:	200003fc 	.word	0x200003fc
 80045a4:	200003f4 	.word	0x200003f4

080045a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80045ac:	4b04      	ldr	r3, [pc, #16]	; (80045c0 <vTaskSuspendAll+0x18>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3301      	adds	r3, #1
 80045b2:	4a03      	ldr	r2, [pc, #12]	; (80045c0 <vTaskSuspendAll+0x18>)
 80045b4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80045b6:	bf00      	nop
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	20000418 	.word	0x20000418

080045c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045ce:	2300      	movs	r3, #0
 80045d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045d2:	4b41      	ldr	r3, [pc, #260]	; (80046d8 <xTaskResumeAll+0x114>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d109      	bne.n	80045ee <xTaskResumeAll+0x2a>
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	e7fe      	b.n	80045ec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045ee:	f000 fc15 	bl	8004e1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045f2:	4b39      	ldr	r3, [pc, #228]	; (80046d8 <xTaskResumeAll+0x114>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	4a37      	ldr	r2, [pc, #220]	; (80046d8 <xTaskResumeAll+0x114>)
 80045fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045fc:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <xTaskResumeAll+0x114>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d161      	bne.n	80046c8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004604:	4b35      	ldr	r3, [pc, #212]	; (80046dc <xTaskResumeAll+0x118>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d05d      	beq.n	80046c8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800460c:	e02e      	b.n	800466c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800460e:	4b34      	ldr	r3, [pc, #208]	; (80046e0 <xTaskResumeAll+0x11c>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	3318      	adds	r3, #24
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff fca5 	bl	8003f6a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3304      	adds	r3, #4
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff fca0 	bl	8003f6a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	2201      	movs	r2, #1
 8004630:	409a      	lsls	r2, r3
 8004632:	4b2c      	ldr	r3, [pc, #176]	; (80046e4 <xTaskResumeAll+0x120>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4313      	orrs	r3, r2
 8004638:	4a2a      	ldr	r2, [pc, #168]	; (80046e4 <xTaskResumeAll+0x120>)
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004640:	4613      	mov	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4a27      	ldr	r2, [pc, #156]	; (80046e8 <xTaskResumeAll+0x124>)
 800464a:	441a      	add	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	3304      	adds	r3, #4
 8004650:	4619      	mov	r1, r3
 8004652:	4610      	mov	r0, r2
 8004654:	f7ff fc2c 	bl	8003eb0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465c:	4b23      	ldr	r3, [pc, #140]	; (80046ec <xTaskResumeAll+0x128>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004662:	429a      	cmp	r2, r3
 8004664:	d302      	bcc.n	800466c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004666:	4b22      	ldr	r3, [pc, #136]	; (80046f0 <xTaskResumeAll+0x12c>)
 8004668:	2201      	movs	r2, #1
 800466a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800466c:	4b1c      	ldr	r3, [pc, #112]	; (80046e0 <xTaskResumeAll+0x11c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1cc      	bne.n	800460e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800467a:	f000 fa03 	bl	8004a84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800467e:	4b1d      	ldr	r3, [pc, #116]	; (80046f4 <xTaskResumeAll+0x130>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d010      	beq.n	80046ac <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800468a:	f000 f837 	bl	80046fc <xTaskIncrementTick>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004694:	4b16      	ldr	r3, [pc, #88]	; (80046f0 <xTaskResumeAll+0x12c>)
 8004696:	2201      	movs	r2, #1
 8004698:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3b01      	subs	r3, #1
 800469e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f1      	bne.n	800468a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80046a6:	4b13      	ldr	r3, [pc, #76]	; (80046f4 <xTaskResumeAll+0x130>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80046ac:	4b10      	ldr	r3, [pc, #64]	; (80046f0 <xTaskResumeAll+0x12c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d009      	beq.n	80046c8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80046b4:	2301      	movs	r3, #1
 80046b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046b8:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <xTaskResumeAll+0x134>)
 80046ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046c8:	f000 fbd6 	bl	8004e78 <vPortExitCritical>

	return xAlreadyYielded;
 80046cc:	68bb      	ldr	r3, [r7, #8]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20000418 	.word	0x20000418
 80046dc:	200003f0 	.word	0x200003f0
 80046e0:	200003b0 	.word	0x200003b0
 80046e4:	200003f8 	.word	0x200003f8
 80046e8:	200002f4 	.word	0x200002f4
 80046ec:	200002f0 	.word	0x200002f0
 80046f0:	20000404 	.word	0x20000404
 80046f4:	20000400 	.word	0x20000400
 80046f8:	e000ed04 	.word	0xe000ed04

080046fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004706:	4b4e      	ldr	r3, [pc, #312]	; (8004840 <xTaskIncrementTick+0x144>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	f040 8087 	bne.w	800481e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004710:	4b4c      	ldr	r3, [pc, #304]	; (8004844 <xTaskIncrementTick+0x148>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3301      	adds	r3, #1
 8004716:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004718:	4a4a      	ldr	r2, [pc, #296]	; (8004844 <xTaskIncrementTick+0x148>)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d11f      	bne.n	8004764 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004724:	4b48      	ldr	r3, [pc, #288]	; (8004848 <xTaskIncrementTick+0x14c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <xTaskIncrementTick+0x46>
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	e7fe      	b.n	8004740 <xTaskIncrementTick+0x44>
 8004742:	4b41      	ldr	r3, [pc, #260]	; (8004848 <xTaskIncrementTick+0x14c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	4b40      	ldr	r3, [pc, #256]	; (800484c <xTaskIncrementTick+0x150>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a3e      	ldr	r2, [pc, #248]	; (8004848 <xTaskIncrementTick+0x14c>)
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	4a3e      	ldr	r2, [pc, #248]	; (800484c <xTaskIncrementTick+0x150>)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	4b3e      	ldr	r3, [pc, #248]	; (8004850 <xTaskIncrementTick+0x154>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3301      	adds	r3, #1
 800475c:	4a3c      	ldr	r2, [pc, #240]	; (8004850 <xTaskIncrementTick+0x154>)
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	f000 f990 	bl	8004a84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004764:	4b3b      	ldr	r3, [pc, #236]	; (8004854 <xTaskIncrementTick+0x158>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	429a      	cmp	r2, r3
 800476c:	d348      	bcc.n	8004800 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800476e:	4b36      	ldr	r3, [pc, #216]	; (8004848 <xTaskIncrementTick+0x14c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d104      	bne.n	8004782 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004778:	4b36      	ldr	r3, [pc, #216]	; (8004854 <xTaskIncrementTick+0x158>)
 800477a:	f04f 32ff 	mov.w	r2, #4294967295
 800477e:	601a      	str	r2, [r3, #0]
					break;
 8004780:	e03e      	b.n	8004800 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004782:	4b31      	ldr	r3, [pc, #196]	; (8004848 <xTaskIncrementTick+0x14c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	429a      	cmp	r2, r3
 8004798:	d203      	bcs.n	80047a2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800479a:	4a2e      	ldr	r2, [pc, #184]	; (8004854 <xTaskIncrementTick+0x158>)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047a0:	e02e      	b.n	8004800 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	3304      	adds	r3, #4
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff fbdf 	bl	8003f6a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d004      	beq.n	80047be <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	3318      	adds	r3, #24
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff fbd6 	bl	8003f6a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c2:	2201      	movs	r2, #1
 80047c4:	409a      	lsls	r2, r3
 80047c6:	4b24      	ldr	r3, [pc, #144]	; (8004858 <xTaskIncrementTick+0x15c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	4a22      	ldr	r2, [pc, #136]	; (8004858 <xTaskIncrementTick+0x15c>)
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4a1f      	ldr	r2, [pc, #124]	; (800485c <xTaskIncrementTick+0x160>)
 80047de:	441a      	add	r2, r3
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f7ff fb62 	bl	8003eb0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f0:	4b1b      	ldr	r3, [pc, #108]	; (8004860 <xTaskIncrementTick+0x164>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d3b9      	bcc.n	800476e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80047fa:	2301      	movs	r3, #1
 80047fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047fe:	e7b6      	b.n	800476e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004800:	4b17      	ldr	r3, [pc, #92]	; (8004860 <xTaskIncrementTick+0x164>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004806:	4915      	ldr	r1, [pc, #84]	; (800485c <xTaskIncrementTick+0x160>)
 8004808:	4613      	mov	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d907      	bls.n	8004828 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004818:	2301      	movs	r3, #1
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	e004      	b.n	8004828 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800481e:	4b11      	ldr	r3, [pc, #68]	; (8004864 <xTaskIncrementTick+0x168>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3301      	adds	r3, #1
 8004824:	4a0f      	ldr	r2, [pc, #60]	; (8004864 <xTaskIncrementTick+0x168>)
 8004826:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004828:	4b0f      	ldr	r3, [pc, #60]	; (8004868 <xTaskIncrementTick+0x16c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004830:	2301      	movs	r3, #1
 8004832:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004834:	697b      	ldr	r3, [r7, #20]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	20000418 	.word	0x20000418
 8004844:	200003f4 	.word	0x200003f4
 8004848:	200003a8 	.word	0x200003a8
 800484c:	200003ac 	.word	0x200003ac
 8004850:	20000408 	.word	0x20000408
 8004854:	20000410 	.word	0x20000410
 8004858:	200003f8 	.word	0x200003f8
 800485c:	200002f4 	.word	0x200002f4
 8004860:	200002f0 	.word	0x200002f0
 8004864:	20000400 	.word	0x20000400
 8004868:	20000404 	.word	0x20000404

0800486c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004872:	4b26      	ldr	r3, [pc, #152]	; (800490c <vTaskSwitchContext+0xa0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800487a:	4b25      	ldr	r3, [pc, #148]	; (8004910 <vTaskSwitchContext+0xa4>)
 800487c:	2201      	movs	r2, #1
 800487e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004880:	e03e      	b.n	8004900 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004882:	4b23      	ldr	r3, [pc, #140]	; (8004910 <vTaskSwitchContext+0xa4>)
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004888:	4b22      	ldr	r3, [pc, #136]	; (8004914 <vTaskSwitchContext+0xa8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	fab3 f383 	clz	r3, r3
 8004894:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004896:	7afb      	ldrb	r3, [r7, #11]
 8004898:	f1c3 031f 	rsb	r3, r3, #31
 800489c:	617b      	str	r3, [r7, #20]
 800489e:	491e      	ldr	r1, [pc, #120]	; (8004918 <vTaskSwitchContext+0xac>)
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d109      	bne.n	80048c6 <vTaskSwitchContext+0x5a>
	__asm volatile
 80048b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b6:	f383 8811 	msr	BASEPRI, r3
 80048ba:	f3bf 8f6f 	isb	sy
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	607b      	str	r3, [r7, #4]
 80048c4:	e7fe      	b.n	80048c4 <vTaskSwitchContext+0x58>
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4613      	mov	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4a11      	ldr	r2, [pc, #68]	; (8004918 <vTaskSwitchContext+0xac>)
 80048d2:	4413      	add	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	605a      	str	r2, [r3, #4]
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	3308      	adds	r3, #8
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d104      	bne.n	80048f6 <vTaskSwitchContext+0x8a>
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	605a      	str	r2, [r3, #4]
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	4a07      	ldr	r2, [pc, #28]	; (800491c <vTaskSwitchContext+0xb0>)
 80048fe:	6013      	str	r3, [r2, #0]
}
 8004900:	bf00      	nop
 8004902:	371c      	adds	r7, #28
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	20000418 	.word	0x20000418
 8004910:	20000404 	.word	0x20000404
 8004914:	200003f8 	.word	0x200003f8
 8004918:	200002f4 	.word	0x200002f4
 800491c:	200002f0 	.word	0x200002f0

08004920 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004928:	f000 f852 	bl	80049d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800492c:	4b06      	ldr	r3, [pc, #24]	; (8004948 <prvIdleTask+0x28>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d9f9      	bls.n	8004928 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004934:	4b05      	ldr	r3, [pc, #20]	; (800494c <prvIdleTask+0x2c>)
 8004936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004944:	e7f0      	b.n	8004928 <prvIdleTask+0x8>
 8004946:	bf00      	nop
 8004948:	200002f4 	.word	0x200002f4
 800494c:	e000ed04 	.word	0xe000ed04

08004950 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004956:	2300      	movs	r3, #0
 8004958:	607b      	str	r3, [r7, #4]
 800495a:	e00c      	b.n	8004976 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	4613      	mov	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4a12      	ldr	r2, [pc, #72]	; (80049b0 <prvInitialiseTaskLists+0x60>)
 8004968:	4413      	add	r3, r2
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff fa73 	bl	8003e56 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3301      	adds	r3, #1
 8004974:	607b      	str	r3, [r7, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b06      	cmp	r3, #6
 800497a:	d9ef      	bls.n	800495c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800497c:	480d      	ldr	r0, [pc, #52]	; (80049b4 <prvInitialiseTaskLists+0x64>)
 800497e:	f7ff fa6a 	bl	8003e56 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004982:	480d      	ldr	r0, [pc, #52]	; (80049b8 <prvInitialiseTaskLists+0x68>)
 8004984:	f7ff fa67 	bl	8003e56 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004988:	480c      	ldr	r0, [pc, #48]	; (80049bc <prvInitialiseTaskLists+0x6c>)
 800498a:	f7ff fa64 	bl	8003e56 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800498e:	480c      	ldr	r0, [pc, #48]	; (80049c0 <prvInitialiseTaskLists+0x70>)
 8004990:	f7ff fa61 	bl	8003e56 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004994:	480b      	ldr	r0, [pc, #44]	; (80049c4 <prvInitialiseTaskLists+0x74>)
 8004996:	f7ff fa5e 	bl	8003e56 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800499a:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <prvInitialiseTaskLists+0x78>)
 800499c:	4a05      	ldr	r2, [pc, #20]	; (80049b4 <prvInitialiseTaskLists+0x64>)
 800499e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049a0:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <prvInitialiseTaskLists+0x7c>)
 80049a2:	4a05      	ldr	r2, [pc, #20]	; (80049b8 <prvInitialiseTaskLists+0x68>)
 80049a4:	601a      	str	r2, [r3, #0]
}
 80049a6:	bf00      	nop
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	200002f4 	.word	0x200002f4
 80049b4:	20000380 	.word	0x20000380
 80049b8:	20000394 	.word	0x20000394
 80049bc:	200003b0 	.word	0x200003b0
 80049c0:	200003c4 	.word	0x200003c4
 80049c4:	200003dc 	.word	0x200003dc
 80049c8:	200003a8 	.word	0x200003a8
 80049cc:	200003ac 	.word	0x200003ac

080049d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049d6:	e019      	b.n	8004a0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049d8:	f000 fa20 	bl	8004e1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049dc:	4b0f      	ldr	r3, [pc, #60]	; (8004a1c <prvCheckTasksWaitingTermination+0x4c>)
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3304      	adds	r3, #4
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff fabe 	bl	8003f6a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049ee:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <prvCheckTasksWaitingTermination+0x50>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	4a0a      	ldr	r2, [pc, #40]	; (8004a20 <prvCheckTasksWaitingTermination+0x50>)
 80049f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049f8:	4b0a      	ldr	r3, [pc, #40]	; (8004a24 <prvCheckTasksWaitingTermination+0x54>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3b01      	subs	r3, #1
 80049fe:	4a09      	ldr	r2, [pc, #36]	; (8004a24 <prvCheckTasksWaitingTermination+0x54>)
 8004a00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a02:	f000 fa39 	bl	8004e78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f80e 	bl	8004a28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a0c:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <prvCheckTasksWaitingTermination+0x54>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1e1      	bne.n	80049d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a14:	bf00      	nop
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	200003c4 	.word	0x200003c4
 8004a20:	200003f0 	.word	0x200003f0
 8004a24:	200003d8 	.word	0x200003d8

08004a28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d108      	bne.n	8004a4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 fb8a 	bl	8005158 <vPortFree>
				vPortFree( pxTCB );
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fb87 	bl	8005158 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a4a:	e017      	b.n	8004a7c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d103      	bne.n	8004a5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fb7e 	bl	8005158 <vPortFree>
	}
 8004a5c:	e00e      	b.n	8004a7c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d009      	beq.n	8004a7c <prvDeleteTCB+0x54>
 8004a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	e7fe      	b.n	8004a7a <prvDeleteTCB+0x52>
	}
 8004a7c:	bf00      	nop
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a8a:	4b0c      	ldr	r3, [pc, #48]	; (8004abc <prvResetNextTaskUnblockTime+0x38>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d104      	bne.n	8004a9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a94:	4b0a      	ldr	r3, [pc, #40]	; (8004ac0 <prvResetNextTaskUnblockTime+0x3c>)
 8004a96:	f04f 32ff 	mov.w	r2, #4294967295
 8004a9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a9c:	e008      	b.n	8004ab0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a9e:	4b07      	ldr	r3, [pc, #28]	; (8004abc <prvResetNextTaskUnblockTime+0x38>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	4a04      	ldr	r2, [pc, #16]	; (8004ac0 <prvResetNextTaskUnblockTime+0x3c>)
 8004aae:	6013      	str	r3, [r2, #0]
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	200003a8 	.word	0x200003a8
 8004ac0:	20000410 	.word	0x20000410

08004ac4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004aca:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <xTaskGetSchedulerState+0x34>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d102      	bne.n	8004ad8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	607b      	str	r3, [r7, #4]
 8004ad6:	e008      	b.n	8004aea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ad8:	4b08      	ldr	r3, [pc, #32]	; (8004afc <xTaskGetSchedulerState+0x38>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d102      	bne.n	8004ae6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	607b      	str	r3, [r7, #4]
 8004ae4:	e001      	b.n	8004aea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004aea:	687b      	ldr	r3, [r7, #4]
	}
 8004aec:	4618      	mov	r0, r3
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	200003fc 	.word	0x200003fc
 8004afc:	20000418 	.word	0x20000418

08004b00 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b0a:	4b29      	ldr	r3, [pc, #164]	; (8004bb0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b10:	4b28      	ldr	r3, [pc, #160]	; (8004bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3304      	adds	r3, #4
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fa27 	bl	8003f6a <uxListRemove>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10b      	bne.n	8004b3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004b22:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	2201      	movs	r2, #1
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	43da      	mvns	r2, r3
 8004b30:	4b21      	ldr	r3, [pc, #132]	; (8004bb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4013      	ands	r3, r2
 8004b36:	4a20      	ldr	r2, [pc, #128]	; (8004bb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b40:	d10a      	bne.n	8004b58 <prvAddCurrentTaskToDelayedList+0x58>
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d007      	beq.n	8004b58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b48:	4b1a      	ldr	r3, [pc, #104]	; (8004bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	4619      	mov	r1, r3
 8004b50:	481a      	ldr	r0, [pc, #104]	; (8004bbc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004b52:	f7ff f9ad 	bl	8003eb0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b56:	e026      	b.n	8004ba6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b60:	4b14      	ldr	r3, [pc, #80]	; (8004bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d209      	bcs.n	8004b84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b70:	4b13      	ldr	r3, [pc, #76]	; (8004bc0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	f7ff f9bb 	bl	8003ef8 <vListInsert>
}
 8004b82:	e010      	b.n	8004ba6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b84:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	4619      	mov	r1, r3
 8004b90:	4610      	mov	r0, r2
 8004b92:	f7ff f9b1 	bl	8003ef8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b96:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d202      	bcs.n	8004ba6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ba0:	4a09      	ldr	r2, [pc, #36]	; (8004bc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	6013      	str	r3, [r2, #0]
}
 8004ba6:	bf00      	nop
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	200003f4 	.word	0x200003f4
 8004bb4:	200002f0 	.word	0x200002f0
 8004bb8:	200003f8 	.word	0x200003f8
 8004bbc:	200003dc 	.word	0x200003dc
 8004bc0:	200003ac 	.word	0x200003ac
 8004bc4:	200003a8 	.word	0x200003a8
 8004bc8:	20000410 	.word	0x20000410

08004bcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3b04      	subs	r3, #4
 8004bdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004be4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	3b04      	subs	r3, #4
 8004bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f023 0201 	bic.w	r2, r3, #1
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	3b04      	subs	r3, #4
 8004bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bfc:	4a0c      	ldr	r2, [pc, #48]	; (8004c30 <pxPortInitialiseStack+0x64>)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3b14      	subs	r3, #20
 8004c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3b04      	subs	r3, #4
 8004c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f06f 0202 	mvn.w	r2, #2
 8004c1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	3b20      	subs	r3, #32
 8004c20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c22:	68fb      	ldr	r3, [r7, #12]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	08004c35 	.word	0x08004c35

08004c34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c3e:	4b11      	ldr	r3, [pc, #68]	; (8004c84 <prvTaskExitError+0x50>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c46:	d009      	beq.n	8004c5c <prvTaskExitError+0x28>
 8004c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	e7fe      	b.n	8004c5a <prvTaskExitError+0x26>
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c6e:	bf00      	nop
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d0fc      	beq.n	8004c70 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c76:	bf00      	nop
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	2000000c 	.word	0x2000000c
	...

08004c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c90:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <pxCurrentTCBConst2>)
 8004c92:	6819      	ldr	r1, [r3, #0]
 8004c94:	6808      	ldr	r0, [r1, #0]
 8004c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9a:	f380 8809 	msr	PSP, r0
 8004c9e:	f3bf 8f6f 	isb	sy
 8004ca2:	f04f 0000 	mov.w	r0, #0
 8004ca6:	f380 8811 	msr	BASEPRI, r0
 8004caa:	4770      	bx	lr
 8004cac:	f3af 8000 	nop.w

08004cb0 <pxCurrentTCBConst2>:
 8004cb0:	200002f0 	.word	0x200002f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004cb4:	bf00      	nop
 8004cb6:	bf00      	nop

08004cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004cb8:	4808      	ldr	r0, [pc, #32]	; (8004cdc <prvPortStartFirstTask+0x24>)
 8004cba:	6800      	ldr	r0, [r0, #0]
 8004cbc:	6800      	ldr	r0, [r0, #0]
 8004cbe:	f380 8808 	msr	MSP, r0
 8004cc2:	f04f 0000 	mov.w	r0, #0
 8004cc6:	f380 8814 	msr	CONTROL, r0
 8004cca:	b662      	cpsie	i
 8004ccc:	b661      	cpsie	f
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	df00      	svc	0
 8004cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004cda:	bf00      	nop
 8004cdc:	e000ed08 	.word	0xe000ed08

08004ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ce6:	4b44      	ldr	r3, [pc, #272]	; (8004df8 <xPortStartScheduler+0x118>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a44      	ldr	r2, [pc, #272]	; (8004dfc <xPortStartScheduler+0x11c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d109      	bne.n	8004d04 <xPortStartScheduler+0x24>
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	613b      	str	r3, [r7, #16]
 8004d02:	e7fe      	b.n	8004d02 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d04:	4b3c      	ldr	r3, [pc, #240]	; (8004df8 <xPortStartScheduler+0x118>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a3d      	ldr	r2, [pc, #244]	; (8004e00 <xPortStartScheduler+0x120>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d109      	bne.n	8004d22 <xPortStartScheduler+0x42>
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	e7fe      	b.n	8004d20 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d22:	4b38      	ldr	r3, [pc, #224]	; (8004e04 <xPortStartScheduler+0x124>)
 8004d24:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	22ff      	movs	r2, #255	; 0xff
 8004d32:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	4b30      	ldr	r3, [pc, #192]	; (8004e08 <xPortStartScheduler+0x128>)
 8004d48:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d4a:	4b30      	ldr	r3, [pc, #192]	; (8004e0c <xPortStartScheduler+0x12c>)
 8004d4c:	2207      	movs	r2, #7
 8004d4e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d50:	e009      	b.n	8004d66 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004d52:	4b2e      	ldr	r3, [pc, #184]	; (8004e0c <xPortStartScheduler+0x12c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3b01      	subs	r3, #1
 8004d58:	4a2c      	ldr	r2, [pc, #176]	; (8004e0c <xPortStartScheduler+0x12c>)
 8004d5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d66:	78fb      	ldrb	r3, [r7, #3]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6e:	2b80      	cmp	r3, #128	; 0x80
 8004d70:	d0ef      	beq.n	8004d52 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d72:	4b26      	ldr	r3, [pc, #152]	; (8004e0c <xPortStartScheduler+0x12c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f1c3 0307 	rsb	r3, r3, #7
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d009      	beq.n	8004d92 <xPortStartScheduler+0xb2>
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	60bb      	str	r3, [r7, #8]
 8004d90:	e7fe      	b.n	8004d90 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d92:	4b1e      	ldr	r3, [pc, #120]	; (8004e0c <xPortStartScheduler+0x12c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	021b      	lsls	r3, r3, #8
 8004d98:	4a1c      	ldr	r2, [pc, #112]	; (8004e0c <xPortStartScheduler+0x12c>)
 8004d9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d9c:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <xPortStartScheduler+0x12c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004da4:	4a19      	ldr	r2, [pc, #100]	; (8004e0c <xPortStartScheduler+0x12c>)
 8004da6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004db0:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <xPortStartScheduler+0x130>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a16      	ldr	r2, [pc, #88]	; (8004e10 <xPortStartScheduler+0x130>)
 8004db6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004dba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004dbc:	4b14      	ldr	r3, [pc, #80]	; (8004e10 <xPortStartScheduler+0x130>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a13      	ldr	r2, [pc, #76]	; (8004e10 <xPortStartScheduler+0x130>)
 8004dc2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004dc6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004dc8:	f000 f8d6 	bl	8004f78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004dcc:	4b11      	ldr	r3, [pc, #68]	; (8004e14 <xPortStartScheduler+0x134>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004dd2:	f000 f8f5 	bl	8004fc0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004dd6:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <xPortStartScheduler+0x138>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a0f      	ldr	r2, [pc, #60]	; (8004e18 <xPortStartScheduler+0x138>)
 8004ddc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004de0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004de2:	f7ff ff69 	bl	8004cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004de6:	f7ff fd41 	bl	800486c <vTaskSwitchContext>
	prvTaskExitError();
 8004dea:	f7ff ff23 	bl	8004c34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	e000ed00 	.word	0xe000ed00
 8004dfc:	410fc271 	.word	0x410fc271
 8004e00:	410fc270 	.word	0x410fc270
 8004e04:	e000e400 	.word	0xe000e400
 8004e08:	2000041c 	.word	0x2000041c
 8004e0c:	20000420 	.word	0x20000420
 8004e10:	e000ed20 	.word	0xe000ed20
 8004e14:	2000000c 	.word	0x2000000c
 8004e18:	e000ef34 	.word	0xe000ef34

08004e1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e34:	4b0e      	ldr	r3, [pc, #56]	; (8004e70 <vPortEnterCritical+0x54>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	4a0d      	ldr	r2, [pc, #52]	; (8004e70 <vPortEnterCritical+0x54>)
 8004e3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e3e:	4b0c      	ldr	r3, [pc, #48]	; (8004e70 <vPortEnterCritical+0x54>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d10e      	bne.n	8004e64 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e46:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <vPortEnterCritical+0x58>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d009      	beq.n	8004e64 <vPortEnterCritical+0x48>
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	603b      	str	r3, [r7, #0]
 8004e62:	e7fe      	b.n	8004e62 <vPortEnterCritical+0x46>
	}
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	2000000c 	.word	0x2000000c
 8004e74:	e000ed04 	.word	0xe000ed04

08004e78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e7e:	4b11      	ldr	r3, [pc, #68]	; (8004ec4 <vPortExitCritical+0x4c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <vPortExitCritical+0x22>
 8004e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	607b      	str	r3, [r7, #4]
 8004e98:	e7fe      	b.n	8004e98 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004e9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <vPortExitCritical+0x4c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	4a08      	ldr	r2, [pc, #32]	; (8004ec4 <vPortExitCritical+0x4c>)
 8004ea2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ea4:	4b07      	ldr	r3, [pc, #28]	; (8004ec4 <vPortExitCritical+0x4c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d104      	bne.n	8004eb6 <vPortExitCritical+0x3e>
 8004eac:	2300      	movs	r3, #0
 8004eae:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	2000000c 	.word	0x2000000c
	...

08004ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ed0:	f3ef 8009 	mrs	r0, PSP
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	4b15      	ldr	r3, [pc, #84]	; (8004f30 <pxCurrentTCBConst>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	f01e 0f10 	tst.w	lr, #16
 8004ee0:	bf08      	it	eq
 8004ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eea:	6010      	str	r0, [r2, #0]
 8004eec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ef4:	f380 8811 	msr	BASEPRI, r0
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f7ff fcb4 	bl	800486c <vTaskSwitchContext>
 8004f04:	f04f 0000 	mov.w	r0, #0
 8004f08:	f380 8811 	msr	BASEPRI, r0
 8004f0c:	bc09      	pop	{r0, r3}
 8004f0e:	6819      	ldr	r1, [r3, #0]
 8004f10:	6808      	ldr	r0, [r1, #0]
 8004f12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f16:	f01e 0f10 	tst.w	lr, #16
 8004f1a:	bf08      	it	eq
 8004f1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f20:	f380 8809 	msr	PSP, r0
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	f3af 8000 	nop.w

08004f30 <pxCurrentTCBConst>:
 8004f30:	200002f0 	.word	0x200002f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop

08004f38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f50:	f7ff fbd4 	bl	80046fc <xTaskIncrementTick>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f5a:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <xPortSysTickHandler+0x3c>)
 8004f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	2300      	movs	r3, #0
 8004f64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f6c:	bf00      	nop
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	e000ed04 	.word	0xe000ed04

08004f78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f7c:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <vPortSetupTimerInterrupt+0x34>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f82:	4b0b      	ldr	r3, [pc, #44]	; (8004fb0 <vPortSetupTimerInterrupt+0x38>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f88:	4b0a      	ldr	r3, [pc, #40]	; (8004fb4 <vPortSetupTimerInterrupt+0x3c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a0a      	ldr	r2, [pc, #40]	; (8004fb8 <vPortSetupTimerInterrupt+0x40>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	099b      	lsrs	r3, r3, #6
 8004f94:	4a09      	ldr	r2, [pc, #36]	; (8004fbc <vPortSetupTimerInterrupt+0x44>)
 8004f96:	3b01      	subs	r3, #1
 8004f98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f9a:	4b04      	ldr	r3, [pc, #16]	; (8004fac <vPortSetupTimerInterrupt+0x34>)
 8004f9c:	2207      	movs	r2, #7
 8004f9e:	601a      	str	r2, [r3, #0]
}
 8004fa0:	bf00      	nop
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	e000e010 	.word	0xe000e010
 8004fb0:	e000e018 	.word	0xe000e018
 8004fb4:	20000000 	.word	0x20000000
 8004fb8:	10624dd3 	.word	0x10624dd3
 8004fbc:	e000e014 	.word	0xe000e014

08004fc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004fc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004fd0 <vPortEnableVFP+0x10>
 8004fc4:	6801      	ldr	r1, [r0, #0]
 8004fc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004fca:	6001      	str	r1, [r0, #0]
 8004fcc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004fce:	bf00      	nop
 8004fd0:	e000ed88 	.word	0xe000ed88

08004fd4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08a      	sub	sp, #40	; 0x28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004fe0:	f7ff fae2 	bl	80045a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004fe4:	4b57      	ldr	r3, [pc, #348]	; (8005144 <pvPortMalloc+0x170>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004fec:	f000 f90c 	bl	8005208 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ff0:	4b55      	ldr	r3, [pc, #340]	; (8005148 <pvPortMalloc+0x174>)
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f040 808c 	bne.w	8005116 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01c      	beq.n	800503e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005004:	2208      	movs	r2, #8
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4413      	add	r3, r2
 800500a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	2b00      	cmp	r3, #0
 8005014:	d013      	beq.n	800503e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f023 0307 	bic.w	r3, r3, #7
 800501c:	3308      	adds	r3, #8
 800501e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	2b00      	cmp	r3, #0
 8005028:	d009      	beq.n	800503e <pvPortMalloc+0x6a>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	e7fe      	b.n	800503c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d068      	beq.n	8005116 <pvPortMalloc+0x142>
 8005044:	4b41      	ldr	r3, [pc, #260]	; (800514c <pvPortMalloc+0x178>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	429a      	cmp	r2, r3
 800504c:	d863      	bhi.n	8005116 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800504e:	4b40      	ldr	r3, [pc, #256]	; (8005150 <pvPortMalloc+0x17c>)
 8005050:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005052:	4b3f      	ldr	r3, [pc, #252]	; (8005150 <pvPortMalloc+0x17c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005058:	e004      	b.n	8005064 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	429a      	cmp	r2, r3
 800506c:	d903      	bls.n	8005076 <pvPortMalloc+0xa2>
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1f1      	bne.n	800505a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005076:	4b33      	ldr	r3, [pc, #204]	; (8005144 <pvPortMalloc+0x170>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507c:	429a      	cmp	r2, r3
 800507e:	d04a      	beq.n	8005116 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2208      	movs	r2, #8
 8005086:	4413      	add	r3, r2
 8005088:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	1ad2      	subs	r2, r2, r3
 800509a:	2308      	movs	r3, #8
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	429a      	cmp	r2, r3
 80050a0:	d91e      	bls.n	80050e0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4413      	add	r3, r2
 80050a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d009      	beq.n	80050c8 <pvPortMalloc+0xf4>
 80050b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	e7fe      	b.n	80050c6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	1ad2      	subs	r2, r2, r3
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050da:	69b8      	ldr	r0, [r7, #24]
 80050dc:	f000 f8f6 	bl	80052cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050e0:	4b1a      	ldr	r3, [pc, #104]	; (800514c <pvPortMalloc+0x178>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	4a18      	ldr	r2, [pc, #96]	; (800514c <pvPortMalloc+0x178>)
 80050ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050ee:	4b17      	ldr	r3, [pc, #92]	; (800514c <pvPortMalloc+0x178>)
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b18      	ldr	r3, [pc, #96]	; (8005154 <pvPortMalloc+0x180>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d203      	bcs.n	8005102 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050fa:	4b14      	ldr	r3, [pc, #80]	; (800514c <pvPortMalloc+0x178>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a15      	ldr	r2, [pc, #84]	; (8005154 <pvPortMalloc+0x180>)
 8005100:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	4b10      	ldr	r3, [pc, #64]	; (8005148 <pvPortMalloc+0x174>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	431a      	orrs	r2, r3
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005116:	f7ff fa55 	bl	80045c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	2b00      	cmp	r3, #0
 8005122:	d009      	beq.n	8005138 <pvPortMalloc+0x164>
 8005124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	e7fe      	b.n	8005136 <pvPortMalloc+0x162>
	return pvReturn;
 8005138:	69fb      	ldr	r3, [r7, #28]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3728      	adds	r7, #40	; 0x28
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	2000402c 	.word	0x2000402c
 8005148:	20004038 	.word	0x20004038
 800514c:	20004030 	.word	0x20004030
 8005150:	20004024 	.word	0x20004024
 8005154:	20004034 	.word	0x20004034

08005158 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d046      	beq.n	80051f8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800516a:	2308      	movs	r3, #8
 800516c:	425b      	negs	r3, r3
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4413      	add	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	4b20      	ldr	r3, [pc, #128]	; (8005200 <vPortFree+0xa8>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4013      	ands	r3, r2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d109      	bne.n	800519a <vPortFree+0x42>
 8005186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	e7fe      	b.n	8005198 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d009      	beq.n	80051b6 <vPortFree+0x5e>
 80051a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	60bb      	str	r3, [r7, #8]
 80051b4:	e7fe      	b.n	80051b4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	4b11      	ldr	r3, [pc, #68]	; (8005200 <vPortFree+0xa8>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4013      	ands	r3, r2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d019      	beq.n	80051f8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d115      	bne.n	80051f8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <vPortFree+0xa8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	43db      	mvns	r3, r3
 80051d6:	401a      	ands	r2, r3
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80051dc:	f7ff f9e4 	bl	80045a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	4b07      	ldr	r3, [pc, #28]	; (8005204 <vPortFree+0xac>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4413      	add	r3, r2
 80051ea:	4a06      	ldr	r2, [pc, #24]	; (8005204 <vPortFree+0xac>)
 80051ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051ee:	6938      	ldr	r0, [r7, #16]
 80051f0:	f000 f86c 	bl	80052cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80051f4:	f7ff f9e6 	bl	80045c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051f8:	bf00      	nop
 80051fa:	3718      	adds	r7, #24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	20004038 	.word	0x20004038
 8005204:	20004030 	.word	0x20004030

08005208 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800520e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005212:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005214:	4b27      	ldr	r3, [pc, #156]	; (80052b4 <prvHeapInit+0xac>)
 8005216:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00c      	beq.n	800523c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3307      	adds	r3, #7
 8005226:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 0307 	bic.w	r3, r3, #7
 800522e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	4a1f      	ldr	r2, [pc, #124]	; (80052b4 <prvHeapInit+0xac>)
 8005238:	4413      	add	r3, r2
 800523a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005240:	4a1d      	ldr	r2, [pc, #116]	; (80052b8 <prvHeapInit+0xb0>)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005246:	4b1c      	ldr	r3, [pc, #112]	; (80052b8 <prvHeapInit+0xb0>)
 8005248:	2200      	movs	r2, #0
 800524a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	4413      	add	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005254:	2208      	movs	r2, #8
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	1a9b      	subs	r3, r3, r2
 800525a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f023 0307 	bic.w	r3, r3, #7
 8005262:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4a15      	ldr	r2, [pc, #84]	; (80052bc <prvHeapInit+0xb4>)
 8005268:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800526a:	4b14      	ldr	r3, [pc, #80]	; (80052bc <prvHeapInit+0xb4>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2200      	movs	r2, #0
 8005270:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005272:	4b12      	ldr	r3, [pc, #72]	; (80052bc <prvHeapInit+0xb4>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	1ad2      	subs	r2, r2, r3
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005288:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <prvHeapInit+0xb4>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	4a0a      	ldr	r2, [pc, #40]	; (80052c0 <prvHeapInit+0xb8>)
 8005296:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	4a09      	ldr	r2, [pc, #36]	; (80052c4 <prvHeapInit+0xbc>)
 800529e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052a0:	4b09      	ldr	r3, [pc, #36]	; (80052c8 <prvHeapInit+0xc0>)
 80052a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80052a6:	601a      	str	r2, [r3, #0]
}
 80052a8:	bf00      	nop
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	20000424 	.word	0x20000424
 80052b8:	20004024 	.word	0x20004024
 80052bc:	2000402c 	.word	0x2000402c
 80052c0:	20004034 	.word	0x20004034
 80052c4:	20004030 	.word	0x20004030
 80052c8:	20004038 	.word	0x20004038

080052cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052d4:	4b28      	ldr	r3, [pc, #160]	; (8005378 <prvInsertBlockIntoFreeList+0xac>)
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	e002      	b.n	80052e0 <prvInsertBlockIntoFreeList+0x14>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d8f7      	bhi.n	80052da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	4413      	add	r3, r2
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d108      	bne.n	800530e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	441a      	add	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	441a      	add	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	429a      	cmp	r2, r3
 8005320:	d118      	bne.n	8005354 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	4b15      	ldr	r3, [pc, #84]	; (800537c <prvInsertBlockIntoFreeList+0xb0>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d00d      	beq.n	800534a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	441a      	add	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	e008      	b.n	800535c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800534a:	4b0c      	ldr	r3, [pc, #48]	; (800537c <prvInsertBlockIntoFreeList+0xb0>)
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	e003      	b.n	800535c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	429a      	cmp	r2, r3
 8005362:	d002      	beq.n	800536a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800536a:	bf00      	nop
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	20004024 	.word	0x20004024
 800537c:	2000402c 	.word	0x2000402c

08005380 <registerSpiLock>:
#if !defined(SUPRESS_SETUP_WARNING) && !defined(SUPRESS_ALL)
	else printf("! Setup Warning: %s not setup on this device.\r\n", name);
#endif
}

spiLock_t* registerSpiLock() {
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
	if(_spiLocksRegistered < NUM_SPI_LOCKS) {
 8005384:	4b10      	ldr	r3, [pc, #64]	; (80053c8 <registerSpiLock+0x48>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d817      	bhi.n	80053bc <registerSpiLock+0x3c>
		_spiLocks[_spiLocksRegistered].lock = false;
 800538c:	4b0e      	ldr	r3, [pc, #56]	; (80053c8 <registerSpiLock+0x48>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	4a0e      	ldr	r2, [pc, #56]	; (80053cc <registerSpiLock+0x4c>)
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	4413      	add	r3, r2
 8005396:	2200      	movs	r2, #0
 8005398:	719a      	strb	r2, [r3, #6]
		_spiLocks[_spiLocksRegistered].pin = 0x69;
 800539a:	4b0b      	ldr	r3, [pc, #44]	; (80053c8 <registerSpiLock+0x48>)
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	4a0b      	ldr	r2, [pc, #44]	; (80053cc <registerSpiLock+0x4c>)
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	4413      	add	r3, r2
 80053a4:	2269      	movs	r2, #105	; 0x69
 80053a6:	809a      	strh	r2, [r3, #4]
		return &_spiLocks[_spiLocksRegistered++];
 80053a8:	4b07      	ldr	r3, [pc, #28]	; (80053c8 <registerSpiLock+0x48>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	b2d1      	uxtb	r1, r2
 80053b0:	4a05      	ldr	r2, [pc, #20]	; (80053c8 <registerSpiLock+0x48>)
 80053b2:	7011      	strb	r1, [r2, #0]
 80053b4:	00db      	lsls	r3, r3, #3
 80053b6:	4a05      	ldr	r2, [pc, #20]	; (80053cc <registerSpiLock+0x4c>)
 80053b8:	4413      	add	r3, r2
 80053ba:	e000      	b.n	80053be <registerSpiLock+0x3e>
	}
	else return NULL;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	2000403c 	.word	0x2000403c
 80053cc:	20004738 	.word	0x20004738

080053d0 <setSpiLock>:

void setSpiLock(GPIO_TypeDef* port, uint16_t pin, spiLock_t* locker) {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	460b      	mov	r3, r1
 80053da:	607a      	str	r2, [r7, #4]
 80053dc:	817b      	strh	r3, [r7, #10]
	if(locker->lock) {
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	799b      	ldrb	r3, [r3, #6]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00d      	beq.n	8005402 <setSpiLock+0x32>
		if(pin != FAKE_GPIO) HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 80053e6:	897b      	ldrh	r3, [r7, #10]
 80053e8:	f248 0201 	movw	r2, #32769	; 0x8001
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d005      	beq.n	80053fc <setSpiLock+0x2c>
 80053f0:	897b      	ldrh	r3, [r7, #10]
 80053f2:	2201      	movs	r2, #1
 80053f4:	4619      	mov	r1, r3
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f7fc fda0 	bl	8001f3c <HAL_GPIO_WritePin>
		locker->lock = false;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	719a      	strb	r2, [r3, #6]
	}
	locker->port = port;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	601a      	str	r2, [r3, #0]
	locker->pin = pin;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	897a      	ldrh	r2, [r7, #10]
 800540c:	809a      	strh	r2, [r3, #4]
	if(pin != FAKE_GPIO) HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 800540e:	897b      	ldrh	r3, [r7, #10]
 8005410:	f248 0201 	movw	r2, #32769	; 0x8001
 8005414:	4293      	cmp	r3, r2
 8005416:	d005      	beq.n	8005424 <setSpiLock+0x54>
 8005418:	897b      	ldrh	r3, [r7, #10]
 800541a:	2201      	movs	r2, #1
 800541c:	4619      	mov	r1, r3
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f7fc fd8c 	bl	8001f3c <HAL_GPIO_WritePin>

	//printf("Pin: %X\r\n", locker->pin);
}
 8005424:	bf00      	nop
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <lockSpi>:

void lockSpi(spiLock_t* locker) {
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
	if(locker->pin != FAKE_GPIO){
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	889b      	ldrh	r3, [r3, #4]
 8005438:	f248 0201 	movw	r2, #32769	; 0x8001
 800543c:	4293      	cmp	r3, r2
 800543e:	d007      	beq.n	8005450 <lockSpi+0x24>
		HAL_GPIO_WritePin(locker->port, locker->pin, GPIO_PIN_RESET);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6818      	ldr	r0, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	889b      	ldrh	r3, [r3, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	4619      	mov	r1, r3
 800544c:	f7fc fd76 	bl	8001f3c <HAL_GPIO_WritePin>
	}
	locker->lock = true;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	719a      	strb	r2, [r3, #6]
}
 8005456:	bf00      	nop
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <unlockSpi>:
void unlockSpi(spiLock_t* locker) {
 800545e:	b580      	push	{r7, lr}
 8005460:	b082      	sub	sp, #8
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
	if(locker->pin != FAKE_GPIO){
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	889b      	ldrh	r3, [r3, #4]
 800546a:	f248 0201 	movw	r2, #32769	; 0x8001
 800546e:	4293      	cmp	r3, r2
 8005470:	d007      	beq.n	8005482 <unlockSpi+0x24>
		HAL_GPIO_WritePin(locker->port, locker->pin, GPIO_PIN_SET);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6818      	ldr	r0, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	889b      	ldrh	r3, [r3, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	4619      	mov	r1, r3
 800547e:	f7fc fd5d 	bl	8001f3c <HAL_GPIO_WritePin>
	}
	locker->lock = false;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	719a      	strb	r2, [r3, #6]
}
 8005488:	bf00      	nop
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <sendSPI>:

HAL_StatusTypeDef sendSPI(uint8_t * cmd, int len, GPIO_TypeDef * port, uint16_t pin, SPI_HandleTypeDef *bus)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef state = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	74fb      	strb	r3, [r7, #19]
	if (pin == FAKE_GPIO) return state;
 80054a2:	887b      	ldrh	r3, [r7, #2]
 80054a4:	f248 0201 	movw	r2, #32769	; 0x8001
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d101      	bne.n	80054b0 <sendSPI+0x20>
 80054ac:	7cfb      	ldrb	r3, [r7, #19]
 80054ae:	e03a      	b.n	8005526 <sendSPI+0x96>
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //CS low
 80054b0:	887b      	ldrh	r3, [r7, #2]
 80054b2:	2200      	movs	r2, #0
 80054b4:	4619      	mov	r1, r3
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7fc fd40 	bl	8001f3c <HAL_GPIO_WritePin>
	state = HAL_SPI_Transmit(bus, cmd, len, HAL_MAX_DELAY);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	b29a      	uxth	r2, r3
 80054c0:	f04f 33ff 	mov.w	r3, #4294967295
 80054c4:	68f9      	ldr	r1, [r7, #12]
 80054c6:	6a38      	ldr	r0, [r7, #32]
 80054c8:	f7fd fa18 	bl	80028fc <HAL_SPI_Transmit>
 80054cc:	4603      	mov	r3, r0
 80054ce:	74fb      	strb	r3, [r7, #19]
	for(int i = 0; i < _spiLocksRegistered; i++)
 80054d0:	2300      	movs	r3, #0
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	e018      	b.n	8005508 <sendSPI+0x78>
		if((_spiLocks[i]).port == port && (_spiLocks[i]).pin == pin)
 80054d6:	4a16      	ldr	r2, [pc, #88]	; (8005530 <sendSPI+0xa0>)
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d10e      	bne.n	8005502 <sendSPI+0x72>
 80054e4:	4a12      	ldr	r2, [pc, #72]	; (8005530 <sendSPI+0xa0>)
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	4413      	add	r3, r2
 80054ec:	889b      	ldrh	r3, [r3, #4]
 80054ee:	887a      	ldrh	r2, [r7, #2]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d106      	bne.n	8005502 <sendSPI+0x72>
			if(_spiLocks[i].lock == true) goto bypass_unlock;
 80054f4:	4a0e      	ldr	r2, [pc, #56]	; (8005530 <sendSPI+0xa0>)
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	4413      	add	r3, r2
 80054fc:	799b      	ldrb	r3, [r3, #6]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10f      	bne.n	8005522 <sendSPI+0x92>
	for(int i = 0; i < _spiLocksRegistered; i++)
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	3301      	adds	r3, #1
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <sendSPI+0xa4>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	461a      	mov	r2, r3
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	4293      	cmp	r3, r2
 8005512:	dbe0      	blt.n	80054d6 <sendSPI+0x46>
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);	//CS high
 8005514:	887b      	ldrh	r3, [r7, #2]
 8005516:	2201      	movs	r2, #1
 8005518:	4619      	mov	r1, r3
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7fc fd0e 	bl	8001f3c <HAL_GPIO_WritePin>
 8005520:	e000      	b.n	8005524 <sendSPI+0x94>
			if(_spiLocks[i].lock == true) goto bypass_unlock;
 8005522:	bf00      	nop
	bypass_unlock:

	return state;
 8005524:	7cfb      	ldrb	r3, [r7, #19]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20004738 	.word	0x20004738
 8005534:	2000403c 	.word	0x2000403c

08005538 <recieveSPI>:

HAL_StatusTypeDef recieveSPI(uint8_t * cmd, int cmdLen, uint8_t * data, int dataLen, GPIO_TypeDef * port, uint16_t pin,  SPI_HandleTypeDef *bus)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
 8005544:	603b      	str	r3, [r7, #0]

	//Note: dataLen should be number of bytes in the register group being read
	HAL_StatusTypeDef state = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	74fb      	strb	r3, [r7, #19]
	if (pin == FAKE_GPIO) return state;
 800554a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800554c:	f248 0201 	movw	r2, #32769	; 0x8001
 8005550:	4293      	cmp	r3, r2
 8005552:	d101      	bne.n	8005558 <recieveSPI+0x20>
 8005554:	7cfb      	ldrb	r3, [r7, #19]
 8005556:	e042      	b.n	80055de <recieveSPI+0xa6>
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //CS low
 8005558:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800555a:	2200      	movs	r2, #0
 800555c:	4619      	mov	r1, r3
 800555e:	6a38      	ldr	r0, [r7, #32]
 8005560:	f7fc fcec 	bl	8001f3c <HAL_GPIO_WritePin>
	state = HAL_SPI_Transmit(bus, cmd, cmdLen, HAL_MAX_DELAY);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	b29a      	uxth	r2, r3
 8005568:	f04f 33ff 	mov.w	r3, #4294967295
 800556c:	68f9      	ldr	r1, [r7, #12]
 800556e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005570:	f7fd f9c4 	bl	80028fc <HAL_SPI_Transmit>
 8005574:	4603      	mov	r3, r0
 8005576:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Receive(bus, data, dataLen, HAL_MAX_DELAY);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	b29a      	uxth	r2, r3
 800557c:	f04f 33ff 	mov.w	r3, #4294967295
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005584:	f7fd faee 	bl	8002b64 <HAL_SPI_Receive>
	for(int i = 0; i < _spiLocksRegistered; i++)
 8005588:	2300      	movs	r3, #0
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	e018      	b.n	80055c0 <recieveSPI+0x88>
		if((_spiLocks[i]).port == port && (_spiLocks[i]).pin == pin)
 800558e:	4a16      	ldr	r2, [pc, #88]	; (80055e8 <recieveSPI+0xb0>)
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005596:	6a3a      	ldr	r2, [r7, #32]
 8005598:	429a      	cmp	r2, r3
 800559a:	d10e      	bne.n	80055ba <recieveSPI+0x82>
 800559c:	4a12      	ldr	r2, [pc, #72]	; (80055e8 <recieveSPI+0xb0>)
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	4413      	add	r3, r2
 80055a4:	889b      	ldrh	r3, [r3, #4]
 80055a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d106      	bne.n	80055ba <recieveSPI+0x82>
			if(_spiLocks[i].lock == true) goto bypass_unlock;
 80055ac:	4a0e      	ldr	r2, [pc, #56]	; (80055e8 <recieveSPI+0xb0>)
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	4413      	add	r3, r2
 80055b4:	799b      	ldrb	r3, [r3, #6]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10f      	bne.n	80055da <recieveSPI+0xa2>
	for(int i = 0; i < _spiLocksRegistered; i++)
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	3301      	adds	r3, #1
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <recieveSPI+0xb4>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	4293      	cmp	r3, r2
 80055ca:	dbe0      	blt.n	800558e <recieveSPI+0x56>
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);	//CS high
 80055cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055ce:	2201      	movs	r2, #1
 80055d0:	4619      	mov	r1, r3
 80055d2:	6a38      	ldr	r0, [r7, #32]
 80055d4:	f7fc fcb2 	bl	8001f3c <HAL_GPIO_WritePin>
 80055d8:	e000      	b.n	80055dc <recieveSPI+0xa4>
			if(_spiLocks[i].lock == true) goto bypass_unlock;
 80055da:	bf00      	nop
	bypass_unlock:

	return state;
 80055dc:	7cfb      	ldrb	r3, [r7, #19]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3718      	adds	r7, #24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20004738 	.word	0x20004738
 80055ec:	2000403c 	.word	0x2000403c

080055f0 <handleHalError>:

void handleHalError(Device_ID device)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	4603      	mov	r3, r0
 80055f8:	71fb      	strb	r3, [r7, #7]
	//Toggle an LED, send error messages, or something similar
	//I don't know what you guys need, but this is for you to fill out
	// TODO: Implement handleHalError
	extern spiLock_t* nandSpiLock;

	if(device == NAND) unlockSpi(nandSpiLock);
 80055fa:	79fb      	ldrb	r3, [r7, #7]
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	d104      	bne.n	800560a <handleHalError+0x1a>
 8005600:	4b06      	ldr	r3, [pc, #24]	; (800561c <handleHalError+0x2c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff ff2a 	bl	800545e <unlockSpi>

	nomPtr[device] = false;
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	4a04      	ldr	r2, [pc, #16]	; (8005620 <handleHalError+0x30>)
 800560e:	2100      	movs	r1, #0
 8005610:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8005614:	bf00      	nop
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	20004bac 	.word	0x20004bac
 8005620:	20004988 	.word	0x20004988

08005624 <nandInit>:
#include <nandInterface.h>
#include <common.h>

spiLock_t* nandSpiLock;

void nandInit(bool* nandNomPtr) {
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	nomPtr[NAND] = nandNomPtr;
 800562c:	4a0e      	ldr	r2, [pc, #56]	; (8005668 <nandInit+0x44>)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6113      	str	r3, [r2, #16]
	nandSpiLock = registerSpiLock();
 8005632:	f7ff fea5 	bl	8005380 <registerSpiLock>
 8005636:	4602      	mov	r2, r0
 8005638:	4b0c      	ldr	r3, [pc, #48]	; (800566c <nandInit+0x48>)
 800563a:	601a      	str	r2, [r3, #0]
	setSpiLock(NAND_CS_GPIO_Port, NAND_CS_Pin, nandSpiLock);
 800563c:	4b0b      	ldr	r3, [pc, #44]	; (800566c <nandInit+0x48>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	461a      	mov	r2, r3
 8005642:	2140      	movs	r1, #64	; 0x40
 8005644:	480a      	ldr	r0, [pc, #40]	; (8005670 <nandInit+0x4c>)
 8005646:	f7ff fec3 	bl	80053d0 <setSpiLock>
	*nandNomPtr = true;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	701a      	strb	r2, [r3, #0]

	setFeature(FEATURE_ADDR_A, 0x00);
 8005650:	2100      	movs	r1, #0
 8005652:	20a0      	movs	r0, #160	; 0xa0
 8005654:	f000 f9b8 	bl	80059c8 <setFeature>
	setFeature(FEATURE_ADDR_B, 0x10);
 8005658:	2110      	movs	r1, #16
 800565a:	20b0      	movs	r0, #176	; 0xb0
 800565c:	f000 f9b4 	bl	80059c8 <setFeature>
}
 8005660:	bf00      	nop
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	20004988 	.word	0x20004988
 800566c:	20004bac 	.word	0x20004bac
 8005670:	40020400 	.word	0x40020400

08005674 <nandBufferLoad>:
 * @author Mark Batistich
 * @date 01/21/2021
 */


void nandBufferLoad(uint32_t rowAddr){
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af02      	add	r7, sp, #8
 800567a:	6078      	str	r0, [r7, #4]
//#if CS3_PIN != FAKE_PIN
	// Variables
	uint8_t cmd[4];  // Command sent to device
	uint8_t feature; //feature byte
	bool oip = true; //operation in progress
 800567c:	2301      	movs	r3, #1
 800567e:	73fb      	strb	r3, [r7, #15]

	//Load data from cell array into buffer
	cmd[0] = R_CELL_ARRAY;
 8005680:	2313      	movs	r3, #19
 8005682:	723b      	strb	r3, [r7, #8]
	cmd[3] = rowAddr;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	b2db      	uxtb	r3, r3
 8005688:	72fb      	strb	r3, [r7, #11]
	cmd[2] = rowAddr >> 8;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	0a1b      	lsrs	r3, r3, #8
 800568e:	b2db      	uxtb	r3, r3
 8005690:	72bb      	strb	r3, [r7, #10]
	cmd[1] = rowAddr >> 16;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	0c1b      	lsrs	r3, r3, #16
 8005696:	b2db      	uxtb	r3, r3
 8005698:	727b      	strb	r3, [r7, #9]
	if (sendSPI(&cmd[0], 4, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 800569a:	f107 0008 	add.w	r0, r7, #8
 800569e:	4b10      	ldr	r3, [pc, #64]	; (80056e0 <nandBufferLoad+0x6c>)
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	2340      	movs	r3, #64	; 0x40
 80056a4:	4a0f      	ldr	r2, [pc, #60]	; (80056e4 <nandBufferLoad+0x70>)
 80056a6:	2104      	movs	r1, #4
 80056a8:	f7ff fef2 	bl	8005490 <sendSPI>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <nandBufferLoad+0x46>
		handleHalError(BMP);
 80056b2:	2001      	movs	r0, #1
 80056b4:	f7ff ff9c 	bl	80055f0 <handleHalError>
 80056b8:	e00f      	b.n	80056da <nandBufferLoad+0x66>
		return;
	}

	do{
		feature = getFeature(FEATURE_ADDR_C);
 80056ba:	20c0      	movs	r0, #192	; 0xc0
 80056bc:	f000 f95c 	bl	8005978 <getFeature>
 80056c0:	4603      	mov	r3, r0
 80056c2:	73bb      	strb	r3, [r7, #14]
		oip = getBit(feature, 0);
 80056c4:	7bbb      	ldrb	r3, [r7, #14]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	bf14      	ite	ne
 80056ce:	2301      	movne	r3, #1
 80056d0:	2300      	moveq	r3, #0
 80056d2:	73fb      	strb	r3, [r7, #15]
	}while(oip);
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1ef      	bne.n	80056ba <nandBufferLoad+0x46>
//#endif
}
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	200046e0 	.word	0x200046e0
 80056e4:	40020400 	.word	0x40020400

080056e8 <nandBufferRead>:
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */

void nandBufferRead(uint16_t colAddr, uint8_t data[], uint8_t size){
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af04      	add	r7, sp, #16
 80056ee:	4603      	mov	r3, r0
 80056f0:	6039      	str	r1, [r7, #0]
 80056f2:	80fb      	strh	r3, [r7, #6]
 80056f4:	4613      	mov	r3, r2
 80056f6:	717b      	strb	r3, [r7, #5]
//#if CS3_PIN != FAKE_PIN
	// Variables
	uint8_t cmd[4];       // Command sent to device

	//Read data from the buffer into the data array
	cmd[0] = R_BUFFER;
 80056f8:	2303      	movs	r3, #3
 80056fa:	733b      	strb	r3, [r7, #12]
	cmd[2] = colAddr;
 80056fc:	88fb      	ldrh	r3, [r7, #6]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	73bb      	strb	r3, [r7, #14]
	cmd[1] = colAddr >> 8;
 8005702:	88fb      	ldrh	r3, [r7, #6]
 8005704:	0a1b      	lsrs	r3, r3, #8
 8005706:	b29b      	uxth	r3, r3
 8005708:	b2db      	uxtb	r3, r3
 800570a:	737b      	strb	r3, [r7, #13]
	cmd[3] = 0x00; //dummy byte
 800570c:	2300      	movs	r3, #0
 800570e:	73fb      	strb	r3, [r7, #15]
	if (recieveSPI(&cmd[0], 4, data, size, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS))
 8005710:	797a      	ldrb	r2, [r7, #5]
 8005712:	f107 000c 	add.w	r0, r7, #12
 8005716:	4b0a      	ldr	r3, [pc, #40]	; (8005740 <nandBufferRead+0x58>)
 8005718:	9302      	str	r3, [sp, #8]
 800571a:	2340      	movs	r3, #64	; 0x40
 800571c:	9301      	str	r3, [sp, #4]
 800571e:	4b09      	ldr	r3, [pc, #36]	; (8005744 <nandBufferRead+0x5c>)
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	4613      	mov	r3, r2
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	2104      	movs	r1, #4
 8005728:	f7ff ff06 	bl	8005538 <recieveSPI>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <nandBufferRead+0x50>
	{
		handleHalError(BMP);
 8005732:	2001      	movs	r0, #1
 8005734:	f7ff ff5c 	bl	80055f0 <handleHalError>
		return;
	}
//#endif
}
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	200046e0 	.word	0x200046e0
 8005744:	40020400 	.word	0x40020400

08005748 <nandBufferWrite>:
 * @param colAddr: The 13 bit column address
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
void nandBufferWrite(uint16_t colAddr, uint8_t data[], uint8_t size){
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af02      	add	r7, sp, #8
 800574e:	4603      	mov	r3, r0
 8005750:	6039      	str	r1, [r7, #0]
 8005752:	80fb      	strh	r3, [r7, #6]
 8005754:	4613      	mov	r3, r2
 8005756:	717b      	strb	r3, [r7, #5]
	// Variables
	uint8_t cmd[3];       // Command sent to device

	cmd[0] = W_LOAD_RAND;
 8005758:	2384      	movs	r3, #132	; 0x84
 800575a:	733b      	strb	r3, [r7, #12]
	cmd[2] = colAddr;
 800575c:	88fb      	ldrh	r3, [r7, #6]
 800575e:	b2db      	uxtb	r3, r3
 8005760:	73bb      	strb	r3, [r7, #14]
	cmd[1] = colAddr >> 8;
 8005762:	88fb      	ldrh	r3, [r7, #6]
 8005764:	0a1b      	lsrs	r3, r3, #8
 8005766:	b29b      	uxth	r3, r3
 8005768:	b2db      	uxtb	r3, r3
 800576a:	737b      	strb	r3, [r7, #13]

	lockSpi(nandSpiLock);
 800576c:	4b15      	ldr	r3, [pc, #84]	; (80057c4 <nandBufferWrite+0x7c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4618      	mov	r0, r3
 8005772:	f7ff fe5b 	bl	800542c <lockSpi>

	if (sendSPI(&cmd[0], 3, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 8005776:	f107 000c 	add.w	r0, r7, #12
 800577a:	4b13      	ldr	r3, [pc, #76]	; (80057c8 <nandBufferWrite+0x80>)
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	2340      	movs	r3, #64	; 0x40
 8005780:	4a12      	ldr	r2, [pc, #72]	; (80057cc <nandBufferWrite+0x84>)
 8005782:	2103      	movs	r1, #3
 8005784:	f7ff fe84 	bl	8005490 <sendSPI>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <nandBufferWrite+0x4e>
		handleHalError(NAND);
 800578e:	2004      	movs	r0, #4
 8005790:	f7ff ff2e 	bl	80055f0 <handleHalError>
		return;
 8005794:	e013      	b.n	80057be <nandBufferWrite+0x76>
	}

	if (sendSPI(&data[0], size, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 8005796:	7979      	ldrb	r1, [r7, #5]
 8005798:	4b0b      	ldr	r3, [pc, #44]	; (80057c8 <nandBufferWrite+0x80>)
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	2340      	movs	r3, #64	; 0x40
 800579e:	4a0b      	ldr	r2, [pc, #44]	; (80057cc <nandBufferWrite+0x84>)
 80057a0:	6838      	ldr	r0, [r7, #0]
 80057a2:	f7ff fe75 	bl	8005490 <sendSPI>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <nandBufferWrite+0x6c>
		handleHalError(NAND);
 80057ac:	2004      	movs	r0, #4
 80057ae:	f7ff ff1f 	bl	80055f0 <handleHalError>
		return;
 80057b2:	e004      	b.n	80057be <nandBufferWrite+0x76>
	}
	unlockSpi(nandSpiLock);
 80057b4:	4b03      	ldr	r3, [pc, #12]	; (80057c4 <nandBufferWrite+0x7c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7ff fe50 	bl	800545e <unlockSpi>
}
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	20004bac 	.word	0x20004bac
 80057c8:	200046e0 	.word	0x200046e0
 80057cc:	40020400 	.word	0x40020400

080057d0 <nandBufferExecute>:
 * @param rowAddr: The 17 bit row address
 *
 * @author Mark Batistich
 * @date 01/24 /2021
 */
void nandBufferExecute(uint32_t rowAddr){
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b088      	sub	sp, #32
 80057d4:	af02      	add	r7, sp, #8
 80057d6:	6078      	str	r0, [r7, #4]
	// Variables
	uint8_t cmd[4];  // Command sent to device
	uint8_t feature; //feature byte
	bool oip = true; //operation in progress
 80057d8:	2301      	movs	r3, #1
 80057da:	75fb      	strb	r3, [r7, #23]
	bool prg_f = false; //program fail
 80057dc:	2300      	movs	r3, #0
 80057de:	75bb      	strb	r3, [r7, #22]
	bool eccs1 = false;
 80057e0:	2300      	movs	r3, #0
 80057e2:	757b      	strb	r3, [r7, #21]
	bool eccs0 = false;
 80057e4:	2300      	movs	r3, #0
 80057e6:	753b      	strb	r3, [r7, #20]

	//Load data from cell array into buffer
	cmd[0] = W_EXECUTE;
 80057e8:	2310      	movs	r3, #16
 80057ea:	733b      	strb	r3, [r7, #12]
	cmd[3] = rowAddr;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	73fb      	strb	r3, [r7, #15]
	cmd[2] = rowAddr >> 8;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	0a1b      	lsrs	r3, r3, #8
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	73bb      	strb	r3, [r7, #14]
	cmd[1] = rowAddr >> 16;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	0c1b      	lsrs	r3, r3, #16
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	737b      	strb	r3, [r7, #13]
	if (sendSPI(&cmd[0], 4, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 8005802:	f107 000c 	add.w	r0, r7, #12
 8005806:	4b24      	ldr	r3, [pc, #144]	; (8005898 <nandBufferExecute+0xc8>)
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	2340      	movs	r3, #64	; 0x40
 800580c:	4a23      	ldr	r2, [pc, #140]	; (800589c <nandBufferExecute+0xcc>)
 800580e:	2104      	movs	r1, #4
 8005810:	f7ff fe3e 	bl	8005490 <sendSPI>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <nandBufferExecute+0x52>
		handleHalError(NAND);
 800581a:	2004      	movs	r0, #4
 800581c:	f7ff fee8 	bl	80055f0 <handleHalError>
 8005820:	e036      	b.n	8005890 <nandBufferExecute+0xc0>
		return;
	}
	do{
		feature = getFeature(FEATURE_ADDR_C);
 8005822:	20c0      	movs	r0, #192	; 0xc0
 8005824:	f000 f8a8 	bl	8005978 <getFeature>
 8005828:	4603      	mov	r3, r0
 800582a:	74fb      	strb	r3, [r7, #19]
		oip = getBit(feature, 0);
 800582c:	7cfb      	ldrb	r3, [r7, #19]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	bf14      	ite	ne
 8005836:	2301      	movne	r3, #1
 8005838:	2300      	moveq	r3, #0
 800583a:	75fb      	strb	r3, [r7, #23]
		prg_f = getBit(feature, 3);
 800583c:	7cfb      	ldrb	r3, [r7, #19]
 800583e:	08db      	lsrs	r3, r3, #3
 8005840:	b2db      	uxtb	r3, r3
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	bf14      	ite	ne
 800584a:	2301      	movne	r3, #1
 800584c:	2300      	moveq	r3, #0
 800584e:	75bb      	strb	r3, [r7, #22]
		eccs1 = getBit(feature, 5);
 8005850:	7cfb      	ldrb	r3, [r7, #19]
 8005852:	095b      	lsrs	r3, r3, #5
 8005854:	b2db      	uxtb	r3, r3
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	bf14      	ite	ne
 800585e:	2301      	movne	r3, #1
 8005860:	2300      	moveq	r3, #0
 8005862:	757b      	strb	r3, [r7, #21]
		eccs0 = getBit(feature, 4);
 8005864:	7cfb      	ldrb	r3, [r7, #19]
 8005866:	091b      	lsrs	r3, r3, #4
 8005868:	b2db      	uxtb	r3, r3
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	bf14      	ite	ne
 8005872:	2301      	movne	r3, #1
 8005874:	2300      	moveq	r3, #0
 8005876:	753b      	strb	r3, [r7, #20]

		printf("prg_f: %d, eccs1: %d, eccs0: %d, oip: %d \n\r", prg_f, eccs1, eccs0, oip);
 8005878:	7db9      	ldrb	r1, [r7, #22]
 800587a:	7d7a      	ldrb	r2, [r7, #21]
 800587c:	7d38      	ldrb	r0, [r7, #20]
 800587e:	7dfb      	ldrb	r3, [r7, #23]
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	4603      	mov	r3, r0
 8005884:	4806      	ldr	r0, [pc, #24]	; (80058a0 <nandBufferExecute+0xd0>)
 8005886:	f000 f9e3 	bl	8005c50 <iprintf>
	}while(oip);
 800588a:	7dfb      	ldrb	r3, [r7, #23]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1c8      	bne.n	8005822 <nandBufferExecute+0x52>
}
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	200046e0 	.word	0x200046e0
 800589c:	40020400 	.word	0x40020400
 80058a0:	08006c1c 	.word	0x08006c1c

080058a4 <nandRead>:
 * @param colAddr: The 13 bit column address
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
void nandRead(uint32_t rowAddr, uint16_t colAddr, uint8_t data[], uint8_t size){
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	607a      	str	r2, [r7, #4]
 80058ae:	461a      	mov	r2, r3
 80058b0:	460b      	mov	r3, r1
 80058b2:	817b      	strh	r3, [r7, #10]
 80058b4:	4613      	mov	r3, r2
 80058b6:	727b      	strb	r3, [r7, #9]
	nandBufferLoad(rowAddr);
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f7ff fedb 	bl	8005674 <nandBufferLoad>
	nandBufferRead(colAddr, data, size);
 80058be:	7a7a      	ldrb	r2, [r7, #9]
 80058c0:	897b      	ldrh	r3, [r7, #10]
 80058c2:	6879      	ldr	r1, [r7, #4]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff ff0f 	bl	80056e8 <nandBufferRead>
}
 80058ca:	bf00      	nop
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <nandWrite>:
 * @param colAddr: The 13 bit column address
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
void nandWrite(uint32_t rowAddr, uint16_t colAddr, uint8_t data[], uint8_t size){
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	607a      	str	r2, [r7, #4]
 80058dc:	461a      	mov	r2, r3
 80058de:	460b      	mov	r3, r1
 80058e0:	817b      	strh	r3, [r7, #10]
 80058e2:	4613      	mov	r3, r2
 80058e4:	727b      	strb	r3, [r7, #9]


	nandBufferLoad(rowAddr);
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f7ff fec4 	bl	8005674 <nandBufferLoad>
	writeEnable();
 80058ec:	f000 f810 	bl	8005910 <writeEnable>
	nandBufferWrite(colAddr, data, size);
 80058f0:	7a7a      	ldrb	r2, [r7, #9]
 80058f2:	897b      	ldrh	r3, [r7, #10]
 80058f4:	6879      	ldr	r1, [r7, #4]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff ff26 	bl	8005748 <nandBufferWrite>
	//eraseBlock(rowAddr);
	nandBufferExecute(rowAddr);
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f7ff ff67 	bl	80057d0 <nandBufferExecute>
	writeDisable();
 8005902:	f000 f81f 	bl	8005944 <writeDisable>
	return;
 8005906:	bf00      	nop
}
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
	...

08005910 <writeEnable>:
 * @brief Enables writing
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
void writeEnable(){
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af02      	add	r7, sp, #8
	// Variables
	uint8_t cmd;  // Command sent to device

	// Send Command
	cmd = W_ENABLE;
 8005916:	2306      	movs	r3, #6
 8005918:	71fb      	strb	r3, [r7, #7]
	if (sendSPI(&cmd, 1, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 800591a:	1df8      	adds	r0, r7, #7
 800591c:	4b07      	ldr	r3, [pc, #28]	; (800593c <writeEnable+0x2c>)
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	2340      	movs	r3, #64	; 0x40
 8005922:	4a07      	ldr	r2, [pc, #28]	; (8005940 <writeEnable+0x30>)
 8005924:	2101      	movs	r1, #1
 8005926:	f7ff fdb3 	bl	8005490 <sendSPI>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <writeEnable+0x26>
		handleHalError(BMP);
 8005930:	2001      	movs	r0, #1
 8005932:	f7ff fe5d 	bl	80055f0 <handleHalError>
		return;
	}
}
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	200046e0 	.word	0x200046e0
 8005940:	40020400 	.word	0x40020400

08005944 <writeDisable>:
 * @brief Disables writing
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
void writeDisable(){
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af02      	add	r7, sp, #8
	// Variables
	uint8_t cmd;  // Command sent to device

	// Send Command
	cmd = W_DISABLE;
 800594a:	2304      	movs	r3, #4
 800594c:	71fb      	strb	r3, [r7, #7]
	if (sendSPI(&cmd, 1, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 800594e:	1df8      	adds	r0, r7, #7
 8005950:	4b07      	ldr	r3, [pc, #28]	; (8005970 <writeDisable+0x2c>)
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	2340      	movs	r3, #64	; 0x40
 8005956:	4a07      	ldr	r2, [pc, #28]	; (8005974 <writeDisable+0x30>)
 8005958:	2101      	movs	r1, #1
 800595a:	f7ff fd99 	bl	8005490 <sendSPI>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <writeDisable+0x26>
		handleHalError(BMP);
 8005964:	2001      	movs	r0, #1
 8005966:	f7ff fe43 	bl	80055f0 <handleHalError>
		return;
	}
}
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	200046e0 	.word	0x200046e0
 8005974:	40020400 	.word	0x40020400

08005978 <getFeature>:
 * @param featureAddr: address of the feature to get
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
uint8_t getFeature(uint8_t featureAddr){
 8005978:	b580      	push	{r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af04      	add	r7, sp, #16
 800597e:	4603      	mov	r3, r0
 8005980:	71fb      	strb	r3, [r7, #7]
	// Variables
	uint8_t cmd[2];  // Command sent to device
	uint8_t feature; //feature byte

	// Send Command
	cmd[0] = GET_FEATURE;
 8005982:	230f      	movs	r3, #15
 8005984:	733b      	strb	r3, [r7, #12]
	cmd[1] = featureAddr;
 8005986:	79fb      	ldrb	r3, [r7, #7]
 8005988:	737b      	strb	r3, [r7, #13]
	if (recieveSPI(&cmd[0], 2, &feature, 1, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 800598a:	f107 020b 	add.w	r2, r7, #11
 800598e:	f107 000c 	add.w	r0, r7, #12
 8005992:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <getFeature+0x48>)
 8005994:	9302      	str	r3, [sp, #8]
 8005996:	2340      	movs	r3, #64	; 0x40
 8005998:	9301      	str	r3, [sp, #4]
 800599a:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <getFeature+0x4c>)
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	2301      	movs	r3, #1
 80059a0:	2102      	movs	r1, #2
 80059a2:	f7ff fdc9 	bl	8005538 <recieveSPI>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d004      	beq.n	80059b6 <getFeature+0x3e>
		handleHalError(BMP);
 80059ac:	2001      	movs	r0, #1
 80059ae:	f7ff fe1f 	bl	80055f0 <handleHalError>
		return 0x00;
 80059b2:	2300      	movs	r3, #0
 80059b4:	e000      	b.n	80059b8 <getFeature+0x40>
	}
	return feature;
 80059b6:	7afb      	ldrb	r3, [r7, #11]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	200046e0 	.word	0x200046e0
 80059c4:	40020400 	.word	0x40020400

080059c8 <setFeature>:
 * @param featureVal: Value to set
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
void setFeature(uint8_t featureAddr, uint8_t featureVal){
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af02      	add	r7, sp, #8
 80059ce:	4603      	mov	r3, r0
 80059d0:	460a      	mov	r2, r1
 80059d2:	71fb      	strb	r3, [r7, #7]
 80059d4:	4613      	mov	r3, r2
 80059d6:	71bb      	strb	r3, [r7, #6]
	// Variables
	uint8_t cmd[3];  // Command sent to device

	// Send Command
	cmd[0] = SET_FEATURE;
 80059d8:	231f      	movs	r3, #31
 80059da:	733b      	strb	r3, [r7, #12]
	cmd[1] = featureAddr;
 80059dc:	79fb      	ldrb	r3, [r7, #7]
 80059de:	737b      	strb	r3, [r7, #13]
	cmd[2] = featureVal;
 80059e0:	79bb      	ldrb	r3, [r7, #6]
 80059e2:	73bb      	strb	r3, [r7, #14]
	if (sendSPI(&cmd[0], 3, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 80059e4:	f107 000c 	add.w	r0, r7, #12
 80059e8:	4b07      	ldr	r3, [pc, #28]	; (8005a08 <setFeature+0x40>)
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	2340      	movs	r3, #64	; 0x40
 80059ee:	4a07      	ldr	r2, [pc, #28]	; (8005a0c <setFeature+0x44>)
 80059f0:	2103      	movs	r1, #3
 80059f2:	f7ff fd4d 	bl	8005490 <sendSPI>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <setFeature+0x3a>
		handleHalError(BMP);
 80059fc:	2001      	movs	r0, #1
 80059fe:	f7ff fdf7 	bl	80055f0 <handleHalError>
		return;
	}
}
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	200046e0 	.word	0x200046e0
 8005a0c:	40020400 	.word	0x40020400

08005a10 <eraseBlock>:
 * @param rowAddr: block to erase
 *
 * @author Mark Batistich
 * @date 2/6/2021
 */
void eraseBlock(uint32_t rowAddr){
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af02      	add	r7, sp, #8
 8005a16:	6078      	str	r0, [r7, #4]
	// Variables
	uint8_t cmd[4];  // Command sent to device
	uint8_t feature; //feature byte
	bool oip = true; //operation in progress
 8005a18:	2301      	movs	r3, #1
 8005a1a:	73fb      	strb	r3, [r7, #15]

	//Load data from cell array into buffer
	cmd[0] = BLOCK_ERASE;
 8005a1c:	23d8      	movs	r3, #216	; 0xd8
 8005a1e:	723b      	strb	r3, [r7, #8]
	cmd[3] = rowAddr;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	72fb      	strb	r3, [r7, #11]
	cmd[2] = rowAddr >> 8;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	0a1b      	lsrs	r3, r3, #8
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	72bb      	strb	r3, [r7, #10]
	cmd[1] = rowAddr >> 16;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	0c1b      	lsrs	r3, r3, #16
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	727b      	strb	r3, [r7, #9]

	writeEnable();
 8005a36:	f7ff ff6b 	bl	8005910 <writeEnable>
	if (sendSPI(&cmd[0], 4, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 8005a3a:	f107 0008 	add.w	r0, r7, #8
 8005a3e:	4b11      	ldr	r3, [pc, #68]	; (8005a84 <eraseBlock+0x74>)
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	2340      	movs	r3, #64	; 0x40
 8005a44:	4a10      	ldr	r2, [pc, #64]	; (8005a88 <eraseBlock+0x78>)
 8005a46:	2104      	movs	r1, #4
 8005a48:	f7ff fd22 	bl	8005490 <sendSPI>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <eraseBlock+0x4a>
		handleHalError(BMP);
 8005a52:	2001      	movs	r0, #1
 8005a54:	f7ff fdcc 	bl	80055f0 <handleHalError>
 8005a58:	e011      	b.n	8005a7e <eraseBlock+0x6e>
		return;
	}

	do{
		feature = getFeature(FEATURE_ADDR_C);
 8005a5a:	20c0      	movs	r0, #192	; 0xc0
 8005a5c:	f7ff ff8c 	bl	8005978 <getFeature>
 8005a60:	4603      	mov	r3, r0
 8005a62:	73bb      	strb	r3, [r7, #14]
		oip = getBit(feature, 0);
 8005a64:	7bbb      	ldrb	r3, [r7, #14]
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	bf14      	ite	ne
 8005a6e:	2301      	movne	r3, #1
 8005a70:	2300      	moveq	r3, #0
 8005a72:	73fb      	strb	r3, [r7, #15]
	}while(oip);
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1ef      	bne.n	8005a5a <eraseBlock+0x4a>
	writeDisable();
 8005a7a:	f7ff ff63 	bl	8005944 <writeDisable>
}
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	200046e0 	.word	0x200046e0
 8005a88:	40020400 	.word	0x40020400

08005a8c <__errno>:
 8005a8c:	4b01      	ldr	r3, [pc, #4]	; (8005a94 <__errno+0x8>)
 8005a8e:	6818      	ldr	r0, [r3, #0]
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	20000010 	.word	0x20000010

08005a98 <__libc_init_array>:
 8005a98:	b570      	push	{r4, r5, r6, lr}
 8005a9a:	4e0d      	ldr	r6, [pc, #52]	; (8005ad0 <__libc_init_array+0x38>)
 8005a9c:	4c0d      	ldr	r4, [pc, #52]	; (8005ad4 <__libc_init_array+0x3c>)
 8005a9e:	1ba4      	subs	r4, r4, r6
 8005aa0:	10a4      	asrs	r4, r4, #2
 8005aa2:	2500      	movs	r5, #0
 8005aa4:	42a5      	cmp	r5, r4
 8005aa6:	d109      	bne.n	8005abc <__libc_init_array+0x24>
 8005aa8:	4e0b      	ldr	r6, [pc, #44]	; (8005ad8 <__libc_init_array+0x40>)
 8005aaa:	4c0c      	ldr	r4, [pc, #48]	; (8005adc <__libc_init_array+0x44>)
 8005aac:	f001 f81e 	bl	8006aec <_init>
 8005ab0:	1ba4      	subs	r4, r4, r6
 8005ab2:	10a4      	asrs	r4, r4, #2
 8005ab4:	2500      	movs	r5, #0
 8005ab6:	42a5      	cmp	r5, r4
 8005ab8:	d105      	bne.n	8005ac6 <__libc_init_array+0x2e>
 8005aba:	bd70      	pop	{r4, r5, r6, pc}
 8005abc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ac0:	4798      	blx	r3
 8005ac2:	3501      	adds	r5, #1
 8005ac4:	e7ee      	b.n	8005aa4 <__libc_init_array+0xc>
 8005ac6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005aca:	4798      	blx	r3
 8005acc:	3501      	adds	r5, #1
 8005ace:	e7f2      	b.n	8005ab6 <__libc_init_array+0x1e>
 8005ad0:	08006d00 	.word	0x08006d00
 8005ad4:	08006d00 	.word	0x08006d00
 8005ad8:	08006d00 	.word	0x08006d00
 8005adc:	08006d04 	.word	0x08006d04

08005ae0 <malloc>:
 8005ae0:	4b02      	ldr	r3, [pc, #8]	; (8005aec <malloc+0xc>)
 8005ae2:	4601      	mov	r1, r0
 8005ae4:	6818      	ldr	r0, [r3, #0]
 8005ae6:	f000 b859 	b.w	8005b9c <_malloc_r>
 8005aea:	bf00      	nop
 8005aec:	20000010 	.word	0x20000010

08005af0 <memset>:
 8005af0:	4402      	add	r2, r0
 8005af2:	4603      	mov	r3, r0
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d100      	bne.n	8005afa <memset+0xa>
 8005af8:	4770      	bx	lr
 8005afa:	f803 1b01 	strb.w	r1, [r3], #1
 8005afe:	e7f9      	b.n	8005af4 <memset+0x4>

08005b00 <_free_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4605      	mov	r5, r0
 8005b04:	2900      	cmp	r1, #0
 8005b06:	d045      	beq.n	8005b94 <_free_r+0x94>
 8005b08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b0c:	1f0c      	subs	r4, r1, #4
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	bfb8      	it	lt
 8005b12:	18e4      	addlt	r4, r4, r3
 8005b14:	f000 fc74 	bl	8006400 <__malloc_lock>
 8005b18:	4a1f      	ldr	r2, [pc, #124]	; (8005b98 <_free_r+0x98>)
 8005b1a:	6813      	ldr	r3, [r2, #0]
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	b933      	cbnz	r3, 8005b2e <_free_r+0x2e>
 8005b20:	6063      	str	r3, [r4, #4]
 8005b22:	6014      	str	r4, [r2, #0]
 8005b24:	4628      	mov	r0, r5
 8005b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b2a:	f000 bc6a 	b.w	8006402 <__malloc_unlock>
 8005b2e:	42a3      	cmp	r3, r4
 8005b30:	d90c      	bls.n	8005b4c <_free_r+0x4c>
 8005b32:	6821      	ldr	r1, [r4, #0]
 8005b34:	1862      	adds	r2, r4, r1
 8005b36:	4293      	cmp	r3, r2
 8005b38:	bf04      	itt	eq
 8005b3a:	681a      	ldreq	r2, [r3, #0]
 8005b3c:	685b      	ldreq	r3, [r3, #4]
 8005b3e:	6063      	str	r3, [r4, #4]
 8005b40:	bf04      	itt	eq
 8005b42:	1852      	addeq	r2, r2, r1
 8005b44:	6022      	streq	r2, [r4, #0]
 8005b46:	6004      	str	r4, [r0, #0]
 8005b48:	e7ec      	b.n	8005b24 <_free_r+0x24>
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	b10a      	cbz	r2, 8005b54 <_free_r+0x54>
 8005b50:	42a2      	cmp	r2, r4
 8005b52:	d9fa      	bls.n	8005b4a <_free_r+0x4a>
 8005b54:	6819      	ldr	r1, [r3, #0]
 8005b56:	1858      	adds	r0, r3, r1
 8005b58:	42a0      	cmp	r0, r4
 8005b5a:	d10b      	bne.n	8005b74 <_free_r+0x74>
 8005b5c:	6820      	ldr	r0, [r4, #0]
 8005b5e:	4401      	add	r1, r0
 8005b60:	1858      	adds	r0, r3, r1
 8005b62:	4282      	cmp	r2, r0
 8005b64:	6019      	str	r1, [r3, #0]
 8005b66:	d1dd      	bne.n	8005b24 <_free_r+0x24>
 8005b68:	6810      	ldr	r0, [r2, #0]
 8005b6a:	6852      	ldr	r2, [r2, #4]
 8005b6c:	605a      	str	r2, [r3, #4]
 8005b6e:	4401      	add	r1, r0
 8005b70:	6019      	str	r1, [r3, #0]
 8005b72:	e7d7      	b.n	8005b24 <_free_r+0x24>
 8005b74:	d902      	bls.n	8005b7c <_free_r+0x7c>
 8005b76:	230c      	movs	r3, #12
 8005b78:	602b      	str	r3, [r5, #0]
 8005b7a:	e7d3      	b.n	8005b24 <_free_r+0x24>
 8005b7c:	6820      	ldr	r0, [r4, #0]
 8005b7e:	1821      	adds	r1, r4, r0
 8005b80:	428a      	cmp	r2, r1
 8005b82:	bf04      	itt	eq
 8005b84:	6811      	ldreq	r1, [r2, #0]
 8005b86:	6852      	ldreq	r2, [r2, #4]
 8005b88:	6062      	str	r2, [r4, #4]
 8005b8a:	bf04      	itt	eq
 8005b8c:	1809      	addeq	r1, r1, r0
 8005b8e:	6021      	streq	r1, [r4, #0]
 8005b90:	605c      	str	r4, [r3, #4]
 8005b92:	e7c7      	b.n	8005b24 <_free_r+0x24>
 8005b94:	bd38      	pop	{r3, r4, r5, pc}
 8005b96:	bf00      	nop
 8005b98:	20004040 	.word	0x20004040

08005b9c <_malloc_r>:
 8005b9c:	b570      	push	{r4, r5, r6, lr}
 8005b9e:	1ccd      	adds	r5, r1, #3
 8005ba0:	f025 0503 	bic.w	r5, r5, #3
 8005ba4:	3508      	adds	r5, #8
 8005ba6:	2d0c      	cmp	r5, #12
 8005ba8:	bf38      	it	cc
 8005baa:	250c      	movcc	r5, #12
 8005bac:	2d00      	cmp	r5, #0
 8005bae:	4606      	mov	r6, r0
 8005bb0:	db01      	blt.n	8005bb6 <_malloc_r+0x1a>
 8005bb2:	42a9      	cmp	r1, r5
 8005bb4:	d903      	bls.n	8005bbe <_malloc_r+0x22>
 8005bb6:	230c      	movs	r3, #12
 8005bb8:	6033      	str	r3, [r6, #0]
 8005bba:	2000      	movs	r0, #0
 8005bbc:	bd70      	pop	{r4, r5, r6, pc}
 8005bbe:	f000 fc1f 	bl	8006400 <__malloc_lock>
 8005bc2:	4a21      	ldr	r2, [pc, #132]	; (8005c48 <_malloc_r+0xac>)
 8005bc4:	6814      	ldr	r4, [r2, #0]
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	b991      	cbnz	r1, 8005bf0 <_malloc_r+0x54>
 8005bca:	4c20      	ldr	r4, [pc, #128]	; (8005c4c <_malloc_r+0xb0>)
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	b91b      	cbnz	r3, 8005bd8 <_malloc_r+0x3c>
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	f000 f8b9 	bl	8005d48 <_sbrk_r>
 8005bd6:	6020      	str	r0, [r4, #0]
 8005bd8:	4629      	mov	r1, r5
 8005bda:	4630      	mov	r0, r6
 8005bdc:	f000 f8b4 	bl	8005d48 <_sbrk_r>
 8005be0:	1c43      	adds	r3, r0, #1
 8005be2:	d124      	bne.n	8005c2e <_malloc_r+0x92>
 8005be4:	230c      	movs	r3, #12
 8005be6:	6033      	str	r3, [r6, #0]
 8005be8:	4630      	mov	r0, r6
 8005bea:	f000 fc0a 	bl	8006402 <__malloc_unlock>
 8005bee:	e7e4      	b.n	8005bba <_malloc_r+0x1e>
 8005bf0:	680b      	ldr	r3, [r1, #0]
 8005bf2:	1b5b      	subs	r3, r3, r5
 8005bf4:	d418      	bmi.n	8005c28 <_malloc_r+0x8c>
 8005bf6:	2b0b      	cmp	r3, #11
 8005bf8:	d90f      	bls.n	8005c1a <_malloc_r+0x7e>
 8005bfa:	600b      	str	r3, [r1, #0]
 8005bfc:	50cd      	str	r5, [r1, r3]
 8005bfe:	18cc      	adds	r4, r1, r3
 8005c00:	4630      	mov	r0, r6
 8005c02:	f000 fbfe 	bl	8006402 <__malloc_unlock>
 8005c06:	f104 000b 	add.w	r0, r4, #11
 8005c0a:	1d23      	adds	r3, r4, #4
 8005c0c:	f020 0007 	bic.w	r0, r0, #7
 8005c10:	1ac3      	subs	r3, r0, r3
 8005c12:	d0d3      	beq.n	8005bbc <_malloc_r+0x20>
 8005c14:	425a      	negs	r2, r3
 8005c16:	50e2      	str	r2, [r4, r3]
 8005c18:	e7d0      	b.n	8005bbc <_malloc_r+0x20>
 8005c1a:	428c      	cmp	r4, r1
 8005c1c:	684b      	ldr	r3, [r1, #4]
 8005c1e:	bf16      	itet	ne
 8005c20:	6063      	strne	r3, [r4, #4]
 8005c22:	6013      	streq	r3, [r2, #0]
 8005c24:	460c      	movne	r4, r1
 8005c26:	e7eb      	b.n	8005c00 <_malloc_r+0x64>
 8005c28:	460c      	mov	r4, r1
 8005c2a:	6849      	ldr	r1, [r1, #4]
 8005c2c:	e7cc      	b.n	8005bc8 <_malloc_r+0x2c>
 8005c2e:	1cc4      	adds	r4, r0, #3
 8005c30:	f024 0403 	bic.w	r4, r4, #3
 8005c34:	42a0      	cmp	r0, r4
 8005c36:	d005      	beq.n	8005c44 <_malloc_r+0xa8>
 8005c38:	1a21      	subs	r1, r4, r0
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	f000 f884 	bl	8005d48 <_sbrk_r>
 8005c40:	3001      	adds	r0, #1
 8005c42:	d0cf      	beq.n	8005be4 <_malloc_r+0x48>
 8005c44:	6025      	str	r5, [r4, #0]
 8005c46:	e7db      	b.n	8005c00 <_malloc_r+0x64>
 8005c48:	20004040 	.word	0x20004040
 8005c4c:	20004044 	.word	0x20004044

08005c50 <iprintf>:
 8005c50:	b40f      	push	{r0, r1, r2, r3}
 8005c52:	4b0a      	ldr	r3, [pc, #40]	; (8005c7c <iprintf+0x2c>)
 8005c54:	b513      	push	{r0, r1, r4, lr}
 8005c56:	681c      	ldr	r4, [r3, #0]
 8005c58:	b124      	cbz	r4, 8005c64 <iprintf+0x14>
 8005c5a:	69a3      	ldr	r3, [r4, #24]
 8005c5c:	b913      	cbnz	r3, 8005c64 <iprintf+0x14>
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f000 fae0 	bl	8006224 <__sinit>
 8005c64:	ab05      	add	r3, sp, #20
 8005c66:	9a04      	ldr	r2, [sp, #16]
 8005c68:	68a1      	ldr	r1, [r4, #8]
 8005c6a:	9301      	str	r3, [sp, #4]
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f000 fbf3 	bl	8006458 <_vfiprintf_r>
 8005c72:	b002      	add	sp, #8
 8005c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c78:	b004      	add	sp, #16
 8005c7a:	4770      	bx	lr
 8005c7c:	20000010 	.word	0x20000010

08005c80 <_puts_r>:
 8005c80:	b570      	push	{r4, r5, r6, lr}
 8005c82:	460e      	mov	r6, r1
 8005c84:	4605      	mov	r5, r0
 8005c86:	b118      	cbz	r0, 8005c90 <_puts_r+0x10>
 8005c88:	6983      	ldr	r3, [r0, #24]
 8005c8a:	b90b      	cbnz	r3, 8005c90 <_puts_r+0x10>
 8005c8c:	f000 faca 	bl	8006224 <__sinit>
 8005c90:	69ab      	ldr	r3, [r5, #24]
 8005c92:	68ac      	ldr	r4, [r5, #8]
 8005c94:	b913      	cbnz	r3, 8005c9c <_puts_r+0x1c>
 8005c96:	4628      	mov	r0, r5
 8005c98:	f000 fac4 	bl	8006224 <__sinit>
 8005c9c:	4b23      	ldr	r3, [pc, #140]	; (8005d2c <_puts_r+0xac>)
 8005c9e:	429c      	cmp	r4, r3
 8005ca0:	d117      	bne.n	8005cd2 <_puts_r+0x52>
 8005ca2:	686c      	ldr	r4, [r5, #4]
 8005ca4:	89a3      	ldrh	r3, [r4, #12]
 8005ca6:	071b      	lsls	r3, r3, #28
 8005ca8:	d51d      	bpl.n	8005ce6 <_puts_r+0x66>
 8005caa:	6923      	ldr	r3, [r4, #16]
 8005cac:	b1db      	cbz	r3, 8005ce6 <_puts_r+0x66>
 8005cae:	3e01      	subs	r6, #1
 8005cb0:	68a3      	ldr	r3, [r4, #8]
 8005cb2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	60a3      	str	r3, [r4, #8]
 8005cba:	b9e9      	cbnz	r1, 8005cf8 <_puts_r+0x78>
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	da2e      	bge.n	8005d1e <_puts_r+0x9e>
 8005cc0:	4622      	mov	r2, r4
 8005cc2:	210a      	movs	r1, #10
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	f000 f8fd 	bl	8005ec4 <__swbuf_r>
 8005cca:	3001      	adds	r0, #1
 8005ccc:	d011      	beq.n	8005cf2 <_puts_r+0x72>
 8005cce:	200a      	movs	r0, #10
 8005cd0:	e011      	b.n	8005cf6 <_puts_r+0x76>
 8005cd2:	4b17      	ldr	r3, [pc, #92]	; (8005d30 <_puts_r+0xb0>)
 8005cd4:	429c      	cmp	r4, r3
 8005cd6:	d101      	bne.n	8005cdc <_puts_r+0x5c>
 8005cd8:	68ac      	ldr	r4, [r5, #8]
 8005cda:	e7e3      	b.n	8005ca4 <_puts_r+0x24>
 8005cdc:	4b15      	ldr	r3, [pc, #84]	; (8005d34 <_puts_r+0xb4>)
 8005cde:	429c      	cmp	r4, r3
 8005ce0:	bf08      	it	eq
 8005ce2:	68ec      	ldreq	r4, [r5, #12]
 8005ce4:	e7de      	b.n	8005ca4 <_puts_r+0x24>
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	4628      	mov	r0, r5
 8005cea:	f000 f93d 	bl	8005f68 <__swsetup_r>
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	d0dd      	beq.n	8005cae <_puts_r+0x2e>
 8005cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf6:	bd70      	pop	{r4, r5, r6, pc}
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	da04      	bge.n	8005d06 <_puts_r+0x86>
 8005cfc:	69a2      	ldr	r2, [r4, #24]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	dc06      	bgt.n	8005d10 <_puts_r+0x90>
 8005d02:	290a      	cmp	r1, #10
 8005d04:	d004      	beq.n	8005d10 <_puts_r+0x90>
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	6022      	str	r2, [r4, #0]
 8005d0c:	7019      	strb	r1, [r3, #0]
 8005d0e:	e7cf      	b.n	8005cb0 <_puts_r+0x30>
 8005d10:	4622      	mov	r2, r4
 8005d12:	4628      	mov	r0, r5
 8005d14:	f000 f8d6 	bl	8005ec4 <__swbuf_r>
 8005d18:	3001      	adds	r0, #1
 8005d1a:	d1c9      	bne.n	8005cb0 <_puts_r+0x30>
 8005d1c:	e7e9      	b.n	8005cf2 <_puts_r+0x72>
 8005d1e:	6823      	ldr	r3, [r4, #0]
 8005d20:	200a      	movs	r0, #10
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	6022      	str	r2, [r4, #0]
 8005d26:	7018      	strb	r0, [r3, #0]
 8005d28:	e7e5      	b.n	8005cf6 <_puts_r+0x76>
 8005d2a:	bf00      	nop
 8005d2c:	08006c84 	.word	0x08006c84
 8005d30:	08006ca4 	.word	0x08006ca4
 8005d34:	08006c64 	.word	0x08006c64

08005d38 <puts>:
 8005d38:	4b02      	ldr	r3, [pc, #8]	; (8005d44 <puts+0xc>)
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	f7ff bf9f 	b.w	8005c80 <_puts_r>
 8005d42:	bf00      	nop
 8005d44:	20000010 	.word	0x20000010

08005d48 <_sbrk_r>:
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	4c06      	ldr	r4, [pc, #24]	; (8005d64 <_sbrk_r+0x1c>)
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	4605      	mov	r5, r0
 8005d50:	4608      	mov	r0, r1
 8005d52:	6023      	str	r3, [r4, #0]
 8005d54:	f7fb fb0e 	bl	8001374 <_sbrk>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d102      	bne.n	8005d62 <_sbrk_r+0x1a>
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	b103      	cbz	r3, 8005d62 <_sbrk_r+0x1a>
 8005d60:	602b      	str	r3, [r5, #0]
 8005d62:	bd38      	pop	{r3, r4, r5, pc}
 8005d64:	20004bb0 	.word	0x20004bb0

08005d68 <setvbuf>:
 8005d68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d6c:	461d      	mov	r5, r3
 8005d6e:	4b51      	ldr	r3, [pc, #324]	; (8005eb4 <setvbuf+0x14c>)
 8005d70:	681e      	ldr	r6, [r3, #0]
 8005d72:	4604      	mov	r4, r0
 8005d74:	460f      	mov	r7, r1
 8005d76:	4690      	mov	r8, r2
 8005d78:	b126      	cbz	r6, 8005d84 <setvbuf+0x1c>
 8005d7a:	69b3      	ldr	r3, [r6, #24]
 8005d7c:	b913      	cbnz	r3, 8005d84 <setvbuf+0x1c>
 8005d7e:	4630      	mov	r0, r6
 8005d80:	f000 fa50 	bl	8006224 <__sinit>
 8005d84:	4b4c      	ldr	r3, [pc, #304]	; (8005eb8 <setvbuf+0x150>)
 8005d86:	429c      	cmp	r4, r3
 8005d88:	d152      	bne.n	8005e30 <setvbuf+0xc8>
 8005d8a:	6874      	ldr	r4, [r6, #4]
 8005d8c:	f1b8 0f02 	cmp.w	r8, #2
 8005d90:	d006      	beq.n	8005da0 <setvbuf+0x38>
 8005d92:	f1b8 0f01 	cmp.w	r8, #1
 8005d96:	f200 8089 	bhi.w	8005eac <setvbuf+0x144>
 8005d9a:	2d00      	cmp	r5, #0
 8005d9c:	f2c0 8086 	blt.w	8005eac <setvbuf+0x144>
 8005da0:	4621      	mov	r1, r4
 8005da2:	4630      	mov	r0, r6
 8005da4:	f000 f9d4 	bl	8006150 <_fflush_r>
 8005da8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005daa:	b141      	cbz	r1, 8005dbe <setvbuf+0x56>
 8005dac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005db0:	4299      	cmp	r1, r3
 8005db2:	d002      	beq.n	8005dba <setvbuf+0x52>
 8005db4:	4630      	mov	r0, r6
 8005db6:	f7ff fea3 	bl	8005b00 <_free_r>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	6363      	str	r3, [r4, #52]	; 0x34
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	61a3      	str	r3, [r4, #24]
 8005dc2:	6063      	str	r3, [r4, #4]
 8005dc4:	89a3      	ldrh	r3, [r4, #12]
 8005dc6:	061b      	lsls	r3, r3, #24
 8005dc8:	d503      	bpl.n	8005dd2 <setvbuf+0x6a>
 8005dca:	6921      	ldr	r1, [r4, #16]
 8005dcc:	4630      	mov	r0, r6
 8005dce:	f7ff fe97 	bl	8005b00 <_free_r>
 8005dd2:	89a3      	ldrh	r3, [r4, #12]
 8005dd4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005dd8:	f023 0303 	bic.w	r3, r3, #3
 8005ddc:	f1b8 0f02 	cmp.w	r8, #2
 8005de0:	81a3      	strh	r3, [r4, #12]
 8005de2:	d05d      	beq.n	8005ea0 <setvbuf+0x138>
 8005de4:	ab01      	add	r3, sp, #4
 8005de6:	466a      	mov	r2, sp
 8005de8:	4621      	mov	r1, r4
 8005dea:	4630      	mov	r0, r6
 8005dec:	f000 faa4 	bl	8006338 <__swhatbuf_r>
 8005df0:	89a3      	ldrh	r3, [r4, #12]
 8005df2:	4318      	orrs	r0, r3
 8005df4:	81a0      	strh	r0, [r4, #12]
 8005df6:	bb2d      	cbnz	r5, 8005e44 <setvbuf+0xdc>
 8005df8:	9d00      	ldr	r5, [sp, #0]
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	f7ff fe70 	bl	8005ae0 <malloc>
 8005e00:	4607      	mov	r7, r0
 8005e02:	2800      	cmp	r0, #0
 8005e04:	d14e      	bne.n	8005ea4 <setvbuf+0x13c>
 8005e06:	f8dd 9000 	ldr.w	r9, [sp]
 8005e0a:	45a9      	cmp	r9, r5
 8005e0c:	d13c      	bne.n	8005e88 <setvbuf+0x120>
 8005e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e12:	89a3      	ldrh	r3, [r4, #12]
 8005e14:	f043 0302 	orr.w	r3, r3, #2
 8005e18:	81a3      	strh	r3, [r4, #12]
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60a3      	str	r3, [r4, #8]
 8005e1e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e22:	6023      	str	r3, [r4, #0]
 8005e24:	6123      	str	r3, [r4, #16]
 8005e26:	2301      	movs	r3, #1
 8005e28:	6163      	str	r3, [r4, #20]
 8005e2a:	b003      	add	sp, #12
 8005e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e30:	4b22      	ldr	r3, [pc, #136]	; (8005ebc <setvbuf+0x154>)
 8005e32:	429c      	cmp	r4, r3
 8005e34:	d101      	bne.n	8005e3a <setvbuf+0xd2>
 8005e36:	68b4      	ldr	r4, [r6, #8]
 8005e38:	e7a8      	b.n	8005d8c <setvbuf+0x24>
 8005e3a:	4b21      	ldr	r3, [pc, #132]	; (8005ec0 <setvbuf+0x158>)
 8005e3c:	429c      	cmp	r4, r3
 8005e3e:	bf08      	it	eq
 8005e40:	68f4      	ldreq	r4, [r6, #12]
 8005e42:	e7a3      	b.n	8005d8c <setvbuf+0x24>
 8005e44:	2f00      	cmp	r7, #0
 8005e46:	d0d8      	beq.n	8005dfa <setvbuf+0x92>
 8005e48:	69b3      	ldr	r3, [r6, #24]
 8005e4a:	b913      	cbnz	r3, 8005e52 <setvbuf+0xea>
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	f000 f9e9 	bl	8006224 <__sinit>
 8005e52:	f1b8 0f01 	cmp.w	r8, #1
 8005e56:	bf08      	it	eq
 8005e58:	89a3      	ldrheq	r3, [r4, #12]
 8005e5a:	6027      	str	r7, [r4, #0]
 8005e5c:	bf04      	itt	eq
 8005e5e:	f043 0301 	orreq.w	r3, r3, #1
 8005e62:	81a3      	strheq	r3, [r4, #12]
 8005e64:	89a3      	ldrh	r3, [r4, #12]
 8005e66:	f013 0008 	ands.w	r0, r3, #8
 8005e6a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8005e6e:	d01b      	beq.n	8005ea8 <setvbuf+0x140>
 8005e70:	f013 0001 	ands.w	r0, r3, #1
 8005e74:	bf18      	it	ne
 8005e76:	426d      	negne	r5, r5
 8005e78:	f04f 0300 	mov.w	r3, #0
 8005e7c:	bf1d      	ittte	ne
 8005e7e:	60a3      	strne	r3, [r4, #8]
 8005e80:	61a5      	strne	r5, [r4, #24]
 8005e82:	4618      	movne	r0, r3
 8005e84:	60a5      	streq	r5, [r4, #8]
 8005e86:	e7d0      	b.n	8005e2a <setvbuf+0xc2>
 8005e88:	4648      	mov	r0, r9
 8005e8a:	f7ff fe29 	bl	8005ae0 <malloc>
 8005e8e:	4607      	mov	r7, r0
 8005e90:	2800      	cmp	r0, #0
 8005e92:	d0bc      	beq.n	8005e0e <setvbuf+0xa6>
 8005e94:	89a3      	ldrh	r3, [r4, #12]
 8005e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e9a:	81a3      	strh	r3, [r4, #12]
 8005e9c:	464d      	mov	r5, r9
 8005e9e:	e7d3      	b.n	8005e48 <setvbuf+0xe0>
 8005ea0:	2000      	movs	r0, #0
 8005ea2:	e7b6      	b.n	8005e12 <setvbuf+0xaa>
 8005ea4:	46a9      	mov	r9, r5
 8005ea6:	e7f5      	b.n	8005e94 <setvbuf+0x12c>
 8005ea8:	60a0      	str	r0, [r4, #8]
 8005eaa:	e7be      	b.n	8005e2a <setvbuf+0xc2>
 8005eac:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb0:	e7bb      	b.n	8005e2a <setvbuf+0xc2>
 8005eb2:	bf00      	nop
 8005eb4:	20000010 	.word	0x20000010
 8005eb8:	08006c84 	.word	0x08006c84
 8005ebc:	08006ca4 	.word	0x08006ca4
 8005ec0:	08006c64 	.word	0x08006c64

08005ec4 <__swbuf_r>:
 8005ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec6:	460e      	mov	r6, r1
 8005ec8:	4614      	mov	r4, r2
 8005eca:	4605      	mov	r5, r0
 8005ecc:	b118      	cbz	r0, 8005ed6 <__swbuf_r+0x12>
 8005ece:	6983      	ldr	r3, [r0, #24]
 8005ed0:	b90b      	cbnz	r3, 8005ed6 <__swbuf_r+0x12>
 8005ed2:	f000 f9a7 	bl	8006224 <__sinit>
 8005ed6:	4b21      	ldr	r3, [pc, #132]	; (8005f5c <__swbuf_r+0x98>)
 8005ed8:	429c      	cmp	r4, r3
 8005eda:	d12a      	bne.n	8005f32 <__swbuf_r+0x6e>
 8005edc:	686c      	ldr	r4, [r5, #4]
 8005ede:	69a3      	ldr	r3, [r4, #24]
 8005ee0:	60a3      	str	r3, [r4, #8]
 8005ee2:	89a3      	ldrh	r3, [r4, #12]
 8005ee4:	071a      	lsls	r2, r3, #28
 8005ee6:	d52e      	bpl.n	8005f46 <__swbuf_r+0x82>
 8005ee8:	6923      	ldr	r3, [r4, #16]
 8005eea:	b363      	cbz	r3, 8005f46 <__swbuf_r+0x82>
 8005eec:	6923      	ldr	r3, [r4, #16]
 8005eee:	6820      	ldr	r0, [r4, #0]
 8005ef0:	1ac0      	subs	r0, r0, r3
 8005ef2:	6963      	ldr	r3, [r4, #20]
 8005ef4:	b2f6      	uxtb	r6, r6
 8005ef6:	4283      	cmp	r3, r0
 8005ef8:	4637      	mov	r7, r6
 8005efa:	dc04      	bgt.n	8005f06 <__swbuf_r+0x42>
 8005efc:	4621      	mov	r1, r4
 8005efe:	4628      	mov	r0, r5
 8005f00:	f000 f926 	bl	8006150 <_fflush_r>
 8005f04:	bb28      	cbnz	r0, 8005f52 <__swbuf_r+0x8e>
 8005f06:	68a3      	ldr	r3, [r4, #8]
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	60a3      	str	r3, [r4, #8]
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	6022      	str	r2, [r4, #0]
 8005f12:	701e      	strb	r6, [r3, #0]
 8005f14:	6963      	ldr	r3, [r4, #20]
 8005f16:	3001      	adds	r0, #1
 8005f18:	4283      	cmp	r3, r0
 8005f1a:	d004      	beq.n	8005f26 <__swbuf_r+0x62>
 8005f1c:	89a3      	ldrh	r3, [r4, #12]
 8005f1e:	07db      	lsls	r3, r3, #31
 8005f20:	d519      	bpl.n	8005f56 <__swbuf_r+0x92>
 8005f22:	2e0a      	cmp	r6, #10
 8005f24:	d117      	bne.n	8005f56 <__swbuf_r+0x92>
 8005f26:	4621      	mov	r1, r4
 8005f28:	4628      	mov	r0, r5
 8005f2a:	f000 f911 	bl	8006150 <_fflush_r>
 8005f2e:	b190      	cbz	r0, 8005f56 <__swbuf_r+0x92>
 8005f30:	e00f      	b.n	8005f52 <__swbuf_r+0x8e>
 8005f32:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <__swbuf_r+0x9c>)
 8005f34:	429c      	cmp	r4, r3
 8005f36:	d101      	bne.n	8005f3c <__swbuf_r+0x78>
 8005f38:	68ac      	ldr	r4, [r5, #8]
 8005f3a:	e7d0      	b.n	8005ede <__swbuf_r+0x1a>
 8005f3c:	4b09      	ldr	r3, [pc, #36]	; (8005f64 <__swbuf_r+0xa0>)
 8005f3e:	429c      	cmp	r4, r3
 8005f40:	bf08      	it	eq
 8005f42:	68ec      	ldreq	r4, [r5, #12]
 8005f44:	e7cb      	b.n	8005ede <__swbuf_r+0x1a>
 8005f46:	4621      	mov	r1, r4
 8005f48:	4628      	mov	r0, r5
 8005f4a:	f000 f80d 	bl	8005f68 <__swsetup_r>
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	d0cc      	beq.n	8005eec <__swbuf_r+0x28>
 8005f52:	f04f 37ff 	mov.w	r7, #4294967295
 8005f56:	4638      	mov	r0, r7
 8005f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	08006c84 	.word	0x08006c84
 8005f60:	08006ca4 	.word	0x08006ca4
 8005f64:	08006c64 	.word	0x08006c64

08005f68 <__swsetup_r>:
 8005f68:	4b32      	ldr	r3, [pc, #200]	; (8006034 <__swsetup_r+0xcc>)
 8005f6a:	b570      	push	{r4, r5, r6, lr}
 8005f6c:	681d      	ldr	r5, [r3, #0]
 8005f6e:	4606      	mov	r6, r0
 8005f70:	460c      	mov	r4, r1
 8005f72:	b125      	cbz	r5, 8005f7e <__swsetup_r+0x16>
 8005f74:	69ab      	ldr	r3, [r5, #24]
 8005f76:	b913      	cbnz	r3, 8005f7e <__swsetup_r+0x16>
 8005f78:	4628      	mov	r0, r5
 8005f7a:	f000 f953 	bl	8006224 <__sinit>
 8005f7e:	4b2e      	ldr	r3, [pc, #184]	; (8006038 <__swsetup_r+0xd0>)
 8005f80:	429c      	cmp	r4, r3
 8005f82:	d10f      	bne.n	8005fa4 <__swsetup_r+0x3c>
 8005f84:	686c      	ldr	r4, [r5, #4]
 8005f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	0715      	lsls	r5, r2, #28
 8005f8e:	d42c      	bmi.n	8005fea <__swsetup_r+0x82>
 8005f90:	06d0      	lsls	r0, r2, #27
 8005f92:	d411      	bmi.n	8005fb8 <__swsetup_r+0x50>
 8005f94:	2209      	movs	r2, #9
 8005f96:	6032      	str	r2, [r6, #0]
 8005f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f9c:	81a3      	strh	r3, [r4, #12]
 8005f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa2:	e03e      	b.n	8006022 <__swsetup_r+0xba>
 8005fa4:	4b25      	ldr	r3, [pc, #148]	; (800603c <__swsetup_r+0xd4>)
 8005fa6:	429c      	cmp	r4, r3
 8005fa8:	d101      	bne.n	8005fae <__swsetup_r+0x46>
 8005faa:	68ac      	ldr	r4, [r5, #8]
 8005fac:	e7eb      	b.n	8005f86 <__swsetup_r+0x1e>
 8005fae:	4b24      	ldr	r3, [pc, #144]	; (8006040 <__swsetup_r+0xd8>)
 8005fb0:	429c      	cmp	r4, r3
 8005fb2:	bf08      	it	eq
 8005fb4:	68ec      	ldreq	r4, [r5, #12]
 8005fb6:	e7e6      	b.n	8005f86 <__swsetup_r+0x1e>
 8005fb8:	0751      	lsls	r1, r2, #29
 8005fba:	d512      	bpl.n	8005fe2 <__swsetup_r+0x7a>
 8005fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fbe:	b141      	cbz	r1, 8005fd2 <__swsetup_r+0x6a>
 8005fc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fc4:	4299      	cmp	r1, r3
 8005fc6:	d002      	beq.n	8005fce <__swsetup_r+0x66>
 8005fc8:	4630      	mov	r0, r6
 8005fca:	f7ff fd99 	bl	8005b00 <_free_r>
 8005fce:	2300      	movs	r3, #0
 8005fd0:	6363      	str	r3, [r4, #52]	; 0x34
 8005fd2:	89a3      	ldrh	r3, [r4, #12]
 8005fd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fd8:	81a3      	strh	r3, [r4, #12]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	6063      	str	r3, [r4, #4]
 8005fde:	6923      	ldr	r3, [r4, #16]
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	89a3      	ldrh	r3, [r4, #12]
 8005fe4:	f043 0308 	orr.w	r3, r3, #8
 8005fe8:	81a3      	strh	r3, [r4, #12]
 8005fea:	6923      	ldr	r3, [r4, #16]
 8005fec:	b94b      	cbnz	r3, 8006002 <__swsetup_r+0x9a>
 8005fee:	89a3      	ldrh	r3, [r4, #12]
 8005ff0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ff8:	d003      	beq.n	8006002 <__swsetup_r+0x9a>
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	f000 f9bf 	bl	8006380 <__smakebuf_r>
 8006002:	89a2      	ldrh	r2, [r4, #12]
 8006004:	f012 0301 	ands.w	r3, r2, #1
 8006008:	d00c      	beq.n	8006024 <__swsetup_r+0xbc>
 800600a:	2300      	movs	r3, #0
 800600c:	60a3      	str	r3, [r4, #8]
 800600e:	6963      	ldr	r3, [r4, #20]
 8006010:	425b      	negs	r3, r3
 8006012:	61a3      	str	r3, [r4, #24]
 8006014:	6923      	ldr	r3, [r4, #16]
 8006016:	b953      	cbnz	r3, 800602e <__swsetup_r+0xc6>
 8006018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800601c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006020:	d1ba      	bne.n	8005f98 <__swsetup_r+0x30>
 8006022:	bd70      	pop	{r4, r5, r6, pc}
 8006024:	0792      	lsls	r2, r2, #30
 8006026:	bf58      	it	pl
 8006028:	6963      	ldrpl	r3, [r4, #20]
 800602a:	60a3      	str	r3, [r4, #8]
 800602c:	e7f2      	b.n	8006014 <__swsetup_r+0xac>
 800602e:	2000      	movs	r0, #0
 8006030:	e7f7      	b.n	8006022 <__swsetup_r+0xba>
 8006032:	bf00      	nop
 8006034:	20000010 	.word	0x20000010
 8006038:	08006c84 	.word	0x08006c84
 800603c:	08006ca4 	.word	0x08006ca4
 8006040:	08006c64 	.word	0x08006c64

08006044 <__sflush_r>:
 8006044:	898a      	ldrh	r2, [r1, #12]
 8006046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800604a:	4605      	mov	r5, r0
 800604c:	0710      	lsls	r0, r2, #28
 800604e:	460c      	mov	r4, r1
 8006050:	d458      	bmi.n	8006104 <__sflush_r+0xc0>
 8006052:	684b      	ldr	r3, [r1, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	dc05      	bgt.n	8006064 <__sflush_r+0x20>
 8006058:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800605a:	2b00      	cmp	r3, #0
 800605c:	dc02      	bgt.n	8006064 <__sflush_r+0x20>
 800605e:	2000      	movs	r0, #0
 8006060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006064:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006066:	2e00      	cmp	r6, #0
 8006068:	d0f9      	beq.n	800605e <__sflush_r+0x1a>
 800606a:	2300      	movs	r3, #0
 800606c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006070:	682f      	ldr	r7, [r5, #0]
 8006072:	6a21      	ldr	r1, [r4, #32]
 8006074:	602b      	str	r3, [r5, #0]
 8006076:	d032      	beq.n	80060de <__sflush_r+0x9a>
 8006078:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800607a:	89a3      	ldrh	r3, [r4, #12]
 800607c:	075a      	lsls	r2, r3, #29
 800607e:	d505      	bpl.n	800608c <__sflush_r+0x48>
 8006080:	6863      	ldr	r3, [r4, #4]
 8006082:	1ac0      	subs	r0, r0, r3
 8006084:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006086:	b10b      	cbz	r3, 800608c <__sflush_r+0x48>
 8006088:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800608a:	1ac0      	subs	r0, r0, r3
 800608c:	2300      	movs	r3, #0
 800608e:	4602      	mov	r2, r0
 8006090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006092:	6a21      	ldr	r1, [r4, #32]
 8006094:	4628      	mov	r0, r5
 8006096:	47b0      	blx	r6
 8006098:	1c43      	adds	r3, r0, #1
 800609a:	89a3      	ldrh	r3, [r4, #12]
 800609c:	d106      	bne.n	80060ac <__sflush_r+0x68>
 800609e:	6829      	ldr	r1, [r5, #0]
 80060a0:	291d      	cmp	r1, #29
 80060a2:	d848      	bhi.n	8006136 <__sflush_r+0xf2>
 80060a4:	4a29      	ldr	r2, [pc, #164]	; (800614c <__sflush_r+0x108>)
 80060a6:	40ca      	lsrs	r2, r1
 80060a8:	07d6      	lsls	r6, r2, #31
 80060aa:	d544      	bpl.n	8006136 <__sflush_r+0xf2>
 80060ac:	2200      	movs	r2, #0
 80060ae:	6062      	str	r2, [r4, #4]
 80060b0:	04d9      	lsls	r1, r3, #19
 80060b2:	6922      	ldr	r2, [r4, #16]
 80060b4:	6022      	str	r2, [r4, #0]
 80060b6:	d504      	bpl.n	80060c2 <__sflush_r+0x7e>
 80060b8:	1c42      	adds	r2, r0, #1
 80060ba:	d101      	bne.n	80060c0 <__sflush_r+0x7c>
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	b903      	cbnz	r3, 80060c2 <__sflush_r+0x7e>
 80060c0:	6560      	str	r0, [r4, #84]	; 0x54
 80060c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060c4:	602f      	str	r7, [r5, #0]
 80060c6:	2900      	cmp	r1, #0
 80060c8:	d0c9      	beq.n	800605e <__sflush_r+0x1a>
 80060ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060ce:	4299      	cmp	r1, r3
 80060d0:	d002      	beq.n	80060d8 <__sflush_r+0x94>
 80060d2:	4628      	mov	r0, r5
 80060d4:	f7ff fd14 	bl	8005b00 <_free_r>
 80060d8:	2000      	movs	r0, #0
 80060da:	6360      	str	r0, [r4, #52]	; 0x34
 80060dc:	e7c0      	b.n	8006060 <__sflush_r+0x1c>
 80060de:	2301      	movs	r3, #1
 80060e0:	4628      	mov	r0, r5
 80060e2:	47b0      	blx	r6
 80060e4:	1c41      	adds	r1, r0, #1
 80060e6:	d1c8      	bne.n	800607a <__sflush_r+0x36>
 80060e8:	682b      	ldr	r3, [r5, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d0c5      	beq.n	800607a <__sflush_r+0x36>
 80060ee:	2b1d      	cmp	r3, #29
 80060f0:	d001      	beq.n	80060f6 <__sflush_r+0xb2>
 80060f2:	2b16      	cmp	r3, #22
 80060f4:	d101      	bne.n	80060fa <__sflush_r+0xb6>
 80060f6:	602f      	str	r7, [r5, #0]
 80060f8:	e7b1      	b.n	800605e <__sflush_r+0x1a>
 80060fa:	89a3      	ldrh	r3, [r4, #12]
 80060fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006100:	81a3      	strh	r3, [r4, #12]
 8006102:	e7ad      	b.n	8006060 <__sflush_r+0x1c>
 8006104:	690f      	ldr	r7, [r1, #16]
 8006106:	2f00      	cmp	r7, #0
 8006108:	d0a9      	beq.n	800605e <__sflush_r+0x1a>
 800610a:	0793      	lsls	r3, r2, #30
 800610c:	680e      	ldr	r6, [r1, #0]
 800610e:	bf08      	it	eq
 8006110:	694b      	ldreq	r3, [r1, #20]
 8006112:	600f      	str	r7, [r1, #0]
 8006114:	bf18      	it	ne
 8006116:	2300      	movne	r3, #0
 8006118:	eba6 0807 	sub.w	r8, r6, r7
 800611c:	608b      	str	r3, [r1, #8]
 800611e:	f1b8 0f00 	cmp.w	r8, #0
 8006122:	dd9c      	ble.n	800605e <__sflush_r+0x1a>
 8006124:	4643      	mov	r3, r8
 8006126:	463a      	mov	r2, r7
 8006128:	6a21      	ldr	r1, [r4, #32]
 800612a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800612c:	4628      	mov	r0, r5
 800612e:	47b0      	blx	r6
 8006130:	2800      	cmp	r0, #0
 8006132:	dc06      	bgt.n	8006142 <__sflush_r+0xfe>
 8006134:	89a3      	ldrh	r3, [r4, #12]
 8006136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800613a:	81a3      	strh	r3, [r4, #12]
 800613c:	f04f 30ff 	mov.w	r0, #4294967295
 8006140:	e78e      	b.n	8006060 <__sflush_r+0x1c>
 8006142:	4407      	add	r7, r0
 8006144:	eba8 0800 	sub.w	r8, r8, r0
 8006148:	e7e9      	b.n	800611e <__sflush_r+0xda>
 800614a:	bf00      	nop
 800614c:	20400001 	.word	0x20400001

08006150 <_fflush_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	690b      	ldr	r3, [r1, #16]
 8006154:	4605      	mov	r5, r0
 8006156:	460c      	mov	r4, r1
 8006158:	b1db      	cbz	r3, 8006192 <_fflush_r+0x42>
 800615a:	b118      	cbz	r0, 8006164 <_fflush_r+0x14>
 800615c:	6983      	ldr	r3, [r0, #24]
 800615e:	b90b      	cbnz	r3, 8006164 <_fflush_r+0x14>
 8006160:	f000 f860 	bl	8006224 <__sinit>
 8006164:	4b0c      	ldr	r3, [pc, #48]	; (8006198 <_fflush_r+0x48>)
 8006166:	429c      	cmp	r4, r3
 8006168:	d109      	bne.n	800617e <_fflush_r+0x2e>
 800616a:	686c      	ldr	r4, [r5, #4]
 800616c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006170:	b17b      	cbz	r3, 8006192 <_fflush_r+0x42>
 8006172:	4621      	mov	r1, r4
 8006174:	4628      	mov	r0, r5
 8006176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800617a:	f7ff bf63 	b.w	8006044 <__sflush_r>
 800617e:	4b07      	ldr	r3, [pc, #28]	; (800619c <_fflush_r+0x4c>)
 8006180:	429c      	cmp	r4, r3
 8006182:	d101      	bne.n	8006188 <_fflush_r+0x38>
 8006184:	68ac      	ldr	r4, [r5, #8]
 8006186:	e7f1      	b.n	800616c <_fflush_r+0x1c>
 8006188:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <_fflush_r+0x50>)
 800618a:	429c      	cmp	r4, r3
 800618c:	bf08      	it	eq
 800618e:	68ec      	ldreq	r4, [r5, #12]
 8006190:	e7ec      	b.n	800616c <_fflush_r+0x1c>
 8006192:	2000      	movs	r0, #0
 8006194:	bd38      	pop	{r3, r4, r5, pc}
 8006196:	bf00      	nop
 8006198:	08006c84 	.word	0x08006c84
 800619c:	08006ca4 	.word	0x08006ca4
 80061a0:	08006c64 	.word	0x08006c64

080061a4 <std>:
 80061a4:	2300      	movs	r3, #0
 80061a6:	b510      	push	{r4, lr}
 80061a8:	4604      	mov	r4, r0
 80061aa:	e9c0 3300 	strd	r3, r3, [r0]
 80061ae:	6083      	str	r3, [r0, #8]
 80061b0:	8181      	strh	r1, [r0, #12]
 80061b2:	6643      	str	r3, [r0, #100]	; 0x64
 80061b4:	81c2      	strh	r2, [r0, #14]
 80061b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061ba:	6183      	str	r3, [r0, #24]
 80061bc:	4619      	mov	r1, r3
 80061be:	2208      	movs	r2, #8
 80061c0:	305c      	adds	r0, #92	; 0x5c
 80061c2:	f7ff fc95 	bl	8005af0 <memset>
 80061c6:	4b05      	ldr	r3, [pc, #20]	; (80061dc <std+0x38>)
 80061c8:	6263      	str	r3, [r4, #36]	; 0x24
 80061ca:	4b05      	ldr	r3, [pc, #20]	; (80061e0 <std+0x3c>)
 80061cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80061ce:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <std+0x40>)
 80061d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061d2:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <std+0x44>)
 80061d4:	6224      	str	r4, [r4, #32]
 80061d6:	6323      	str	r3, [r4, #48]	; 0x30
 80061d8:	bd10      	pop	{r4, pc}
 80061da:	bf00      	nop
 80061dc:	08006995 	.word	0x08006995
 80061e0:	080069b7 	.word	0x080069b7
 80061e4:	080069ef 	.word	0x080069ef
 80061e8:	08006a13 	.word	0x08006a13

080061ec <_cleanup_r>:
 80061ec:	4901      	ldr	r1, [pc, #4]	; (80061f4 <_cleanup_r+0x8>)
 80061ee:	f000 b885 	b.w	80062fc <_fwalk_reent>
 80061f2:	bf00      	nop
 80061f4:	08006151 	.word	0x08006151

080061f8 <__sfmoreglue>:
 80061f8:	b570      	push	{r4, r5, r6, lr}
 80061fa:	1e4a      	subs	r2, r1, #1
 80061fc:	2568      	movs	r5, #104	; 0x68
 80061fe:	4355      	muls	r5, r2
 8006200:	460e      	mov	r6, r1
 8006202:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006206:	f7ff fcc9 	bl	8005b9c <_malloc_r>
 800620a:	4604      	mov	r4, r0
 800620c:	b140      	cbz	r0, 8006220 <__sfmoreglue+0x28>
 800620e:	2100      	movs	r1, #0
 8006210:	e9c0 1600 	strd	r1, r6, [r0]
 8006214:	300c      	adds	r0, #12
 8006216:	60a0      	str	r0, [r4, #8]
 8006218:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800621c:	f7ff fc68 	bl	8005af0 <memset>
 8006220:	4620      	mov	r0, r4
 8006222:	bd70      	pop	{r4, r5, r6, pc}

08006224 <__sinit>:
 8006224:	6983      	ldr	r3, [r0, #24]
 8006226:	b510      	push	{r4, lr}
 8006228:	4604      	mov	r4, r0
 800622a:	bb33      	cbnz	r3, 800627a <__sinit+0x56>
 800622c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006230:	6503      	str	r3, [r0, #80]	; 0x50
 8006232:	4b12      	ldr	r3, [pc, #72]	; (800627c <__sinit+0x58>)
 8006234:	4a12      	ldr	r2, [pc, #72]	; (8006280 <__sinit+0x5c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6282      	str	r2, [r0, #40]	; 0x28
 800623a:	4298      	cmp	r0, r3
 800623c:	bf04      	itt	eq
 800623e:	2301      	moveq	r3, #1
 8006240:	6183      	streq	r3, [r0, #24]
 8006242:	f000 f81f 	bl	8006284 <__sfp>
 8006246:	6060      	str	r0, [r4, #4]
 8006248:	4620      	mov	r0, r4
 800624a:	f000 f81b 	bl	8006284 <__sfp>
 800624e:	60a0      	str	r0, [r4, #8]
 8006250:	4620      	mov	r0, r4
 8006252:	f000 f817 	bl	8006284 <__sfp>
 8006256:	2200      	movs	r2, #0
 8006258:	60e0      	str	r0, [r4, #12]
 800625a:	2104      	movs	r1, #4
 800625c:	6860      	ldr	r0, [r4, #4]
 800625e:	f7ff ffa1 	bl	80061a4 <std>
 8006262:	2201      	movs	r2, #1
 8006264:	2109      	movs	r1, #9
 8006266:	68a0      	ldr	r0, [r4, #8]
 8006268:	f7ff ff9c 	bl	80061a4 <std>
 800626c:	2202      	movs	r2, #2
 800626e:	2112      	movs	r1, #18
 8006270:	68e0      	ldr	r0, [r4, #12]
 8006272:	f7ff ff97 	bl	80061a4 <std>
 8006276:	2301      	movs	r3, #1
 8006278:	61a3      	str	r3, [r4, #24]
 800627a:	bd10      	pop	{r4, pc}
 800627c:	08006c60 	.word	0x08006c60
 8006280:	080061ed 	.word	0x080061ed

08006284 <__sfp>:
 8006284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006286:	4b1b      	ldr	r3, [pc, #108]	; (80062f4 <__sfp+0x70>)
 8006288:	681e      	ldr	r6, [r3, #0]
 800628a:	69b3      	ldr	r3, [r6, #24]
 800628c:	4607      	mov	r7, r0
 800628e:	b913      	cbnz	r3, 8006296 <__sfp+0x12>
 8006290:	4630      	mov	r0, r6
 8006292:	f7ff ffc7 	bl	8006224 <__sinit>
 8006296:	3648      	adds	r6, #72	; 0x48
 8006298:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800629c:	3b01      	subs	r3, #1
 800629e:	d503      	bpl.n	80062a8 <__sfp+0x24>
 80062a0:	6833      	ldr	r3, [r6, #0]
 80062a2:	b133      	cbz	r3, 80062b2 <__sfp+0x2e>
 80062a4:	6836      	ldr	r6, [r6, #0]
 80062a6:	e7f7      	b.n	8006298 <__sfp+0x14>
 80062a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80062ac:	b16d      	cbz	r5, 80062ca <__sfp+0x46>
 80062ae:	3468      	adds	r4, #104	; 0x68
 80062b0:	e7f4      	b.n	800629c <__sfp+0x18>
 80062b2:	2104      	movs	r1, #4
 80062b4:	4638      	mov	r0, r7
 80062b6:	f7ff ff9f 	bl	80061f8 <__sfmoreglue>
 80062ba:	6030      	str	r0, [r6, #0]
 80062bc:	2800      	cmp	r0, #0
 80062be:	d1f1      	bne.n	80062a4 <__sfp+0x20>
 80062c0:	230c      	movs	r3, #12
 80062c2:	603b      	str	r3, [r7, #0]
 80062c4:	4604      	mov	r4, r0
 80062c6:	4620      	mov	r0, r4
 80062c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062ca:	4b0b      	ldr	r3, [pc, #44]	; (80062f8 <__sfp+0x74>)
 80062cc:	6665      	str	r5, [r4, #100]	; 0x64
 80062ce:	e9c4 5500 	strd	r5, r5, [r4]
 80062d2:	60a5      	str	r5, [r4, #8]
 80062d4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80062d8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80062dc:	2208      	movs	r2, #8
 80062de:	4629      	mov	r1, r5
 80062e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80062e4:	f7ff fc04 	bl	8005af0 <memset>
 80062e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80062ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80062f0:	e7e9      	b.n	80062c6 <__sfp+0x42>
 80062f2:	bf00      	nop
 80062f4:	08006c60 	.word	0x08006c60
 80062f8:	ffff0001 	.word	0xffff0001

080062fc <_fwalk_reent>:
 80062fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006300:	4680      	mov	r8, r0
 8006302:	4689      	mov	r9, r1
 8006304:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006308:	2600      	movs	r6, #0
 800630a:	b914      	cbnz	r4, 8006312 <_fwalk_reent+0x16>
 800630c:	4630      	mov	r0, r6
 800630e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006312:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006316:	3f01      	subs	r7, #1
 8006318:	d501      	bpl.n	800631e <_fwalk_reent+0x22>
 800631a:	6824      	ldr	r4, [r4, #0]
 800631c:	e7f5      	b.n	800630a <_fwalk_reent+0xe>
 800631e:	89ab      	ldrh	r3, [r5, #12]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d907      	bls.n	8006334 <_fwalk_reent+0x38>
 8006324:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006328:	3301      	adds	r3, #1
 800632a:	d003      	beq.n	8006334 <_fwalk_reent+0x38>
 800632c:	4629      	mov	r1, r5
 800632e:	4640      	mov	r0, r8
 8006330:	47c8      	blx	r9
 8006332:	4306      	orrs	r6, r0
 8006334:	3568      	adds	r5, #104	; 0x68
 8006336:	e7ee      	b.n	8006316 <_fwalk_reent+0x1a>

08006338 <__swhatbuf_r>:
 8006338:	b570      	push	{r4, r5, r6, lr}
 800633a:	460e      	mov	r6, r1
 800633c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006340:	2900      	cmp	r1, #0
 8006342:	b096      	sub	sp, #88	; 0x58
 8006344:	4614      	mov	r4, r2
 8006346:	461d      	mov	r5, r3
 8006348:	da07      	bge.n	800635a <__swhatbuf_r+0x22>
 800634a:	2300      	movs	r3, #0
 800634c:	602b      	str	r3, [r5, #0]
 800634e:	89b3      	ldrh	r3, [r6, #12]
 8006350:	061a      	lsls	r2, r3, #24
 8006352:	d410      	bmi.n	8006376 <__swhatbuf_r+0x3e>
 8006354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006358:	e00e      	b.n	8006378 <__swhatbuf_r+0x40>
 800635a:	466a      	mov	r2, sp
 800635c:	f000 fb80 	bl	8006a60 <_fstat_r>
 8006360:	2800      	cmp	r0, #0
 8006362:	dbf2      	blt.n	800634a <__swhatbuf_r+0x12>
 8006364:	9a01      	ldr	r2, [sp, #4]
 8006366:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800636a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800636e:	425a      	negs	r2, r3
 8006370:	415a      	adcs	r2, r3
 8006372:	602a      	str	r2, [r5, #0]
 8006374:	e7ee      	b.n	8006354 <__swhatbuf_r+0x1c>
 8006376:	2340      	movs	r3, #64	; 0x40
 8006378:	2000      	movs	r0, #0
 800637a:	6023      	str	r3, [r4, #0]
 800637c:	b016      	add	sp, #88	; 0x58
 800637e:	bd70      	pop	{r4, r5, r6, pc}

08006380 <__smakebuf_r>:
 8006380:	898b      	ldrh	r3, [r1, #12]
 8006382:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006384:	079d      	lsls	r5, r3, #30
 8006386:	4606      	mov	r6, r0
 8006388:	460c      	mov	r4, r1
 800638a:	d507      	bpl.n	800639c <__smakebuf_r+0x1c>
 800638c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	6123      	str	r3, [r4, #16]
 8006394:	2301      	movs	r3, #1
 8006396:	6163      	str	r3, [r4, #20]
 8006398:	b002      	add	sp, #8
 800639a:	bd70      	pop	{r4, r5, r6, pc}
 800639c:	ab01      	add	r3, sp, #4
 800639e:	466a      	mov	r2, sp
 80063a0:	f7ff ffca 	bl	8006338 <__swhatbuf_r>
 80063a4:	9900      	ldr	r1, [sp, #0]
 80063a6:	4605      	mov	r5, r0
 80063a8:	4630      	mov	r0, r6
 80063aa:	f7ff fbf7 	bl	8005b9c <_malloc_r>
 80063ae:	b948      	cbnz	r0, 80063c4 <__smakebuf_r+0x44>
 80063b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063b4:	059a      	lsls	r2, r3, #22
 80063b6:	d4ef      	bmi.n	8006398 <__smakebuf_r+0x18>
 80063b8:	f023 0303 	bic.w	r3, r3, #3
 80063bc:	f043 0302 	orr.w	r3, r3, #2
 80063c0:	81a3      	strh	r3, [r4, #12]
 80063c2:	e7e3      	b.n	800638c <__smakebuf_r+0xc>
 80063c4:	4b0d      	ldr	r3, [pc, #52]	; (80063fc <__smakebuf_r+0x7c>)
 80063c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80063c8:	89a3      	ldrh	r3, [r4, #12]
 80063ca:	6020      	str	r0, [r4, #0]
 80063cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d0:	81a3      	strh	r3, [r4, #12]
 80063d2:	9b00      	ldr	r3, [sp, #0]
 80063d4:	6163      	str	r3, [r4, #20]
 80063d6:	9b01      	ldr	r3, [sp, #4]
 80063d8:	6120      	str	r0, [r4, #16]
 80063da:	b15b      	cbz	r3, 80063f4 <__smakebuf_r+0x74>
 80063dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063e0:	4630      	mov	r0, r6
 80063e2:	f000 fb4f 	bl	8006a84 <_isatty_r>
 80063e6:	b128      	cbz	r0, 80063f4 <__smakebuf_r+0x74>
 80063e8:	89a3      	ldrh	r3, [r4, #12]
 80063ea:	f023 0303 	bic.w	r3, r3, #3
 80063ee:	f043 0301 	orr.w	r3, r3, #1
 80063f2:	81a3      	strh	r3, [r4, #12]
 80063f4:	89a3      	ldrh	r3, [r4, #12]
 80063f6:	431d      	orrs	r5, r3
 80063f8:	81a5      	strh	r5, [r4, #12]
 80063fa:	e7cd      	b.n	8006398 <__smakebuf_r+0x18>
 80063fc:	080061ed 	.word	0x080061ed

08006400 <__malloc_lock>:
 8006400:	4770      	bx	lr

08006402 <__malloc_unlock>:
 8006402:	4770      	bx	lr

08006404 <__sfputc_r>:
 8006404:	6893      	ldr	r3, [r2, #8]
 8006406:	3b01      	subs	r3, #1
 8006408:	2b00      	cmp	r3, #0
 800640a:	b410      	push	{r4}
 800640c:	6093      	str	r3, [r2, #8]
 800640e:	da08      	bge.n	8006422 <__sfputc_r+0x1e>
 8006410:	6994      	ldr	r4, [r2, #24]
 8006412:	42a3      	cmp	r3, r4
 8006414:	db01      	blt.n	800641a <__sfputc_r+0x16>
 8006416:	290a      	cmp	r1, #10
 8006418:	d103      	bne.n	8006422 <__sfputc_r+0x1e>
 800641a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800641e:	f7ff bd51 	b.w	8005ec4 <__swbuf_r>
 8006422:	6813      	ldr	r3, [r2, #0]
 8006424:	1c58      	adds	r0, r3, #1
 8006426:	6010      	str	r0, [r2, #0]
 8006428:	7019      	strb	r1, [r3, #0]
 800642a:	4608      	mov	r0, r1
 800642c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006430:	4770      	bx	lr

08006432 <__sfputs_r>:
 8006432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006434:	4606      	mov	r6, r0
 8006436:	460f      	mov	r7, r1
 8006438:	4614      	mov	r4, r2
 800643a:	18d5      	adds	r5, r2, r3
 800643c:	42ac      	cmp	r4, r5
 800643e:	d101      	bne.n	8006444 <__sfputs_r+0x12>
 8006440:	2000      	movs	r0, #0
 8006442:	e007      	b.n	8006454 <__sfputs_r+0x22>
 8006444:	463a      	mov	r2, r7
 8006446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800644a:	4630      	mov	r0, r6
 800644c:	f7ff ffda 	bl	8006404 <__sfputc_r>
 8006450:	1c43      	adds	r3, r0, #1
 8006452:	d1f3      	bne.n	800643c <__sfputs_r+0xa>
 8006454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006458 <_vfiprintf_r>:
 8006458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645c:	460c      	mov	r4, r1
 800645e:	b09d      	sub	sp, #116	; 0x74
 8006460:	4617      	mov	r7, r2
 8006462:	461d      	mov	r5, r3
 8006464:	4606      	mov	r6, r0
 8006466:	b118      	cbz	r0, 8006470 <_vfiprintf_r+0x18>
 8006468:	6983      	ldr	r3, [r0, #24]
 800646a:	b90b      	cbnz	r3, 8006470 <_vfiprintf_r+0x18>
 800646c:	f7ff feda 	bl	8006224 <__sinit>
 8006470:	4b7c      	ldr	r3, [pc, #496]	; (8006664 <_vfiprintf_r+0x20c>)
 8006472:	429c      	cmp	r4, r3
 8006474:	d158      	bne.n	8006528 <_vfiprintf_r+0xd0>
 8006476:	6874      	ldr	r4, [r6, #4]
 8006478:	89a3      	ldrh	r3, [r4, #12]
 800647a:	0718      	lsls	r0, r3, #28
 800647c:	d55e      	bpl.n	800653c <_vfiprintf_r+0xe4>
 800647e:	6923      	ldr	r3, [r4, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d05b      	beq.n	800653c <_vfiprintf_r+0xe4>
 8006484:	2300      	movs	r3, #0
 8006486:	9309      	str	r3, [sp, #36]	; 0x24
 8006488:	2320      	movs	r3, #32
 800648a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800648e:	2330      	movs	r3, #48	; 0x30
 8006490:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006494:	9503      	str	r5, [sp, #12]
 8006496:	f04f 0b01 	mov.w	fp, #1
 800649a:	46b8      	mov	r8, r7
 800649c:	4645      	mov	r5, r8
 800649e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80064a2:	b10b      	cbz	r3, 80064a8 <_vfiprintf_r+0x50>
 80064a4:	2b25      	cmp	r3, #37	; 0x25
 80064a6:	d154      	bne.n	8006552 <_vfiprintf_r+0xfa>
 80064a8:	ebb8 0a07 	subs.w	sl, r8, r7
 80064ac:	d00b      	beq.n	80064c6 <_vfiprintf_r+0x6e>
 80064ae:	4653      	mov	r3, sl
 80064b0:	463a      	mov	r2, r7
 80064b2:	4621      	mov	r1, r4
 80064b4:	4630      	mov	r0, r6
 80064b6:	f7ff ffbc 	bl	8006432 <__sfputs_r>
 80064ba:	3001      	adds	r0, #1
 80064bc:	f000 80c2 	beq.w	8006644 <_vfiprintf_r+0x1ec>
 80064c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c2:	4453      	add	r3, sl
 80064c4:	9309      	str	r3, [sp, #36]	; 0x24
 80064c6:	f898 3000 	ldrb.w	r3, [r8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 80ba 	beq.w	8006644 <_vfiprintf_r+0x1ec>
 80064d0:	2300      	movs	r3, #0
 80064d2:	f04f 32ff 	mov.w	r2, #4294967295
 80064d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064da:	9304      	str	r3, [sp, #16]
 80064dc:	9307      	str	r3, [sp, #28]
 80064de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064e2:	931a      	str	r3, [sp, #104]	; 0x68
 80064e4:	46a8      	mov	r8, r5
 80064e6:	2205      	movs	r2, #5
 80064e8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80064ec:	485e      	ldr	r0, [pc, #376]	; (8006668 <_vfiprintf_r+0x210>)
 80064ee:	f7f9 fe77 	bl	80001e0 <memchr>
 80064f2:	9b04      	ldr	r3, [sp, #16]
 80064f4:	bb78      	cbnz	r0, 8006556 <_vfiprintf_r+0xfe>
 80064f6:	06d9      	lsls	r1, r3, #27
 80064f8:	bf44      	itt	mi
 80064fa:	2220      	movmi	r2, #32
 80064fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006500:	071a      	lsls	r2, r3, #28
 8006502:	bf44      	itt	mi
 8006504:	222b      	movmi	r2, #43	; 0x2b
 8006506:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800650a:	782a      	ldrb	r2, [r5, #0]
 800650c:	2a2a      	cmp	r2, #42	; 0x2a
 800650e:	d02a      	beq.n	8006566 <_vfiprintf_r+0x10e>
 8006510:	9a07      	ldr	r2, [sp, #28]
 8006512:	46a8      	mov	r8, r5
 8006514:	2000      	movs	r0, #0
 8006516:	250a      	movs	r5, #10
 8006518:	4641      	mov	r1, r8
 800651a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800651e:	3b30      	subs	r3, #48	; 0x30
 8006520:	2b09      	cmp	r3, #9
 8006522:	d969      	bls.n	80065f8 <_vfiprintf_r+0x1a0>
 8006524:	b360      	cbz	r0, 8006580 <_vfiprintf_r+0x128>
 8006526:	e024      	b.n	8006572 <_vfiprintf_r+0x11a>
 8006528:	4b50      	ldr	r3, [pc, #320]	; (800666c <_vfiprintf_r+0x214>)
 800652a:	429c      	cmp	r4, r3
 800652c:	d101      	bne.n	8006532 <_vfiprintf_r+0xda>
 800652e:	68b4      	ldr	r4, [r6, #8]
 8006530:	e7a2      	b.n	8006478 <_vfiprintf_r+0x20>
 8006532:	4b4f      	ldr	r3, [pc, #316]	; (8006670 <_vfiprintf_r+0x218>)
 8006534:	429c      	cmp	r4, r3
 8006536:	bf08      	it	eq
 8006538:	68f4      	ldreq	r4, [r6, #12]
 800653a:	e79d      	b.n	8006478 <_vfiprintf_r+0x20>
 800653c:	4621      	mov	r1, r4
 800653e:	4630      	mov	r0, r6
 8006540:	f7ff fd12 	bl	8005f68 <__swsetup_r>
 8006544:	2800      	cmp	r0, #0
 8006546:	d09d      	beq.n	8006484 <_vfiprintf_r+0x2c>
 8006548:	f04f 30ff 	mov.w	r0, #4294967295
 800654c:	b01d      	add	sp, #116	; 0x74
 800654e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006552:	46a8      	mov	r8, r5
 8006554:	e7a2      	b.n	800649c <_vfiprintf_r+0x44>
 8006556:	4a44      	ldr	r2, [pc, #272]	; (8006668 <_vfiprintf_r+0x210>)
 8006558:	1a80      	subs	r0, r0, r2
 800655a:	fa0b f000 	lsl.w	r0, fp, r0
 800655e:	4318      	orrs	r0, r3
 8006560:	9004      	str	r0, [sp, #16]
 8006562:	4645      	mov	r5, r8
 8006564:	e7be      	b.n	80064e4 <_vfiprintf_r+0x8c>
 8006566:	9a03      	ldr	r2, [sp, #12]
 8006568:	1d11      	adds	r1, r2, #4
 800656a:	6812      	ldr	r2, [r2, #0]
 800656c:	9103      	str	r1, [sp, #12]
 800656e:	2a00      	cmp	r2, #0
 8006570:	db01      	blt.n	8006576 <_vfiprintf_r+0x11e>
 8006572:	9207      	str	r2, [sp, #28]
 8006574:	e004      	b.n	8006580 <_vfiprintf_r+0x128>
 8006576:	4252      	negs	r2, r2
 8006578:	f043 0302 	orr.w	r3, r3, #2
 800657c:	9207      	str	r2, [sp, #28]
 800657e:	9304      	str	r3, [sp, #16]
 8006580:	f898 3000 	ldrb.w	r3, [r8]
 8006584:	2b2e      	cmp	r3, #46	; 0x2e
 8006586:	d10e      	bne.n	80065a6 <_vfiprintf_r+0x14e>
 8006588:	f898 3001 	ldrb.w	r3, [r8, #1]
 800658c:	2b2a      	cmp	r3, #42	; 0x2a
 800658e:	d138      	bne.n	8006602 <_vfiprintf_r+0x1aa>
 8006590:	9b03      	ldr	r3, [sp, #12]
 8006592:	1d1a      	adds	r2, r3, #4
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	9203      	str	r2, [sp, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	bfb8      	it	lt
 800659c:	f04f 33ff 	movlt.w	r3, #4294967295
 80065a0:	f108 0802 	add.w	r8, r8, #2
 80065a4:	9305      	str	r3, [sp, #20]
 80065a6:	4d33      	ldr	r5, [pc, #204]	; (8006674 <_vfiprintf_r+0x21c>)
 80065a8:	f898 1000 	ldrb.w	r1, [r8]
 80065ac:	2203      	movs	r2, #3
 80065ae:	4628      	mov	r0, r5
 80065b0:	f7f9 fe16 	bl	80001e0 <memchr>
 80065b4:	b140      	cbz	r0, 80065c8 <_vfiprintf_r+0x170>
 80065b6:	2340      	movs	r3, #64	; 0x40
 80065b8:	1b40      	subs	r0, r0, r5
 80065ba:	fa03 f000 	lsl.w	r0, r3, r0
 80065be:	9b04      	ldr	r3, [sp, #16]
 80065c0:	4303      	orrs	r3, r0
 80065c2:	f108 0801 	add.w	r8, r8, #1
 80065c6:	9304      	str	r3, [sp, #16]
 80065c8:	f898 1000 	ldrb.w	r1, [r8]
 80065cc:	482a      	ldr	r0, [pc, #168]	; (8006678 <_vfiprintf_r+0x220>)
 80065ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065d2:	2206      	movs	r2, #6
 80065d4:	f108 0701 	add.w	r7, r8, #1
 80065d8:	f7f9 fe02 	bl	80001e0 <memchr>
 80065dc:	2800      	cmp	r0, #0
 80065de:	d037      	beq.n	8006650 <_vfiprintf_r+0x1f8>
 80065e0:	4b26      	ldr	r3, [pc, #152]	; (800667c <_vfiprintf_r+0x224>)
 80065e2:	bb1b      	cbnz	r3, 800662c <_vfiprintf_r+0x1d4>
 80065e4:	9b03      	ldr	r3, [sp, #12]
 80065e6:	3307      	adds	r3, #7
 80065e8:	f023 0307 	bic.w	r3, r3, #7
 80065ec:	3308      	adds	r3, #8
 80065ee:	9303      	str	r3, [sp, #12]
 80065f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f2:	444b      	add	r3, r9
 80065f4:	9309      	str	r3, [sp, #36]	; 0x24
 80065f6:	e750      	b.n	800649a <_vfiprintf_r+0x42>
 80065f8:	fb05 3202 	mla	r2, r5, r2, r3
 80065fc:	2001      	movs	r0, #1
 80065fe:	4688      	mov	r8, r1
 8006600:	e78a      	b.n	8006518 <_vfiprintf_r+0xc0>
 8006602:	2300      	movs	r3, #0
 8006604:	f108 0801 	add.w	r8, r8, #1
 8006608:	9305      	str	r3, [sp, #20]
 800660a:	4619      	mov	r1, r3
 800660c:	250a      	movs	r5, #10
 800660e:	4640      	mov	r0, r8
 8006610:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006614:	3a30      	subs	r2, #48	; 0x30
 8006616:	2a09      	cmp	r2, #9
 8006618:	d903      	bls.n	8006622 <_vfiprintf_r+0x1ca>
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0c3      	beq.n	80065a6 <_vfiprintf_r+0x14e>
 800661e:	9105      	str	r1, [sp, #20]
 8006620:	e7c1      	b.n	80065a6 <_vfiprintf_r+0x14e>
 8006622:	fb05 2101 	mla	r1, r5, r1, r2
 8006626:	2301      	movs	r3, #1
 8006628:	4680      	mov	r8, r0
 800662a:	e7f0      	b.n	800660e <_vfiprintf_r+0x1b6>
 800662c:	ab03      	add	r3, sp, #12
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	4622      	mov	r2, r4
 8006632:	4b13      	ldr	r3, [pc, #76]	; (8006680 <_vfiprintf_r+0x228>)
 8006634:	a904      	add	r1, sp, #16
 8006636:	4630      	mov	r0, r6
 8006638:	f3af 8000 	nop.w
 800663c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006640:	4681      	mov	r9, r0
 8006642:	d1d5      	bne.n	80065f0 <_vfiprintf_r+0x198>
 8006644:	89a3      	ldrh	r3, [r4, #12]
 8006646:	065b      	lsls	r3, r3, #25
 8006648:	f53f af7e 	bmi.w	8006548 <_vfiprintf_r+0xf0>
 800664c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800664e:	e77d      	b.n	800654c <_vfiprintf_r+0xf4>
 8006650:	ab03      	add	r3, sp, #12
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	4622      	mov	r2, r4
 8006656:	4b0a      	ldr	r3, [pc, #40]	; (8006680 <_vfiprintf_r+0x228>)
 8006658:	a904      	add	r1, sp, #16
 800665a:	4630      	mov	r0, r6
 800665c:	f000 f888 	bl	8006770 <_printf_i>
 8006660:	e7ec      	b.n	800663c <_vfiprintf_r+0x1e4>
 8006662:	bf00      	nop
 8006664:	08006c84 	.word	0x08006c84
 8006668:	08006cc4 	.word	0x08006cc4
 800666c:	08006ca4 	.word	0x08006ca4
 8006670:	08006c64 	.word	0x08006c64
 8006674:	08006cca 	.word	0x08006cca
 8006678:	08006cce 	.word	0x08006cce
 800667c:	00000000 	.word	0x00000000
 8006680:	08006433 	.word	0x08006433

08006684 <_printf_common>:
 8006684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006688:	4691      	mov	r9, r2
 800668a:	461f      	mov	r7, r3
 800668c:	688a      	ldr	r2, [r1, #8]
 800668e:	690b      	ldr	r3, [r1, #16]
 8006690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006694:	4293      	cmp	r3, r2
 8006696:	bfb8      	it	lt
 8006698:	4613      	movlt	r3, r2
 800669a:	f8c9 3000 	str.w	r3, [r9]
 800669e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066a2:	4606      	mov	r6, r0
 80066a4:	460c      	mov	r4, r1
 80066a6:	b112      	cbz	r2, 80066ae <_printf_common+0x2a>
 80066a8:	3301      	adds	r3, #1
 80066aa:	f8c9 3000 	str.w	r3, [r9]
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	0699      	lsls	r1, r3, #26
 80066b2:	bf42      	ittt	mi
 80066b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80066b8:	3302      	addmi	r3, #2
 80066ba:	f8c9 3000 	strmi.w	r3, [r9]
 80066be:	6825      	ldr	r5, [r4, #0]
 80066c0:	f015 0506 	ands.w	r5, r5, #6
 80066c4:	d107      	bne.n	80066d6 <_printf_common+0x52>
 80066c6:	f104 0a19 	add.w	sl, r4, #25
 80066ca:	68e3      	ldr	r3, [r4, #12]
 80066cc:	f8d9 2000 	ldr.w	r2, [r9]
 80066d0:	1a9b      	subs	r3, r3, r2
 80066d2:	42ab      	cmp	r3, r5
 80066d4:	dc28      	bgt.n	8006728 <_printf_common+0xa4>
 80066d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80066da:	6822      	ldr	r2, [r4, #0]
 80066dc:	3300      	adds	r3, #0
 80066de:	bf18      	it	ne
 80066e0:	2301      	movne	r3, #1
 80066e2:	0692      	lsls	r2, r2, #26
 80066e4:	d42d      	bmi.n	8006742 <_printf_common+0xbe>
 80066e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066ea:	4639      	mov	r1, r7
 80066ec:	4630      	mov	r0, r6
 80066ee:	47c0      	blx	r8
 80066f0:	3001      	adds	r0, #1
 80066f2:	d020      	beq.n	8006736 <_printf_common+0xb2>
 80066f4:	6823      	ldr	r3, [r4, #0]
 80066f6:	68e5      	ldr	r5, [r4, #12]
 80066f8:	f8d9 2000 	ldr.w	r2, [r9]
 80066fc:	f003 0306 	and.w	r3, r3, #6
 8006700:	2b04      	cmp	r3, #4
 8006702:	bf08      	it	eq
 8006704:	1aad      	subeq	r5, r5, r2
 8006706:	68a3      	ldr	r3, [r4, #8]
 8006708:	6922      	ldr	r2, [r4, #16]
 800670a:	bf0c      	ite	eq
 800670c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006710:	2500      	movne	r5, #0
 8006712:	4293      	cmp	r3, r2
 8006714:	bfc4      	itt	gt
 8006716:	1a9b      	subgt	r3, r3, r2
 8006718:	18ed      	addgt	r5, r5, r3
 800671a:	f04f 0900 	mov.w	r9, #0
 800671e:	341a      	adds	r4, #26
 8006720:	454d      	cmp	r5, r9
 8006722:	d11a      	bne.n	800675a <_printf_common+0xd6>
 8006724:	2000      	movs	r0, #0
 8006726:	e008      	b.n	800673a <_printf_common+0xb6>
 8006728:	2301      	movs	r3, #1
 800672a:	4652      	mov	r2, sl
 800672c:	4639      	mov	r1, r7
 800672e:	4630      	mov	r0, r6
 8006730:	47c0      	blx	r8
 8006732:	3001      	adds	r0, #1
 8006734:	d103      	bne.n	800673e <_printf_common+0xba>
 8006736:	f04f 30ff 	mov.w	r0, #4294967295
 800673a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800673e:	3501      	adds	r5, #1
 8006740:	e7c3      	b.n	80066ca <_printf_common+0x46>
 8006742:	18e1      	adds	r1, r4, r3
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	2030      	movs	r0, #48	; 0x30
 8006748:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800674c:	4422      	add	r2, r4
 800674e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006752:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006756:	3302      	adds	r3, #2
 8006758:	e7c5      	b.n	80066e6 <_printf_common+0x62>
 800675a:	2301      	movs	r3, #1
 800675c:	4622      	mov	r2, r4
 800675e:	4639      	mov	r1, r7
 8006760:	4630      	mov	r0, r6
 8006762:	47c0      	blx	r8
 8006764:	3001      	adds	r0, #1
 8006766:	d0e6      	beq.n	8006736 <_printf_common+0xb2>
 8006768:	f109 0901 	add.w	r9, r9, #1
 800676c:	e7d8      	b.n	8006720 <_printf_common+0x9c>
	...

08006770 <_printf_i>:
 8006770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006774:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006778:	460c      	mov	r4, r1
 800677a:	7e09      	ldrb	r1, [r1, #24]
 800677c:	b085      	sub	sp, #20
 800677e:	296e      	cmp	r1, #110	; 0x6e
 8006780:	4617      	mov	r7, r2
 8006782:	4606      	mov	r6, r0
 8006784:	4698      	mov	r8, r3
 8006786:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006788:	f000 80b3 	beq.w	80068f2 <_printf_i+0x182>
 800678c:	d822      	bhi.n	80067d4 <_printf_i+0x64>
 800678e:	2963      	cmp	r1, #99	; 0x63
 8006790:	d036      	beq.n	8006800 <_printf_i+0x90>
 8006792:	d80a      	bhi.n	80067aa <_printf_i+0x3a>
 8006794:	2900      	cmp	r1, #0
 8006796:	f000 80b9 	beq.w	800690c <_printf_i+0x19c>
 800679a:	2958      	cmp	r1, #88	; 0x58
 800679c:	f000 8083 	beq.w	80068a6 <_printf_i+0x136>
 80067a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80067a8:	e032      	b.n	8006810 <_printf_i+0xa0>
 80067aa:	2964      	cmp	r1, #100	; 0x64
 80067ac:	d001      	beq.n	80067b2 <_printf_i+0x42>
 80067ae:	2969      	cmp	r1, #105	; 0x69
 80067b0:	d1f6      	bne.n	80067a0 <_printf_i+0x30>
 80067b2:	6820      	ldr	r0, [r4, #0]
 80067b4:	6813      	ldr	r3, [r2, #0]
 80067b6:	0605      	lsls	r5, r0, #24
 80067b8:	f103 0104 	add.w	r1, r3, #4
 80067bc:	d52a      	bpl.n	8006814 <_printf_i+0xa4>
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6011      	str	r1, [r2, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	da03      	bge.n	80067ce <_printf_i+0x5e>
 80067c6:	222d      	movs	r2, #45	; 0x2d
 80067c8:	425b      	negs	r3, r3
 80067ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80067ce:	486f      	ldr	r0, [pc, #444]	; (800698c <_printf_i+0x21c>)
 80067d0:	220a      	movs	r2, #10
 80067d2:	e039      	b.n	8006848 <_printf_i+0xd8>
 80067d4:	2973      	cmp	r1, #115	; 0x73
 80067d6:	f000 809d 	beq.w	8006914 <_printf_i+0x1a4>
 80067da:	d808      	bhi.n	80067ee <_printf_i+0x7e>
 80067dc:	296f      	cmp	r1, #111	; 0x6f
 80067de:	d020      	beq.n	8006822 <_printf_i+0xb2>
 80067e0:	2970      	cmp	r1, #112	; 0x70
 80067e2:	d1dd      	bne.n	80067a0 <_printf_i+0x30>
 80067e4:	6823      	ldr	r3, [r4, #0]
 80067e6:	f043 0320 	orr.w	r3, r3, #32
 80067ea:	6023      	str	r3, [r4, #0]
 80067ec:	e003      	b.n	80067f6 <_printf_i+0x86>
 80067ee:	2975      	cmp	r1, #117	; 0x75
 80067f0:	d017      	beq.n	8006822 <_printf_i+0xb2>
 80067f2:	2978      	cmp	r1, #120	; 0x78
 80067f4:	d1d4      	bne.n	80067a0 <_printf_i+0x30>
 80067f6:	2378      	movs	r3, #120	; 0x78
 80067f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067fc:	4864      	ldr	r0, [pc, #400]	; (8006990 <_printf_i+0x220>)
 80067fe:	e055      	b.n	80068ac <_printf_i+0x13c>
 8006800:	6813      	ldr	r3, [r2, #0]
 8006802:	1d19      	adds	r1, r3, #4
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6011      	str	r1, [r2, #0]
 8006808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800680c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006810:	2301      	movs	r3, #1
 8006812:	e08c      	b.n	800692e <_printf_i+0x1be>
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6011      	str	r1, [r2, #0]
 8006818:	f010 0f40 	tst.w	r0, #64	; 0x40
 800681c:	bf18      	it	ne
 800681e:	b21b      	sxthne	r3, r3
 8006820:	e7cf      	b.n	80067c2 <_printf_i+0x52>
 8006822:	6813      	ldr	r3, [r2, #0]
 8006824:	6825      	ldr	r5, [r4, #0]
 8006826:	1d18      	adds	r0, r3, #4
 8006828:	6010      	str	r0, [r2, #0]
 800682a:	0628      	lsls	r0, r5, #24
 800682c:	d501      	bpl.n	8006832 <_printf_i+0xc2>
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	e002      	b.n	8006838 <_printf_i+0xc8>
 8006832:	0668      	lsls	r0, r5, #25
 8006834:	d5fb      	bpl.n	800682e <_printf_i+0xbe>
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	4854      	ldr	r0, [pc, #336]	; (800698c <_printf_i+0x21c>)
 800683a:	296f      	cmp	r1, #111	; 0x6f
 800683c:	bf14      	ite	ne
 800683e:	220a      	movne	r2, #10
 8006840:	2208      	moveq	r2, #8
 8006842:	2100      	movs	r1, #0
 8006844:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006848:	6865      	ldr	r5, [r4, #4]
 800684a:	60a5      	str	r5, [r4, #8]
 800684c:	2d00      	cmp	r5, #0
 800684e:	f2c0 8095 	blt.w	800697c <_printf_i+0x20c>
 8006852:	6821      	ldr	r1, [r4, #0]
 8006854:	f021 0104 	bic.w	r1, r1, #4
 8006858:	6021      	str	r1, [r4, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d13d      	bne.n	80068da <_printf_i+0x16a>
 800685e:	2d00      	cmp	r5, #0
 8006860:	f040 808e 	bne.w	8006980 <_printf_i+0x210>
 8006864:	4665      	mov	r5, ip
 8006866:	2a08      	cmp	r2, #8
 8006868:	d10b      	bne.n	8006882 <_printf_i+0x112>
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	07db      	lsls	r3, r3, #31
 800686e:	d508      	bpl.n	8006882 <_printf_i+0x112>
 8006870:	6923      	ldr	r3, [r4, #16]
 8006872:	6862      	ldr	r2, [r4, #4]
 8006874:	429a      	cmp	r2, r3
 8006876:	bfde      	ittt	le
 8006878:	2330      	movle	r3, #48	; 0x30
 800687a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800687e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006882:	ebac 0305 	sub.w	r3, ip, r5
 8006886:	6123      	str	r3, [r4, #16]
 8006888:	f8cd 8000 	str.w	r8, [sp]
 800688c:	463b      	mov	r3, r7
 800688e:	aa03      	add	r2, sp, #12
 8006890:	4621      	mov	r1, r4
 8006892:	4630      	mov	r0, r6
 8006894:	f7ff fef6 	bl	8006684 <_printf_common>
 8006898:	3001      	adds	r0, #1
 800689a:	d14d      	bne.n	8006938 <_printf_i+0x1c8>
 800689c:	f04f 30ff 	mov.w	r0, #4294967295
 80068a0:	b005      	add	sp, #20
 80068a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068a6:	4839      	ldr	r0, [pc, #228]	; (800698c <_printf_i+0x21c>)
 80068a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80068ac:	6813      	ldr	r3, [r2, #0]
 80068ae:	6821      	ldr	r1, [r4, #0]
 80068b0:	1d1d      	adds	r5, r3, #4
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6015      	str	r5, [r2, #0]
 80068b6:	060a      	lsls	r2, r1, #24
 80068b8:	d50b      	bpl.n	80068d2 <_printf_i+0x162>
 80068ba:	07ca      	lsls	r2, r1, #31
 80068bc:	bf44      	itt	mi
 80068be:	f041 0120 	orrmi.w	r1, r1, #32
 80068c2:	6021      	strmi	r1, [r4, #0]
 80068c4:	b91b      	cbnz	r3, 80068ce <_printf_i+0x15e>
 80068c6:	6822      	ldr	r2, [r4, #0]
 80068c8:	f022 0220 	bic.w	r2, r2, #32
 80068cc:	6022      	str	r2, [r4, #0]
 80068ce:	2210      	movs	r2, #16
 80068d0:	e7b7      	b.n	8006842 <_printf_i+0xd2>
 80068d2:	064d      	lsls	r5, r1, #25
 80068d4:	bf48      	it	mi
 80068d6:	b29b      	uxthmi	r3, r3
 80068d8:	e7ef      	b.n	80068ba <_printf_i+0x14a>
 80068da:	4665      	mov	r5, ip
 80068dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80068e0:	fb02 3311 	mls	r3, r2, r1, r3
 80068e4:	5cc3      	ldrb	r3, [r0, r3]
 80068e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80068ea:	460b      	mov	r3, r1
 80068ec:	2900      	cmp	r1, #0
 80068ee:	d1f5      	bne.n	80068dc <_printf_i+0x16c>
 80068f0:	e7b9      	b.n	8006866 <_printf_i+0xf6>
 80068f2:	6813      	ldr	r3, [r2, #0]
 80068f4:	6825      	ldr	r5, [r4, #0]
 80068f6:	6961      	ldr	r1, [r4, #20]
 80068f8:	1d18      	adds	r0, r3, #4
 80068fa:	6010      	str	r0, [r2, #0]
 80068fc:	0628      	lsls	r0, r5, #24
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	d501      	bpl.n	8006906 <_printf_i+0x196>
 8006902:	6019      	str	r1, [r3, #0]
 8006904:	e002      	b.n	800690c <_printf_i+0x19c>
 8006906:	066a      	lsls	r2, r5, #25
 8006908:	d5fb      	bpl.n	8006902 <_printf_i+0x192>
 800690a:	8019      	strh	r1, [r3, #0]
 800690c:	2300      	movs	r3, #0
 800690e:	6123      	str	r3, [r4, #16]
 8006910:	4665      	mov	r5, ip
 8006912:	e7b9      	b.n	8006888 <_printf_i+0x118>
 8006914:	6813      	ldr	r3, [r2, #0]
 8006916:	1d19      	adds	r1, r3, #4
 8006918:	6011      	str	r1, [r2, #0]
 800691a:	681d      	ldr	r5, [r3, #0]
 800691c:	6862      	ldr	r2, [r4, #4]
 800691e:	2100      	movs	r1, #0
 8006920:	4628      	mov	r0, r5
 8006922:	f7f9 fc5d 	bl	80001e0 <memchr>
 8006926:	b108      	cbz	r0, 800692c <_printf_i+0x1bc>
 8006928:	1b40      	subs	r0, r0, r5
 800692a:	6060      	str	r0, [r4, #4]
 800692c:	6863      	ldr	r3, [r4, #4]
 800692e:	6123      	str	r3, [r4, #16]
 8006930:	2300      	movs	r3, #0
 8006932:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006936:	e7a7      	b.n	8006888 <_printf_i+0x118>
 8006938:	6923      	ldr	r3, [r4, #16]
 800693a:	462a      	mov	r2, r5
 800693c:	4639      	mov	r1, r7
 800693e:	4630      	mov	r0, r6
 8006940:	47c0      	blx	r8
 8006942:	3001      	adds	r0, #1
 8006944:	d0aa      	beq.n	800689c <_printf_i+0x12c>
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	079b      	lsls	r3, r3, #30
 800694a:	d413      	bmi.n	8006974 <_printf_i+0x204>
 800694c:	68e0      	ldr	r0, [r4, #12]
 800694e:	9b03      	ldr	r3, [sp, #12]
 8006950:	4298      	cmp	r0, r3
 8006952:	bfb8      	it	lt
 8006954:	4618      	movlt	r0, r3
 8006956:	e7a3      	b.n	80068a0 <_printf_i+0x130>
 8006958:	2301      	movs	r3, #1
 800695a:	464a      	mov	r2, r9
 800695c:	4639      	mov	r1, r7
 800695e:	4630      	mov	r0, r6
 8006960:	47c0      	blx	r8
 8006962:	3001      	adds	r0, #1
 8006964:	d09a      	beq.n	800689c <_printf_i+0x12c>
 8006966:	3501      	adds	r5, #1
 8006968:	68e3      	ldr	r3, [r4, #12]
 800696a:	9a03      	ldr	r2, [sp, #12]
 800696c:	1a9b      	subs	r3, r3, r2
 800696e:	42ab      	cmp	r3, r5
 8006970:	dcf2      	bgt.n	8006958 <_printf_i+0x1e8>
 8006972:	e7eb      	b.n	800694c <_printf_i+0x1dc>
 8006974:	2500      	movs	r5, #0
 8006976:	f104 0919 	add.w	r9, r4, #25
 800697a:	e7f5      	b.n	8006968 <_printf_i+0x1f8>
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1ac      	bne.n	80068da <_printf_i+0x16a>
 8006980:	7803      	ldrb	r3, [r0, #0]
 8006982:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006986:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800698a:	e76c      	b.n	8006866 <_printf_i+0xf6>
 800698c:	08006cd5 	.word	0x08006cd5
 8006990:	08006ce6 	.word	0x08006ce6

08006994 <__sread>:
 8006994:	b510      	push	{r4, lr}
 8006996:	460c      	mov	r4, r1
 8006998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800699c:	f000 f894 	bl	8006ac8 <_read_r>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	bfab      	itete	ge
 80069a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069a6:	89a3      	ldrhlt	r3, [r4, #12]
 80069a8:	181b      	addge	r3, r3, r0
 80069aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80069ae:	bfac      	ite	ge
 80069b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80069b2:	81a3      	strhlt	r3, [r4, #12]
 80069b4:	bd10      	pop	{r4, pc}

080069b6 <__swrite>:
 80069b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ba:	461f      	mov	r7, r3
 80069bc:	898b      	ldrh	r3, [r1, #12]
 80069be:	05db      	lsls	r3, r3, #23
 80069c0:	4605      	mov	r5, r0
 80069c2:	460c      	mov	r4, r1
 80069c4:	4616      	mov	r6, r2
 80069c6:	d505      	bpl.n	80069d4 <__swrite+0x1e>
 80069c8:	2302      	movs	r3, #2
 80069ca:	2200      	movs	r2, #0
 80069cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069d0:	f000 f868 	bl	8006aa4 <_lseek_r>
 80069d4:	89a3      	ldrh	r3, [r4, #12]
 80069d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069de:	81a3      	strh	r3, [r4, #12]
 80069e0:	4632      	mov	r2, r6
 80069e2:	463b      	mov	r3, r7
 80069e4:	4628      	mov	r0, r5
 80069e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069ea:	f000 b817 	b.w	8006a1c <_write_r>

080069ee <__sseek>:
 80069ee:	b510      	push	{r4, lr}
 80069f0:	460c      	mov	r4, r1
 80069f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f6:	f000 f855 	bl	8006aa4 <_lseek_r>
 80069fa:	1c43      	adds	r3, r0, #1
 80069fc:	89a3      	ldrh	r3, [r4, #12]
 80069fe:	bf15      	itete	ne
 8006a00:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a0a:	81a3      	strheq	r3, [r4, #12]
 8006a0c:	bf18      	it	ne
 8006a0e:	81a3      	strhne	r3, [r4, #12]
 8006a10:	bd10      	pop	{r4, pc}

08006a12 <__sclose>:
 8006a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a16:	f000 b813 	b.w	8006a40 <_close_r>
	...

08006a1c <_write_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	4c07      	ldr	r4, [pc, #28]	; (8006a3c <_write_r+0x20>)
 8006a20:	4605      	mov	r5, r0
 8006a22:	4608      	mov	r0, r1
 8006a24:	4611      	mov	r1, r2
 8006a26:	2200      	movs	r2, #0
 8006a28:	6022      	str	r2, [r4, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f7fa f9e8 	bl	8000e00 <_write>
 8006a30:	1c43      	adds	r3, r0, #1
 8006a32:	d102      	bne.n	8006a3a <_write_r+0x1e>
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	b103      	cbz	r3, 8006a3a <_write_r+0x1e>
 8006a38:	602b      	str	r3, [r5, #0]
 8006a3a:	bd38      	pop	{r3, r4, r5, pc}
 8006a3c:	20004bb0 	.word	0x20004bb0

08006a40 <_close_r>:
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	4c06      	ldr	r4, [pc, #24]	; (8006a5c <_close_r+0x1c>)
 8006a44:	2300      	movs	r3, #0
 8006a46:	4605      	mov	r5, r0
 8006a48:	4608      	mov	r0, r1
 8006a4a:	6023      	str	r3, [r4, #0]
 8006a4c:	f7fa fa04 	bl	8000e58 <_close>
 8006a50:	1c43      	adds	r3, r0, #1
 8006a52:	d102      	bne.n	8006a5a <_close_r+0x1a>
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	b103      	cbz	r3, 8006a5a <_close_r+0x1a>
 8006a58:	602b      	str	r3, [r5, #0]
 8006a5a:	bd38      	pop	{r3, r4, r5, pc}
 8006a5c:	20004bb0 	.word	0x20004bb0

08006a60 <_fstat_r>:
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	4c07      	ldr	r4, [pc, #28]	; (8006a80 <_fstat_r+0x20>)
 8006a64:	2300      	movs	r3, #0
 8006a66:	4605      	mov	r5, r0
 8006a68:	4608      	mov	r0, r1
 8006a6a:	4611      	mov	r1, r2
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	f7fa fa43 	bl	8000ef8 <_fstat>
 8006a72:	1c43      	adds	r3, r0, #1
 8006a74:	d102      	bne.n	8006a7c <_fstat_r+0x1c>
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	b103      	cbz	r3, 8006a7c <_fstat_r+0x1c>
 8006a7a:	602b      	str	r3, [r5, #0]
 8006a7c:	bd38      	pop	{r3, r4, r5, pc}
 8006a7e:	bf00      	nop
 8006a80:	20004bb0 	.word	0x20004bb0

08006a84 <_isatty_r>:
 8006a84:	b538      	push	{r3, r4, r5, lr}
 8006a86:	4c06      	ldr	r4, [pc, #24]	; (8006aa0 <_isatty_r+0x1c>)
 8006a88:	2300      	movs	r3, #0
 8006a8a:	4605      	mov	r5, r0
 8006a8c:	4608      	mov	r0, r1
 8006a8e:	6023      	str	r3, [r4, #0]
 8006a90:	f7fa f9a0 	bl	8000dd4 <_isatty>
 8006a94:	1c43      	adds	r3, r0, #1
 8006a96:	d102      	bne.n	8006a9e <_isatty_r+0x1a>
 8006a98:	6823      	ldr	r3, [r4, #0]
 8006a9a:	b103      	cbz	r3, 8006a9e <_isatty_r+0x1a>
 8006a9c:	602b      	str	r3, [r5, #0]
 8006a9e:	bd38      	pop	{r3, r4, r5, pc}
 8006aa0:	20004bb0 	.word	0x20004bb0

08006aa4 <_lseek_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	4c07      	ldr	r4, [pc, #28]	; (8006ac4 <_lseek_r+0x20>)
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	4608      	mov	r0, r1
 8006aac:	4611      	mov	r1, r2
 8006aae:	2200      	movs	r2, #0
 8006ab0:	6022      	str	r2, [r4, #0]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	f7fa f9e7 	bl	8000e86 <_lseek>
 8006ab8:	1c43      	adds	r3, r0, #1
 8006aba:	d102      	bne.n	8006ac2 <_lseek_r+0x1e>
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	b103      	cbz	r3, 8006ac2 <_lseek_r+0x1e>
 8006ac0:	602b      	str	r3, [r5, #0]
 8006ac2:	bd38      	pop	{r3, r4, r5, pc}
 8006ac4:	20004bb0 	.word	0x20004bb0

08006ac8 <_read_r>:
 8006ac8:	b538      	push	{r3, r4, r5, lr}
 8006aca:	4c07      	ldr	r4, [pc, #28]	; (8006ae8 <_read_r+0x20>)
 8006acc:	4605      	mov	r5, r0
 8006ace:	4608      	mov	r0, r1
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	6022      	str	r2, [r4, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f7fa f9e6 	bl	8000ea8 <_read>
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d102      	bne.n	8006ae6 <_read_r+0x1e>
 8006ae0:	6823      	ldr	r3, [r4, #0]
 8006ae2:	b103      	cbz	r3, 8006ae6 <_read_r+0x1e>
 8006ae4:	602b      	str	r3, [r5, #0]
 8006ae6:	bd38      	pop	{r3, r4, r5, pc}
 8006ae8:	20004bb0 	.word	0x20004bb0

08006aec <_init>:
 8006aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aee:	bf00      	nop
 8006af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af2:	bc08      	pop	{r3}
 8006af4:	469e      	mov	lr, r3
 8006af6:	4770      	bx	lr

08006af8 <_fini>:
 8006af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afa:	bf00      	nop
 8006afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006afe:	bc08      	pop	{r3}
 8006b00:	469e      	mov	lr, r3
 8006b02:	4770      	bx	lr
