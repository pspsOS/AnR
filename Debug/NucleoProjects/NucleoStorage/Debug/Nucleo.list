
Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a93c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800aae0  0800aae0  0001aae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af60  0800af60  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800af60  0800af60  0001af60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af68  0800af68  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af68  0800af68  0001af68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af6c  0800af6c  0001af6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800af70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b40  200001e0  0800b150  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d20  0800b150  00024d20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000176fc  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000304c  00000000  00000000  0003790c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f28  00000000  00000000  0003a958  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e00  00000000  00000000  0003b880  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a2d6  00000000  00000000  0003c680  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000de4f  00000000  00000000  00056956  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096ef3  00000000  00000000  000647a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fb698  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005028  00000000  00000000  000fb714  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aac4 	.word	0x0800aac4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800aac4 	.word	0x0800aac4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fa8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <vApplicationGetIdleTaskMemory+0x30>)
 8000fae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2280      	movs	r2, #128	; 0x80
 8000fb4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	200001fc 	.word	0x200001fc
 8000fc8:	20000250 	.word	0x20000250

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b5b0      	push	{r4, r5, r7, lr}
 8000fce:	b09e      	sub	sp, #120	; 0x78
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd2:	f000 ff51 	bl	8001e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd6:	f000 f88d 	bl	80010f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fda:	f000 fa43 	bl	8001464 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000fde:	f000 f943 	bl	8001268 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000fe2:	f000 fa0d 	bl	8001400 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fe6:	f000 f8ed 	bl	80011c4 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000fea:	f000 f973 	bl	80012d4 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000fee:	f000 f9a7 	bl	8001340 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000ff2:	f000 f9db 	bl	80013ac <MX_USART1_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000ff6:	f000 fa2d 	bl	8001454 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8000ffa:	4833      	ldr	r0, [pc, #204]	; (80010c8 <main+0xfc>)
 8000ffc:	f000 fbde 	bl	80017bc <RetargetInit>
  for(int i = 0; i < 500; i++) printf(" \r\n");
 8001000:	2300      	movs	r3, #0
 8001002:	677b      	str	r3, [r7, #116]	; 0x74
 8001004:	e005      	b.n	8001012 <main+0x46>
 8001006:	4831      	ldr	r0, [pc, #196]	; (80010cc <main+0x100>)
 8001008:	f006 f9ec 	bl	80073e4 <puts>
 800100c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800100e:	3301      	adds	r3, #1
 8001010:	677b      	str	r3, [r7, #116]	; 0x74
 8001012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001014:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001018:	dbf5      	blt.n	8001006 <main+0x3a>
  HAL_Delay(250);
 800101a:	20fa      	movs	r0, #250	; 0xfa
 800101c:	f000 ff9e 	bl	8001f5c <HAL_Delay>
  printf("Starting:\r\n");
 8001020:	482b      	ldr	r0, [pc, #172]	; (80010d0 <main+0x104>)
 8001022:	f006 f9df 	bl	80073e4 <puts>
  HAL_Delay(250);
 8001026:	20fa      	movs	r0, #250	; 0xfa
 8001028:	f000 ff98 	bl	8001f5c <HAL_Delay>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ControlLogic */
  osThreadStaticDef(ControlLogic, startControlLogic, osPriorityNormal, 0, 128, ControlLogicBuffer, &ControlLogicControlBlock);
 800102c:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <main+0x108>)
 800102e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001032:	461d      	mov	r5, r3
 8001034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001038:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800103c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlLogicHandle = osThreadCreate(osThread(ControlLogic), NULL);
 8001040:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f003 fbc5 	bl	80047d6 <osThreadCreate>
 800104c:	4602      	mov	r2, r0
 800104e:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <main+0x10c>)
 8001050:	601a      	str	r2, [r3, #0]

  /* definition and creation of Acquisition */
  osThreadStaticDef(Acquisition, startAcquisition, osPriorityRealtime, 0, 128, AcquisitionBuffer, &AcquisitionControlBlock);
 8001052:	4b22      	ldr	r3, [pc, #136]	; (80010dc <main+0x110>)
 8001054:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001058:	461d      	mov	r5, r3
 800105a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800105e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001062:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AcquisitionHandle = osThreadCreate(osThread(Acquisition), NULL);
 8001066:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f003 fbb2 	bl	80047d6 <osThreadCreate>
 8001072:	4602      	mov	r2, r0
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <main+0x114>)
 8001076:	601a      	str	r2, [r3, #0]

  /* definition and creation of Processing */
  osThreadStaticDef(Processing, startProcessing, osPriorityNormal, 0, 128, ProcessingBuffer, &ProcessingControlBlock);
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <main+0x118>)
 800107a:	f107 0420 	add.w	r4, r7, #32
 800107e:	461d      	mov	r5, r3
 8001080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001084:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001088:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ProcessingHandle = osThreadCreate(osThread(Processing), NULL);
 800108c:	f107 0320 	add.w	r3, r7, #32
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f003 fb9f 	bl	80047d6 <osThreadCreate>
 8001098:	4602      	mov	r2, r0
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <main+0x11c>)
 800109c:	601a      	str	r2, [r3, #0]

  /* definition and creation of Monitoring */
  osThreadStaticDef(Monitoring, startMonitoring, osPriorityLow, 0, 128, MonitoringBuffer, &MonitoringControlBlock);
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <main+0x120>)
 80010a0:	1d3c      	adds	r4, r7, #4
 80010a2:	461d      	mov	r5, r3
 80010a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MonitoringHandle = osThreadCreate(osThread(Monitoring), NULL);
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f003 fb8e 	bl	80047d6 <osThreadCreate>
 80010ba:	4602      	mov	r2, r0
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <main+0x124>)
 80010be:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010c0:	f003 fb82 	bl	80047c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <main+0xf8>
 80010c6:	bf00      	nop
 80010c8:	20004ab4 	.word	0x20004ab4
 80010cc:	0800aae0 	.word	0x0800aae0
 80010d0:	0800aae4 	.word	0x0800aae4
 80010d4:	0800ab00 	.word	0x0800ab00
 80010d8:	20004848 	.word	0x20004848
 80010dc:	0800ab28 	.word	0x0800ab28
 80010e0:	20004844 	.word	0x20004844
 80010e4:	0800ab50 	.word	0x0800ab50
 80010e8:	20004708 	.word	0x20004708
 80010ec:	0800ab78 	.word	0x0800ab78
 80010f0:	20004840 	.word	0x20004840

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b094      	sub	sp, #80	; 0x50
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 0320 	add.w	r3, r7, #32
 80010fe:	2230      	movs	r2, #48	; 0x30
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f005 f9fd 	bl	8006502 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <SystemClock_Config+0xc8>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	4a26      	ldr	r2, [pc, #152]	; (80011bc <SystemClock_Config+0xc8>)
 8001122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001126:	6413      	str	r3, [r2, #64]	; 0x40
 8001128:	4b24      	ldr	r3, [pc, #144]	; (80011bc <SystemClock_Config+0xc8>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <SystemClock_Config+0xcc>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a20      	ldr	r2, [pc, #128]	; (80011c0 <SystemClock_Config+0xcc>)
 800113e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <SystemClock_Config+0xcc>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001150:	2301      	movs	r3, #1
 8001152:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001154:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115a:	2302      	movs	r3, #2
 800115c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800115e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001162:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001164:	2304      	movs	r3, #4
 8001166:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001168:	2348      	movs	r3, #72	; 0x48
 800116a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800116c:	2302      	movs	r3, #2
 800116e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001170:	2303      	movs	r3, #3
 8001172:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001174:	f107 0320 	add.w	r3, r7, #32
 8001178:	4618      	mov	r0, r3
 800117a:	f001 fc05 	bl	8002988 <HAL_RCC_OscConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001184:	f000 fb15 	bl	80017b2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001188:	230f      	movs	r3, #15
 800118a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118c:	2302      	movs	r3, #2
 800118e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001198:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	2102      	movs	r1, #2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f001 fe5f 	bl	8002e68 <HAL_RCC_ClockConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011b0:	f000 faff 	bl	80017b2 <Error_Handler>
  }
}
 80011b4:	bf00      	nop
 80011b6:	3750      	adds	r7, #80	; 0x50
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40007000 	.word	0x40007000

080011c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ca:	463b      	mov	r3, r7
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011d6:	4b21      	ldr	r3, [pc, #132]	; (800125c <MX_ADC1_Init+0x98>)
 80011d8:	4a21      	ldr	r2, [pc, #132]	; (8001260 <MX_ADC1_Init+0x9c>)
 80011da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <MX_ADC1_Init+0x98>)
 80011de:	2200      	movs	r2, #0
 80011e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011e2:	4b1e      	ldr	r3, [pc, #120]	; (800125c <MX_ADC1_Init+0x98>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011e8:	4b1c      	ldr	r3, [pc, #112]	; (800125c <MX_ADC1_Init+0x98>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MX_ADC1_Init+0x98>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <MX_ADC1_Init+0x98>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <MX_ADC1_Init+0x98>)
 80011fe:	2200      	movs	r2, #0
 8001200:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001202:	4b16      	ldr	r3, [pc, #88]	; (800125c <MX_ADC1_Init+0x98>)
 8001204:	4a17      	ldr	r2, [pc, #92]	; (8001264 <MX_ADC1_Init+0xa0>)
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <MX_ADC1_Init+0x98>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <MX_ADC1_Init+0x98>)
 8001210:	2201      	movs	r2, #1
 8001212:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_ADC1_Init+0x98>)
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <MX_ADC1_Init+0x98>)
 800121e:	2201      	movs	r2, #1
 8001220:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001222:	480e      	ldr	r0, [pc, #56]	; (800125c <MX_ADC1_Init+0x98>)
 8001224:	f000 febc 	bl	8001fa0 <HAL_ADC_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800122e:	f000 fac0 	bl	80017b2 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001236:	2301      	movs	r3, #1
 8001238:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123e:	463b      	mov	r3, r7
 8001240:	4619      	mov	r1, r3
 8001242:	4806      	ldr	r0, [pc, #24]	; (800125c <MX_ADC1_Init+0x98>)
 8001244:	f000 fef0 	bl	8002028 <HAL_ADC_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800124e:	f000 fab0 	bl	80017b2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20004764 	.word	0x20004764
 8001260:	40012000 	.word	0x40012000
 8001264:	0f000001 	.word	0x0f000001

08001268 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <MX_SPI1_Init+0x64>)
 800126e:	4a18      	ldr	r2, [pc, #96]	; (80012d0 <MX_SPI1_Init+0x68>)
 8001270:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <MX_SPI1_Init+0x64>)
 8001274:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001278:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800127a:	4b14      	ldr	r3, [pc, #80]	; (80012cc <MX_SPI1_Init+0x64>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MX_SPI1_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_SPI1_Init+0x64>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_SPI1_Init+0x64>)
 800128e:	2200      	movs	r2, #0
 8001290:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_SPI1_Init+0x64>)
 8001294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001298:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_SPI1_Init+0x64>)
 800129c:	2200      	movs	r2, #0
 800129e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <MX_SPI1_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_SPI1_Init+0x64>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <MX_SPI1_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_SPI1_Init+0x64>)
 80012b4:	220a      	movs	r2, #10
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012b8:	4804      	ldr	r0, [pc, #16]	; (80012cc <MX_SPI1_Init+0x64>)
 80012ba:	f001 ffc7 	bl	800324c <HAL_SPI_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012c4:	f000 fa75 	bl	80017b2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	2000484c 	.word	0x2000484c
 80012d0:	40013000 	.word	0x40013000

080012d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <MX_SPI2_Init+0x64>)
 80012da:	4a18      	ldr	r2, [pc, #96]	; (800133c <MX_SPI2_Init+0x68>)
 80012dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <MX_SPI2_Init+0x64>)
 80012e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012e6:	4b14      	ldr	r3, [pc, #80]	; (8001338 <MX_SPI2_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <MX_SPI2_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_SPI2_Init+0x64>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <MX_SPI2_Init+0x64>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <MX_SPI2_Init+0x64>)
 8001300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001304:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_SPI2_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <MX_SPI2_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_SPI2_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <MX_SPI2_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_SPI2_Init+0x64>)
 8001320:	220a      	movs	r2, #10
 8001322:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001324:	4804      	ldr	r0, [pc, #16]	; (8001338 <MX_SPI2_Init+0x64>)
 8001326:	f001 ff91 	bl	800324c <HAL_SPI_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001330:	f000 fa3f 	bl	80017b2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20004408 	.word	0x20004408
 800133c:	40003800 	.word	0x40003800

08001340 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001344:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <MX_SPI3_Init+0x64>)
 8001346:	4a18      	ldr	r2, [pc, #96]	; (80013a8 <MX_SPI3_Init+0x68>)
 8001348:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <MX_SPI3_Init+0x64>)
 800134c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001350:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <MX_SPI3_Init+0x64>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <MX_SPI3_Init+0x64>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_SPI3_Init+0x64>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <MX_SPI3_Init+0x64>)
 8001366:	2200      	movs	r2, #0
 8001368:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <MX_SPI3_Init+0x64>)
 800136c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001370:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_SPI3_Init+0x64>)
 8001374:	2200      	movs	r2, #0
 8001376:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <MX_SPI3_Init+0x64>)
 800137a:	2200      	movs	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_SPI3_Init+0x64>)
 8001380:	2200      	movs	r2, #0
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <MX_SPI3_Init+0x64>)
 8001386:	2200      	movs	r2, #0
 8001388:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_SPI3_Init+0x64>)
 800138c:	220a      	movs	r2, #10
 800138e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001390:	4804      	ldr	r0, [pc, #16]	; (80013a4 <MX_SPI3_Init+0x64>)
 8001392:	f001 ff5b 	bl	800324c <HAL_SPI_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800139c:	f000 fa09 	bl	80017b2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	2000470c 	.word	0x2000470c
 80013a8:	40003c00 	.word	0x40003c00

080013ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_USART1_UART_Init+0x4c>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <MX_USART1_UART_Init+0x50>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <MX_USART1_UART_Init+0x4c>)
 80013b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_USART1_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <MX_USART1_UART_Init+0x4c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <MX_USART1_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MX_USART1_UART_Init+0x4c>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <MX_USART1_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <MX_USART1_UART_Init+0x4c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_USART1_UART_Init+0x4c>)
 80013e4:	f002 fc86 	bl	8003cf4 <HAL_UART_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013ee:	f000 f9e0 	bl	80017b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200047ac 	.word	0x200047ac
 80013fc:	40011000 	.word	0x40011000

08001400 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_USART2_UART_Init+0x4c>)
 8001406:	4a12      	ldr	r2, [pc, #72]	; (8001450 <MX_USART2_UART_Init+0x50>)
 8001408:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <MX_USART2_UART_Init+0x4c>)
 800140c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001410:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_USART2_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_USART2_UART_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <MX_USART2_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_USART2_UART_Init+0x4c>)
 8001426:	220c      	movs	r2, #12
 8001428:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <MX_USART2_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_USART2_UART_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_USART2_UART_Init+0x4c>)
 8001438:	f002 fc5c 	bl	8003cf4 <HAL_UART_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001442:	f000 f9b6 	bl	80017b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20004ab4 	.word	0x20004ab4
 8001450:	40004400 	.word	0x40004400

08001454 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b4a      	ldr	r3, [pc, #296]	; (80015a8 <MX_GPIO_Init+0x144>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a49      	ldr	r2, [pc, #292]	; (80015a8 <MX_GPIO_Init+0x144>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b47      	ldr	r3, [pc, #284]	; (80015a8 <MX_GPIO_Init+0x144>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b43      	ldr	r3, [pc, #268]	; (80015a8 <MX_GPIO_Init+0x144>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a42      	ldr	r2, [pc, #264]	; (80015a8 <MX_GPIO_Init+0x144>)
 80014a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b40      	ldr	r3, [pc, #256]	; (80015a8 <MX_GPIO_Init+0x144>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <MX_GPIO_Init+0x144>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a3b      	ldr	r2, [pc, #236]	; (80015a8 <MX_GPIO_Init+0x144>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b39      	ldr	r3, [pc, #228]	; (80015a8 <MX_GPIO_Init+0x144>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <MX_GPIO_Init+0x144>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a34      	ldr	r2, [pc, #208]	; (80015a8 <MX_GPIO_Init+0x144>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <MX_GPIO_Init+0x144>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2180      	movs	r1, #128	; 0x80
 80014ee:	482f      	ldr	r0, [pc, #188]	; (80015ac <MX_GPIO_Init+0x148>)
 80014f0:	f001 fa30 	bl	8002954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HOLD_GPIO_Port, HOLD_Pin, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014fa:	482d      	ldr	r0, [pc, #180]	; (80015b0 <MX_GPIO_Init+0x14c>)
 80014fc:	f001 fa2a 	bl	8002954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS3_Pin|LED_Pin, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001506:	482b      	ldr	r0, [pc, #172]	; (80015b4 <MX_GPIO_Init+0x150>)
 8001508:	f001 fa24 	bl	8002954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800150c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001512:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <MX_GPIO_Init+0x154>)
 8001514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	4822      	ldr	r0, [pc, #136]	; (80015ac <MX_GPIO_Init+0x148>)
 8001522:	f001 f895 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pin : WP_Pin */
  GPIO_InitStruct.Pin = WP_Pin;
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152a:	2301      	movs	r3, #1
 800152c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WP_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	481b      	ldr	r0, [pc, #108]	; (80015ac <MX_GPIO_Init+0x148>)
 800153e:	f001 f887 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pin : HOLD_Pin */
  GPIO_InitStruct.Pin = HOLD_Pin;
 8001542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HOLD_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	4815      	ldr	r0, [pc, #84]	; (80015b0 <MX_GPIO_Init+0x14c>)
 800155c:	f001 f878 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001560:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156e:	2303      	movs	r3, #3
 8001570:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001572:	230a      	movs	r3, #10
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <MX_GPIO_Init+0x14c>)
 800157e:	f001 f867 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS3_Pin LED_Pin */
  GPIO_InitStruct.Pin = CS3_Pin|LED_Pin;
 8001582:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001588:	2301      	movs	r3, #1
 800158a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4619      	mov	r1, r3
 800159a:	4806      	ldr	r0, [pc, #24]	; (80015b4 <MX_GPIO_Init+0x150>)
 800159c:	f001 f858 	bl	8002650 <HAL_GPIO_Init>

}
 80015a0:	bf00      	nop
 80015a2:	3728      	adds	r7, #40	; 0x28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020800 	.word	0x40020800
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40020400 	.word	0x40020400
 80015b8:	10210000 	.word	0x10210000

080015bc <startControlLogic>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startControlLogic */
void startControlLogic(void const * argument)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b097      	sub	sp, #92	; 0x5c
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	static TickType_t time_init = 0;
	uint32_t rowAddr = 0x00000000;
 80015c4:	2300      	movs	r3, #0
 80015c6:	653b      	str	r3, [r7, #80]	; 0x50
	uint16_t colAddr = 0x0000;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t writeData1[16] = {0x01, 0x02, 0x03, 0x04, 0x11, 0x12, 0x13, 0x14, 0x21, 0x22, 0x23, 0x24, 0x31, 0x32, 0x33, 0x34};
 80015ce:	4b5a      	ldr	r3, [pc, #360]	; (8001738 <startControlLogic+0x17c>)
 80015d0:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80015d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t writeData2[16] = {0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA};
 80015da:	4b58      	ldr	r3, [pc, #352]	; (800173c <startControlLogic+0x180>)
 80015dc:	f107 0420 	add.w	r4, r7, #32
 80015e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t readData[16] = {0x00};
 80015e6:	f107 0310 	add.w	r3, r7, #16
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
	uint8_t size = 16;
 80015f4:	2310      	movs	r3, #16
 80015f6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	uint8_t feature = 0x00;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	uint32_t goodRows = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t badRows = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t i = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	657b      	str	r3, [r7, #84]	; 0x54
	bool badRow = false;
 800160c:	2300      	movs	r3, #0
 800160e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	bool nandNominal = false;
 8001612:	2300      	movs	r3, #0
 8001614:	73fb      	strb	r3, [r7, #15]

	if(ENABLE_CONTROL_LOGIC || true){
		HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_SET);
 8001616:	2201      	movs	r2, #1
 8001618:	2180      	movs	r1, #128	; 0x80
 800161a:	4849      	ldr	r0, [pc, #292]	; (8001740 <startControlLogic+0x184>)
 800161c:	f001 f99a 	bl	8002954 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOLD_GPIO_Port, HOLD_Pin, GPIO_PIN_SET);
 8001620:	2201      	movs	r2, #1
 8001622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001626:	4847      	ldr	r0, [pc, #284]	; (8001744 <startControlLogic+0x188>)
 8001628:	f001 f994 	bl	8002954 <HAL_GPIO_WritePin>

		nandInit(&nandNominal);
 800162c:	f107 030f 	add.w	r3, r7, #15
 8001630:	4618      	mov	r0, r3
 8001632:	f004 fcff 	bl	8006034 <nandInit>

		setFeature(0xA0, 0x00);
 8001636:	2100      	movs	r1, #0
 8001638:	20a0      	movs	r0, #160	; 0xa0
 800163a:	f004 fec3 	bl	80063c4 <setFeature>
		feature = getFeature(0xA0);
 800163e:	20a0      	movs	r0, #160	; 0xa0
 8001640:	f004 fe98 	bl	8006374 <getFeature>
 8001644:	4603      	mov	r3, r0
 8001646:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		printf("Feature 02X ", feature);
 800164a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800164e:	4619      	mov	r1, r3
 8001650:	483d      	ldr	r0, [pc, #244]	; (8001748 <startControlLogic+0x18c>)
 8001652:	f005 fe53 	bl	80072fc <iprintf>
		feature = getFeature(0xB0);
 8001656:	20b0      	movs	r0, #176	; 0xb0
 8001658:	f004 fe8c 	bl	8006374 <getFeature>
 800165c:	4603      	mov	r3, r0
 800165e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		printf("02X \n\r", feature);
 8001662:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001666:	4619      	mov	r1, r3
 8001668:	4838      	ldr	r0, [pc, #224]	; (800174c <startControlLogic+0x190>)
 800166a:	f005 fe47 	bl	80072fc <iprintf>
		printf("\n\r");
		writeEnable();
		//HAL_Delay(10);
		nandBufferExecute(rowAddr);*/
		//nandBufferRead(colAddr, readData, sizeR);
		eraseBlock(rowAddr);
 800166e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001670:	f004 fecc 	bl	800640c <eraseBlock>
		nandWrite(rowAddr, colAddr, writeData1, size);
 8001674:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001678:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800167c:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 8001680:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001682:	f004 fe24 	bl	80062ce <nandWrite>
		nandRead(rowAddr, colAddr, readData, size);
 8001686:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800168a:	f107 0210 	add.w	r2, r7, #16
 800168e:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 8001692:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001694:	f004 fe04 	bl	80062a0 <nandRead>
		for(i = 0; i < size; i++) printf("%02X ", readData[i]);
 8001698:	2300      	movs	r3, #0
 800169a:	657b      	str	r3, [r7, #84]	; 0x54
 800169c:	e00b      	b.n	80016b6 <startControlLogic+0xfa>
 800169e:	f107 0210 	add.w	r2, r7, #16
 80016a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a4:	4413      	add	r3, r2
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	4829      	ldr	r0, [pc, #164]	; (8001750 <startControlLogic+0x194>)
 80016ac:	f005 fe26 	bl	80072fc <iprintf>
 80016b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b2:	3301      	adds	r3, #1
 80016b4:	657b      	str	r3, [r7, #84]	; 0x54
 80016b6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80016ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80016bc:	429a      	cmp	r2, r3
 80016be:	d3ee      	bcc.n	800169e <startControlLogic+0xe2>
		printf("\n\r");
 80016c0:	4824      	ldr	r0, [pc, #144]	; (8001754 <startControlLogic+0x198>)
 80016c2:	f005 fe1b 	bl	80072fc <iprintf>

		nandWrite(rowAddr, colAddr, writeData2, size);
 80016c6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80016ca:	f107 0220 	add.w	r2, r7, #32
 80016ce:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 80016d2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80016d4:	f004 fdfb 	bl	80062ce <nandWrite>
		nandRead(rowAddr, colAddr, readData, size);
 80016d8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80016dc:	f107 0210 	add.w	r2, r7, #16
 80016e0:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 80016e4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80016e6:	f004 fddb 	bl	80062a0 <nandRead>
		for(i = 0; i < size; i++) printf("%02X ", readData[i]);
 80016ea:	2300      	movs	r3, #0
 80016ec:	657b      	str	r3, [r7, #84]	; 0x54
 80016ee:	e00b      	b.n	8001708 <startControlLogic+0x14c>
 80016f0:	f107 0210 	add.w	r2, r7, #16
 80016f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016f6:	4413      	add	r3, r2
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	4619      	mov	r1, r3
 80016fc:	4814      	ldr	r0, [pc, #80]	; (8001750 <startControlLogic+0x194>)
 80016fe:	f005 fdfd 	bl	80072fc <iprintf>
 8001702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001704:	3301      	adds	r3, #1
 8001706:	657b      	str	r3, [r7, #84]	; 0x54
 8001708:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800170c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800170e:	429a      	cmp	r2, r3
 8001710:	d3ee      	bcc.n	80016f0 <startControlLogic+0x134>
		printf("\n\r");
 8001712:	4810      	ldr	r0, [pc, #64]	; (8001754 <startControlLogic+0x198>)
 8001714:	f005 fdf2 	bl	80072fc <iprintf>
				//printf("\n\rgood row: %d", rowAddr);
				goodRows++;
			}

		}*/
		printf("\n\rDone");
 8001718:	480f      	ldr	r0, [pc, #60]	; (8001758 <startControlLogic+0x19c>)
 800171a:	f005 fdef 	bl	80072fc <iprintf>

	}
  /* Infinite loop */
	while(ENABLE_CONTROL_LOGIC) {
		if(printDiv) printf("-------------\r\n");
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <startControlLogic+0x1a0>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d002      	beq.n	800172c <startControlLogic+0x170>
 8001726:	480e      	ldr	r0, [pc, #56]	; (8001760 <startControlLogic+0x1a4>)
 8001728:	f005 fe5c 	bl	80073e4 <puts>
		//toggleLed();
		vTaskDelayUntil(&time_init, CONTROL_LOGIC_TASK_DELAY);
 800172c:	490d      	ldr	r1, [pc, #52]	; (8001764 <startControlLogic+0x1a8>)
 800172e:	480e      	ldr	r0, [pc, #56]	; (8001768 <startControlLogic+0x1ac>)
 8001730:	f003 fb6e 	bl	8004e10 <vTaskDelayUntil>
		if(printDiv) printf("-------------\r\n");
 8001734:	e7f3      	b.n	800171e <startControlLogic+0x162>
 8001736:	bf00      	nop
 8001738:	0800abd0 	.word	0x0800abd0
 800173c:	0800abe0 	.word	0x0800abe0
 8001740:	40020800 	.word	0x40020800
 8001744:	40020000 	.word	0x40020000
 8001748:	0800ab94 	.word	0x0800ab94
 800174c:	0800aba4 	.word	0x0800aba4
 8001750:	0800abac 	.word	0x0800abac
 8001754:	0800abb4 	.word	0x0800abb4
 8001758:	0800abb8 	.word	0x0800abb8
 800175c:	20000450 	.word	0x20000450
 8001760:	0800abc0 	.word	0x0800abc0
 8001764:	000186a0 	.word	0x000186a0
 8001768:	20000454 	.word	0x20000454

0800176c <startAcquisition>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAcquisition */
void startAcquisition(void const * argument)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	if(ENABLE_ACQUISITION){
		setup_A();
		printf("\n\n");
	}
  /* Infinite loop */
	while(ENABLE_ACQUISITION) {
 8001774:	bf00      	nop
		}
		if(time_init > 4000) break;
	}
	//printf("%d\n\r",time_init);
	if(ENABLE_ACQUISITION) printDiv = false;
	vTaskDelete(NULL);
 8001776:	2000      	movs	r0, #0
 8001778:	f003 fabc 	bl	8004cf4 <vTaskDelete>

  /* USER CODE END startAcquisition */
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <startProcessing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startProcessing */
void startProcessing(void const * argument)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
		HAL_Delay(1000);
		*/
		vTaskDelayUntil(&time_init, PROCESSING_TASK_DELAY);
	}
	}
	vTaskDelete(NULL);
 800178c:	2000      	movs	r0, #0
 800178e:	f003 fab1 	bl	8004cf4 <vTaskDelete>
  /* USER CODE END startProcessing */
}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <startMonitoring>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMonitoring */
void startMonitoring(void const * argument)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMonitoring */
	static GPIO_PinState pressed = GPIO_PIN_SET;
	static int counter = 0;
	static TickType_t time_init = 0;
  /* Infinite loop */
	while(ENABLE_MONITORING) {
 80017a2:	bf00      	nop


		vTaskDelayUntil(&time_init, MONITORING_TASK_DELAY);
	}

	vTaskDelete(NULL);
 80017a4:	2000      	movs	r0, #0
 80017a6:	f003 faa5 	bl	8004cf4 <vTaskDelete>
  /* USER CODE END startMonitoring */
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b6:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <Error_Handler+0x6>
	...

080017bc <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80017c4:	4a07      	ldr	r2, [pc, #28]	; (80017e4 <RetargetInit+0x28>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80017ca:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <RetargetInit+0x2c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6898      	ldr	r0, [r3, #8]
 80017d0:	2300      	movs	r3, #0
 80017d2:	2202      	movs	r2, #2
 80017d4:	2100      	movs	r1, #0
 80017d6:	f005 fe1d 	bl	8007414 <setvbuf>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20004d10 	.word	0x20004d10
 80017e8:	20000010 	.word	0x20000010

080017ec <_isatty>:

int _isatty(int fd) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db04      	blt.n	8001804 <_isatty+0x18>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	dc01      	bgt.n	8001804 <_isatty+0x18>
    return 1;
 8001800:	2301      	movs	r3, #1
 8001802:	e005      	b.n	8001810 <_isatty+0x24>

  errno = EBADF;
 8001804:	f004 fe40 	bl	8006488 <__errno>
 8001808:	4602      	mov	r2, r0
 800180a:	2309      	movs	r3, #9
 800180c:	6013      	str	r3, [r2, #0]
  return 0;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <_write>:

int _write(int fd, char* ptr, int len) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d002      	beq.n	8001830 <_write+0x18>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d111      	bne.n	8001854 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001830:	4b0e      	ldr	r3, [pc, #56]	; (800186c <_write+0x54>)
 8001832:	6818      	ldr	r0, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	b29a      	uxth	r2, r3
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	f002 faa6 	bl	8003d8e <HAL_UART_Transmit>
 8001842:	4603      	mov	r3, r0
 8001844:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001846:	7dfb      	ldrb	r3, [r7, #23]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <_write+0x38>
      return len;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	e008      	b.n	8001862 <_write+0x4a>
    else
      return EIO;
 8001850:	2305      	movs	r3, #5
 8001852:	e006      	b.n	8001862 <_write+0x4a>
  }
  errno = EBADF;
 8001854:	f004 fe18 	bl	8006488 <__errno>
 8001858:	4602      	mov	r2, r0
 800185a:	2309      	movs	r3, #9
 800185c:	6013      	str	r3, [r2, #0]
  return -1;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20004d10 	.word	0x20004d10

08001870 <_close>:

int _close(int fd) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	db04      	blt.n	8001888 <_close+0x18>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b02      	cmp	r3, #2
 8001882:	dc01      	bgt.n	8001888 <_close+0x18>
    return 0;
 8001884:	2300      	movs	r3, #0
 8001886:	e006      	b.n	8001896 <_close+0x26>

  errno = EBADF;
 8001888:	f004 fdfe 	bl	8006488 <__errno>
 800188c:	4602      	mov	r2, r0
 800188e:	2309      	movs	r3, #9
 8001890:	6013      	str	r3, [r2, #0]
  return -1;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80018aa:	f004 fded 	bl	8006488 <__errno>
 80018ae:	4602      	mov	r2, r0
 80018b0:	2309      	movs	r3, #9
 80018b2:	6013      	str	r3, [r2, #0]
  return -1;
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_read>:

int _read(int fd, char* ptr, int len) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d110      	bne.n	80018f4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <_read+0x4c>)
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295
 80018da:	2201      	movs	r2, #1
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	f002 faef 	bl	8003ec0 <HAL_UART_Receive>
 80018e2:	4603      	mov	r3, r0
 80018e4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80018e6:	7dfb      	ldrb	r3, [r7, #23]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <_read+0x30>
      return 1;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e008      	b.n	8001902 <_read+0x42>
    else
      return EIO;
 80018f0:	2305      	movs	r3, #5
 80018f2:	e006      	b.n	8001902 <_read+0x42>
  }
  errno = EBADF;
 80018f4:	f004 fdc8 	bl	8006488 <__errno>
 80018f8:	4602      	mov	r2, r0
 80018fa:	2309      	movs	r3, #9
 80018fc:	6013      	str	r3, [r2, #0]
  return -1;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20004d10 	.word	0x20004d10

08001910 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	db08      	blt.n	8001932 <_fstat+0x22>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b02      	cmp	r3, #2
 8001924:	dc05      	bgt.n	8001932 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800192c:	605a      	str	r2, [r3, #4]
    return 0;
 800192e:	2300      	movs	r3, #0
 8001930:	e005      	b.n	800193e <_fstat+0x2e>
  }

  errno = EBADF;
 8001932:	f004 fda9 	bl	8006488 <__errno>
 8001936:	4602      	mov	r2, r0
 8001938:	2309      	movs	r3, #9
 800193a:	6013      	str	r3, [r2, #0]
  return 0;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_MspInit+0x54>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4a11      	ldr	r2, [pc, #68]	; (800199c <HAL_MspInit+0x54>)
 8001958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800195c:	6453      	str	r3, [r2, #68]	; 0x44
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <HAL_MspInit+0x54>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_MspInit+0x54>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <HAL_MspInit+0x54>)
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001978:	6413      	str	r3, [r2, #64]	; 0x40
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <HAL_MspInit+0x54>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	210f      	movs	r1, #15
 800198a:	f06f 0001 	mvn.w	r0, #1
 800198e:	f000 fe36 	bl	80025fe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800

080019a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a17      	ldr	r2, [pc, #92]	; (8001a1c <HAL_ADC_MspInit+0x7c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d127      	bne.n	8001a12 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_ADC_MspInit+0x80>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	4a15      	ldr	r2, [pc, #84]	; (8001a20 <HAL_ADC_MspInit+0x80>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	6453      	str	r3, [r2, #68]	; 0x44
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <HAL_ADC_MspInit+0x80>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_ADC_MspInit+0x80>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <HAL_ADC_MspInit+0x80>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <HAL_ADC_MspInit+0x80>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80019fa:	2313      	movs	r3, #19
 80019fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019fe:	2303      	movs	r3, #3
 8001a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4805      	ldr	r0, [pc, #20]	; (8001a24 <HAL_ADC_MspInit+0x84>)
 8001a0e:	f000 fe1f 	bl	8002650 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a12:	bf00      	nop
 8001a14:	3728      	adds	r7, #40	; 0x28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40012000 	.word	0x40012000
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40020000 	.word	0x40020000

08001a28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b090      	sub	sp, #64	; 0x40
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a6a      	ldr	r2, [pc, #424]	; (8001bf0 <HAL_SPI_MspInit+0x1c8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d12c      	bne.n	8001aa4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a4e:	4b69      	ldr	r3, [pc, #420]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	4a68      	ldr	r2, [pc, #416]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001a54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b66      	ldr	r3, [pc, #408]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a64:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6a:	4b62      	ldr	r3, [pc, #392]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a61      	ldr	r2, [pc, #388]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b5f      	ldr	r3, [pc, #380]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a82:	23e0      	movs	r3, #224	; 0xe0
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a92:	2305      	movs	r3, #5
 8001a94:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4856      	ldr	r0, [pc, #344]	; (8001bf8 <HAL_SPI_MspInit+0x1d0>)
 8001a9e:	f000 fdd7 	bl	8002650 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001aa2:	e0a1      	b.n	8001be8 <HAL_SPI_MspInit+0x1c0>
  else if(hspi->Instance==SPI2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a54      	ldr	r2, [pc, #336]	; (8001bfc <HAL_SPI_MspInit+0x1d4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d14b      	bne.n	8001b46 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
 8001ab2:	4b50      	ldr	r3, [pc, #320]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a4f      	ldr	r2, [pc, #316]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b4d      	ldr	r3, [pc, #308]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac6:	623b      	str	r3, [r7, #32]
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
 8001ace:	4b49      	ldr	r3, [pc, #292]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a48      	ldr	r2, [pc, #288]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b46      	ldr	r3, [pc, #280]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	61fb      	str	r3, [r7, #28]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
 8001aea:	4b42      	ldr	r3, [pc, #264]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a41      	ldr	r2, [pc, #260]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b3f      	ldr	r3, [pc, #252]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	61bb      	str	r3, [r7, #24]
 8001b00:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b02:	230c      	movs	r3, #12
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b12:	2305      	movs	r3, #5
 8001b14:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4838      	ldr	r0, [pc, #224]	; (8001c00 <HAL_SPI_MspInit+0x1d8>)
 8001b1e:	f000 fd97 	bl	8002650 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b30:	2303      	movs	r3, #3
 8001b32:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b34:	2305      	movs	r3, #5
 8001b36:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4831      	ldr	r0, [pc, #196]	; (8001c04 <HAL_SPI_MspInit+0x1dc>)
 8001b40:	f000 fd86 	bl	8002650 <HAL_GPIO_Init>
}
 8001b44:	e050      	b.n	8001be8 <HAL_SPI_MspInit+0x1c0>
  else if(hspi->Instance==SPI3)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a2f      	ldr	r2, [pc, #188]	; (8001c08 <HAL_SPI_MspInit+0x1e0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d14b      	bne.n	8001be8 <HAL_SPI_MspInit+0x1c0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	4a26      	ldr	r2, [pc, #152]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b60:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	4a1f      	ldr	r2, [pc, #124]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001b76:	f043 0302 	orr.w	r3, r3, #2
 8001b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b90:	4a18      	ldr	r2, [pc, #96]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001b92:	f043 0304 	orr.w	r3, r3, #4
 8001b96:	6313      	str	r3, [r2, #48]	; 0x30
 8001b98:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <HAL_SPI_MspInit+0x1cc>)
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4810      	ldr	r0, [pc, #64]	; (8001c04 <HAL_SPI_MspInit+0x1dc>)
 8001bc2:	f000 fd45 	bl	8002650 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001bc6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bd8:	2306      	movs	r3, #6
 8001bda:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be0:	4619      	mov	r1, r3
 8001be2:	4807      	ldr	r0, [pc, #28]	; (8001c00 <HAL_SPI_MspInit+0x1d8>)
 8001be4:	f000 fd34 	bl	8002650 <HAL_GPIO_Init>
}
 8001be8:	bf00      	nop
 8001bea:	3740      	adds	r7, #64	; 0x40
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40013000 	.word	0x40013000
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020000 	.word	0x40020000
 8001bfc:	40003800 	.word	0x40003800
 8001c00:	40020800 	.word	0x40020800
 8001c04:	40020400 	.word	0x40020400
 8001c08:	40003c00 	.word	0x40003c00

08001c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08c      	sub	sp, #48	; 0x30
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a41      	ldr	r2, [pc, #260]	; (8001d30 <HAL_UART_MspInit+0x124>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d14b      	bne.n	8001cc6 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
 8001c32:	4b40      	ldr	r3, [pc, #256]	; (8001d34 <HAL_UART_MspInit+0x128>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	4a3f      	ldr	r2, [pc, #252]	; (8001d34 <HAL_UART_MspInit+0x128>)
 8001c38:	f043 0310 	orr.w	r3, r3, #16
 8001c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	; (8001d34 <HAL_UART_MspInit+0x128>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	61bb      	str	r3, [r7, #24]
 8001c48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	4b39      	ldr	r3, [pc, #228]	; (8001d34 <HAL_UART_MspInit+0x128>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a38      	ldr	r2, [pc, #224]	; (8001d34 <HAL_UART_MspInit+0x128>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b36      	ldr	r3, [pc, #216]	; (8001d34 <HAL_UART_MspInit+0x128>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	4b32      	ldr	r3, [pc, #200]	; (8001d34 <HAL_UART_MspInit+0x128>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a31      	ldr	r2, [pc, #196]	; (8001d34 <HAL_UART_MspInit+0x128>)
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b2f      	ldr	r3, [pc, #188]	; (8001d34 <HAL_UART_MspInit+0x128>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c90:	2303      	movs	r3, #3
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c94:	2307      	movs	r3, #7
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c98:	f107 031c 	add.w	r3, r7, #28
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4826      	ldr	r0, [pc, #152]	; (8001d38 <HAL_UART_MspInit+0x12c>)
 8001ca0:	f000 fcd6 	bl	8002650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cb4:	2307      	movs	r3, #7
 8001cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb8:	f107 031c 	add.w	r3, r7, #28
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	481f      	ldr	r0, [pc, #124]	; (8001d3c <HAL_UART_MspInit+0x130>)
 8001cc0:	f000 fcc6 	bl	8002650 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cc4:	e030      	b.n	8001d28 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a1d      	ldr	r2, [pc, #116]	; (8001d40 <HAL_UART_MspInit+0x134>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d12b      	bne.n	8001d28 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <HAL_UART_MspInit+0x128>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	4a16      	ldr	r2, [pc, #88]	; (8001d34 <HAL_UART_MspInit+0x128>)
 8001cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cde:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce0:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <HAL_UART_MspInit+0x128>)
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <HAL_UART_MspInit+0x128>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	4a0f      	ldr	r2, [pc, #60]	; (8001d34 <HAL_UART_MspInit+0x128>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <HAL_UART_MspInit+0x128>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d08:	230c      	movs	r3, #12
 8001d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d18:	2307      	movs	r3, #7
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1c:	f107 031c 	add.w	r3, r7, #28
 8001d20:	4619      	mov	r1, r3
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <HAL_UART_MspInit+0x12c>)
 8001d24:	f000 fc94 	bl	8002650 <HAL_GPIO_Init>
}
 8001d28:	bf00      	nop
 8001d2a:	3730      	adds	r7, #48	; 0x30
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40011000 	.word	0x40011000
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	40020400 	.word	0x40020400
 8001d40:	40004400 	.word	0x40004400

08001d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <NMI_Handler+0x4>

08001d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4e:	e7fe      	b.n	8001d4e <HardFault_Handler+0x4>

08001d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <MemManage_Handler+0x4>

08001d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d5a:	e7fe      	b.n	8001d5a <BusFault_Handler+0x4>

08001d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <UsageFault_Handler+0x4>

08001d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d74:	f000 f8d2 	bl	8001f1c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001d78:	f003 fbb0 	bl	80054dc <xTaskGetSchedulerState>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d001      	beq.n	8001d86 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001d82:	f003 fde1 	bl	8005948 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d94:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <_sbrk+0x5c>)
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <_sbrk+0x60>)
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da0:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <_sbrk+0x64>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d102      	bne.n	8001dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <_sbrk+0x64>)
 8001daa:	4a12      	ldr	r2, [pc, #72]	; (8001df4 <_sbrk+0x68>)
 8001dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <_sbrk+0x64>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d207      	bcs.n	8001dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dbc:	f004 fb64 	bl	8006488 <__errno>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	230c      	movs	r3, #12
 8001dc4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dca:	e009      	b.n	8001de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <_sbrk+0x64>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd2:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <_sbrk+0x64>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	4a05      	ldr	r2, [pc, #20]	; (8001df0 <_sbrk+0x64>)
 8001ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dde:	68fb      	ldr	r3, [r7, #12]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20020000 	.word	0x20020000
 8001dec:	00000400 	.word	0x00000400
 8001df0:	20000458 	.word	0x20000458
 8001df4:	20004d20 	.word	0x20004d20

08001df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <SystemInit+0x28>)
 8001dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e02:	4a07      	ldr	r2, [pc, #28]	; (8001e20 <SystemInit+0x28>)
 8001e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e0c:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <SystemInit+0x28>)
 8001e0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e12:	609a      	str	r2, [r3, #8]
#endif
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e2a:	e003      	b.n	8001e34 <LoopCopyDataInit>

08001e2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e32:	3104      	adds	r1, #4

08001e34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e34:	480b      	ldr	r0, [pc, #44]	; (8001e64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e3c:	d3f6      	bcc.n	8001e2c <CopyDataInit>
  ldr  r2, =_sbss
 8001e3e:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e40:	e002      	b.n	8001e48 <LoopFillZerobss>

08001e42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e44:	f842 3b04 	str.w	r3, [r2], #4

08001e48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e4c:	d3f9      	bcc.n	8001e42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e4e:	f7ff ffd3 	bl	8001df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e52:	f004 fb1f 	bl	8006494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e56:	f7ff f8b9 	bl	8000fcc <main>
  bx  lr    
 8001e5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e5c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e60:	0800af70 	.word	0x0800af70
  ldr  r0, =_sdata
 8001e64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e68:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001e6c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001e70:	20004d20 	.word	0x20004d20

08001e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC_IRQHandler>
	...

08001e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <HAL_Init+0x40>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0d      	ldr	r2, [pc, #52]	; (8001eb8 <HAL_Init+0x40>)
 8001e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_Init+0x40>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <HAL_Init+0x40>)
 8001e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_Init+0x40>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <HAL_Init+0x40>)
 8001e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea0:	2003      	movs	r0, #3
 8001ea2:	f000 fba1 	bl	80025e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ea6:	200f      	movs	r0, #15
 8001ea8:	f000 f808 	bl	8001ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eac:	f7ff fd4c 	bl	8001948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023c00 	.word	0x40023c00

08001ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_InitTick+0x54>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_InitTick+0x58>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 fbab 	bl	8002636 <HAL_SYSTICK_Config>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00e      	b.n	8001f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b0f      	cmp	r3, #15
 8001eee:	d80a      	bhi.n	8001f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef8:	f000 fb81 	bl	80025fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001efc:	4a06      	ldr	r2, [pc, #24]	; (8001f18 <HAL_InitTick+0x5c>)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e000      	b.n	8001f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000000 	.word	0x20000000
 8001f14:	20000008 	.word	0x20000008
 8001f18:	20000004 	.word	0x20000004

08001f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_IncTick+0x20>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_IncTick+0x24>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <HAL_IncTick+0x24>)
 8001f2e:	6013      	str	r3, [r2, #0]
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	20000008 	.word	0x20000008
 8001f40:	20004d14 	.word	0x20004d14

08001f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return uwTick;
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <HAL_GetTick+0x14>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20004d14 	.word	0x20004d14

08001f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f64:	f7ff ffee 	bl	8001f44 <HAL_GetTick>
 8001f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f74:	d005      	beq.n	8001f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_Delay+0x40>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4413      	add	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f82:	bf00      	nop
 8001f84:	f7ff ffde 	bl	8001f44 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d8f7      	bhi.n	8001f84 <HAL_Delay+0x28>
  {
  }
}
 8001f94:	bf00      	nop
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000008 	.word	0x20000008

08001fa0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e033      	b.n	800201e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d109      	bne.n	8001fd2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff fcee 	bl	80019a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f003 0310 	and.w	r3, r3, #16
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d118      	bne.n	8002010 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fe6:	f023 0302 	bic.w	r3, r3, #2
 8001fea:	f043 0202 	orr.w	r2, r3, #2
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f94a 	bl	800228c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f023 0303 	bic.w	r3, r3, #3
 8002006:	f043 0201 	orr.w	r2, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	641a      	str	r2, [r3, #64]	; 0x40
 800200e:	e001      	b.n	8002014 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800201c:	7bfb      	ldrb	r3, [r7, #15]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x1c>
 8002040:	2302      	movs	r3, #2
 8002042:	e113      	b.n	800226c <HAL_ADC_ConfigChannel+0x244>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b09      	cmp	r3, #9
 8002052:	d925      	bls.n	80020a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68d9      	ldr	r1, [r3, #12]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	b29b      	uxth	r3, r3
 8002060:	461a      	mov	r2, r3
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	3b1e      	subs	r3, #30
 800206a:	2207      	movs	r2, #7
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43da      	mvns	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	400a      	ands	r2, r1
 8002078:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68d9      	ldr	r1, [r3, #12]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	4618      	mov	r0, r3
 800208c:	4603      	mov	r3, r0
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4403      	add	r3, r0
 8002092:	3b1e      	subs	r3, #30
 8002094:	409a      	lsls	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	e022      	b.n	80020e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6919      	ldr	r1, [r3, #16]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	461a      	mov	r2, r3
 80020ae:	4613      	mov	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	2207      	movs	r2, #7
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	400a      	ands	r2, r1
 80020c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6919      	ldr	r1, [r3, #16]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	4618      	mov	r0, r3
 80020d6:	4603      	mov	r3, r0
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4403      	add	r3, r0
 80020dc:	409a      	lsls	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b06      	cmp	r3, #6
 80020ec:	d824      	bhi.n	8002138 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	3b05      	subs	r3, #5
 8002100:	221f      	movs	r2, #31
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43da      	mvns	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	400a      	ands	r2, r1
 800210e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	4618      	mov	r0, r3
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	3b05      	subs	r3, #5
 800212a:	fa00 f203 	lsl.w	r2, r0, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	635a      	str	r2, [r3, #52]	; 0x34
 8002136:	e04c      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b0c      	cmp	r3, #12
 800213e:	d824      	bhi.n	800218a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	3b23      	subs	r3, #35	; 0x23
 8002152:	221f      	movs	r2, #31
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43da      	mvns	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	400a      	ands	r2, r1
 8002160:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	b29b      	uxth	r3, r3
 800216e:	4618      	mov	r0, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	3b23      	subs	r3, #35	; 0x23
 800217c:	fa00 f203 	lsl.w	r2, r0, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
 8002188:	e023      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	3b41      	subs	r3, #65	; 0x41
 800219c:	221f      	movs	r2, #31
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43da      	mvns	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	400a      	ands	r2, r1
 80021aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	4618      	mov	r0, r3
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	3b41      	subs	r3, #65	; 0x41
 80021c6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021d2:	4b29      	ldr	r3, [pc, #164]	; (8002278 <HAL_ADC_ConfigChannel+0x250>)
 80021d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a28      	ldr	r2, [pc, #160]	; (800227c <HAL_ADC_ConfigChannel+0x254>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d10f      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x1d8>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b12      	cmp	r3, #18
 80021e6:	d10b      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a1d      	ldr	r2, [pc, #116]	; (800227c <HAL_ADC_ConfigChannel+0x254>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d12b      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x23a>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a1c      	ldr	r2, [pc, #112]	; (8002280 <HAL_ADC_ConfigChannel+0x258>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d003      	beq.n	800221c <HAL_ADC_ConfigChannel+0x1f4>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b11      	cmp	r3, #17
 800221a:	d122      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a11      	ldr	r2, [pc, #68]	; (8002280 <HAL_ADC_ConfigChannel+0x258>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d111      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800223e:	4b11      	ldr	r3, [pc, #68]	; (8002284 <HAL_ADC_ConfigChannel+0x25c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a11      	ldr	r2, [pc, #68]	; (8002288 <HAL_ADC_ConfigChannel+0x260>)
 8002244:	fba2 2303 	umull	r2, r3, r2, r3
 8002248:	0c9a      	lsrs	r2, r3, #18
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002254:	e002      	b.n	800225c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	3b01      	subs	r3, #1
 800225a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f9      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	40012300 	.word	0x40012300
 800227c:	40012000 	.word	0x40012000
 8002280:	10000012 	.word	0x10000012
 8002284:	20000000 	.word	0x20000000
 8002288:	431bde83 	.word	0x431bde83

0800228c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002294:	4b79      	ldr	r3, [pc, #484]	; (800247c <ADC_Init+0x1f0>)
 8002296:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	431a      	orrs	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6859      	ldr	r1, [r3, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	021a      	lsls	r2, r3, #8
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6859      	ldr	r1, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002306:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6899      	ldr	r1, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	4a58      	ldr	r2, [pc, #352]	; (8002480 <ADC_Init+0x1f4>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d022      	beq.n	800236a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002332:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6899      	ldr	r1, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002354:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6899      	ldr	r1, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	e00f      	b.n	800238a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002378:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002388:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0202 	bic.w	r2, r2, #2
 8002398:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6899      	ldr	r1, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	7e1b      	ldrb	r3, [r3, #24]
 80023a4:	005a      	lsls	r2, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d01b      	beq.n	80023f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6859      	ldr	r1, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	3b01      	subs	r3, #1
 80023e4:	035a      	lsls	r2, r3, #13
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	e007      	b.n	8002400 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800240e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	3b01      	subs	r3, #1
 800241c:	051a      	lsls	r2, r3, #20
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6899      	ldr	r1, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002442:	025a      	lsls	r2, r3, #9
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800245a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6899      	ldr	r1, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	029a      	lsls	r2, r3, #10
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	609a      	str	r2, [r3, #8]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	40012300 	.word	0x40012300
 8002480:	0f000001 	.word	0x0f000001

08002484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a0:	4013      	ands	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024b6:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	60d3      	str	r3, [r2, #12]
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <__NVIC_GetPriorityGrouping+0x18>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	f003 0307 	and.w	r3, r3, #7
}
 80024da:	4618      	mov	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	6039      	str	r1, [r7, #0]
 80024f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	db0a      	blt.n	8002512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	490c      	ldr	r1, [pc, #48]	; (8002534 <__NVIC_SetPriority+0x4c>)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	0112      	lsls	r2, r2, #4
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	440b      	add	r3, r1
 800250c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002510:	e00a      	b.n	8002528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4908      	ldr	r1, [pc, #32]	; (8002538 <__NVIC_SetPriority+0x50>)
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	3b04      	subs	r3, #4
 8002520:	0112      	lsls	r2, r2, #4
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	440b      	add	r3, r1
 8002526:	761a      	strb	r2, [r3, #24]
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	e000e100 	.word	0xe000e100
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800253c:	b480      	push	{r7}
 800253e:	b089      	sub	sp, #36	; 0x24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f1c3 0307 	rsb	r3, r3, #7
 8002556:	2b04      	cmp	r3, #4
 8002558:	bf28      	it	cs
 800255a:	2304      	movcs	r3, #4
 800255c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3304      	adds	r3, #4
 8002562:	2b06      	cmp	r3, #6
 8002564:	d902      	bls.n	800256c <NVIC_EncodePriority+0x30>
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3b03      	subs	r3, #3
 800256a:	e000      	b.n	800256e <NVIC_EncodePriority+0x32>
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002570:	f04f 32ff 	mov.w	r2, #4294967295
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43da      	mvns	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	401a      	ands	r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002584:	f04f 31ff 	mov.w	r1, #4294967295
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	fa01 f303 	lsl.w	r3, r1, r3
 800258e:	43d9      	mvns	r1, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002594:	4313      	orrs	r3, r2
         );
}
 8002596:	4618      	mov	r0, r3
 8002598:	3724      	adds	r7, #36	; 0x24
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025b4:	d301      	bcc.n	80025ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025b6:	2301      	movs	r3, #1
 80025b8:	e00f      	b.n	80025da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ba:	4a0a      	ldr	r2, [pc, #40]	; (80025e4 <SysTick_Config+0x40>)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3b01      	subs	r3, #1
 80025c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025c2:	210f      	movs	r1, #15
 80025c4:	f04f 30ff 	mov.w	r0, #4294967295
 80025c8:	f7ff ff8e 	bl	80024e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025cc:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <SysTick_Config+0x40>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025d2:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <SysTick_Config+0x40>)
 80025d4:	2207      	movs	r2, #7
 80025d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	e000e010 	.word	0xe000e010

080025e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff ff47 	bl	8002484 <__NVIC_SetPriorityGrouping>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025fe:	b580      	push	{r7, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af00      	add	r7, sp, #0
 8002604:	4603      	mov	r3, r0
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
 800260a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002610:	f7ff ff5c 	bl	80024cc <__NVIC_GetPriorityGrouping>
 8002614:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68b9      	ldr	r1, [r7, #8]
 800261a:	6978      	ldr	r0, [r7, #20]
 800261c:	f7ff ff8e 	bl	800253c <NVIC_EncodePriority>
 8002620:	4602      	mov	r2, r0
 8002622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002626:	4611      	mov	r1, r2
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff5d 	bl	80024e8 <__NVIC_SetPriority>
}
 800262e:	bf00      	nop
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ffb0 	bl	80025a4 <SysTick_Config>
 8002644:	4603      	mov	r3, r0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002662:	2300      	movs	r3, #0
 8002664:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	e159      	b.n	8002920 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800266c:	2201      	movs	r2, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	429a      	cmp	r2, r3
 8002686:	f040 8148 	bne.w	800291a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d00b      	beq.n	80026aa <HAL_GPIO_Init+0x5a>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d007      	beq.n	80026aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800269e:	2b11      	cmp	r3, #17
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b12      	cmp	r3, #18
 80026a8:	d130      	bne.n	800270c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	2203      	movs	r2, #3
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026e0:	2201      	movs	r2, #1
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 0201 	and.w	r2, r3, #1
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	2203      	movs	r2, #3
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0xfc>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b12      	cmp	r3, #18
 800274a:	d123      	bne.n	8002794 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	08da      	lsrs	r2, r3, #3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3208      	adds	r2, #8
 8002754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	220f      	movs	r2, #15
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	08da      	lsrs	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3208      	adds	r2, #8
 800278e:	69b9      	ldr	r1, [r7, #24]
 8002790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	2203      	movs	r2, #3
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 0203 	and.w	r2, r3, #3
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 80a2 	beq.w	800291a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	4b56      	ldr	r3, [pc, #344]	; (8002934 <HAL_GPIO_Init+0x2e4>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	4a55      	ldr	r2, [pc, #340]	; (8002934 <HAL_GPIO_Init+0x2e4>)
 80027e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e4:	6453      	str	r3, [r2, #68]	; 0x44
 80027e6:	4b53      	ldr	r3, [pc, #332]	; (8002934 <HAL_GPIO_Init+0x2e4>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027f2:	4a51      	ldr	r2, [pc, #324]	; (8002938 <HAL_GPIO_Init+0x2e8>)
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	089b      	lsrs	r3, r3, #2
 80027f8:	3302      	adds	r3, #2
 80027fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	220f      	movs	r2, #15
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a48      	ldr	r2, [pc, #288]	; (800293c <HAL_GPIO_Init+0x2ec>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d019      	beq.n	8002852 <HAL_GPIO_Init+0x202>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a47      	ldr	r2, [pc, #284]	; (8002940 <HAL_GPIO_Init+0x2f0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d013      	beq.n	800284e <HAL_GPIO_Init+0x1fe>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a46      	ldr	r2, [pc, #280]	; (8002944 <HAL_GPIO_Init+0x2f4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00d      	beq.n	800284a <HAL_GPIO_Init+0x1fa>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a45      	ldr	r2, [pc, #276]	; (8002948 <HAL_GPIO_Init+0x2f8>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d007      	beq.n	8002846 <HAL_GPIO_Init+0x1f6>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a44      	ldr	r2, [pc, #272]	; (800294c <HAL_GPIO_Init+0x2fc>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d101      	bne.n	8002842 <HAL_GPIO_Init+0x1f2>
 800283e:	2304      	movs	r3, #4
 8002840:	e008      	b.n	8002854 <HAL_GPIO_Init+0x204>
 8002842:	2307      	movs	r3, #7
 8002844:	e006      	b.n	8002854 <HAL_GPIO_Init+0x204>
 8002846:	2303      	movs	r3, #3
 8002848:	e004      	b.n	8002854 <HAL_GPIO_Init+0x204>
 800284a:	2302      	movs	r3, #2
 800284c:	e002      	b.n	8002854 <HAL_GPIO_Init+0x204>
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <HAL_GPIO_Init+0x204>
 8002852:	2300      	movs	r3, #0
 8002854:	69fa      	ldr	r2, [r7, #28]
 8002856:	f002 0203 	and.w	r2, r2, #3
 800285a:	0092      	lsls	r2, r2, #2
 800285c:	4093      	lsls	r3, r2
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002864:	4934      	ldr	r1, [pc, #208]	; (8002938 <HAL_GPIO_Init+0x2e8>)
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	089b      	lsrs	r3, r3, #2
 800286a:	3302      	adds	r3, #2
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002872:	4b37      	ldr	r3, [pc, #220]	; (8002950 <HAL_GPIO_Init+0x300>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002896:	4a2e      	ldr	r2, [pc, #184]	; (8002950 <HAL_GPIO_Init+0x300>)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800289c:	4b2c      	ldr	r3, [pc, #176]	; (8002950 <HAL_GPIO_Init+0x300>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028c0:	4a23      	ldr	r2, [pc, #140]	; (8002950 <HAL_GPIO_Init+0x300>)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028c6:	4b22      	ldr	r3, [pc, #136]	; (8002950 <HAL_GPIO_Init+0x300>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4013      	ands	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ea:	4a19      	ldr	r2, [pc, #100]	; (8002950 <HAL_GPIO_Init+0x300>)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028f0:	4b17      	ldr	r3, [pc, #92]	; (8002950 <HAL_GPIO_Init+0x300>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002914:	4a0e      	ldr	r2, [pc, #56]	; (8002950 <HAL_GPIO_Init+0x300>)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3301      	adds	r3, #1
 800291e:	61fb      	str	r3, [r7, #28]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	2b0f      	cmp	r3, #15
 8002924:	f67f aea2 	bls.w	800266c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002928:	bf00      	nop
 800292a:	3724      	adds	r7, #36	; 0x24
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	40023800 	.word	0x40023800
 8002938:	40013800 	.word	0x40013800
 800293c:	40020000 	.word	0x40020000
 8002940:	40020400 	.word	0x40020400
 8002944:	40020800 	.word	0x40020800
 8002948:	40020c00 	.word	0x40020c00
 800294c:	40021000 	.word	0x40021000
 8002950:	40013c00 	.word	0x40013c00

08002954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	807b      	strh	r3, [r7, #2]
 8002960:	4613      	mov	r3, r2
 8002962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002964:	787b      	ldrb	r3, [r7, #1]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002970:	e003      	b.n	800297a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002972:	887b      	ldrh	r3, [r7, #2]
 8002974:	041a      	lsls	r2, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	619a      	str	r2, [r3, #24]
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e25b      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d075      	beq.n	8002a92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029a6:	4ba3      	ldr	r3, [pc, #652]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d00c      	beq.n	80029cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029b2:	4ba0      	ldr	r3, [pc, #640]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d112      	bne.n	80029e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029be:	4b9d      	ldr	r3, [pc, #628]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ca:	d10b      	bne.n	80029e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029cc:	4b99      	ldr	r3, [pc, #612]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d05b      	beq.n	8002a90 <HAL_RCC_OscConfig+0x108>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d157      	bne.n	8002a90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e236      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ec:	d106      	bne.n	80029fc <HAL_RCC_OscConfig+0x74>
 80029ee:	4b91      	ldr	r3, [pc, #580]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a90      	ldr	r2, [pc, #576]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 80029f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	e01d      	b.n	8002a38 <HAL_RCC_OscConfig+0xb0>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a04:	d10c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x98>
 8002a06:	4b8b      	ldr	r3, [pc, #556]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a8a      	ldr	r2, [pc, #552]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	4b88      	ldr	r3, [pc, #544]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a87      	ldr	r2, [pc, #540]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	e00b      	b.n	8002a38 <HAL_RCC_OscConfig+0xb0>
 8002a20:	4b84      	ldr	r3, [pc, #528]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a83      	ldr	r2, [pc, #524]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	4b81      	ldr	r3, [pc, #516]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a80      	ldr	r2, [pc, #512]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d013      	beq.n	8002a68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7ff fa80 	bl	8001f44 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a48:	f7ff fa7c 	bl	8001f44 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	; 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e1fb      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5a:	4b76      	ldr	r3, [pc, #472]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0xc0>
 8002a66:	e014      	b.n	8002a92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a68:	f7ff fa6c 	bl	8001f44 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a70:	f7ff fa68 	bl	8001f44 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b64      	cmp	r3, #100	; 0x64
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e1e7      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a82:	4b6c      	ldr	r3, [pc, #432]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0xe8>
 8002a8e:	e000      	b.n	8002a92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d063      	beq.n	8002b66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a9e:	4b65      	ldr	r3, [pc, #404]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00b      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aaa:	4b62      	ldr	r3, [pc, #392]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d11c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ab6:	4b5f      	ldr	r3, [pc, #380]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d116      	bne.n	8002af0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac2:	4b5c      	ldr	r3, [pc, #368]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <HAL_RCC_OscConfig+0x152>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d001      	beq.n	8002ada <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e1bb      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ada:	4b56      	ldr	r3, [pc, #344]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4952      	ldr	r1, [pc, #328]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aee:	e03a      	b.n	8002b66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d020      	beq.n	8002b3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af8:	4b4f      	ldr	r3, [pc, #316]	; (8002c38 <HAL_RCC_OscConfig+0x2b0>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afe:	f7ff fa21 	bl	8001f44 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b06:	f7ff fa1d 	bl	8001f44 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e19c      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b18:	4b46      	ldr	r3, [pc, #280]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0f0      	beq.n	8002b06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b24:	4b43      	ldr	r3, [pc, #268]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4940      	ldr	r1, [pc, #256]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	600b      	str	r3, [r1, #0]
 8002b38:	e015      	b.n	8002b66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b3a:	4b3f      	ldr	r3, [pc, #252]	; (8002c38 <HAL_RCC_OscConfig+0x2b0>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7ff fa00 	bl	8001f44 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b48:	f7ff f9fc 	bl	8001f44 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e17b      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5a:	4b36      	ldr	r3, [pc, #216]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d030      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d016      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b7a:	4b30      	ldr	r3, [pc, #192]	; (8002c3c <HAL_RCC_OscConfig+0x2b4>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b80:	f7ff f9e0 	bl	8001f44 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b88:	f7ff f9dc 	bl	8001f44 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e15b      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9a:	4b26      	ldr	r3, [pc, #152]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0x200>
 8002ba6:	e015      	b.n	8002bd4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba8:	4b24      	ldr	r3, [pc, #144]	; (8002c3c <HAL_RCC_OscConfig+0x2b4>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bae:	f7ff f9c9 	bl	8001f44 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bb6:	f7ff f9c5 	bl	8001f44 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e144      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc8:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f0      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80a0 	beq.w	8002d22 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be6:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10f      	bne.n	8002c12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	4a0e      	ldr	r2, [pc, #56]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c00:	6413      	str	r3, [r2, #64]	; 0x40
 8002c02:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c12:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <HAL_RCC_OscConfig+0x2b8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d121      	bne.n	8002c62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c1e:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <HAL_RCC_OscConfig+0x2b8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a07      	ldr	r2, [pc, #28]	; (8002c40 <HAL_RCC_OscConfig+0x2b8>)
 8002c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c2a:	f7ff f98b 	bl	8001f44 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c30:	e011      	b.n	8002c56 <HAL_RCC_OscConfig+0x2ce>
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800
 8002c38:	42470000 	.word	0x42470000
 8002c3c:	42470e80 	.word	0x42470e80
 8002c40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c44:	f7ff f97e 	bl	8001f44 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e0fd      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c56:	4b81      	ldr	r3, [pc, #516]	; (8002e5c <HAL_RCC_OscConfig+0x4d4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d106      	bne.n	8002c78 <HAL_RCC_OscConfig+0x2f0>
 8002c6a:	4b7d      	ldr	r3, [pc, #500]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	4a7c      	ldr	r2, [pc, #496]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	6713      	str	r3, [r2, #112]	; 0x70
 8002c76:	e01c      	b.n	8002cb2 <HAL_RCC_OscConfig+0x32a>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b05      	cmp	r3, #5
 8002c7e:	d10c      	bne.n	8002c9a <HAL_RCC_OscConfig+0x312>
 8002c80:	4b77      	ldr	r3, [pc, #476]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c84:	4a76      	ldr	r2, [pc, #472]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002c86:	f043 0304 	orr.w	r3, r3, #4
 8002c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8c:	4b74      	ldr	r3, [pc, #464]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c90:	4a73      	ldr	r2, [pc, #460]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	6713      	str	r3, [r2, #112]	; 0x70
 8002c98:	e00b      	b.n	8002cb2 <HAL_RCC_OscConfig+0x32a>
 8002c9a:	4b71      	ldr	r3, [pc, #452]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	4a70      	ldr	r2, [pc, #448]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002ca0:	f023 0301 	bic.w	r3, r3, #1
 8002ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca6:	4b6e      	ldr	r3, [pc, #440]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	4a6d      	ldr	r2, [pc, #436]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002cac:	f023 0304 	bic.w	r3, r3, #4
 8002cb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d015      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cba:	f7ff f943 	bl	8001f44 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc0:	e00a      	b.n	8002cd8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc2:	f7ff f93f 	bl	8001f44 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e0bc      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd8:	4b61      	ldr	r3, [pc, #388]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0ee      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x33a>
 8002ce4:	e014      	b.n	8002d10 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce6:	f7ff f92d 	bl	8001f44 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cec:	e00a      	b.n	8002d04 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cee:	f7ff f929 	bl	8001f44 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e0a6      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d04:	4b56      	ldr	r3, [pc, #344]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1ee      	bne.n	8002cee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d10:	7dfb      	ldrb	r3, [r7, #23]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d105      	bne.n	8002d22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d16:	4b52      	ldr	r3, [pc, #328]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	4a51      	ldr	r2, [pc, #324]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 8092 	beq.w	8002e50 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d2c:	4b4c      	ldr	r3, [pc, #304]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 030c 	and.w	r3, r3, #12
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d05c      	beq.n	8002df2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d141      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d40:	4b48      	ldr	r3, [pc, #288]	; (8002e64 <HAL_RCC_OscConfig+0x4dc>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d46:	f7ff f8fd 	bl	8001f44 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4e:	f7ff f8f9 	bl	8001f44 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e078      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d60:	4b3f      	ldr	r3, [pc, #252]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f0      	bne.n	8002d4e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69da      	ldr	r2, [r3, #28]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	019b      	lsls	r3, r3, #6
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d82:	085b      	lsrs	r3, r3, #1
 8002d84:	3b01      	subs	r3, #1
 8002d86:	041b      	lsls	r3, r3, #16
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	061b      	lsls	r3, r3, #24
 8002d90:	4933      	ldr	r1, [pc, #204]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d96:	4b33      	ldr	r3, [pc, #204]	; (8002e64 <HAL_RCC_OscConfig+0x4dc>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7ff f8d2 	bl	8001f44 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da4:	f7ff f8ce 	bl	8001f44 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e04d      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db6:	4b2a      	ldr	r3, [pc, #168]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0x41c>
 8002dc2:	e045      	b.n	8002e50 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc4:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <HAL_RCC_OscConfig+0x4dc>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dca:	f7ff f8bb 	bl	8001f44 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd2:	f7ff f8b7 	bl	8001f44 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e036      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de4:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f0      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x44a>
 8002df0:	e02e      	b.n	8002e50 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e029      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dfe:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d11c      	bne.n	8002e4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d115      	bne.n	8002e4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e26:	4013      	ands	r3, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d10d      	bne.n	8002e4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d106      	bne.n	8002e4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40007000 	.word	0x40007000
 8002e60:	40023800 	.word	0x40023800
 8002e64:	42470060 	.word	0x42470060

08002e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0cc      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b68      	ldr	r3, [pc, #416]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d90c      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b65      	ldr	r3, [pc, #404]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b63      	ldr	r3, [pc, #396]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0b8      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d020      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ebc:	4b59      	ldr	r3, [pc, #356]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	4a58      	ldr	r2, [pc, #352]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ec6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed4:	4b53      	ldr	r3, [pc, #332]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4a52      	ldr	r2, [pc, #328]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee0:	4b50      	ldr	r3, [pc, #320]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	494d      	ldr	r1, [pc, #308]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d044      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	4b47      	ldr	r3, [pc, #284]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d119      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e07f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f26:	4b3f      	ldr	r3, [pc, #252]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e06f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f36:	4b3b      	ldr	r3, [pc, #236]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e067      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f46:	4b37      	ldr	r3, [pc, #220]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f023 0203 	bic.w	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4934      	ldr	r1, [pc, #208]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f58:	f7fe fff4 	bl	8001f44 <HAL_GetTick>
 8002f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f60:	f7fe fff0 	bl	8001f44 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e04f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f76:	4b2b      	ldr	r3, [pc, #172]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 020c 	and.w	r2, r3, #12
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d1eb      	bne.n	8002f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f88:	4b25      	ldr	r3, [pc, #148]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d20c      	bcs.n	8002fb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b22      	ldr	r3, [pc, #136]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9e:	4b20      	ldr	r3, [pc, #128]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e032      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4916      	ldr	r1, [pc, #88]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fda:	4b12      	ldr	r3, [pc, #72]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	490e      	ldr	r1, [pc, #56]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fee:	f000 f821 	bl	8003034 <HAL_RCC_GetSysClockFreq>
 8002ff2:	4601      	mov	r1, r0
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8003000:	5cd3      	ldrb	r3, [r2, r3]
 8003002:	fa21 f303 	lsr.w	r3, r1, r3
 8003006:	4a09      	ldr	r2, [pc, #36]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800300a:	4b09      	ldr	r3, [pc, #36]	; (8003030 <HAL_RCC_ClockConfig+0x1c8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe ff54 	bl	8001ebc <HAL_InitTick>

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40023c00 	.word	0x40023c00
 8003024:	40023800 	.word	0x40023800
 8003028:	0800ac24 	.word	0x0800ac24
 800302c:	20000000 	.word	0x20000000
 8003030:	20000004 	.word	0x20000004

08003034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	607b      	str	r3, [r7, #4]
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	2300      	movs	r3, #0
 8003044:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800304a:	4b63      	ldr	r3, [pc, #396]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b04      	cmp	r3, #4
 8003054:	d007      	beq.n	8003066 <HAL_RCC_GetSysClockFreq+0x32>
 8003056:	2b08      	cmp	r3, #8
 8003058:	d008      	beq.n	800306c <HAL_RCC_GetSysClockFreq+0x38>
 800305a:	2b00      	cmp	r3, #0
 800305c:	f040 80b4 	bne.w	80031c8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003060:	4b5e      	ldr	r3, [pc, #376]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003062:	60bb      	str	r3, [r7, #8]
       break;
 8003064:	e0b3      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003066:	4b5e      	ldr	r3, [pc, #376]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003068:	60bb      	str	r3, [r7, #8]
      break;
 800306a:	e0b0      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800306c:	4b5a      	ldr	r3, [pc, #360]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003074:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003076:	4b58      	ldr	r3, [pc, #352]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d04a      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003082:	4b55      	ldr	r3, [pc, #340]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	099b      	lsrs	r3, r3, #6
 8003088:	f04f 0400 	mov.w	r4, #0
 800308c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	ea03 0501 	and.w	r5, r3, r1
 8003098:	ea04 0602 	and.w	r6, r4, r2
 800309c:	4629      	mov	r1, r5
 800309e:	4632      	mov	r2, r6
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	f04f 0400 	mov.w	r4, #0
 80030a8:	0154      	lsls	r4, r2, #5
 80030aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030ae:	014b      	lsls	r3, r1, #5
 80030b0:	4619      	mov	r1, r3
 80030b2:	4622      	mov	r2, r4
 80030b4:	1b49      	subs	r1, r1, r5
 80030b6:	eb62 0206 	sbc.w	r2, r2, r6
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	f04f 0400 	mov.w	r4, #0
 80030c2:	0194      	lsls	r4, r2, #6
 80030c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030c8:	018b      	lsls	r3, r1, #6
 80030ca:	1a5b      	subs	r3, r3, r1
 80030cc:	eb64 0402 	sbc.w	r4, r4, r2
 80030d0:	f04f 0100 	mov.w	r1, #0
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	00e2      	lsls	r2, r4, #3
 80030da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030de:	00d9      	lsls	r1, r3, #3
 80030e0:	460b      	mov	r3, r1
 80030e2:	4614      	mov	r4, r2
 80030e4:	195b      	adds	r3, r3, r5
 80030e6:	eb44 0406 	adc.w	r4, r4, r6
 80030ea:	f04f 0100 	mov.w	r1, #0
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	0262      	lsls	r2, r4, #9
 80030f4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80030f8:	0259      	lsls	r1, r3, #9
 80030fa:	460b      	mov	r3, r1
 80030fc:	4614      	mov	r4, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	4621      	mov	r1, r4
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f04f 0400 	mov.w	r4, #0
 8003108:	461a      	mov	r2, r3
 800310a:	4623      	mov	r3, r4
 800310c:	f7fd fdc4 	bl	8000c98 <__aeabi_uldivmod>
 8003110:	4603      	mov	r3, r0
 8003112:	460c      	mov	r4, r1
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	e049      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003118:	4b2f      	ldr	r3, [pc, #188]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	099b      	lsrs	r3, r3, #6
 800311e:	f04f 0400 	mov.w	r4, #0
 8003122:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	ea03 0501 	and.w	r5, r3, r1
 800312e:	ea04 0602 	and.w	r6, r4, r2
 8003132:	4629      	mov	r1, r5
 8003134:	4632      	mov	r2, r6
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	f04f 0400 	mov.w	r4, #0
 800313e:	0154      	lsls	r4, r2, #5
 8003140:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003144:	014b      	lsls	r3, r1, #5
 8003146:	4619      	mov	r1, r3
 8003148:	4622      	mov	r2, r4
 800314a:	1b49      	subs	r1, r1, r5
 800314c:	eb62 0206 	sbc.w	r2, r2, r6
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	f04f 0400 	mov.w	r4, #0
 8003158:	0194      	lsls	r4, r2, #6
 800315a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800315e:	018b      	lsls	r3, r1, #6
 8003160:	1a5b      	subs	r3, r3, r1
 8003162:	eb64 0402 	sbc.w	r4, r4, r2
 8003166:	f04f 0100 	mov.w	r1, #0
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	00e2      	lsls	r2, r4, #3
 8003170:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003174:	00d9      	lsls	r1, r3, #3
 8003176:	460b      	mov	r3, r1
 8003178:	4614      	mov	r4, r2
 800317a:	195b      	adds	r3, r3, r5
 800317c:	eb44 0406 	adc.w	r4, r4, r6
 8003180:	f04f 0100 	mov.w	r1, #0
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	02a2      	lsls	r2, r4, #10
 800318a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800318e:	0299      	lsls	r1, r3, #10
 8003190:	460b      	mov	r3, r1
 8003192:	4614      	mov	r4, r2
 8003194:	4618      	mov	r0, r3
 8003196:	4621      	mov	r1, r4
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f04f 0400 	mov.w	r4, #0
 800319e:	461a      	mov	r2, r3
 80031a0:	4623      	mov	r3, r4
 80031a2:	f7fd fd79 	bl	8000c98 <__aeabi_uldivmod>
 80031a6:	4603      	mov	r3, r0
 80031a8:	460c      	mov	r4, r1
 80031aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031ac:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	0c1b      	lsrs	r3, r3, #16
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	3301      	adds	r3, #1
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c4:	60bb      	str	r3, [r7, #8]
      break;
 80031c6:	e002      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031c8:	4b04      	ldr	r3, [pc, #16]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80031ca:	60bb      	str	r3, [r7, #8]
      break;
 80031cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ce:	68bb      	ldr	r3, [r7, #8]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031d8:	40023800 	.word	0x40023800
 80031dc:	00f42400 	.word	0x00f42400
 80031e0:	007a1200 	.word	0x007a1200

080031e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e8:	4b03      	ldr	r3, [pc, #12]	; (80031f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ea:	681b      	ldr	r3, [r3, #0]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20000000 	.word	0x20000000

080031fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003200:	f7ff fff0 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8003204:	4601      	mov	r1, r0
 8003206:	4b05      	ldr	r3, [pc, #20]	; (800321c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	0a9b      	lsrs	r3, r3, #10
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	4a03      	ldr	r2, [pc, #12]	; (8003220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003212:	5cd3      	ldrb	r3, [r2, r3]
 8003214:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40023800 	.word	0x40023800
 8003220:	0800ac34 	.word	0x0800ac34

08003224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003228:	f7ff ffdc 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 800322c:	4601      	mov	r1, r0
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	0b5b      	lsrs	r3, r3, #13
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	4a03      	ldr	r2, [pc, #12]	; (8003248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800323a:	5cd3      	ldrb	r3, [r2, r3]
 800323c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003240:	4618      	mov	r0, r3
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40023800 	.word	0x40023800
 8003248:	0800ac34 	.word	0x0800ac34

0800324c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e056      	b.n	800330c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d106      	bne.n	800327e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7fe fbd5 	bl	8001a28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2202      	movs	r2, #2
 8003282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003294:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	ea42 0103 	orr.w	r1, r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	0c1b      	lsrs	r3, r3, #16
 80032dc:	f003 0104 	and.w	r1, r3, #4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	69da      	ldr	r2, [r3, #28]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	4613      	mov	r3, r2
 8003322:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_SPI_Transmit+0x22>
 8003332:	2302      	movs	r3, #2
 8003334:	e11e      	b.n	8003574 <HAL_SPI_Transmit+0x260>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800333e:	f7fe fe01 	bl	8001f44 <HAL_GetTick>
 8003342:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	d002      	beq.n	800335a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003354:	2302      	movs	r3, #2
 8003356:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003358:	e103      	b.n	8003562 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <HAL_SPI_Transmit+0x52>
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d102      	bne.n	800336c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	77fb      	strb	r3, [r7, #31]
    goto error;
 800336a:	e0fa      	b.n	8003562 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2203      	movs	r2, #3
 8003370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	88fa      	ldrh	r2, [r7, #6]
 8003384:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	88fa      	ldrh	r2, [r7, #6]
 800338a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033b2:	d107      	bne.n	80033c4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ce:	2b40      	cmp	r3, #64	; 0x40
 80033d0:	d007      	beq.n	80033e2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ea:	d14b      	bne.n	8003484 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <HAL_SPI_Transmit+0xe6>
 80033f4:	8afb      	ldrh	r3, [r7, #22]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d13e      	bne.n	8003478 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	881a      	ldrh	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	1c9a      	adds	r2, r3, #2
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003414:	b29b      	uxth	r3, r3
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800341e:	e02b      	b.n	8003478 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b02      	cmp	r3, #2
 800342c:	d112      	bne.n	8003454 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	881a      	ldrh	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	1c9a      	adds	r2, r3, #2
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003448:	b29b      	uxth	r3, r3
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	86da      	strh	r2, [r3, #54]	; 0x36
 8003452:	e011      	b.n	8003478 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003454:	f7fe fd76 	bl	8001f44 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d803      	bhi.n	800346c <HAL_SPI_Transmit+0x158>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346a:	d102      	bne.n	8003472 <HAL_SPI_Transmit+0x15e>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d102      	bne.n	8003478 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003476:	e074      	b.n	8003562 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1ce      	bne.n	8003420 <HAL_SPI_Transmit+0x10c>
 8003482:	e04c      	b.n	800351e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <HAL_SPI_Transmit+0x17e>
 800348c:	8afb      	ldrh	r3, [r7, #22]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d140      	bne.n	8003514 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	330c      	adds	r3, #12
 800349c:	7812      	ldrb	r2, [r2, #0]
 800349e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80034b8:	e02c      	b.n	8003514 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d113      	bne.n	80034f0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	330c      	adds	r3, #12
 80034d2:	7812      	ldrb	r2, [r2, #0]
 80034d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80034ee:	e011      	b.n	8003514 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034f0:	f7fe fd28 	bl	8001f44 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d803      	bhi.n	8003508 <HAL_SPI_Transmit+0x1f4>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003506:	d102      	bne.n	800350e <HAL_SPI_Transmit+0x1fa>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d102      	bne.n	8003514 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003512:	e026      	b.n	8003562 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1cd      	bne.n	80034ba <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	6839      	ldr	r1, [r7, #0]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 fba4 	bl	8003c70 <SPI_EndRxTxTransaction>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2220      	movs	r2, #32
 8003532:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10a      	bne.n	8003552 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800353c:	2300      	movs	r3, #0
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	77fb      	strb	r3, [r7, #31]
 800355e:	e000      	b.n	8003562 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003560:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003572:	7ffb      	ldrb	r3, [r7, #31]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3720      	adds	r7, #32
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b088      	sub	sp, #32
 8003580:	af02      	add	r7, sp, #8
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	603b      	str	r3, [r7, #0]
 8003588:	4613      	mov	r3, r2
 800358a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003598:	d112      	bne.n	80035c0 <HAL_SPI_Receive+0x44>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10e      	bne.n	80035c0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2204      	movs	r2, #4
 80035a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80035aa:	88fa      	ldrh	r2, [r7, #6]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	4613      	mov	r3, r2
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f8e9 	bl	800378e <HAL_SPI_TransmitReceive>
 80035bc:	4603      	mov	r3, r0
 80035be:	e0e2      	b.n	8003786 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_SPI_Receive+0x52>
 80035ca:	2302      	movs	r3, #2
 80035cc:	e0db      	b.n	8003786 <HAL_SPI_Receive+0x20a>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035d6:	f7fe fcb5 	bl	8001f44 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d002      	beq.n	80035ee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80035e8:	2302      	movs	r3, #2
 80035ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035ec:	e0c2      	b.n	8003774 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <HAL_SPI_Receive+0x7e>
 80035f4:	88fb      	ldrh	r3, [r7, #6]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d102      	bne.n	8003600 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035fe:	e0b9      	b.n	8003774 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2204      	movs	r2, #4
 8003604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	88fa      	ldrh	r2, [r7, #6]
 8003618:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	88fa      	ldrh	r2, [r7, #6]
 800361e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003646:	d107      	bne.n	8003658 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003656:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003662:	2b40      	cmp	r3, #64	; 0x40
 8003664:	d007      	beq.n	8003676 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003674:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d162      	bne.n	8003744 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800367e:	e02e      	b.n	80036de <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d115      	bne.n	80036ba <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f103 020c 	add.w	r2, r3, #12
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369a:	7812      	ldrb	r2, [r2, #0]
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036b8:	e011      	b.n	80036de <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036ba:	f7fe fc43 	bl	8001f44 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d803      	bhi.n	80036d2 <HAL_SPI_Receive+0x156>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d0:	d102      	bne.n	80036d8 <HAL_SPI_Receive+0x15c>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d102      	bne.n	80036de <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036dc:	e04a      	b.n	8003774 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1cb      	bne.n	8003680 <HAL_SPI_Receive+0x104>
 80036e8:	e031      	b.n	800374e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d113      	bne.n	8003720 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003702:	b292      	uxth	r2, r2
 8003704:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370a:	1c9a      	adds	r2, r3, #2
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003714:	b29b      	uxth	r3, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800371e:	e011      	b.n	8003744 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003720:	f7fe fc10 	bl	8001f44 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d803      	bhi.n	8003738 <HAL_SPI_Receive+0x1bc>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003736:	d102      	bne.n	800373e <HAL_SPI_Receive+0x1c2>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d102      	bne.n	8003744 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003742:	e017      	b.n	8003774 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1cd      	bne.n	80036ea <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	6839      	ldr	r1, [r7, #0]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 fa27 	bl	8003ba6 <SPI_EndRxTransaction>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	75fb      	strb	r3, [r7, #23]
 8003770:	e000      	b.n	8003774 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003772:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003784:	7dfb      	ldrb	r3, [r7, #23]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b08c      	sub	sp, #48	; 0x30
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
 800379a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800379c:	2301      	movs	r3, #1
 800379e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_SPI_TransmitReceive+0x26>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e18a      	b.n	8003aca <HAL_SPI_TransmitReceive+0x33c>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037bc:	f7fe fbc2 	bl	8001f44 <HAL_GetTick>
 80037c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80037d2:	887b      	ldrh	r3, [r7, #2]
 80037d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d00f      	beq.n	80037fe <HAL_SPI_TransmitReceive+0x70>
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037e4:	d107      	bne.n	80037f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d103      	bne.n	80037f6 <HAL_SPI_TransmitReceive+0x68>
 80037ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d003      	beq.n	80037fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80037f6:	2302      	movs	r3, #2
 80037f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037fc:	e15b      	b.n	8003ab6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_SPI_TransmitReceive+0x82>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <HAL_SPI_TransmitReceive+0x82>
 800380a:	887b      	ldrh	r3, [r7, #2]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d103      	bne.n	8003818 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003816:	e14e      	b.n	8003ab6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b04      	cmp	r3, #4
 8003822:	d003      	beq.n	800382c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2205      	movs	r2, #5
 8003828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	887a      	ldrh	r2, [r7, #2]
 800383c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	887a      	ldrh	r2, [r7, #2]
 8003842:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	887a      	ldrh	r2, [r7, #2]
 800384e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	887a      	ldrh	r2, [r7, #2]
 8003854:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386c:	2b40      	cmp	r3, #64	; 0x40
 800386e:	d007      	beq.n	8003880 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800387e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003888:	d178      	bne.n	800397c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <HAL_SPI_TransmitReceive+0x10a>
 8003892:	8b7b      	ldrh	r3, [r7, #26]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d166      	bne.n	8003966 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389c:	881a      	ldrh	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	1c9a      	adds	r2, r3, #2
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038bc:	e053      	b.n	8003966 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d11b      	bne.n	8003904 <HAL_SPI_TransmitReceive+0x176>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d016      	beq.n	8003904 <HAL_SPI_TransmitReceive+0x176>
 80038d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d113      	bne.n	8003904 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e0:	881a      	ldrh	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	1c9a      	adds	r2, r3, #2
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b01      	cmp	r3, #1
 8003910:	d119      	bne.n	8003946 <HAL_SPI_TransmitReceive+0x1b8>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d014      	beq.n	8003946 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	b292      	uxth	r2, r2
 8003928:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	1c9a      	adds	r2, r3, #2
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003942:	2301      	movs	r3, #1
 8003944:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003946:	f7fe fafd 	bl	8001f44 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003952:	429a      	cmp	r2, r3
 8003954:	d807      	bhi.n	8003966 <HAL_SPI_TransmitReceive+0x1d8>
 8003956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d003      	beq.n	8003966 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003964:	e0a7      	b.n	8003ab6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800396a:	b29b      	uxth	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1a6      	bne.n	80038be <HAL_SPI_TransmitReceive+0x130>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003974:	b29b      	uxth	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1a1      	bne.n	80038be <HAL_SPI_TransmitReceive+0x130>
 800397a:	e07c      	b.n	8003a76 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <HAL_SPI_TransmitReceive+0x1fc>
 8003984:	8b7b      	ldrh	r3, [r7, #26]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d16b      	bne.n	8003a62 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	330c      	adds	r3, #12
 8003994:	7812      	ldrb	r2, [r2, #0]
 8003996:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039b0:	e057      	b.n	8003a62 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d11c      	bne.n	80039fa <HAL_SPI_TransmitReceive+0x26c>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d017      	beq.n	80039fa <HAL_SPI_TransmitReceive+0x26c>
 80039ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d114      	bne.n	80039fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	330c      	adds	r3, #12
 80039da:	7812      	ldrb	r2, [r2, #0]
 80039dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d119      	bne.n	8003a3c <HAL_SPI_TransmitReceive+0x2ae>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d014      	beq.n	8003a3c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a3c:	f7fe fa82 	bl	8001f44 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d803      	bhi.n	8003a54 <HAL_SPI_TransmitReceive+0x2c6>
 8003a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a52:	d102      	bne.n	8003a5a <HAL_SPI_TransmitReceive+0x2cc>
 8003a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d103      	bne.n	8003a62 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a60:	e029      	b.n	8003ab6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1a2      	bne.n	80039b2 <HAL_SPI_TransmitReceive+0x224>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d19d      	bne.n	80039b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f8f8 	bl	8003c70 <SPI_EndRxTxTransaction>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d006      	beq.n	8003a94 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a92:	e010      	b.n	8003ab6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10b      	bne.n	8003ab4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	e000      	b.n	8003ab6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003ab4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ac6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3730      	adds	r7, #48	; 0x30
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	603b      	str	r3, [r7, #0]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ae2:	e04c      	b.n	8003b7e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aea:	d048      	beq.n	8003b7e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003aec:	f7fe fa2a 	bl	8001f44 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d902      	bls.n	8003b02 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d13d      	bne.n	8003b7e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b1a:	d111      	bne.n	8003b40 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b24:	d004      	beq.n	8003b30 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2e:	d107      	bne.n	8003b40 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b48:	d10f      	bne.n	8003b6a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e00f      	b.n	8003b9e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4013      	ands	r3, r2
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	bf0c      	ite	eq
 8003b8e:	2301      	moveq	r3, #1
 8003b90:	2300      	movne	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	461a      	mov	r2, r3
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d1a3      	bne.n	8003ae4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b086      	sub	sp, #24
 8003baa:	af02      	add	r7, sp, #8
 8003bac:	60f8      	str	r0, [r7, #12]
 8003bae:	60b9      	str	r1, [r7, #8]
 8003bb0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bba:	d111      	bne.n	8003be0 <SPI_EndRxTransaction+0x3a>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc4:	d004      	beq.n	8003bd0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bce:	d107      	bne.n	8003be0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bde:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003be8:	d12a      	bne.n	8003c40 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf2:	d012      	beq.n	8003c1a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2180      	movs	r1, #128	; 0x80
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f7ff ff67 	bl	8003ad2 <SPI_WaitFlagStateUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d02d      	beq.n	8003c66 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0e:	f043 0220 	orr.w	r2, r3, #32
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e026      	b.n	8003c68 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2200      	movs	r2, #0
 8003c22:	2101      	movs	r1, #1
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f7ff ff54 	bl	8003ad2 <SPI_WaitFlagStateUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d01a      	beq.n	8003c66 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c34:	f043 0220 	orr.w	r2, r3, #32
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e013      	b.n	8003c68 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2200      	movs	r2, #0
 8003c48:	2101      	movs	r1, #1
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f7ff ff41 	bl	8003ad2 <SPI_WaitFlagStateUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d007      	beq.n	8003c66 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5a:	f043 0220 	orr.w	r2, r3, #32
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e000      	b.n	8003c68 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c7c:	4b1b      	ldr	r3, [pc, #108]	; (8003cec <SPI_EndRxTxTransaction+0x7c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a1b      	ldr	r2, [pc, #108]	; (8003cf0 <SPI_EndRxTxTransaction+0x80>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	0d5b      	lsrs	r3, r3, #21
 8003c88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c8c:	fb02 f303 	mul.w	r3, r2, r3
 8003c90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c9a:	d112      	bne.n	8003cc2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2180      	movs	r1, #128	; 0x80
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f7ff ff13 	bl	8003ad2 <SPI_WaitFlagStateUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d016      	beq.n	8003ce0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb6:	f043 0220 	orr.w	r2, r3, #32
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e00f      	b.n	8003ce2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00a      	beq.n	8003cde <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd8:	2b80      	cmp	r3, #128	; 0x80
 8003cda:	d0f2      	beq.n	8003cc2 <SPI_EndRxTxTransaction+0x52>
 8003cdc:	e000      	b.n	8003ce0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003cde:	bf00      	nop
  }

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000000 	.word	0x20000000
 8003cf0:	165e9f81 	.word	0x165e9f81

08003cf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e03f      	b.n	8003d86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7fd ff76 	bl	8001c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2224      	movs	r2, #36	; 0x24
 8003d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f9b1 	bl	80040a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695a      	ldr	r2, [r3, #20]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b088      	sub	sp, #32
 8003d92:	af02      	add	r7, sp, #8
 8003d94:	60f8      	str	r0, [r7, #12]
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	603b      	str	r3, [r7, #0]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	f040 8083 	bne.w	8003eb6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_UART_Transmit+0x2e>
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e07b      	b.n	8003eb8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_UART_Transmit+0x40>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e074      	b.n	8003eb8 <HAL_UART_Transmit+0x12a>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2221      	movs	r2, #33	; 0x21
 8003de0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003de4:	f7fe f8ae 	bl	8001f44 <HAL_GetTick>
 8003de8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	88fa      	ldrh	r2, [r7, #6]
 8003dee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	88fa      	ldrh	r2, [r7, #6]
 8003df4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003dfe:	e042      	b.n	8003e86 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e16:	d122      	bne.n	8003e5e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2180      	movs	r1, #128	; 0x80
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 f8f2 	bl	800400c <UART_WaitOnFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e042      	b.n	8003eb8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e44:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d103      	bne.n	8003e56 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	3302      	adds	r3, #2
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	e017      	b.n	8003e86 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	e013      	b.n	8003e86 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2200      	movs	r2, #0
 8003e66:	2180      	movs	r1, #128	; 0x80
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 f8cf 	bl	800400c <UART_WaitOnFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e01f      	b.n	8003eb8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	60ba      	str	r2, [r7, #8]
 8003e7e:	781a      	ldrb	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1b7      	bne.n	8003e00 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2200      	movs	r2, #0
 8003e98:	2140      	movs	r1, #64	; 0x40
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f8b6 	bl	800400c <UART_WaitOnFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e006      	b.n	8003eb8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	e000      	b.n	8003eb8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003eb6:	2302      	movs	r3, #2
  }
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b088      	sub	sp, #32
 8003ec4:	af02      	add	r7, sp, #8
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	603b      	str	r3, [r7, #0]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	f040 8090 	bne.w	8004002 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <HAL_UART_Receive+0x2e>
 8003ee8:	88fb      	ldrh	r3, [r7, #6]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e088      	b.n	8004004 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_UART_Receive+0x40>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e081      	b.n	8004004 <HAL_UART_Receive+0x144>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2222      	movs	r2, #34	; 0x22
 8003f12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003f16:	f7fe f815 	bl	8001f44 <HAL_GetTick>
 8003f1a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	88fa      	ldrh	r2, [r7, #6]
 8003f20:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	88fa      	ldrh	r2, [r7, #6]
 8003f26:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003f30:	e05c      	b.n	8003fec <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f48:	d12b      	bne.n	8003fa2 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2200      	movs	r2, #0
 8003f52:	2120      	movs	r1, #32
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f859 	bl	800400c <UART_WaitOnFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e04f      	b.n	8004004 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10c      	bne.n	8003f8a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	3302      	adds	r3, #2
 8003f86:	60bb      	str	r3, [r7, #8]
 8003f88:	e030      	b.n	8003fec <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	e024      	b.n	8003fec <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	2120      	movs	r1, #32
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f82d 	bl	800400c <UART_WaitOnFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e023      	b.n	8004004 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d108      	bne.n	8003fd6 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6859      	ldr	r1, [r3, #4]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	60ba      	str	r2, [r7, #8]
 8003fd0:	b2ca      	uxtb	r2, r1
 8003fd2:	701a      	strb	r2, [r3, #0]
 8003fd4:	e00a      	b.n	8003fec <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	1c59      	adds	r1, r3, #1
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d19d      	bne.n	8003f32 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	e000      	b.n	8004004 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004002:	2302      	movs	r3, #2
  }
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	4613      	mov	r3, r2
 800401a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800401c:	e02c      	b.n	8004078 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004024:	d028      	beq.n	8004078 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d007      	beq.n	800403c <UART_WaitOnFlagUntilTimeout+0x30>
 800402c:	f7fd ff8a 	bl	8001f44 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	429a      	cmp	r2, r3
 800403a:	d21d      	bcs.n	8004078 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800404a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695a      	ldr	r2, [r3, #20]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0201 	bic.w	r2, r2, #1
 800405a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e00f      	b.n	8004098 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	4013      	ands	r3, r2
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	429a      	cmp	r2, r3
 8004086:	bf0c      	ite	eq
 8004088:	2301      	moveq	r3, #1
 800408a:	2300      	movne	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	461a      	mov	r2, r3
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	429a      	cmp	r2, r3
 8004094:	d0c3      	beq.n	800401e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040a4:	b085      	sub	sp, #20
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80040e2:	f023 030c 	bic.w	r3, r3, #12
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6812      	ldr	r2, [r2, #0]
 80040ea:	68f9      	ldr	r1, [r7, #12]
 80040ec:	430b      	orrs	r3, r1
 80040ee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699a      	ldr	r2, [r3, #24]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800410e:	f040 818b 	bne.w	8004428 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4ac1      	ldr	r2, [pc, #772]	; (800441c <UART_SetConfig+0x37c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d005      	beq.n	8004128 <UART_SetConfig+0x88>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4abf      	ldr	r2, [pc, #764]	; (8004420 <UART_SetConfig+0x380>)
 8004122:	4293      	cmp	r3, r2
 8004124:	f040 80bd 	bne.w	80042a2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004128:	f7ff f87c 	bl	8003224 <HAL_RCC_GetPCLK2Freq>
 800412c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	461d      	mov	r5, r3
 8004132:	f04f 0600 	mov.w	r6, #0
 8004136:	46a8      	mov	r8, r5
 8004138:	46b1      	mov	r9, r6
 800413a:	eb18 0308 	adds.w	r3, r8, r8
 800413e:	eb49 0409 	adc.w	r4, r9, r9
 8004142:	4698      	mov	r8, r3
 8004144:	46a1      	mov	r9, r4
 8004146:	eb18 0805 	adds.w	r8, r8, r5
 800414a:	eb49 0906 	adc.w	r9, r9, r6
 800414e:	f04f 0100 	mov.w	r1, #0
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800415a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800415e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004162:	4688      	mov	r8, r1
 8004164:	4691      	mov	r9, r2
 8004166:	eb18 0005 	adds.w	r0, r8, r5
 800416a:	eb49 0106 	adc.w	r1, r9, r6
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	461d      	mov	r5, r3
 8004174:	f04f 0600 	mov.w	r6, #0
 8004178:	196b      	adds	r3, r5, r5
 800417a:	eb46 0406 	adc.w	r4, r6, r6
 800417e:	461a      	mov	r2, r3
 8004180:	4623      	mov	r3, r4
 8004182:	f7fc fd89 	bl	8000c98 <__aeabi_uldivmod>
 8004186:	4603      	mov	r3, r0
 8004188:	460c      	mov	r4, r1
 800418a:	461a      	mov	r2, r3
 800418c:	4ba5      	ldr	r3, [pc, #660]	; (8004424 <UART_SetConfig+0x384>)
 800418e:	fba3 2302 	umull	r2, r3, r3, r2
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	461d      	mov	r5, r3
 800419c:	f04f 0600 	mov.w	r6, #0
 80041a0:	46a9      	mov	r9, r5
 80041a2:	46b2      	mov	sl, r6
 80041a4:	eb19 0309 	adds.w	r3, r9, r9
 80041a8:	eb4a 040a 	adc.w	r4, sl, sl
 80041ac:	4699      	mov	r9, r3
 80041ae:	46a2      	mov	sl, r4
 80041b0:	eb19 0905 	adds.w	r9, r9, r5
 80041b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80041b8:	f04f 0100 	mov.w	r1, #0
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041cc:	4689      	mov	r9, r1
 80041ce:	4692      	mov	sl, r2
 80041d0:	eb19 0005 	adds.w	r0, r9, r5
 80041d4:	eb4a 0106 	adc.w	r1, sl, r6
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	461d      	mov	r5, r3
 80041de:	f04f 0600 	mov.w	r6, #0
 80041e2:	196b      	adds	r3, r5, r5
 80041e4:	eb46 0406 	adc.w	r4, r6, r6
 80041e8:	461a      	mov	r2, r3
 80041ea:	4623      	mov	r3, r4
 80041ec:	f7fc fd54 	bl	8000c98 <__aeabi_uldivmod>
 80041f0:	4603      	mov	r3, r0
 80041f2:	460c      	mov	r4, r1
 80041f4:	461a      	mov	r2, r3
 80041f6:	4b8b      	ldr	r3, [pc, #556]	; (8004424 <UART_SetConfig+0x384>)
 80041f8:	fba3 1302 	umull	r1, r3, r3, r2
 80041fc:	095b      	lsrs	r3, r3, #5
 80041fe:	2164      	movs	r1, #100	; 0x64
 8004200:	fb01 f303 	mul.w	r3, r1, r3
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	3332      	adds	r3, #50	; 0x32
 800420a:	4a86      	ldr	r2, [pc, #536]	; (8004424 <UART_SetConfig+0x384>)
 800420c:	fba2 2303 	umull	r2, r3, r2, r3
 8004210:	095b      	lsrs	r3, r3, #5
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004218:	4498      	add	r8, r3
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	461d      	mov	r5, r3
 800421e:	f04f 0600 	mov.w	r6, #0
 8004222:	46a9      	mov	r9, r5
 8004224:	46b2      	mov	sl, r6
 8004226:	eb19 0309 	adds.w	r3, r9, r9
 800422a:	eb4a 040a 	adc.w	r4, sl, sl
 800422e:	4699      	mov	r9, r3
 8004230:	46a2      	mov	sl, r4
 8004232:	eb19 0905 	adds.w	r9, r9, r5
 8004236:	eb4a 0a06 	adc.w	sl, sl, r6
 800423a:	f04f 0100 	mov.w	r1, #0
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004246:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800424a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800424e:	4689      	mov	r9, r1
 8004250:	4692      	mov	sl, r2
 8004252:	eb19 0005 	adds.w	r0, r9, r5
 8004256:	eb4a 0106 	adc.w	r1, sl, r6
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	461d      	mov	r5, r3
 8004260:	f04f 0600 	mov.w	r6, #0
 8004264:	196b      	adds	r3, r5, r5
 8004266:	eb46 0406 	adc.w	r4, r6, r6
 800426a:	461a      	mov	r2, r3
 800426c:	4623      	mov	r3, r4
 800426e:	f7fc fd13 	bl	8000c98 <__aeabi_uldivmod>
 8004272:	4603      	mov	r3, r0
 8004274:	460c      	mov	r4, r1
 8004276:	461a      	mov	r2, r3
 8004278:	4b6a      	ldr	r3, [pc, #424]	; (8004424 <UART_SetConfig+0x384>)
 800427a:	fba3 1302 	umull	r1, r3, r3, r2
 800427e:	095b      	lsrs	r3, r3, #5
 8004280:	2164      	movs	r1, #100	; 0x64
 8004282:	fb01 f303 	mul.w	r3, r1, r3
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	3332      	adds	r3, #50	; 0x32
 800428c:	4a65      	ldr	r2, [pc, #404]	; (8004424 <UART_SetConfig+0x384>)
 800428e:	fba2 2303 	umull	r2, r3, r2, r3
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	f003 0207 	and.w	r2, r3, #7
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4442      	add	r2, r8
 800429e:	609a      	str	r2, [r3, #8]
 80042a0:	e26f      	b.n	8004782 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042a2:	f7fe ffab 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 80042a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	461d      	mov	r5, r3
 80042ac:	f04f 0600 	mov.w	r6, #0
 80042b0:	46a8      	mov	r8, r5
 80042b2:	46b1      	mov	r9, r6
 80042b4:	eb18 0308 	adds.w	r3, r8, r8
 80042b8:	eb49 0409 	adc.w	r4, r9, r9
 80042bc:	4698      	mov	r8, r3
 80042be:	46a1      	mov	r9, r4
 80042c0:	eb18 0805 	adds.w	r8, r8, r5
 80042c4:	eb49 0906 	adc.w	r9, r9, r6
 80042c8:	f04f 0100 	mov.w	r1, #0
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042dc:	4688      	mov	r8, r1
 80042de:	4691      	mov	r9, r2
 80042e0:	eb18 0005 	adds.w	r0, r8, r5
 80042e4:	eb49 0106 	adc.w	r1, r9, r6
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	461d      	mov	r5, r3
 80042ee:	f04f 0600 	mov.w	r6, #0
 80042f2:	196b      	adds	r3, r5, r5
 80042f4:	eb46 0406 	adc.w	r4, r6, r6
 80042f8:	461a      	mov	r2, r3
 80042fa:	4623      	mov	r3, r4
 80042fc:	f7fc fccc 	bl	8000c98 <__aeabi_uldivmod>
 8004300:	4603      	mov	r3, r0
 8004302:	460c      	mov	r4, r1
 8004304:	461a      	mov	r2, r3
 8004306:	4b47      	ldr	r3, [pc, #284]	; (8004424 <UART_SetConfig+0x384>)
 8004308:	fba3 2302 	umull	r2, r3, r3, r2
 800430c:	095b      	lsrs	r3, r3, #5
 800430e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	461d      	mov	r5, r3
 8004316:	f04f 0600 	mov.w	r6, #0
 800431a:	46a9      	mov	r9, r5
 800431c:	46b2      	mov	sl, r6
 800431e:	eb19 0309 	adds.w	r3, r9, r9
 8004322:	eb4a 040a 	adc.w	r4, sl, sl
 8004326:	4699      	mov	r9, r3
 8004328:	46a2      	mov	sl, r4
 800432a:	eb19 0905 	adds.w	r9, r9, r5
 800432e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004332:	f04f 0100 	mov.w	r1, #0
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800433e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004342:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004346:	4689      	mov	r9, r1
 8004348:	4692      	mov	sl, r2
 800434a:	eb19 0005 	adds.w	r0, r9, r5
 800434e:	eb4a 0106 	adc.w	r1, sl, r6
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	461d      	mov	r5, r3
 8004358:	f04f 0600 	mov.w	r6, #0
 800435c:	196b      	adds	r3, r5, r5
 800435e:	eb46 0406 	adc.w	r4, r6, r6
 8004362:	461a      	mov	r2, r3
 8004364:	4623      	mov	r3, r4
 8004366:	f7fc fc97 	bl	8000c98 <__aeabi_uldivmod>
 800436a:	4603      	mov	r3, r0
 800436c:	460c      	mov	r4, r1
 800436e:	461a      	mov	r2, r3
 8004370:	4b2c      	ldr	r3, [pc, #176]	; (8004424 <UART_SetConfig+0x384>)
 8004372:	fba3 1302 	umull	r1, r3, r3, r2
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	2164      	movs	r1, #100	; 0x64
 800437a:	fb01 f303 	mul.w	r3, r1, r3
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	3332      	adds	r3, #50	; 0x32
 8004384:	4a27      	ldr	r2, [pc, #156]	; (8004424 <UART_SetConfig+0x384>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004392:	4498      	add	r8, r3
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	461d      	mov	r5, r3
 8004398:	f04f 0600 	mov.w	r6, #0
 800439c:	46a9      	mov	r9, r5
 800439e:	46b2      	mov	sl, r6
 80043a0:	eb19 0309 	adds.w	r3, r9, r9
 80043a4:	eb4a 040a 	adc.w	r4, sl, sl
 80043a8:	4699      	mov	r9, r3
 80043aa:	46a2      	mov	sl, r4
 80043ac:	eb19 0905 	adds.w	r9, r9, r5
 80043b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80043b4:	f04f 0100 	mov.w	r1, #0
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043c8:	4689      	mov	r9, r1
 80043ca:	4692      	mov	sl, r2
 80043cc:	eb19 0005 	adds.w	r0, r9, r5
 80043d0:	eb4a 0106 	adc.w	r1, sl, r6
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	461d      	mov	r5, r3
 80043da:	f04f 0600 	mov.w	r6, #0
 80043de:	196b      	adds	r3, r5, r5
 80043e0:	eb46 0406 	adc.w	r4, r6, r6
 80043e4:	461a      	mov	r2, r3
 80043e6:	4623      	mov	r3, r4
 80043e8:	f7fc fc56 	bl	8000c98 <__aeabi_uldivmod>
 80043ec:	4603      	mov	r3, r0
 80043ee:	460c      	mov	r4, r1
 80043f0:	461a      	mov	r2, r3
 80043f2:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <UART_SetConfig+0x384>)
 80043f4:	fba3 1302 	umull	r1, r3, r3, r2
 80043f8:	095b      	lsrs	r3, r3, #5
 80043fa:	2164      	movs	r1, #100	; 0x64
 80043fc:	fb01 f303 	mul.w	r3, r1, r3
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	3332      	adds	r3, #50	; 0x32
 8004406:	4a07      	ldr	r2, [pc, #28]	; (8004424 <UART_SetConfig+0x384>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	f003 0207 	and.w	r2, r3, #7
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4442      	add	r2, r8
 8004418:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800441a:	e1b2      	b.n	8004782 <UART_SetConfig+0x6e2>
 800441c:	40011000 	.word	0x40011000
 8004420:	40011400 	.word	0x40011400
 8004424:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4ad7      	ldr	r2, [pc, #860]	; (800478c <UART_SetConfig+0x6ec>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d005      	beq.n	800443e <UART_SetConfig+0x39e>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4ad6      	ldr	r2, [pc, #856]	; (8004790 <UART_SetConfig+0x6f0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	f040 80d1 	bne.w	80045e0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800443e:	f7fe fef1 	bl	8003224 <HAL_RCC_GetPCLK2Freq>
 8004442:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	469a      	mov	sl, r3
 8004448:	f04f 0b00 	mov.w	fp, #0
 800444c:	46d0      	mov	r8, sl
 800444e:	46d9      	mov	r9, fp
 8004450:	eb18 0308 	adds.w	r3, r8, r8
 8004454:	eb49 0409 	adc.w	r4, r9, r9
 8004458:	4698      	mov	r8, r3
 800445a:	46a1      	mov	r9, r4
 800445c:	eb18 080a 	adds.w	r8, r8, sl
 8004460:	eb49 090b 	adc.w	r9, r9, fp
 8004464:	f04f 0100 	mov.w	r1, #0
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004470:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004474:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004478:	4688      	mov	r8, r1
 800447a:	4691      	mov	r9, r2
 800447c:	eb1a 0508 	adds.w	r5, sl, r8
 8004480:	eb4b 0609 	adc.w	r6, fp, r9
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	4619      	mov	r1, r3
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	f04f 0300 	mov.w	r3, #0
 8004492:	f04f 0400 	mov.w	r4, #0
 8004496:	0094      	lsls	r4, r2, #2
 8004498:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800449c:	008b      	lsls	r3, r1, #2
 800449e:	461a      	mov	r2, r3
 80044a0:	4623      	mov	r3, r4
 80044a2:	4628      	mov	r0, r5
 80044a4:	4631      	mov	r1, r6
 80044a6:	f7fc fbf7 	bl	8000c98 <__aeabi_uldivmod>
 80044aa:	4603      	mov	r3, r0
 80044ac:	460c      	mov	r4, r1
 80044ae:	461a      	mov	r2, r3
 80044b0:	4bb8      	ldr	r3, [pc, #736]	; (8004794 <UART_SetConfig+0x6f4>)
 80044b2:	fba3 2302 	umull	r2, r3, r3, r2
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	469b      	mov	fp, r3
 80044c0:	f04f 0c00 	mov.w	ip, #0
 80044c4:	46d9      	mov	r9, fp
 80044c6:	46e2      	mov	sl, ip
 80044c8:	eb19 0309 	adds.w	r3, r9, r9
 80044cc:	eb4a 040a 	adc.w	r4, sl, sl
 80044d0:	4699      	mov	r9, r3
 80044d2:	46a2      	mov	sl, r4
 80044d4:	eb19 090b 	adds.w	r9, r9, fp
 80044d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044dc:	f04f 0100 	mov.w	r1, #0
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044f0:	4689      	mov	r9, r1
 80044f2:	4692      	mov	sl, r2
 80044f4:	eb1b 0509 	adds.w	r5, fp, r9
 80044f8:	eb4c 060a 	adc.w	r6, ip, sl
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	4619      	mov	r1, r3
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	f04f 0400 	mov.w	r4, #0
 800450e:	0094      	lsls	r4, r2, #2
 8004510:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004514:	008b      	lsls	r3, r1, #2
 8004516:	461a      	mov	r2, r3
 8004518:	4623      	mov	r3, r4
 800451a:	4628      	mov	r0, r5
 800451c:	4631      	mov	r1, r6
 800451e:	f7fc fbbb 	bl	8000c98 <__aeabi_uldivmod>
 8004522:	4603      	mov	r3, r0
 8004524:	460c      	mov	r4, r1
 8004526:	461a      	mov	r2, r3
 8004528:	4b9a      	ldr	r3, [pc, #616]	; (8004794 <UART_SetConfig+0x6f4>)
 800452a:	fba3 1302 	umull	r1, r3, r3, r2
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	2164      	movs	r1, #100	; 0x64
 8004532:	fb01 f303 	mul.w	r3, r1, r3
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	3332      	adds	r3, #50	; 0x32
 800453c:	4a95      	ldr	r2, [pc, #596]	; (8004794 <UART_SetConfig+0x6f4>)
 800453e:	fba2 2303 	umull	r2, r3, r2, r3
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004548:	4498      	add	r8, r3
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	469b      	mov	fp, r3
 800454e:	f04f 0c00 	mov.w	ip, #0
 8004552:	46d9      	mov	r9, fp
 8004554:	46e2      	mov	sl, ip
 8004556:	eb19 0309 	adds.w	r3, r9, r9
 800455a:	eb4a 040a 	adc.w	r4, sl, sl
 800455e:	4699      	mov	r9, r3
 8004560:	46a2      	mov	sl, r4
 8004562:	eb19 090b 	adds.w	r9, r9, fp
 8004566:	eb4a 0a0c 	adc.w	sl, sl, ip
 800456a:	f04f 0100 	mov.w	r1, #0
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004576:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800457a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800457e:	4689      	mov	r9, r1
 8004580:	4692      	mov	sl, r2
 8004582:	eb1b 0509 	adds.w	r5, fp, r9
 8004586:	eb4c 060a 	adc.w	r6, ip, sl
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	4619      	mov	r1, r3
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	f04f 0400 	mov.w	r4, #0
 800459c:	0094      	lsls	r4, r2, #2
 800459e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045a2:	008b      	lsls	r3, r1, #2
 80045a4:	461a      	mov	r2, r3
 80045a6:	4623      	mov	r3, r4
 80045a8:	4628      	mov	r0, r5
 80045aa:	4631      	mov	r1, r6
 80045ac:	f7fc fb74 	bl	8000c98 <__aeabi_uldivmod>
 80045b0:	4603      	mov	r3, r0
 80045b2:	460c      	mov	r4, r1
 80045b4:	461a      	mov	r2, r3
 80045b6:	4b77      	ldr	r3, [pc, #476]	; (8004794 <UART_SetConfig+0x6f4>)
 80045b8:	fba3 1302 	umull	r1, r3, r3, r2
 80045bc:	095b      	lsrs	r3, r3, #5
 80045be:	2164      	movs	r1, #100	; 0x64
 80045c0:	fb01 f303 	mul.w	r3, r1, r3
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	3332      	adds	r3, #50	; 0x32
 80045ca:	4a72      	ldr	r2, [pc, #456]	; (8004794 <UART_SetConfig+0x6f4>)
 80045cc:	fba2 2303 	umull	r2, r3, r2, r3
 80045d0:	095b      	lsrs	r3, r3, #5
 80045d2:	f003 020f 	and.w	r2, r3, #15
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4442      	add	r2, r8
 80045dc:	609a      	str	r2, [r3, #8]
 80045de:	e0d0      	b.n	8004782 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80045e0:	f7fe fe0c 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 80045e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	469a      	mov	sl, r3
 80045ea:	f04f 0b00 	mov.w	fp, #0
 80045ee:	46d0      	mov	r8, sl
 80045f0:	46d9      	mov	r9, fp
 80045f2:	eb18 0308 	adds.w	r3, r8, r8
 80045f6:	eb49 0409 	adc.w	r4, r9, r9
 80045fa:	4698      	mov	r8, r3
 80045fc:	46a1      	mov	r9, r4
 80045fe:	eb18 080a 	adds.w	r8, r8, sl
 8004602:	eb49 090b 	adc.w	r9, r9, fp
 8004606:	f04f 0100 	mov.w	r1, #0
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004612:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004616:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800461a:	4688      	mov	r8, r1
 800461c:	4691      	mov	r9, r2
 800461e:	eb1a 0508 	adds.w	r5, sl, r8
 8004622:	eb4b 0609 	adc.w	r6, fp, r9
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	4619      	mov	r1, r3
 800462c:	f04f 0200 	mov.w	r2, #0
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	f04f 0400 	mov.w	r4, #0
 8004638:	0094      	lsls	r4, r2, #2
 800463a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800463e:	008b      	lsls	r3, r1, #2
 8004640:	461a      	mov	r2, r3
 8004642:	4623      	mov	r3, r4
 8004644:	4628      	mov	r0, r5
 8004646:	4631      	mov	r1, r6
 8004648:	f7fc fb26 	bl	8000c98 <__aeabi_uldivmod>
 800464c:	4603      	mov	r3, r0
 800464e:	460c      	mov	r4, r1
 8004650:	461a      	mov	r2, r3
 8004652:	4b50      	ldr	r3, [pc, #320]	; (8004794 <UART_SetConfig+0x6f4>)
 8004654:	fba3 2302 	umull	r2, r3, r3, r2
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	469b      	mov	fp, r3
 8004662:	f04f 0c00 	mov.w	ip, #0
 8004666:	46d9      	mov	r9, fp
 8004668:	46e2      	mov	sl, ip
 800466a:	eb19 0309 	adds.w	r3, r9, r9
 800466e:	eb4a 040a 	adc.w	r4, sl, sl
 8004672:	4699      	mov	r9, r3
 8004674:	46a2      	mov	sl, r4
 8004676:	eb19 090b 	adds.w	r9, r9, fp
 800467a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800467e:	f04f 0100 	mov.w	r1, #0
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800468a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800468e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004692:	4689      	mov	r9, r1
 8004694:	4692      	mov	sl, r2
 8004696:	eb1b 0509 	adds.w	r5, fp, r9
 800469a:	eb4c 060a 	adc.w	r6, ip, sl
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	4619      	mov	r1, r3
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	f04f 0400 	mov.w	r4, #0
 80046b0:	0094      	lsls	r4, r2, #2
 80046b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046b6:	008b      	lsls	r3, r1, #2
 80046b8:	461a      	mov	r2, r3
 80046ba:	4623      	mov	r3, r4
 80046bc:	4628      	mov	r0, r5
 80046be:	4631      	mov	r1, r6
 80046c0:	f7fc faea 	bl	8000c98 <__aeabi_uldivmod>
 80046c4:	4603      	mov	r3, r0
 80046c6:	460c      	mov	r4, r1
 80046c8:	461a      	mov	r2, r3
 80046ca:	4b32      	ldr	r3, [pc, #200]	; (8004794 <UART_SetConfig+0x6f4>)
 80046cc:	fba3 1302 	umull	r1, r3, r3, r2
 80046d0:	095b      	lsrs	r3, r3, #5
 80046d2:	2164      	movs	r1, #100	; 0x64
 80046d4:	fb01 f303 	mul.w	r3, r1, r3
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	3332      	adds	r3, #50	; 0x32
 80046de:	4a2d      	ldr	r2, [pc, #180]	; (8004794 <UART_SetConfig+0x6f4>)
 80046e0:	fba2 2303 	umull	r2, r3, r2, r3
 80046e4:	095b      	lsrs	r3, r3, #5
 80046e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046ea:	4498      	add	r8, r3
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	469b      	mov	fp, r3
 80046f0:	f04f 0c00 	mov.w	ip, #0
 80046f4:	46d9      	mov	r9, fp
 80046f6:	46e2      	mov	sl, ip
 80046f8:	eb19 0309 	adds.w	r3, r9, r9
 80046fc:	eb4a 040a 	adc.w	r4, sl, sl
 8004700:	4699      	mov	r9, r3
 8004702:	46a2      	mov	sl, r4
 8004704:	eb19 090b 	adds.w	r9, r9, fp
 8004708:	eb4a 0a0c 	adc.w	sl, sl, ip
 800470c:	f04f 0100 	mov.w	r1, #0
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004718:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800471c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004720:	4689      	mov	r9, r1
 8004722:	4692      	mov	sl, r2
 8004724:	eb1b 0509 	adds.w	r5, fp, r9
 8004728:	eb4c 060a 	adc.w	r6, ip, sl
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	4619      	mov	r1, r3
 8004732:	f04f 0200 	mov.w	r2, #0
 8004736:	f04f 0300 	mov.w	r3, #0
 800473a:	f04f 0400 	mov.w	r4, #0
 800473e:	0094      	lsls	r4, r2, #2
 8004740:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004744:	008b      	lsls	r3, r1, #2
 8004746:	461a      	mov	r2, r3
 8004748:	4623      	mov	r3, r4
 800474a:	4628      	mov	r0, r5
 800474c:	4631      	mov	r1, r6
 800474e:	f7fc faa3 	bl	8000c98 <__aeabi_uldivmod>
 8004752:	4603      	mov	r3, r0
 8004754:	460c      	mov	r4, r1
 8004756:	461a      	mov	r2, r3
 8004758:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <UART_SetConfig+0x6f4>)
 800475a:	fba3 1302 	umull	r1, r3, r3, r2
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	2164      	movs	r1, #100	; 0x64
 8004762:	fb01 f303 	mul.w	r3, r1, r3
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	3332      	adds	r3, #50	; 0x32
 800476c:	4a09      	ldr	r2, [pc, #36]	; (8004794 <UART_SetConfig+0x6f4>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	095b      	lsrs	r3, r3, #5
 8004774:	f003 020f 	and.w	r2, r3, #15
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4442      	add	r2, r8
 800477e:	609a      	str	r2, [r3, #8]
}
 8004780:	e7ff      	b.n	8004782 <UART_SetConfig+0x6e2>
 8004782:	bf00      	nop
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800478c:	40011000 	.word	0x40011000
 8004790:	40011400 	.word	0x40011400
 8004794:	51eb851f 	.word	0x51eb851f

08004798 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80047a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047aa:	2b84      	cmp	r3, #132	; 0x84
 80047ac:	d005      	beq.n	80047ba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80047ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4413      	add	r3, r2
 80047b6:	3303      	adds	r3, #3
 80047b8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80047ba:	68fb      	ldr	r3, [r7, #12]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80047cc:	f000 fb9a 	bl	8004f04 <vTaskStartScheduler>
  
  return osOK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80047d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047d8:	b089      	sub	sp, #36	; 0x24
 80047da:	af04      	add	r7, sp, #16
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d020      	beq.n	800482a <osThreadCreate+0x54>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d01c      	beq.n	800482a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685c      	ldr	r4, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681d      	ldr	r5, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691e      	ldr	r6, [r3, #16]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff ffc8 	bl	8004798 <makeFreeRtosPriority>
 8004808:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004812:	9202      	str	r2, [sp, #8]
 8004814:	9301      	str	r3, [sp, #4]
 8004816:	9100      	str	r1, [sp, #0]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	4632      	mov	r2, r6
 800481c:	4629      	mov	r1, r5
 800481e:	4620      	mov	r0, r4
 8004820:	f000 f8d9 	bl	80049d6 <xTaskCreateStatic>
 8004824:	4603      	mov	r3, r0
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	e01c      	b.n	8004864 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685c      	ldr	r4, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004836:	b29e      	uxth	r6, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff ffaa 	bl	8004798 <makeFreeRtosPriority>
 8004844:	4602      	mov	r2, r0
 8004846:	f107 030c 	add.w	r3, r7, #12
 800484a:	9301      	str	r3, [sp, #4]
 800484c:	9200      	str	r2, [sp, #0]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	4632      	mov	r2, r6
 8004852:	4629      	mov	r1, r5
 8004854:	4620      	mov	r0, r4
 8004856:	f000 f918 	bl	8004a8a <xTaskCreate>
 800485a:	4603      	mov	r3, r0
 800485c:	2b01      	cmp	r3, #1
 800485e:	d001      	beq.n	8004864 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004860:	2300      	movs	r3, #0
 8004862:	e000      	b.n	8004866 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004864:	68fb      	ldr	r3, [r7, #12]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800486e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f103 0208 	add.w	r2, r3, #8
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f04f 32ff 	mov.w	r2, #4294967295
 8004886:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f103 0208 	add.w	r2, r3, #8
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f103 0208 	add.w	r2, r3, #8
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	601a      	str	r2, [r3, #0]
}
 8004904:	bf00      	nop
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004926:	d103      	bne.n	8004930 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	e00c      	b.n	800494a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3308      	adds	r3, #8
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	e002      	b.n	800493e <vListInsert+0x2e>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	429a      	cmp	r2, r3
 8004948:	d2f6      	bcs.n	8004938 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	601a      	str	r2, [r3, #0]
}
 8004976:	bf00      	nop
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004982:	b480      	push	{r7}
 8004984:	b085      	sub	sp, #20
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6892      	ldr	r2, [r2, #8]
 8004998:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6852      	ldr	r2, [r2, #4]
 80049a2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d103      	bne.n	80049b6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	1e5a      	subs	r2, r3, #1
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b08e      	sub	sp, #56	; 0x38
 80049da:	af04      	add	r7, sp, #16
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	60b9      	str	r1, [r7, #8]
 80049e0:	607a      	str	r2, [r7, #4]
 80049e2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80049e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	623b      	str	r3, [r7, #32]
 80049fc:	e7fe      	b.n	80049fc <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80049fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d109      	bne.n	8004a18 <xTaskCreateStatic+0x42>
 8004a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	61fb      	str	r3, [r7, #28]
 8004a16:	e7fe      	b.n	8004a16 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a18:	2354      	movs	r3, #84	; 0x54
 8004a1a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	2b54      	cmp	r3, #84	; 0x54
 8004a20:	d009      	beq.n	8004a36 <xTaskCreateStatic+0x60>
 8004a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	61bb      	str	r3, [r7, #24]
 8004a34:	e7fe      	b.n	8004a34 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d01e      	beq.n	8004a7c <xTaskCreateStatic+0xa6>
 8004a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d01b      	beq.n	8004a7c <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	2202      	movs	r2, #2
 8004a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a56:	2300      	movs	r3, #0
 8004a58:	9303      	str	r3, [sp, #12]
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	9302      	str	r3, [sp, #8]
 8004a5e:	f107 0314 	add.w	r3, r7, #20
 8004a62:	9301      	str	r3, [sp, #4]
 8004a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f850 	bl	8004b14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a76:	f000 f8d3 	bl	8004c20 <prvAddNewTaskToReadyList>
 8004a7a:	e001      	b.n	8004a80 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a80:	697b      	ldr	r3, [r7, #20]
	}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3728      	adds	r7, #40	; 0x28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b08c      	sub	sp, #48	; 0x30
 8004a8e:	af04      	add	r7, sp, #16
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	603b      	str	r3, [r7, #0]
 8004a96:	4613      	mov	r3, r2
 8004a98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a9a:	88fb      	ldrh	r3, [r7, #6]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 ffa0 	bl	80059e4 <pvPortMalloc>
 8004aa4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00e      	beq.n	8004aca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004aac:	2054      	movs	r0, #84	; 0x54
 8004aae:	f000 ff99 	bl	80059e4 <pvPortMalloc>
 8004ab2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30
 8004ac0:	e005      	b.n	8004ace <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ac2:	6978      	ldr	r0, [r7, #20]
 8004ac4:	f001 f850 	bl	8005b68 <vPortFree>
 8004ac8:	e001      	b.n	8004ace <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004aca:	2300      	movs	r3, #0
 8004acc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d017      	beq.n	8004b04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004adc:	88fa      	ldrh	r2, [r7, #6]
 8004ade:	2300      	movs	r3, #0
 8004ae0:	9303      	str	r3, [sp, #12]
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	9302      	str	r3, [sp, #8]
 8004ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae8:	9301      	str	r3, [sp, #4]
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68b9      	ldr	r1, [r7, #8]
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 f80e 	bl	8004b14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004af8:	69f8      	ldr	r0, [r7, #28]
 8004afa:	f000 f891 	bl	8004c20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004afe:	2301      	movs	r3, #1
 8004b00:	61bb      	str	r3, [r7, #24]
 8004b02:	e002      	b.n	8004b0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b04:	f04f 33ff 	mov.w	r3, #4294967295
 8004b08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b0a:	69bb      	ldr	r3, [r7, #24]
	}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3720      	adds	r7, #32
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
 8004b20:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	f023 0307 	bic.w	r3, r3, #7
 8004b3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d009      	beq.n	8004b5a <prvInitialiseNewTask+0x46>
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	e7fe      	b.n	8004b58 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01f      	beq.n	8004ba0 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b60:	2300      	movs	r3, #0
 8004b62:	61fb      	str	r3, [r7, #28]
 8004b64:	e012      	b.n	8004b8c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	7819      	ldrb	r1, [r3, #0]
 8004b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	4413      	add	r3, r2
 8004b74:	3334      	adds	r3, #52	; 0x34
 8004b76:	460a      	mov	r2, r1
 8004b78:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	4413      	add	r3, r2
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d006      	beq.n	8004b94 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	61fb      	str	r3, [r7, #28]
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	2b0f      	cmp	r3, #15
 8004b90:	d9e9      	bls.n	8004b66 <prvInitialiseNewTask+0x52>
 8004b92:	e000      	b.n	8004b96 <prvInitialiseNewTask+0x82>
			{
				break;
 8004b94:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b9e:	e003      	b.n	8004ba8 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004baa:	2b06      	cmp	r3, #6
 8004bac:	d901      	bls.n	8004bb2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004bae:	2306      	movs	r3, #6
 8004bb0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bb6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bbc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff fe70 	bl	80048ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd0:	3318      	adds	r3, #24
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff fe6b 	bl	80048ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bdc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be0:	f1c3 0207 	rsb	r2, r3, #7
 8004be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	68f9      	ldr	r1, [r7, #12]
 8004c00:	69b8      	ldr	r0, [r7, #24]
 8004c02:	f000 fcef 	bl	80055e4 <pxPortInitialiseStack>
 8004c06:	4602      	mov	r2, r0
 8004c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c18:	bf00      	nop
 8004c1a:	3720      	adds	r7, #32
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c28:	f000 fe00 	bl	800582c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c2c:	4b2a      	ldr	r3, [pc, #168]	; (8004cd8 <prvAddNewTaskToReadyList+0xb8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3301      	adds	r3, #1
 8004c32:	4a29      	ldr	r2, [pc, #164]	; (8004cd8 <prvAddNewTaskToReadyList+0xb8>)
 8004c34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c36:	4b29      	ldr	r3, [pc, #164]	; (8004cdc <prvAddNewTaskToReadyList+0xbc>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d109      	bne.n	8004c52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c3e:	4a27      	ldr	r2, [pc, #156]	; (8004cdc <prvAddNewTaskToReadyList+0xbc>)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c44:	4b24      	ldr	r3, [pc, #144]	; (8004cd8 <prvAddNewTaskToReadyList+0xb8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d110      	bne.n	8004c6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c4c:	f000 fb8c 	bl	8005368 <prvInitialiseTaskLists>
 8004c50:	e00d      	b.n	8004c6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c52:	4b23      	ldr	r3, [pc, #140]	; (8004ce0 <prvAddNewTaskToReadyList+0xc0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d109      	bne.n	8004c6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c5a:	4b20      	ldr	r3, [pc, #128]	; (8004cdc <prvAddNewTaskToReadyList+0xbc>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d802      	bhi.n	8004c6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c68:	4a1c      	ldr	r2, [pc, #112]	; (8004cdc <prvAddNewTaskToReadyList+0xbc>)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ce4 <prvAddNewTaskToReadyList+0xc4>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3301      	adds	r3, #1
 8004c74:	4a1b      	ldr	r2, [pc, #108]	; (8004ce4 <prvAddNewTaskToReadyList+0xc4>)
 8004c76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	409a      	lsls	r2, r3
 8004c80:	4b19      	ldr	r3, [pc, #100]	; (8004ce8 <prvAddNewTaskToReadyList+0xc8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	4a18      	ldr	r2, [pc, #96]	; (8004ce8 <prvAddNewTaskToReadyList+0xc8>)
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8e:	4613      	mov	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4a15      	ldr	r2, [pc, #84]	; (8004cec <prvAddNewTaskToReadyList+0xcc>)
 8004c98:	441a      	add	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	f7ff fe11 	bl	80048c8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ca6:	f000 fdef 	bl	8005888 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004caa:	4b0d      	ldr	r3, [pc, #52]	; (8004ce0 <prvAddNewTaskToReadyList+0xc0>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00e      	beq.n	8004cd0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004cb2:	4b0a      	ldr	r3, [pc, #40]	; (8004cdc <prvAddNewTaskToReadyList+0xbc>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d207      	bcs.n	8004cd0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <prvAddNewTaskToReadyList+0xd0>)
 8004cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cd0:	bf00      	nop
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	2000055c 	.word	0x2000055c
 8004cdc:	2000045c 	.word	0x2000045c
 8004ce0:	20000568 	.word	0x20000568
 8004ce4:	20000578 	.word	0x20000578
 8004ce8:	20000564 	.word	0x20000564
 8004cec:	20000460 	.word	0x20000460
 8004cf0:	e000ed04 	.word	0xe000ed04

08004cf4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004cfc:	f000 fd96 	bl	800582c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d102      	bne.n	8004d0c <vTaskDelete+0x18>
 8004d06:	4b38      	ldr	r3, [pc, #224]	; (8004de8 <vTaskDelete+0xf4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	e000      	b.n	8004d0e <vTaskDelete+0x1a>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	3304      	adds	r3, #4
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff fe34 	bl	8004982 <uxListRemove>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d115      	bne.n	8004d4c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d24:	4931      	ldr	r1, [pc, #196]	; (8004dec <vTaskDelete+0xf8>)
 8004d26:	4613      	mov	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	440b      	add	r3, r1
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10a      	bne.n	8004d4c <vTaskDelete+0x58>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	43da      	mvns	r2, r3
 8004d42:	4b2b      	ldr	r3, [pc, #172]	; (8004df0 <vTaskDelete+0xfc>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4013      	ands	r3, r2
 8004d48:	4a29      	ldr	r2, [pc, #164]	; (8004df0 <vTaskDelete+0xfc>)
 8004d4a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d004      	beq.n	8004d5e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	3318      	adds	r3, #24
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff fe12 	bl	8004982 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004d5e:	4b25      	ldr	r3, [pc, #148]	; (8004df4 <vTaskDelete+0x100>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3301      	adds	r3, #1
 8004d64:	4a23      	ldr	r2, [pc, #140]	; (8004df4 <vTaskDelete+0x100>)
 8004d66:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004d68:	4b1f      	ldr	r3, [pc, #124]	; (8004de8 <vTaskDelete+0xf4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d10b      	bne.n	8004d8a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	3304      	adds	r3, #4
 8004d76:	4619      	mov	r1, r3
 8004d78:	481f      	ldr	r0, [pc, #124]	; (8004df8 <vTaskDelete+0x104>)
 8004d7a:	f7ff fda5 	bl	80048c8 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004d7e:	4b1f      	ldr	r3, [pc, #124]	; (8004dfc <vTaskDelete+0x108>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3301      	adds	r3, #1
 8004d84:	4a1d      	ldr	r2, [pc, #116]	; (8004dfc <vTaskDelete+0x108>)
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	e009      	b.n	8004d9e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004d8a:	4b1d      	ldr	r3, [pc, #116]	; (8004e00 <vTaskDelete+0x10c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	4a1b      	ldr	r2, [pc, #108]	; (8004e00 <vTaskDelete+0x10c>)
 8004d92:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 fb53 	bl	8005440 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004d9a:	f000 fb7f 	bl	800549c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8004d9e:	f000 fd73 	bl	8005888 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004da2:	4b18      	ldr	r3, [pc, #96]	; (8004e04 <vTaskDelete+0x110>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d01a      	beq.n	8004de0 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8004daa:	4b0f      	ldr	r3, [pc, #60]	; (8004de8 <vTaskDelete+0xf4>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d115      	bne.n	8004de0 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8004db4:	4b14      	ldr	r3, [pc, #80]	; (8004e08 <vTaskDelete+0x114>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d009      	beq.n	8004dd0 <vTaskDelete+0xdc>
 8004dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	60bb      	str	r3, [r7, #8]
 8004dce:	e7fe      	b.n	8004dce <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8004dd0:	4b0e      	ldr	r3, [pc, #56]	; (8004e0c <vTaskDelete+0x118>)
 8004dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004de0:	bf00      	nop
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	2000045c 	.word	0x2000045c
 8004dec:	20000460 	.word	0x20000460
 8004df0:	20000564 	.word	0x20000564
 8004df4:	20000578 	.word	0x20000578
 8004df8:	20000530 	.word	0x20000530
 8004dfc:	20000544 	.word	0x20000544
 8004e00:	2000055c 	.word	0x2000055c
 8004e04:	20000568 	.word	0x20000568
 8004e08:	20000584 	.word	0x20000584
 8004e0c:	e000ed04 	.word	0xe000ed04

08004e10 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08a      	sub	sp, #40	; 0x28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d109      	bne.n	8004e38 <vTaskDelayUntil+0x28>
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	617b      	str	r3, [r7, #20]
 8004e36:	e7fe      	b.n	8004e36 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d109      	bne.n	8004e52 <vTaskDelayUntil+0x42>
 8004e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	613b      	str	r3, [r7, #16]
 8004e50:	e7fe      	b.n	8004e50 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8004e52:	4b29      	ldr	r3, [pc, #164]	; (8004ef8 <vTaskDelayUntil+0xe8>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d009      	beq.n	8004e6e <vTaskDelayUntil+0x5e>
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	e7fe      	b.n	8004e6c <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8004e6e:	f000 f8a7 	bl	8004fc0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004e72:	4b22      	ldr	r3, [pc, #136]	; (8004efc <vTaskDelayUntil+0xec>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	4413      	add	r3, r2
 8004e80:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6a3a      	ldr	r2, [r7, #32]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d20b      	bcs.n	8004ea4 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d211      	bcs.n	8004eba <vTaskDelayUntil+0xaa>
 8004e96:	69fa      	ldr	r2, [r7, #28]
 8004e98:	6a3b      	ldr	r3, [r7, #32]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d90d      	bls.n	8004eba <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea2:	e00a      	b.n	8004eba <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	69fa      	ldr	r2, [r7, #28]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d303      	bcc.n	8004eb6 <vTaskDelayUntil+0xa6>
 8004eae:	69fa      	ldr	r2, [r7, #28]
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d901      	bls.n	8004eba <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69fa      	ldr	r2, [r7, #28]
 8004ebe:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d006      	beq.n	8004ed4 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2100      	movs	r1, #0
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 fb22 	bl	8005518 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004ed4:	f000 f882 	bl	8004fdc <xTaskResumeAll>
 8004ed8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d107      	bne.n	8004ef0 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8004ee0:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <vTaskDelayUntil+0xf0>)
 8004ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ef0:	bf00      	nop
 8004ef2:	3728      	adds	r7, #40	; 0x28
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	20000584 	.word	0x20000584
 8004efc:	20000560 	.word	0x20000560
 8004f00:	e000ed04 	.word	0xe000ed04

08004f04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08a      	sub	sp, #40	; 0x28
 8004f08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f12:	463a      	mov	r2, r7
 8004f14:	1d39      	adds	r1, r7, #4
 8004f16:	f107 0308 	add.w	r3, r7, #8
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fc f83c 	bl	8000f98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f20:	6839      	ldr	r1, [r7, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	9202      	str	r2, [sp, #8]
 8004f28:	9301      	str	r3, [sp, #4]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	460a      	mov	r2, r1
 8004f32:	491d      	ldr	r1, [pc, #116]	; (8004fa8 <vTaskStartScheduler+0xa4>)
 8004f34:	481d      	ldr	r0, [pc, #116]	; (8004fac <vTaskStartScheduler+0xa8>)
 8004f36:	f7ff fd4e 	bl	80049d6 <xTaskCreateStatic>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	4b1c      	ldr	r3, [pc, #112]	; (8004fb0 <vTaskStartScheduler+0xac>)
 8004f3e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f40:	4b1b      	ldr	r3, [pc, #108]	; (8004fb0 <vTaskStartScheduler+0xac>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	e001      	b.n	8004f52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d115      	bne.n	8004f84 <vTaskStartScheduler+0x80>
 8004f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5c:	f383 8811 	msr	BASEPRI, r3
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f6a:	4b12      	ldr	r3, [pc, #72]	; (8004fb4 <vTaskStartScheduler+0xb0>)
 8004f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f72:	4b11      	ldr	r3, [pc, #68]	; (8004fb8 <vTaskStartScheduler+0xb4>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f78:	4b10      	ldr	r3, [pc, #64]	; (8004fbc <vTaskStartScheduler+0xb8>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f7e:	f000 fbb7 	bl	80056f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f82:	e00d      	b.n	8004fa0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8a:	d109      	bne.n	8004fa0 <vTaskStartScheduler+0x9c>
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	e7fe      	b.n	8004f9e <vTaskStartScheduler+0x9a>
}
 8004fa0:	bf00      	nop
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	0800abf0 	.word	0x0800abf0
 8004fac:	08005339 	.word	0x08005339
 8004fb0:	20000580 	.word	0x20000580
 8004fb4:	2000057c 	.word	0x2000057c
 8004fb8:	20000568 	.word	0x20000568
 8004fbc:	20000560 	.word	0x20000560

08004fc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004fc4:	4b04      	ldr	r3, [pc, #16]	; (8004fd8 <vTaskSuspendAll+0x18>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	4a03      	ldr	r2, [pc, #12]	; (8004fd8 <vTaskSuspendAll+0x18>)
 8004fcc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004fce:	bf00      	nop
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	20000584 	.word	0x20000584

08004fdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004fea:	4b41      	ldr	r3, [pc, #260]	; (80050f0 <xTaskResumeAll+0x114>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d109      	bne.n	8005006 <xTaskResumeAll+0x2a>
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	603b      	str	r3, [r7, #0]
 8005004:	e7fe      	b.n	8005004 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005006:	f000 fc11 	bl	800582c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800500a:	4b39      	ldr	r3, [pc, #228]	; (80050f0 <xTaskResumeAll+0x114>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3b01      	subs	r3, #1
 8005010:	4a37      	ldr	r2, [pc, #220]	; (80050f0 <xTaskResumeAll+0x114>)
 8005012:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005014:	4b36      	ldr	r3, [pc, #216]	; (80050f0 <xTaskResumeAll+0x114>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d161      	bne.n	80050e0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800501c:	4b35      	ldr	r3, [pc, #212]	; (80050f4 <xTaskResumeAll+0x118>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d05d      	beq.n	80050e0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005024:	e02e      	b.n	8005084 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005026:	4b34      	ldr	r3, [pc, #208]	; (80050f8 <xTaskResumeAll+0x11c>)
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3318      	adds	r3, #24
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff fca5 	bl	8004982 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	3304      	adds	r3, #4
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff fca0 	bl	8004982 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005046:	2201      	movs	r2, #1
 8005048:	409a      	lsls	r2, r3
 800504a:	4b2c      	ldr	r3, [pc, #176]	; (80050fc <xTaskResumeAll+0x120>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4313      	orrs	r3, r2
 8005050:	4a2a      	ldr	r2, [pc, #168]	; (80050fc <xTaskResumeAll+0x120>)
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005058:	4613      	mov	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4a27      	ldr	r2, [pc, #156]	; (8005100 <xTaskResumeAll+0x124>)
 8005062:	441a      	add	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	3304      	adds	r3, #4
 8005068:	4619      	mov	r1, r3
 800506a:	4610      	mov	r0, r2
 800506c:	f7ff fc2c 	bl	80048c8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005074:	4b23      	ldr	r3, [pc, #140]	; (8005104 <xTaskResumeAll+0x128>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507a:	429a      	cmp	r2, r3
 800507c:	d302      	bcc.n	8005084 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800507e:	4b22      	ldr	r3, [pc, #136]	; (8005108 <xTaskResumeAll+0x12c>)
 8005080:	2201      	movs	r2, #1
 8005082:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005084:	4b1c      	ldr	r3, [pc, #112]	; (80050f8 <xTaskResumeAll+0x11c>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1cc      	bne.n	8005026 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005092:	f000 fa03 	bl	800549c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005096:	4b1d      	ldr	r3, [pc, #116]	; (800510c <xTaskResumeAll+0x130>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d010      	beq.n	80050c4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050a2:	f000 f837 	bl	8005114 <xTaskIncrementTick>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80050ac:	4b16      	ldr	r3, [pc, #88]	; (8005108 <xTaskResumeAll+0x12c>)
 80050ae:	2201      	movs	r2, #1
 80050b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3b01      	subs	r3, #1
 80050b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f1      	bne.n	80050a2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80050be:	4b13      	ldr	r3, [pc, #76]	; (800510c <xTaskResumeAll+0x130>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050c4:	4b10      	ldr	r3, [pc, #64]	; (8005108 <xTaskResumeAll+0x12c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d009      	beq.n	80050e0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050cc:	2301      	movs	r3, #1
 80050ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050d0:	4b0f      	ldr	r3, [pc, #60]	; (8005110 <xTaskResumeAll+0x134>)
 80050d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050e0:	f000 fbd2 	bl	8005888 <vPortExitCritical>

	return xAlreadyYielded;
 80050e4:	68bb      	ldr	r3, [r7, #8]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000584 	.word	0x20000584
 80050f4:	2000055c 	.word	0x2000055c
 80050f8:	2000051c 	.word	0x2000051c
 80050fc:	20000564 	.word	0x20000564
 8005100:	20000460 	.word	0x20000460
 8005104:	2000045c 	.word	0x2000045c
 8005108:	20000570 	.word	0x20000570
 800510c:	2000056c 	.word	0x2000056c
 8005110:	e000ed04 	.word	0xe000ed04

08005114 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800511e:	4b4e      	ldr	r3, [pc, #312]	; (8005258 <xTaskIncrementTick+0x144>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	f040 8087 	bne.w	8005236 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005128:	4b4c      	ldr	r3, [pc, #304]	; (800525c <xTaskIncrementTick+0x148>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3301      	adds	r3, #1
 800512e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005130:	4a4a      	ldr	r2, [pc, #296]	; (800525c <xTaskIncrementTick+0x148>)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d11f      	bne.n	800517c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800513c:	4b48      	ldr	r3, [pc, #288]	; (8005260 <xTaskIncrementTick+0x14c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d009      	beq.n	800515a <xTaskIncrementTick+0x46>
 8005146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	603b      	str	r3, [r7, #0]
 8005158:	e7fe      	b.n	8005158 <xTaskIncrementTick+0x44>
 800515a:	4b41      	ldr	r3, [pc, #260]	; (8005260 <xTaskIncrementTick+0x14c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	4b40      	ldr	r3, [pc, #256]	; (8005264 <xTaskIncrementTick+0x150>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a3e      	ldr	r2, [pc, #248]	; (8005260 <xTaskIncrementTick+0x14c>)
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	4a3e      	ldr	r2, [pc, #248]	; (8005264 <xTaskIncrementTick+0x150>)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	4b3e      	ldr	r3, [pc, #248]	; (8005268 <xTaskIncrementTick+0x154>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3301      	adds	r3, #1
 8005174:	4a3c      	ldr	r2, [pc, #240]	; (8005268 <xTaskIncrementTick+0x154>)
 8005176:	6013      	str	r3, [r2, #0]
 8005178:	f000 f990 	bl	800549c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800517c:	4b3b      	ldr	r3, [pc, #236]	; (800526c <xTaskIncrementTick+0x158>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	429a      	cmp	r2, r3
 8005184:	d348      	bcc.n	8005218 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005186:	4b36      	ldr	r3, [pc, #216]	; (8005260 <xTaskIncrementTick+0x14c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d104      	bne.n	800519a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005190:	4b36      	ldr	r3, [pc, #216]	; (800526c <xTaskIncrementTick+0x158>)
 8005192:	f04f 32ff 	mov.w	r2, #4294967295
 8005196:	601a      	str	r2, [r3, #0]
					break;
 8005198:	e03e      	b.n	8005218 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800519a:	4b31      	ldr	r3, [pc, #196]	; (8005260 <xTaskIncrementTick+0x14c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d203      	bcs.n	80051ba <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051b2:	4a2e      	ldr	r2, [pc, #184]	; (800526c <xTaskIncrementTick+0x158>)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80051b8:	e02e      	b.n	8005218 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	3304      	adds	r3, #4
 80051be:	4618      	mov	r0, r3
 80051c0:	f7ff fbdf 	bl	8004982 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d004      	beq.n	80051d6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	3318      	adds	r3, #24
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff fbd6 	bl	8004982 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051da:	2201      	movs	r2, #1
 80051dc:	409a      	lsls	r2, r3
 80051de:	4b24      	ldr	r3, [pc, #144]	; (8005270 <xTaskIncrementTick+0x15c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	4a22      	ldr	r2, [pc, #136]	; (8005270 <xTaskIncrementTick+0x15c>)
 80051e6:	6013      	str	r3, [r2, #0]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4a1f      	ldr	r2, [pc, #124]	; (8005274 <xTaskIncrementTick+0x160>)
 80051f6:	441a      	add	r2, r3
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	3304      	adds	r3, #4
 80051fc:	4619      	mov	r1, r3
 80051fe:	4610      	mov	r0, r2
 8005200:	f7ff fb62 	bl	80048c8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005208:	4b1b      	ldr	r3, [pc, #108]	; (8005278 <xTaskIncrementTick+0x164>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	429a      	cmp	r2, r3
 8005210:	d3b9      	bcc.n	8005186 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005212:	2301      	movs	r3, #1
 8005214:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005216:	e7b6      	b.n	8005186 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005218:	4b17      	ldr	r3, [pc, #92]	; (8005278 <xTaskIncrementTick+0x164>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800521e:	4915      	ldr	r1, [pc, #84]	; (8005274 <xTaskIncrementTick+0x160>)
 8005220:	4613      	mov	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	440b      	add	r3, r1
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d907      	bls.n	8005240 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8005230:	2301      	movs	r3, #1
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	e004      	b.n	8005240 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005236:	4b11      	ldr	r3, [pc, #68]	; (800527c <xTaskIncrementTick+0x168>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3301      	adds	r3, #1
 800523c:	4a0f      	ldr	r2, [pc, #60]	; (800527c <xTaskIncrementTick+0x168>)
 800523e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005240:	4b0f      	ldr	r3, [pc, #60]	; (8005280 <xTaskIncrementTick+0x16c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8005248:	2301      	movs	r3, #1
 800524a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800524c:	697b      	ldr	r3, [r7, #20]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20000584 	.word	0x20000584
 800525c:	20000560 	.word	0x20000560
 8005260:	20000514 	.word	0x20000514
 8005264:	20000518 	.word	0x20000518
 8005268:	20000574 	.word	0x20000574
 800526c:	2000057c 	.word	0x2000057c
 8005270:	20000564 	.word	0x20000564
 8005274:	20000460 	.word	0x20000460
 8005278:	2000045c 	.word	0x2000045c
 800527c:	2000056c 	.word	0x2000056c
 8005280:	20000570 	.word	0x20000570

08005284 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005284:	b480      	push	{r7}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800528a:	4b26      	ldr	r3, [pc, #152]	; (8005324 <vTaskSwitchContext+0xa0>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005292:	4b25      	ldr	r3, [pc, #148]	; (8005328 <vTaskSwitchContext+0xa4>)
 8005294:	2201      	movs	r2, #1
 8005296:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005298:	e03e      	b.n	8005318 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800529a:	4b23      	ldr	r3, [pc, #140]	; (8005328 <vTaskSwitchContext+0xa4>)
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052a0:	4b22      	ldr	r3, [pc, #136]	; (800532c <vTaskSwitchContext+0xa8>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	fab3 f383 	clz	r3, r3
 80052ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80052ae:	7afb      	ldrb	r3, [r7, #11]
 80052b0:	f1c3 031f 	rsb	r3, r3, #31
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	491e      	ldr	r1, [pc, #120]	; (8005330 <vTaskSwitchContext+0xac>)
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4613      	mov	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	440b      	add	r3, r1
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d109      	bne.n	80052de <vTaskSwitchContext+0x5a>
	__asm volatile
 80052ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	607b      	str	r3, [r7, #4]
 80052dc:	e7fe      	b.n	80052dc <vTaskSwitchContext+0x58>
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4a11      	ldr	r2, [pc, #68]	; (8005330 <vTaskSwitchContext+0xac>)
 80052ea:	4413      	add	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	605a      	str	r2, [r3, #4]
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	3308      	adds	r3, #8
 8005300:	429a      	cmp	r2, r3
 8005302:	d104      	bne.n	800530e <vTaskSwitchContext+0x8a>
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	605a      	str	r2, [r3, #4]
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	4a07      	ldr	r2, [pc, #28]	; (8005334 <vTaskSwitchContext+0xb0>)
 8005316:	6013      	str	r3, [r2, #0]
}
 8005318:	bf00      	nop
 800531a:	371c      	adds	r7, #28
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	20000584 	.word	0x20000584
 8005328:	20000570 	.word	0x20000570
 800532c:	20000564 	.word	0x20000564
 8005330:	20000460 	.word	0x20000460
 8005334:	2000045c 	.word	0x2000045c

08005338 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005340:	f000 f852 	bl	80053e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005344:	4b06      	ldr	r3, [pc, #24]	; (8005360 <prvIdleTask+0x28>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d9f9      	bls.n	8005340 <prvIdleTask+0x8>
			{
				taskYIELD();
 800534c:	4b05      	ldr	r3, [pc, #20]	; (8005364 <prvIdleTask+0x2c>)
 800534e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800535c:	e7f0      	b.n	8005340 <prvIdleTask+0x8>
 800535e:	bf00      	nop
 8005360:	20000460 	.word	0x20000460
 8005364:	e000ed04 	.word	0xe000ed04

08005368 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800536e:	2300      	movs	r3, #0
 8005370:	607b      	str	r3, [r7, #4]
 8005372:	e00c      	b.n	800538e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	4613      	mov	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4a12      	ldr	r2, [pc, #72]	; (80053c8 <prvInitialiseTaskLists+0x60>)
 8005380:	4413      	add	r3, r2
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff fa73 	bl	800486e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3301      	adds	r3, #1
 800538c:	607b      	str	r3, [r7, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b06      	cmp	r3, #6
 8005392:	d9ef      	bls.n	8005374 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005394:	480d      	ldr	r0, [pc, #52]	; (80053cc <prvInitialiseTaskLists+0x64>)
 8005396:	f7ff fa6a 	bl	800486e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800539a:	480d      	ldr	r0, [pc, #52]	; (80053d0 <prvInitialiseTaskLists+0x68>)
 800539c:	f7ff fa67 	bl	800486e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80053a0:	480c      	ldr	r0, [pc, #48]	; (80053d4 <prvInitialiseTaskLists+0x6c>)
 80053a2:	f7ff fa64 	bl	800486e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80053a6:	480c      	ldr	r0, [pc, #48]	; (80053d8 <prvInitialiseTaskLists+0x70>)
 80053a8:	f7ff fa61 	bl	800486e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80053ac:	480b      	ldr	r0, [pc, #44]	; (80053dc <prvInitialiseTaskLists+0x74>)
 80053ae:	f7ff fa5e 	bl	800486e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80053b2:	4b0b      	ldr	r3, [pc, #44]	; (80053e0 <prvInitialiseTaskLists+0x78>)
 80053b4:	4a05      	ldr	r2, [pc, #20]	; (80053cc <prvInitialiseTaskLists+0x64>)
 80053b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80053b8:	4b0a      	ldr	r3, [pc, #40]	; (80053e4 <prvInitialiseTaskLists+0x7c>)
 80053ba:	4a05      	ldr	r2, [pc, #20]	; (80053d0 <prvInitialiseTaskLists+0x68>)
 80053bc:	601a      	str	r2, [r3, #0]
}
 80053be:	bf00      	nop
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	20000460 	.word	0x20000460
 80053cc:	200004ec 	.word	0x200004ec
 80053d0:	20000500 	.word	0x20000500
 80053d4:	2000051c 	.word	0x2000051c
 80053d8:	20000530 	.word	0x20000530
 80053dc:	20000548 	.word	0x20000548
 80053e0:	20000514 	.word	0x20000514
 80053e4:	20000518 	.word	0x20000518

080053e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053ee:	e019      	b.n	8005424 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80053f0:	f000 fa1c 	bl	800582c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053f4:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <prvCheckTasksWaitingTermination+0x4c>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	3304      	adds	r3, #4
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff fabe 	bl	8004982 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005406:	4b0c      	ldr	r3, [pc, #48]	; (8005438 <prvCheckTasksWaitingTermination+0x50>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3b01      	subs	r3, #1
 800540c:	4a0a      	ldr	r2, [pc, #40]	; (8005438 <prvCheckTasksWaitingTermination+0x50>)
 800540e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005410:	4b0a      	ldr	r3, [pc, #40]	; (800543c <prvCheckTasksWaitingTermination+0x54>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3b01      	subs	r3, #1
 8005416:	4a09      	ldr	r2, [pc, #36]	; (800543c <prvCheckTasksWaitingTermination+0x54>)
 8005418:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800541a:	f000 fa35 	bl	8005888 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f80e 	bl	8005440 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005424:	4b05      	ldr	r3, [pc, #20]	; (800543c <prvCheckTasksWaitingTermination+0x54>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e1      	bne.n	80053f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800542c:	bf00      	nop
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	20000530 	.word	0x20000530
 8005438:	2000055c 	.word	0x2000055c
 800543c:	20000544 	.word	0x20000544

08005440 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800544e:	2b00      	cmp	r3, #0
 8005450:	d108      	bne.n	8005464 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fb86 	bl	8005b68 <vPortFree>
				vPortFree( pxTCB );
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fb83 	bl	8005b68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005462:	e017      	b.n	8005494 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800546a:	2b01      	cmp	r3, #1
 800546c:	d103      	bne.n	8005476 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fb7a 	bl	8005b68 <vPortFree>
	}
 8005474:	e00e      	b.n	8005494 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800547c:	2b02      	cmp	r3, #2
 800547e:	d009      	beq.n	8005494 <prvDeleteTCB+0x54>
 8005480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	e7fe      	b.n	8005492 <prvDeleteTCB+0x52>
	}
 8005494:	bf00      	nop
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054a2:	4b0c      	ldr	r3, [pc, #48]	; (80054d4 <prvResetNextTaskUnblockTime+0x38>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d104      	bne.n	80054b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80054ac:	4b0a      	ldr	r3, [pc, #40]	; (80054d8 <prvResetNextTaskUnblockTime+0x3c>)
 80054ae:	f04f 32ff 	mov.w	r2, #4294967295
 80054b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80054b4:	e008      	b.n	80054c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054b6:	4b07      	ldr	r3, [pc, #28]	; (80054d4 <prvResetNextTaskUnblockTime+0x38>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	4a04      	ldr	r2, [pc, #16]	; (80054d8 <prvResetNextTaskUnblockTime+0x3c>)
 80054c6:	6013      	str	r3, [r2, #0]
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	20000514 	.word	0x20000514
 80054d8:	2000057c 	.word	0x2000057c

080054dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80054e2:	4b0b      	ldr	r3, [pc, #44]	; (8005510 <xTaskGetSchedulerState+0x34>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d102      	bne.n	80054f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80054ea:	2301      	movs	r3, #1
 80054ec:	607b      	str	r3, [r7, #4]
 80054ee:	e008      	b.n	8005502 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054f0:	4b08      	ldr	r3, [pc, #32]	; (8005514 <xTaskGetSchedulerState+0x38>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d102      	bne.n	80054fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80054f8:	2302      	movs	r3, #2
 80054fa:	607b      	str	r3, [r7, #4]
 80054fc:	e001      	b.n	8005502 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80054fe:	2300      	movs	r3, #0
 8005500:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005502:	687b      	ldr	r3, [r7, #4]
	}
 8005504:	4618      	mov	r0, r3
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	20000568 	.word	0x20000568
 8005514:	20000584 	.word	0x20000584

08005518 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005522:	4b29      	ldr	r3, [pc, #164]	; (80055c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005528:	4b28      	ldr	r3, [pc, #160]	; (80055cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3304      	adds	r3, #4
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff fa27 	bl	8004982 <uxListRemove>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10b      	bne.n	8005552 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800553a:	4b24      	ldr	r3, [pc, #144]	; (80055cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	2201      	movs	r2, #1
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	43da      	mvns	r2, r3
 8005548:	4b21      	ldr	r3, [pc, #132]	; (80055d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4013      	ands	r3, r2
 800554e:	4a20      	ldr	r2, [pc, #128]	; (80055d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005550:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005558:	d10a      	bne.n	8005570 <prvAddCurrentTaskToDelayedList+0x58>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d007      	beq.n	8005570 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005560:	4b1a      	ldr	r3, [pc, #104]	; (80055cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3304      	adds	r3, #4
 8005566:	4619      	mov	r1, r3
 8005568:	481a      	ldr	r0, [pc, #104]	; (80055d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800556a:	f7ff f9ad 	bl	80048c8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800556e:	e026      	b.n	80055be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4413      	add	r3, r2
 8005576:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005578:	4b14      	ldr	r3, [pc, #80]	; (80055cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	429a      	cmp	r2, r3
 8005586:	d209      	bcs.n	800559c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005588:	4b13      	ldr	r3, [pc, #76]	; (80055d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	4b0f      	ldr	r3, [pc, #60]	; (80055cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3304      	adds	r3, #4
 8005592:	4619      	mov	r1, r3
 8005594:	4610      	mov	r0, r2
 8005596:	f7ff f9bb 	bl	8004910 <vListInsert>
}
 800559a:	e010      	b.n	80055be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800559c:	4b0f      	ldr	r3, [pc, #60]	; (80055dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	4b0a      	ldr	r3, [pc, #40]	; (80055cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3304      	adds	r3, #4
 80055a6:	4619      	mov	r1, r3
 80055a8:	4610      	mov	r0, r2
 80055aa:	f7ff f9b1 	bl	8004910 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055ae:	4b0c      	ldr	r3, [pc, #48]	; (80055e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d202      	bcs.n	80055be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80055b8:	4a09      	ldr	r2, [pc, #36]	; (80055e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	6013      	str	r3, [r2, #0]
}
 80055be:	bf00      	nop
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20000560 	.word	0x20000560
 80055cc:	2000045c 	.word	0x2000045c
 80055d0:	20000564 	.word	0x20000564
 80055d4:	20000548 	.word	0x20000548
 80055d8:	20000518 	.word	0x20000518
 80055dc:	20000514 	.word	0x20000514
 80055e0:	2000057c 	.word	0x2000057c

080055e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	3b04      	subs	r3, #4
 80055f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3b04      	subs	r3, #4
 8005602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f023 0201 	bic.w	r2, r3, #1
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3b04      	subs	r3, #4
 8005612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005614:	4a0c      	ldr	r2, [pc, #48]	; (8005648 <pxPortInitialiseStack+0x64>)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3b14      	subs	r3, #20
 800561e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	3b04      	subs	r3, #4
 800562a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f06f 0202 	mvn.w	r2, #2
 8005632:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	3b20      	subs	r3, #32
 8005638:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800563a:	68fb      	ldr	r3, [r7, #12]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	0800564d 	.word	0x0800564d

0800564c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005652:	2300      	movs	r3, #0
 8005654:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005656:	4b11      	ldr	r3, [pc, #68]	; (800569c <prvTaskExitError+0x50>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565e:	d009      	beq.n	8005674 <prvTaskExitError+0x28>
 8005660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	e7fe      	b.n	8005672 <prvTaskExitError+0x26>
 8005674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005686:	bf00      	nop
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0fc      	beq.n	8005688 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800568e:	bf00      	nop
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	2000000c 	.word	0x2000000c

080056a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80056a0:	4b07      	ldr	r3, [pc, #28]	; (80056c0 <pxCurrentTCBConst2>)
 80056a2:	6819      	ldr	r1, [r3, #0]
 80056a4:	6808      	ldr	r0, [r1, #0]
 80056a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056aa:	f380 8809 	msr	PSP, r0
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f04f 0000 	mov.w	r0, #0
 80056b6:	f380 8811 	msr	BASEPRI, r0
 80056ba:	4770      	bx	lr
 80056bc:	f3af 8000 	nop.w

080056c0 <pxCurrentTCBConst2>:
 80056c0:	2000045c 	.word	0x2000045c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80056c4:	bf00      	nop
 80056c6:	bf00      	nop

080056c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80056c8:	4808      	ldr	r0, [pc, #32]	; (80056ec <prvPortStartFirstTask+0x24>)
 80056ca:	6800      	ldr	r0, [r0, #0]
 80056cc:	6800      	ldr	r0, [r0, #0]
 80056ce:	f380 8808 	msr	MSP, r0
 80056d2:	f04f 0000 	mov.w	r0, #0
 80056d6:	f380 8814 	msr	CONTROL, r0
 80056da:	b662      	cpsie	i
 80056dc:	b661      	cpsie	f
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	df00      	svc	0
 80056e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80056ea:	bf00      	nop
 80056ec:	e000ed08 	.word	0xe000ed08

080056f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80056f6:	4b44      	ldr	r3, [pc, #272]	; (8005808 <xPortStartScheduler+0x118>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a44      	ldr	r2, [pc, #272]	; (800580c <xPortStartScheduler+0x11c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d109      	bne.n	8005714 <xPortStartScheduler+0x24>
 8005700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	e7fe      	b.n	8005712 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005714:	4b3c      	ldr	r3, [pc, #240]	; (8005808 <xPortStartScheduler+0x118>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a3d      	ldr	r2, [pc, #244]	; (8005810 <xPortStartScheduler+0x120>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d109      	bne.n	8005732 <xPortStartScheduler+0x42>
 800571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	e7fe      	b.n	8005730 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005732:	4b38      	ldr	r3, [pc, #224]	; (8005814 <xPortStartScheduler+0x124>)
 8005734:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	b2db      	uxtb	r3, r3
 800573c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	22ff      	movs	r2, #255	; 0xff
 8005742:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800574c:	78fb      	ldrb	r3, [r7, #3]
 800574e:	b2db      	uxtb	r3, r3
 8005750:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005754:	b2da      	uxtb	r2, r3
 8005756:	4b30      	ldr	r3, [pc, #192]	; (8005818 <xPortStartScheduler+0x128>)
 8005758:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800575a:	4b30      	ldr	r3, [pc, #192]	; (800581c <xPortStartScheduler+0x12c>)
 800575c:	2207      	movs	r2, #7
 800575e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005760:	e009      	b.n	8005776 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005762:	4b2e      	ldr	r3, [pc, #184]	; (800581c <xPortStartScheduler+0x12c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3b01      	subs	r3, #1
 8005768:	4a2c      	ldr	r2, [pc, #176]	; (800581c <xPortStartScheduler+0x12c>)
 800576a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800576c:	78fb      	ldrb	r3, [r7, #3]
 800576e:	b2db      	uxtb	r3, r3
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	b2db      	uxtb	r3, r3
 8005774:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005776:	78fb      	ldrb	r3, [r7, #3]
 8005778:	b2db      	uxtb	r3, r3
 800577a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577e:	2b80      	cmp	r3, #128	; 0x80
 8005780:	d0ef      	beq.n	8005762 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005782:	4b26      	ldr	r3, [pc, #152]	; (800581c <xPortStartScheduler+0x12c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f1c3 0307 	rsb	r3, r3, #7
 800578a:	2b04      	cmp	r3, #4
 800578c:	d009      	beq.n	80057a2 <xPortStartScheduler+0xb2>
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	60bb      	str	r3, [r7, #8]
 80057a0:	e7fe      	b.n	80057a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80057a2:	4b1e      	ldr	r3, [pc, #120]	; (800581c <xPortStartScheduler+0x12c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	021b      	lsls	r3, r3, #8
 80057a8:	4a1c      	ldr	r2, [pc, #112]	; (800581c <xPortStartScheduler+0x12c>)
 80057aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80057ac:	4b1b      	ldr	r3, [pc, #108]	; (800581c <xPortStartScheduler+0x12c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057b4:	4a19      	ldr	r2, [pc, #100]	; (800581c <xPortStartScheduler+0x12c>)
 80057b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80057c0:	4b17      	ldr	r3, [pc, #92]	; (8005820 <xPortStartScheduler+0x130>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a16      	ldr	r2, [pc, #88]	; (8005820 <xPortStartScheduler+0x130>)
 80057c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80057cc:	4b14      	ldr	r3, [pc, #80]	; (8005820 <xPortStartScheduler+0x130>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a13      	ldr	r2, [pc, #76]	; (8005820 <xPortStartScheduler+0x130>)
 80057d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80057d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80057d8:	f000 f8d6 	bl	8005988 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80057dc:	4b11      	ldr	r3, [pc, #68]	; (8005824 <xPortStartScheduler+0x134>)
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80057e2:	f000 f8f5 	bl	80059d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80057e6:	4b10      	ldr	r3, [pc, #64]	; (8005828 <xPortStartScheduler+0x138>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a0f      	ldr	r2, [pc, #60]	; (8005828 <xPortStartScheduler+0x138>)
 80057ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80057f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80057f2:	f7ff ff69 	bl	80056c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80057f6:	f7ff fd45 	bl	8005284 <vTaskSwitchContext>
	prvTaskExitError();
 80057fa:	f7ff ff27 	bl	800564c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	e000ed00 	.word	0xe000ed00
 800580c:	410fc271 	.word	0x410fc271
 8005810:	410fc270 	.word	0x410fc270
 8005814:	e000e400 	.word	0xe000e400
 8005818:	20000588 	.word	0x20000588
 800581c:	2000058c 	.word	0x2000058c
 8005820:	e000ed20 	.word	0xe000ed20
 8005824:	2000000c 	.word	0x2000000c
 8005828:	e000ef34 	.word	0xe000ef34

0800582c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005844:	4b0e      	ldr	r3, [pc, #56]	; (8005880 <vPortEnterCritical+0x54>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3301      	adds	r3, #1
 800584a:	4a0d      	ldr	r2, [pc, #52]	; (8005880 <vPortEnterCritical+0x54>)
 800584c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800584e:	4b0c      	ldr	r3, [pc, #48]	; (8005880 <vPortEnterCritical+0x54>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d10e      	bne.n	8005874 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005856:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <vPortEnterCritical+0x58>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d009      	beq.n	8005874 <vPortEnterCritical+0x48>
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	603b      	str	r3, [r7, #0]
 8005872:	e7fe      	b.n	8005872 <vPortEnterCritical+0x46>
	}
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	2000000c 	.word	0x2000000c
 8005884:	e000ed04 	.word	0xe000ed04

08005888 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800588e:	4b11      	ldr	r3, [pc, #68]	; (80058d4 <vPortExitCritical+0x4c>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d109      	bne.n	80058aa <vPortExitCritical+0x22>
 8005896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	607b      	str	r3, [r7, #4]
 80058a8:	e7fe      	b.n	80058a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80058aa:	4b0a      	ldr	r3, [pc, #40]	; (80058d4 <vPortExitCritical+0x4c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	4a08      	ldr	r2, [pc, #32]	; (80058d4 <vPortExitCritical+0x4c>)
 80058b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80058b4:	4b07      	ldr	r3, [pc, #28]	; (80058d4 <vPortExitCritical+0x4c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d104      	bne.n	80058c6 <vPortExitCritical+0x3e>
 80058bc:	2300      	movs	r3, #0
 80058be:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	2000000c 	.word	0x2000000c
	...

080058e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80058e0:	f3ef 8009 	mrs	r0, PSP
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	4b15      	ldr	r3, [pc, #84]	; (8005940 <pxCurrentTCBConst>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	f01e 0f10 	tst.w	lr, #16
 80058f0:	bf08      	it	eq
 80058f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80058f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058fa:	6010      	str	r0, [r2, #0]
 80058fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005900:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005904:	f380 8811 	msr	BASEPRI, r0
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f7ff fcb8 	bl	8005284 <vTaskSwitchContext>
 8005914:	f04f 0000 	mov.w	r0, #0
 8005918:	f380 8811 	msr	BASEPRI, r0
 800591c:	bc09      	pop	{r0, r3}
 800591e:	6819      	ldr	r1, [r3, #0]
 8005920:	6808      	ldr	r0, [r1, #0]
 8005922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005926:	f01e 0f10 	tst.w	lr, #16
 800592a:	bf08      	it	eq
 800592c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005930:	f380 8809 	msr	PSP, r0
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	f3af 8000 	nop.w

08005940 <pxCurrentTCBConst>:
 8005940:	2000045c 	.word	0x2000045c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005944:	bf00      	nop
 8005946:	bf00      	nop

08005948 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
	__asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005960:	f7ff fbd8 	bl	8005114 <xTaskIncrementTick>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800596a:	4b06      	ldr	r3, [pc, #24]	; (8005984 <xPortSysTickHandler+0x3c>)
 800596c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	2300      	movs	r3, #0
 8005974:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800597c:	bf00      	nop
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	e000ed04 	.word	0xe000ed04

08005988 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800598c:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <vPortSetupTimerInterrupt+0x34>)
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005992:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <vPortSetupTimerInterrupt+0x38>)
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005998:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <vPortSetupTimerInterrupt+0x3c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a0a      	ldr	r2, [pc, #40]	; (80059c8 <vPortSetupTimerInterrupt+0x40>)
 800599e:	fba2 2303 	umull	r2, r3, r2, r3
 80059a2:	099b      	lsrs	r3, r3, #6
 80059a4:	4a09      	ldr	r2, [pc, #36]	; (80059cc <vPortSetupTimerInterrupt+0x44>)
 80059a6:	3b01      	subs	r3, #1
 80059a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059aa:	4b04      	ldr	r3, [pc, #16]	; (80059bc <vPortSetupTimerInterrupt+0x34>)
 80059ac:	2207      	movs	r2, #7
 80059ae:	601a      	str	r2, [r3, #0]
}
 80059b0:	bf00      	nop
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	e000e010 	.word	0xe000e010
 80059c0:	e000e018 	.word	0xe000e018
 80059c4:	20000000 	.word	0x20000000
 80059c8:	10624dd3 	.word	0x10624dd3
 80059cc:	e000e014 	.word	0xe000e014

080059d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80059d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80059e0 <vPortEnableVFP+0x10>
 80059d4:	6801      	ldr	r1, [r0, #0]
 80059d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80059da:	6001      	str	r1, [r0, #0]
 80059dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80059de:	bf00      	nop
 80059e0:	e000ed88 	.word	0xe000ed88

080059e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08a      	sub	sp, #40	; 0x28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80059ec:	2300      	movs	r3, #0
 80059ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80059f0:	f7ff fae6 	bl	8004fc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80059f4:	4b57      	ldr	r3, [pc, #348]	; (8005b54 <pvPortMalloc+0x170>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80059fc:	f000 f90c 	bl	8005c18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a00:	4b55      	ldr	r3, [pc, #340]	; (8005b58 <pvPortMalloc+0x174>)
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4013      	ands	r3, r2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f040 808c 	bne.w	8005b26 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d01c      	beq.n	8005a4e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005a14:	2208      	movs	r2, #8
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4413      	add	r3, r2
 8005a1a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f003 0307 	and.w	r3, r3, #7
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d013      	beq.n	8005a4e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f023 0307 	bic.w	r3, r3, #7
 8005a2c:	3308      	adds	r3, #8
 8005a2e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d009      	beq.n	8005a4e <pvPortMalloc+0x6a>
	__asm volatile
 8005a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	e7fe      	b.n	8005a4c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d068      	beq.n	8005b26 <pvPortMalloc+0x142>
 8005a54:	4b41      	ldr	r3, [pc, #260]	; (8005b5c <pvPortMalloc+0x178>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d863      	bhi.n	8005b26 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a5e:	4b40      	ldr	r3, [pc, #256]	; (8005b60 <pvPortMalloc+0x17c>)
 8005a60:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a62:	4b3f      	ldr	r3, [pc, #252]	; (8005b60 <pvPortMalloc+0x17c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a68:	e004      	b.n	8005a74 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d903      	bls.n	8005a86 <pvPortMalloc+0xa2>
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1f1      	bne.n	8005a6a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a86:	4b33      	ldr	r3, [pc, #204]	; (8005b54 <pvPortMalloc+0x170>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d04a      	beq.n	8005b26 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2208      	movs	r2, #8
 8005a96:	4413      	add	r3, r2
 8005a98:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	1ad2      	subs	r2, r2, r3
 8005aaa:	2308      	movs	r3, #8
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d91e      	bls.n	8005af0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	f003 0307 	and.w	r3, r3, #7
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d009      	beq.n	8005ad8 <pvPortMalloc+0xf4>
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	613b      	str	r3, [r7, #16]
 8005ad6:	e7fe      	b.n	8005ad6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	1ad2      	subs	r2, r2, r3
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005aea:	69b8      	ldr	r0, [r7, #24]
 8005aec:	f000 f8f6 	bl	8005cdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005af0:	4b1a      	ldr	r3, [pc, #104]	; (8005b5c <pvPortMalloc+0x178>)
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	4a18      	ldr	r2, [pc, #96]	; (8005b5c <pvPortMalloc+0x178>)
 8005afc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005afe:	4b17      	ldr	r3, [pc, #92]	; (8005b5c <pvPortMalloc+0x178>)
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	4b18      	ldr	r3, [pc, #96]	; (8005b64 <pvPortMalloc+0x180>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d203      	bcs.n	8005b12 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b0a:	4b14      	ldr	r3, [pc, #80]	; (8005b5c <pvPortMalloc+0x178>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a15      	ldr	r2, [pc, #84]	; (8005b64 <pvPortMalloc+0x180>)
 8005b10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	4b10      	ldr	r3, [pc, #64]	; (8005b58 <pvPortMalloc+0x174>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b26:	f7ff fa59 	bl	8004fdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d009      	beq.n	8005b48 <pvPortMalloc+0x164>
 8005b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	e7fe      	b.n	8005b46 <pvPortMalloc+0x162>
	return pvReturn;
 8005b48:	69fb      	ldr	r3, [r7, #28]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3728      	adds	r7, #40	; 0x28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	20004198 	.word	0x20004198
 8005b58:	200041a4 	.word	0x200041a4
 8005b5c:	2000419c 	.word	0x2000419c
 8005b60:	20004190 	.word	0x20004190
 8005b64:	200041a0 	.word	0x200041a0

08005b68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d046      	beq.n	8005c08 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b7a:	2308      	movs	r3, #8
 8005b7c:	425b      	negs	r3, r3
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4413      	add	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	4b20      	ldr	r3, [pc, #128]	; (8005c10 <vPortFree+0xa8>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4013      	ands	r3, r2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d109      	bne.n	8005baa <vPortFree+0x42>
 8005b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9a:	f383 8811 	msr	BASEPRI, r3
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	e7fe      	b.n	8005ba8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d009      	beq.n	8005bc6 <vPortFree+0x5e>
 8005bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	60bb      	str	r3, [r7, #8]
 8005bc4:	e7fe      	b.n	8005bc4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	4b11      	ldr	r3, [pc, #68]	; (8005c10 <vPortFree+0xa8>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d019      	beq.n	8005c08 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d115      	bne.n	8005c08 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <vPortFree+0xa8>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	43db      	mvns	r3, r3
 8005be6:	401a      	ands	r2, r3
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005bec:	f7ff f9e8 	bl	8004fc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	4b07      	ldr	r3, [pc, #28]	; (8005c14 <vPortFree+0xac>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	4a06      	ldr	r2, [pc, #24]	; (8005c14 <vPortFree+0xac>)
 8005bfc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005bfe:	6938      	ldr	r0, [r7, #16]
 8005c00:	f000 f86c 	bl	8005cdc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005c04:	f7ff f9ea 	bl	8004fdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c08:	bf00      	nop
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	200041a4 	.word	0x200041a4
 8005c14:	2000419c 	.word	0x2000419c

08005c18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c1e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c24:	4b27      	ldr	r3, [pc, #156]	; (8005cc4 <prvHeapInit+0xac>)
 8005c26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00c      	beq.n	8005c4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3307      	adds	r3, #7
 8005c36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0307 	bic.w	r3, r3, #7
 8005c3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	4a1f      	ldr	r2, [pc, #124]	; (8005cc4 <prvHeapInit+0xac>)
 8005c48:	4413      	add	r3, r2
 8005c4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c50:	4a1d      	ldr	r2, [pc, #116]	; (8005cc8 <prvHeapInit+0xb0>)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c56:	4b1c      	ldr	r3, [pc, #112]	; (8005cc8 <prvHeapInit+0xb0>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	4413      	add	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c64:	2208      	movs	r2, #8
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	1a9b      	subs	r3, r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0307 	bic.w	r3, r3, #7
 8005c72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4a15      	ldr	r2, [pc, #84]	; (8005ccc <prvHeapInit+0xb4>)
 8005c78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c7a:	4b14      	ldr	r3, [pc, #80]	; (8005ccc <prvHeapInit+0xb4>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c82:	4b12      	ldr	r3, [pc, #72]	; (8005ccc <prvHeapInit+0xb4>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2200      	movs	r2, #0
 8005c88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	1ad2      	subs	r2, r2, r3
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c98:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <prvHeapInit+0xb4>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	4a0a      	ldr	r2, [pc, #40]	; (8005cd0 <prvHeapInit+0xb8>)
 8005ca6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	4a09      	ldr	r2, [pc, #36]	; (8005cd4 <prvHeapInit+0xbc>)
 8005cae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cb0:	4b09      	ldr	r3, [pc, #36]	; (8005cd8 <prvHeapInit+0xc0>)
 8005cb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005cb6:	601a      	str	r2, [r3, #0]
}
 8005cb8:	bf00      	nop
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	20000590 	.word	0x20000590
 8005cc8:	20004190 	.word	0x20004190
 8005ccc:	20004198 	.word	0x20004198
 8005cd0:	200041a0 	.word	0x200041a0
 8005cd4:	2000419c 	.word	0x2000419c
 8005cd8:	200041a4 	.word	0x200041a4

08005cdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ce4:	4b28      	ldr	r3, [pc, #160]	; (8005d88 <prvInsertBlockIntoFreeList+0xac>)
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	e002      	b.n	8005cf0 <prvInsertBlockIntoFreeList+0x14>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d8f7      	bhi.n	8005cea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	4413      	add	r3, r2
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d108      	bne.n	8005d1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	441a      	add	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	441a      	add	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d118      	bne.n	8005d64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	4b15      	ldr	r3, [pc, #84]	; (8005d8c <prvInsertBlockIntoFreeList+0xb0>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d00d      	beq.n	8005d5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	441a      	add	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	e008      	b.n	8005d6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d5a:	4b0c      	ldr	r3, [pc, #48]	; (8005d8c <prvInsertBlockIntoFreeList+0xb0>)
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	e003      	b.n	8005d6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d002      	beq.n	8005d7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d7a:	bf00      	nop
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	20004190 	.word	0x20004190
 8005d8c:	20004198 	.word	0x20004198

08005d90 <registerSpiLock>:
#if !defined(SUPRESS_SETUP_WARNING) && !defined(SUPRESS_ALL)
	else printf("! Setup Warning: %s not setup on this device.\r\n", name);
#endif
}

spiLock_t* registerSpiLock() {
 8005d90:	b480      	push	{r7}
 8005d92:	af00      	add	r7, sp, #0
	if(_spiLocksRegistered < NUM_SPI_LOCKS) {
 8005d94:	4b10      	ldr	r3, [pc, #64]	; (8005dd8 <registerSpiLock+0x48>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d817      	bhi.n	8005dcc <registerSpiLock+0x3c>
		_spiLocks[_spiLocksRegistered].lock = false;
 8005d9c:	4b0e      	ldr	r3, [pc, #56]	; (8005dd8 <registerSpiLock+0x48>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	4a0e      	ldr	r2, [pc, #56]	; (8005ddc <registerSpiLock+0x4c>)
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	4413      	add	r3, r2
 8005da6:	2200      	movs	r2, #0
 8005da8:	719a      	strb	r2, [r3, #6]
		_spiLocks[_spiLocksRegistered].pin = 0x69;
 8005daa:	4b0b      	ldr	r3, [pc, #44]	; (8005dd8 <registerSpiLock+0x48>)
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	4a0b      	ldr	r2, [pc, #44]	; (8005ddc <registerSpiLock+0x4c>)
 8005db0:	00db      	lsls	r3, r3, #3
 8005db2:	4413      	add	r3, r2
 8005db4:	2269      	movs	r2, #105	; 0x69
 8005db6:	809a      	strh	r2, [r3, #4]
		return &_spiLocks[_spiLocksRegistered++];
 8005db8:	4b07      	ldr	r3, [pc, #28]	; (8005dd8 <registerSpiLock+0x48>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	b2d1      	uxtb	r1, r2
 8005dc0:	4a05      	ldr	r2, [pc, #20]	; (8005dd8 <registerSpiLock+0x48>)
 8005dc2:	7011      	strb	r1, [r2, #0]
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	4a05      	ldr	r2, [pc, #20]	; (8005ddc <registerSpiLock+0x4c>)
 8005dc8:	4413      	add	r3, r2
 8005dca:	e000      	b.n	8005dce <registerSpiLock+0x3e>
	}
	else return NULL;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	200041a8 	.word	0x200041a8
 8005ddc:	200048a4 	.word	0x200048a4

08005de0 <setSpiLock>:

void setSpiLock(GPIO_TypeDef* port, uint16_t pin, spiLock_t* locker) {
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	460b      	mov	r3, r1
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	817b      	strh	r3, [r7, #10]
	if(locker->lock) {
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	799b      	ldrb	r3, [r3, #6]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00d      	beq.n	8005e12 <setSpiLock+0x32>
		if(pin != FAKE_GPIO) HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 8005df6:	897b      	ldrh	r3, [r7, #10]
 8005df8:	f248 0201 	movw	r2, #32769	; 0x8001
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d005      	beq.n	8005e0c <setSpiLock+0x2c>
 8005e00:	897b      	ldrh	r3, [r7, #10]
 8005e02:	2201      	movs	r2, #1
 8005e04:	4619      	mov	r1, r3
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f7fc fda4 	bl	8002954 <HAL_GPIO_WritePin>
		locker->lock = false;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	719a      	strb	r2, [r3, #6]
	}
	locker->port = port;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	601a      	str	r2, [r3, #0]
	locker->pin = pin;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	897a      	ldrh	r2, [r7, #10]
 8005e1c:	809a      	strh	r2, [r3, #4]
	if(pin != FAKE_GPIO) HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 8005e1e:	897b      	ldrh	r3, [r7, #10]
 8005e20:	f248 0201 	movw	r2, #32769	; 0x8001
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d005      	beq.n	8005e34 <setSpiLock+0x54>
 8005e28:	897b      	ldrh	r3, [r7, #10]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f7fc fd90 	bl	8002954 <HAL_GPIO_WritePin>

	//printf("Pin: %X\r\n", locker->pin);
}
 8005e34:	bf00      	nop
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <lockSpi>:

void lockSpi(spiLock_t* locker) {
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
	if(locker->pin != FAKE_GPIO){
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	889b      	ldrh	r3, [r3, #4]
 8005e48:	f248 0201 	movw	r2, #32769	; 0x8001
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d007      	beq.n	8005e60 <lockSpi+0x24>
		HAL_GPIO_WritePin(locker->port, locker->pin, GPIO_PIN_RESET);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6818      	ldr	r0, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	889b      	ldrh	r3, [r3, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	f7fc fd7a 	bl	8002954 <HAL_GPIO_WritePin>
	}
	locker->lock = true;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	719a      	strb	r2, [r3, #6]
}
 8005e66:	bf00      	nop
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <unlockSpi>:
void unlockSpi(spiLock_t* locker) {
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b082      	sub	sp, #8
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
	if(locker->pin != FAKE_GPIO){
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	889b      	ldrh	r3, [r3, #4]
 8005e7a:	f248 0201 	movw	r2, #32769	; 0x8001
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d007      	beq.n	8005e92 <unlockSpi+0x24>
		HAL_GPIO_WritePin(locker->port, locker->pin, GPIO_PIN_SET);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6818      	ldr	r0, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	889b      	ldrh	r3, [r3, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	f7fc fd61 	bl	8002954 <HAL_GPIO_WritePin>
	}
	locker->lock = false;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	719a      	strb	r2, [r3, #6]
}
 8005e98:	bf00      	nop
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <sendSPI>:

HAL_StatusTypeDef sendSPI(uint8_t * cmd, int len, GPIO_TypeDef * port, uint16_t pin, SPI_HandleTypeDef *bus)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
 8005eac:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef state = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	74fb      	strb	r3, [r7, #19]
	if (pin == FAKE_GPIO) return state;
 8005eb2:	887b      	ldrh	r3, [r7, #2]
 8005eb4:	f248 0201 	movw	r2, #32769	; 0x8001
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d101      	bne.n	8005ec0 <sendSPI+0x20>
 8005ebc:	7cfb      	ldrb	r3, [r7, #19]
 8005ebe:	e03a      	b.n	8005f36 <sendSPI+0x96>
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //CS low
 8005ec0:	887b      	ldrh	r3, [r7, #2]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7fc fd44 	bl	8002954 <HAL_GPIO_WritePin>
	state = HAL_SPI_Transmit(bus, cmd, len, HAL_MAX_DELAY);
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed4:	68f9      	ldr	r1, [r7, #12]
 8005ed6:	6a38      	ldr	r0, [r7, #32]
 8005ed8:	f7fd fa1c 	bl	8003314 <HAL_SPI_Transmit>
 8005edc:	4603      	mov	r3, r0
 8005ede:	74fb      	strb	r3, [r7, #19]
	for(int i = 0; i < _spiLocksRegistered; i++)
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	e018      	b.n	8005f18 <sendSPI+0x78>
		if((_spiLocks[i]).port == port && (_spiLocks[i]).pin == pin)
 8005ee6:	4a16      	ldr	r2, [pc, #88]	; (8005f40 <sendSPI+0xa0>)
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d10e      	bne.n	8005f12 <sendSPI+0x72>
 8005ef4:	4a12      	ldr	r2, [pc, #72]	; (8005f40 <sendSPI+0xa0>)
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	4413      	add	r3, r2
 8005efc:	889b      	ldrh	r3, [r3, #4]
 8005efe:	887a      	ldrh	r2, [r7, #2]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d106      	bne.n	8005f12 <sendSPI+0x72>
			if(_spiLocks[i].lock == true) goto bypass_unlock;
 8005f04:	4a0e      	ldr	r2, [pc, #56]	; (8005f40 <sendSPI+0xa0>)
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	4413      	add	r3, r2
 8005f0c:	799b      	ldrb	r3, [r3, #6]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10f      	bne.n	8005f32 <sendSPI+0x92>
	for(int i = 0; i < _spiLocksRegistered; i++)
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	3301      	adds	r3, #1
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <sendSPI+0xa4>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	4293      	cmp	r3, r2
 8005f22:	dbe0      	blt.n	8005ee6 <sendSPI+0x46>
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);	//CS high
 8005f24:	887b      	ldrh	r3, [r7, #2]
 8005f26:	2201      	movs	r2, #1
 8005f28:	4619      	mov	r1, r3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7fc fd12 	bl	8002954 <HAL_GPIO_WritePin>
 8005f30:	e000      	b.n	8005f34 <sendSPI+0x94>
			if(_spiLocks[i].lock == true) goto bypass_unlock;
 8005f32:	bf00      	nop
	bypass_unlock:

	return state;
 8005f34:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	200048a4 	.word	0x200048a4
 8005f44:	200041a8 	.word	0x200041a8

08005f48 <recieveSPI>:

HAL_StatusTypeDef recieveSPI(uint8_t * cmd, int cmdLen, uint8_t * data, int dataLen, GPIO_TypeDef * port, uint16_t pin,  SPI_HandleTypeDef *bus)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	603b      	str	r3, [r7, #0]

	//Note: dataLen should be number of bytes in the register group being read
	HAL_StatusTypeDef state = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	74fb      	strb	r3, [r7, #19]
	if (pin == FAKE_GPIO) return state;
 8005f5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f5c:	f248 0201 	movw	r2, #32769	; 0x8001
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d101      	bne.n	8005f68 <recieveSPI+0x20>
 8005f64:	7cfb      	ldrb	r3, [r7, #19]
 8005f66:	e042      	b.n	8005fee <recieveSPI+0xa6>
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //CS low
 8005f68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	6a38      	ldr	r0, [r7, #32]
 8005f70:	f7fc fcf0 	bl	8002954 <HAL_GPIO_WritePin>
	state = HAL_SPI_Transmit(bus, cmd, cmdLen, HAL_MAX_DELAY);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	f04f 33ff 	mov.w	r3, #4294967295
 8005f7c:	68f9      	ldr	r1, [r7, #12]
 8005f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f80:	f7fd f9c8 	bl	8003314 <HAL_SPI_Transmit>
 8005f84:	4603      	mov	r3, r0
 8005f86:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Receive(bus, data, dataLen, HAL_MAX_DELAY);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f90:	6879      	ldr	r1, [r7, #4]
 8005f92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f94:	f7fd faf2 	bl	800357c <HAL_SPI_Receive>
	for(int i = 0; i < _spiLocksRegistered; i++)
 8005f98:	2300      	movs	r3, #0
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	e018      	b.n	8005fd0 <recieveSPI+0x88>
		if((_spiLocks[i]).port == port && (_spiLocks[i]).pin == pin)
 8005f9e:	4a16      	ldr	r2, [pc, #88]	; (8005ff8 <recieveSPI+0xb0>)
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005fa6:	6a3a      	ldr	r2, [r7, #32]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d10e      	bne.n	8005fca <recieveSPI+0x82>
 8005fac:	4a12      	ldr	r2, [pc, #72]	; (8005ff8 <recieveSPI+0xb0>)
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	4413      	add	r3, r2
 8005fb4:	889b      	ldrh	r3, [r3, #4]
 8005fb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d106      	bne.n	8005fca <recieveSPI+0x82>
			if(_spiLocks[i].lock == true) goto bypass_unlock;
 8005fbc:	4a0e      	ldr	r2, [pc, #56]	; (8005ff8 <recieveSPI+0xb0>)
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	4413      	add	r3, r2
 8005fc4:	799b      	ldrb	r3, [r3, #6]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10f      	bne.n	8005fea <recieveSPI+0xa2>
	for(int i = 0; i < _spiLocksRegistered; i++)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	617b      	str	r3, [r7, #20]
 8005fd0:	4b0a      	ldr	r3, [pc, #40]	; (8005ffc <recieveSPI+0xb4>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	dbe0      	blt.n	8005f9e <recieveSPI+0x56>
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);	//CS high
 8005fdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fde:	2201      	movs	r2, #1
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	6a38      	ldr	r0, [r7, #32]
 8005fe4:	f7fc fcb6 	bl	8002954 <HAL_GPIO_WritePin>
 8005fe8:	e000      	b.n	8005fec <recieveSPI+0xa4>
			if(_spiLocks[i].lock == true) goto bypass_unlock;
 8005fea:	bf00      	nop
	bypass_unlock:

	return state;
 8005fec:	7cfb      	ldrb	r3, [r7, #19]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	200048a4 	.word	0x200048a4
 8005ffc:	200041a8 	.word	0x200041a8

08006000 <handleHalError>:

void handleHalError(Device_ID device)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	4603      	mov	r3, r0
 8006008:	71fb      	strb	r3, [r7, #7]
	//Toggle an LED, send error messages, or something similar
	//I don't know what you guys need, but this is for you to fill out
	// TODO: Implement handleHalError
	extern spiLock_t* nandSpiLock;

	if(device == NAND) unlockSpi(nandSpiLock);
 800600a:	79fb      	ldrb	r3, [r7, #7]
 800600c:	2b04      	cmp	r3, #4
 800600e:	d104      	bne.n	800601a <handleHalError+0x1a>
 8006010:	4b06      	ldr	r3, [pc, #24]	; (800602c <handleHalError+0x2c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff ff2a 	bl	8005e6e <unlockSpi>

	nomPtr[device] = false;
 800601a:	79fb      	ldrb	r3, [r7, #7]
 800601c:	4a04      	ldr	r2, [pc, #16]	; (8006030 <handleHalError+0x30>)
 800601e:	2100      	movs	r1, #0
 8006020:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8006024:	bf00      	nop
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	20004d18 	.word	0x20004d18
 8006030:	20004af4 	.word	0x20004af4

08006034 <nandInit>:
#include <nandInterface.h>
#include <common.h>

spiLock_t* nandSpiLock;

void nandInit(bool* nandNomPtr) {
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
	nomPtr[NAND] = nandNomPtr;
 800603c:	4a0e      	ldr	r2, [pc, #56]	; (8006078 <nandInit+0x44>)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6113      	str	r3, [r2, #16]
	nandSpiLock = registerSpiLock();
 8006042:	f7ff fea5 	bl	8005d90 <registerSpiLock>
 8006046:	4602      	mov	r2, r0
 8006048:	4b0c      	ldr	r3, [pc, #48]	; (800607c <nandInit+0x48>)
 800604a:	601a      	str	r2, [r3, #0]
	setSpiLock(NAND_CS_GPIO_Port, NAND_CS_Pin, nandSpiLock);
 800604c:	4b0b      	ldr	r3, [pc, #44]	; (800607c <nandInit+0x48>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	461a      	mov	r2, r3
 8006052:	2140      	movs	r1, #64	; 0x40
 8006054:	480a      	ldr	r0, [pc, #40]	; (8006080 <nandInit+0x4c>)
 8006056:	f7ff fec3 	bl	8005de0 <setSpiLock>
	*nandNomPtr = true;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	701a      	strb	r2, [r3, #0]

	setFeature(FEATURE_ADDR_A, 0x00);
 8006060:	2100      	movs	r1, #0
 8006062:	20a0      	movs	r0, #160	; 0xa0
 8006064:	f000 f9ae 	bl	80063c4 <setFeature>
	setFeature(FEATURE_ADDR_B, 0x10);
 8006068:	2110      	movs	r1, #16
 800606a:	20b0      	movs	r0, #176	; 0xb0
 800606c:	f000 f9aa 	bl	80063c4 <setFeature>
}
 8006070:	bf00      	nop
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	20004af4 	.word	0x20004af4
 800607c:	20004d18 	.word	0x20004d18
 8006080:	40020400 	.word	0x40020400

08006084 <nandBufferLoad>:
 * @author Mark Batistich
 * @date 01/21/2021
 */


void nandBufferLoad(uint32_t rowAddr){
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af02      	add	r7, sp, #8
 800608a:	6078      	str	r0, [r7, #4]
//#if CS3_PIN != FAKE_PIN
	// Variables
	uint8_t cmd[4];  // Command sent to device
	uint8_t feature; //feature byte
	bool oip = true; //operation in progress
 800608c:	2301      	movs	r3, #1
 800608e:	73fb      	strb	r3, [r7, #15]

	//Load data from cell array into buffer
	cmd[0] = R_CELL_ARRAY;
 8006090:	2313      	movs	r3, #19
 8006092:	723b      	strb	r3, [r7, #8]
	cmd[3] = rowAddr;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	b2db      	uxtb	r3, r3
 8006098:	72fb      	strb	r3, [r7, #11]
	cmd[2] = rowAddr >> 8;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	0a1b      	lsrs	r3, r3, #8
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	72bb      	strb	r3, [r7, #10]
	cmd[1] = rowAddr >> 16;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	0c1b      	lsrs	r3, r3, #16
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	727b      	strb	r3, [r7, #9]
	if (sendSPI(&cmd[0], 4, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 80060aa:	f107 0008 	add.w	r0, r7, #8
 80060ae:	4b10      	ldr	r3, [pc, #64]	; (80060f0 <nandBufferLoad+0x6c>)
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	2340      	movs	r3, #64	; 0x40
 80060b4:	4a0f      	ldr	r2, [pc, #60]	; (80060f4 <nandBufferLoad+0x70>)
 80060b6:	2104      	movs	r1, #4
 80060b8:	f7ff fef2 	bl	8005ea0 <sendSPI>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <nandBufferLoad+0x46>
		handleHalError(BMP);
 80060c2:	2001      	movs	r0, #1
 80060c4:	f7ff ff9c 	bl	8006000 <handleHalError>
 80060c8:	e00f      	b.n	80060ea <nandBufferLoad+0x66>
		return;
	}

	do{
		feature = getFeature(FEATURE_ADDR_C);
 80060ca:	20c0      	movs	r0, #192	; 0xc0
 80060cc:	f000 f952 	bl	8006374 <getFeature>
 80060d0:	4603      	mov	r3, r0
 80060d2:	73bb      	strb	r3, [r7, #14]
		oip = getBit(feature, 0);
 80060d4:	7bbb      	ldrb	r3, [r7, #14]
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b00      	cmp	r3, #0
 80060dc:	bf14      	ite	ne
 80060de:	2301      	movne	r3, #1
 80060e0:	2300      	moveq	r3, #0
 80060e2:	73fb      	strb	r3, [r7, #15]
	}while(oip);
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1ef      	bne.n	80060ca <nandBufferLoad+0x46>
//#endif
}
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	2000484c 	.word	0x2000484c
 80060f4:	40020400 	.word	0x40020400

080060f8 <nandBufferRead>:
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */

void nandBufferRead(uint16_t colAddr, uint8_t data[], uint8_t size){
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af04      	add	r7, sp, #16
 80060fe:	4603      	mov	r3, r0
 8006100:	6039      	str	r1, [r7, #0]
 8006102:	80fb      	strh	r3, [r7, #6]
 8006104:	4613      	mov	r3, r2
 8006106:	717b      	strb	r3, [r7, #5]
//#if CS3_PIN != FAKE_PIN
	// Variables
	uint8_t cmd[4];       // Command sent to device

	//Read data from the buffer into the data array
	cmd[0] = R_BUFFER;
 8006108:	2303      	movs	r3, #3
 800610a:	733b      	strb	r3, [r7, #12]
	cmd[2] = colAddr;
 800610c:	88fb      	ldrh	r3, [r7, #6]
 800610e:	b2db      	uxtb	r3, r3
 8006110:	73bb      	strb	r3, [r7, #14]
	cmd[1] = colAddr >> 8;
 8006112:	88fb      	ldrh	r3, [r7, #6]
 8006114:	0a1b      	lsrs	r3, r3, #8
 8006116:	b29b      	uxth	r3, r3
 8006118:	b2db      	uxtb	r3, r3
 800611a:	737b      	strb	r3, [r7, #13]
	cmd[3] = 0x00; //dummy byte
 800611c:	2300      	movs	r3, #0
 800611e:	73fb      	strb	r3, [r7, #15]
	if (recieveSPI(&cmd[0], 4, data, size, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS))
 8006120:	797a      	ldrb	r2, [r7, #5]
 8006122:	f107 000c 	add.w	r0, r7, #12
 8006126:	4b0a      	ldr	r3, [pc, #40]	; (8006150 <nandBufferRead+0x58>)
 8006128:	9302      	str	r3, [sp, #8]
 800612a:	2340      	movs	r3, #64	; 0x40
 800612c:	9301      	str	r3, [sp, #4]
 800612e:	4b09      	ldr	r3, [pc, #36]	; (8006154 <nandBufferRead+0x5c>)
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	4613      	mov	r3, r2
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	2104      	movs	r1, #4
 8006138:	f7ff ff06 	bl	8005f48 <recieveSPI>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d002      	beq.n	8006148 <nandBufferRead+0x50>
	{
		handleHalError(BMP);
 8006142:	2001      	movs	r0, #1
 8006144:	f7ff ff5c 	bl	8006000 <handleHalError>
		return;
	}
//#endif
}
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	2000484c 	.word	0x2000484c
 8006154:	40020400 	.word	0x40020400

08006158 <nandBufferWrite>:
 * @param colAddr: The 13 bit column address
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
void nandBufferWrite(uint16_t colAddr, uint8_t data[], uint8_t size){
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af02      	add	r7, sp, #8
 800615e:	4603      	mov	r3, r0
 8006160:	6039      	str	r1, [r7, #0]
 8006162:	80fb      	strh	r3, [r7, #6]
 8006164:	4613      	mov	r3, r2
 8006166:	717b      	strb	r3, [r7, #5]
	// Variables
	uint8_t cmd[3];       // Command sent to device

	cmd[0] = W_LOAD_RAND;
 8006168:	2384      	movs	r3, #132	; 0x84
 800616a:	733b      	strb	r3, [r7, #12]
	cmd[2] = colAddr;
 800616c:	88fb      	ldrh	r3, [r7, #6]
 800616e:	b2db      	uxtb	r3, r3
 8006170:	73bb      	strb	r3, [r7, #14]
	cmd[1] = colAddr >> 8;
 8006172:	88fb      	ldrh	r3, [r7, #6]
 8006174:	0a1b      	lsrs	r3, r3, #8
 8006176:	b29b      	uxth	r3, r3
 8006178:	b2db      	uxtb	r3, r3
 800617a:	737b      	strb	r3, [r7, #13]

	lockSpi(nandSpiLock);
 800617c:	4b15      	ldr	r3, [pc, #84]	; (80061d4 <nandBufferWrite+0x7c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4618      	mov	r0, r3
 8006182:	f7ff fe5b 	bl	8005e3c <lockSpi>

	if (sendSPI(&cmd[0], 3, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 8006186:	f107 000c 	add.w	r0, r7, #12
 800618a:	4b13      	ldr	r3, [pc, #76]	; (80061d8 <nandBufferWrite+0x80>)
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	2340      	movs	r3, #64	; 0x40
 8006190:	4a12      	ldr	r2, [pc, #72]	; (80061dc <nandBufferWrite+0x84>)
 8006192:	2103      	movs	r1, #3
 8006194:	f7ff fe84 	bl	8005ea0 <sendSPI>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <nandBufferWrite+0x4e>
		handleHalError(NAND);
 800619e:	2004      	movs	r0, #4
 80061a0:	f7ff ff2e 	bl	8006000 <handleHalError>
		return;
 80061a4:	e013      	b.n	80061ce <nandBufferWrite+0x76>
	}

	if (sendSPI(&data[0], size, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 80061a6:	7979      	ldrb	r1, [r7, #5]
 80061a8:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <nandBufferWrite+0x80>)
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	2340      	movs	r3, #64	; 0x40
 80061ae:	4a0b      	ldr	r2, [pc, #44]	; (80061dc <nandBufferWrite+0x84>)
 80061b0:	6838      	ldr	r0, [r7, #0]
 80061b2:	f7ff fe75 	bl	8005ea0 <sendSPI>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <nandBufferWrite+0x6c>
		handleHalError(NAND);
 80061bc:	2004      	movs	r0, #4
 80061be:	f7ff ff1f 	bl	8006000 <handleHalError>
		return;
 80061c2:	e004      	b.n	80061ce <nandBufferWrite+0x76>
	}
	unlockSpi(nandSpiLock);
 80061c4:	4b03      	ldr	r3, [pc, #12]	; (80061d4 <nandBufferWrite+0x7c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7ff fe50 	bl	8005e6e <unlockSpi>
}
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	20004d18 	.word	0x20004d18
 80061d8:	2000484c 	.word	0x2000484c
 80061dc:	40020400 	.word	0x40020400

080061e0 <nandBufferExecute>:
 * @param rowAddr: The 17 bit row address
 *
 * @author Mark Batistich
 * @date 01/24 /2021
 */
void nandBufferExecute(uint32_t rowAddr){
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	6078      	str	r0, [r7, #4]
	// Variables
	uint8_t cmd[4];  // Command sent to device
	uint8_t feature = 0x00; //feature byte
 80061e8:	2300      	movs	r3, #0
 80061ea:	75bb      	strb	r3, [r7, #22]
	uint8_t oip = 1; //operation in progress
 80061ec:	2301      	movs	r3, #1
 80061ee:	757b      	strb	r3, [r7, #21]
	uint8_t prg_f = 0; //program fail
 80061f0:	2300      	movs	r3, #0
 80061f2:	753b      	strb	r3, [r7, #20]
	uint8_t eccs1 = 0;
 80061f4:	2300      	movs	r3, #0
 80061f6:	74fb      	strb	r3, [r7, #19]
	uint8_t eccs0 = 0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	74bb      	strb	r3, [r7, #18]

	//Load data from cell array into buffer
	cmd[0] = W_EXECUTE;
 80061fc:	2310      	movs	r3, #16
 80061fe:	733b      	strb	r3, [r7, #12]
	cmd[3] = rowAddr;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	b2db      	uxtb	r3, r3
 8006204:	73fb      	strb	r3, [r7, #15]
	cmd[2] = rowAddr >> 8;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	0a1b      	lsrs	r3, r3, #8
 800620a:	b2db      	uxtb	r3, r3
 800620c:	73bb      	strb	r3, [r7, #14]
	cmd[1] = rowAddr >> 16;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	0c1b      	lsrs	r3, r3, #16
 8006212:	b2db      	uxtb	r3, r3
 8006214:	737b      	strb	r3, [r7, #13]
	if (sendSPI(&cmd[0], 4, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 8006216:	f107 000c 	add.w	r0, r7, #12
 800621a:	4b1e      	ldr	r3, [pc, #120]	; (8006294 <nandBufferExecute+0xb4>)
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	2340      	movs	r3, #64	; 0x40
 8006220:	4a1d      	ldr	r2, [pc, #116]	; (8006298 <nandBufferExecute+0xb8>)
 8006222:	2104      	movs	r1, #4
 8006224:	f7ff fe3c 	bl	8005ea0 <sendSPI>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <nandBufferExecute+0x56>
		handleHalError(NAND);
 800622e:	2004      	movs	r0, #4
 8006230:	f7ff fee6 	bl	8006000 <handleHalError>
 8006234:	e02b      	b.n	800628e <nandBufferExecute+0xae>
		return;
	}
	uint8_t a = 0;
 8006236:	2300      	movs	r3, #0
 8006238:	75fb      	strb	r3, [r7, #23]
	do{
		feature = getFeature(FEATURE_ADDR_C);
 800623a:	20c0      	movs	r0, #192	; 0xc0
 800623c:	f000 f89a 	bl	8006374 <getFeature>
 8006240:	4603      	mov	r3, r0
 8006242:	75bb      	strb	r3, [r7, #22]
		oip = getBit(feature, 0);
 8006244:	7dbb      	ldrb	r3, [r7, #22]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	757b      	strb	r3, [r7, #21]
		prg_f = getBit(feature, 3);
 800624c:	7dbb      	ldrb	r3, [r7, #22]
 800624e:	08db      	lsrs	r3, r3, #3
 8006250:	b2db      	uxtb	r3, r3
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	753b      	strb	r3, [r7, #20]
		eccs1 = getBit(feature, 5);
 8006258:	7dbb      	ldrb	r3, [r7, #22]
 800625a:	095b      	lsrs	r3, r3, #5
 800625c:	b2db      	uxtb	r3, r3
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	74fb      	strb	r3, [r7, #19]
		eccs0 = getBit(feature, 4);
 8006264:	7dbb      	ldrb	r3, [r7, #22]
 8006266:	091b      	lsrs	r3, r3, #4
 8006268:	b2db      	uxtb	r3, r3
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	74bb      	strb	r3, [r7, #18]

		printf("prg_f: %d, eccs1: %d, eccs0: %d, oip: %d \n\r", prg_f, eccs1, eccs0, oip);
 8006270:	7d39      	ldrb	r1, [r7, #20]
 8006272:	7cfa      	ldrb	r2, [r7, #19]
 8006274:	7cb8      	ldrb	r0, [r7, #18]
 8006276:	7d7b      	ldrb	r3, [r7, #21]
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	4603      	mov	r3, r0
 800627c:	4807      	ldr	r0, [pc, #28]	; (800629c <nandBufferExecute+0xbc>)
 800627e:	f001 f83d 	bl	80072fc <iprintf>
		a++;
 8006282:	7dfb      	ldrb	r3, [r7, #23]
 8006284:	3301      	adds	r3, #1
 8006286:	75fb      	strb	r3, [r7, #23]
	}while(a<2);
 8006288:	7dfb      	ldrb	r3, [r7, #23]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d9d5      	bls.n	800623a <nandBufferExecute+0x5a>
}
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	2000484c 	.word	0x2000484c
 8006298:	40020400 	.word	0x40020400
 800629c:	0800abf8 	.word	0x0800abf8

080062a0 <nandRead>:
 * @param colAddr: The 13 bit column address
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
void nandRead(uint32_t rowAddr, uint16_t colAddr, uint8_t data[], uint8_t size){
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	607a      	str	r2, [r7, #4]
 80062aa:	461a      	mov	r2, r3
 80062ac:	460b      	mov	r3, r1
 80062ae:	817b      	strh	r3, [r7, #10]
 80062b0:	4613      	mov	r3, r2
 80062b2:	727b      	strb	r3, [r7, #9]
	nandBufferLoad(rowAddr);
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f7ff fee5 	bl	8006084 <nandBufferLoad>
	nandBufferRead(colAddr, data, size);
 80062ba:	7a7a      	ldrb	r2, [r7, #9]
 80062bc:	897b      	ldrh	r3, [r7, #10]
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7ff ff19 	bl	80060f8 <nandBufferRead>
}
 80062c6:	bf00      	nop
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <nandWrite>:
 * @param colAddr: The 13 bit column address
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
void nandWrite(uint32_t rowAddr, uint16_t colAddr, uint8_t data[], uint8_t size){
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	607a      	str	r2, [r7, #4]
 80062d8:	461a      	mov	r2, r3
 80062da:	460b      	mov	r3, r1
 80062dc:	817b      	strh	r3, [r7, #10]
 80062de:	4613      	mov	r3, r2
 80062e0:	727b      	strb	r3, [r7, #9]


	nandBufferLoad(rowAddr);
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f7ff fece 	bl	8006084 <nandBufferLoad>
	writeEnable();
 80062e8:	f000 f810 	bl	800630c <writeEnable>
	nandBufferWrite(colAddr, data, size);
 80062ec:	7a7a      	ldrb	r2, [r7, #9]
 80062ee:	897b      	ldrh	r3, [r7, #10]
 80062f0:	6879      	ldr	r1, [r7, #4]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff ff30 	bl	8006158 <nandBufferWrite>
	//eraseBlock(rowAddr);
	nandBufferExecute(rowAddr);
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7ff ff71 	bl	80061e0 <nandBufferExecute>
	writeDisable();
 80062fe:	f000 f81f 	bl	8006340 <writeDisable>
	return;
 8006302:	bf00      	nop
}
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <writeEnable>:
 * @brief Enables writing
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
void writeEnable(){
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af02      	add	r7, sp, #8
	// Variables
	uint8_t cmd;  // Command sent to device

	// Send Command
	cmd = W_ENABLE;
 8006312:	2306      	movs	r3, #6
 8006314:	71fb      	strb	r3, [r7, #7]
	if (sendSPI(&cmd, 1, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 8006316:	1df8      	adds	r0, r7, #7
 8006318:	4b07      	ldr	r3, [pc, #28]	; (8006338 <writeEnable+0x2c>)
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	2340      	movs	r3, #64	; 0x40
 800631e:	4a07      	ldr	r2, [pc, #28]	; (800633c <writeEnable+0x30>)
 8006320:	2101      	movs	r1, #1
 8006322:	f7ff fdbd 	bl	8005ea0 <sendSPI>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <writeEnable+0x26>
		handleHalError(NAND);
 800632c:	2004      	movs	r0, #4
 800632e:	f7ff fe67 	bl	8006000 <handleHalError>
		return;
	}
}
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	2000484c 	.word	0x2000484c
 800633c:	40020400 	.word	0x40020400

08006340 <writeDisable>:
 * @brief Disables writing
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
void writeDisable(){
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af02      	add	r7, sp, #8
	// Variables
	uint8_t cmd;  // Command sent to device

	// Send Command
	cmd = W_DISABLE;
 8006346:	2304      	movs	r3, #4
 8006348:	71fb      	strb	r3, [r7, #7]
	if (sendSPI(&cmd, 1, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 800634a:	1df8      	adds	r0, r7, #7
 800634c:	4b07      	ldr	r3, [pc, #28]	; (800636c <writeDisable+0x2c>)
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	2340      	movs	r3, #64	; 0x40
 8006352:	4a07      	ldr	r2, [pc, #28]	; (8006370 <writeDisable+0x30>)
 8006354:	2101      	movs	r1, #1
 8006356:	f7ff fda3 	bl	8005ea0 <sendSPI>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <writeDisable+0x26>
		handleHalError(NAND);
 8006360:	2004      	movs	r0, #4
 8006362:	f7ff fe4d 	bl	8006000 <handleHalError>
		return;
	}
}
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	2000484c 	.word	0x2000484c
 8006370:	40020400 	.word	0x40020400

08006374 <getFeature>:
 * @param featureAddr: address of the feature to get
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
uint8_t getFeature(uint8_t featureAddr){
 8006374:	b580      	push	{r7, lr}
 8006376:	b088      	sub	sp, #32
 8006378:	af04      	add	r7, sp, #16
 800637a:	4603      	mov	r3, r0
 800637c:	71fb      	strb	r3, [r7, #7]
	// Variables
	uint8_t cmd[2];  // Command sent to device
	uint8_t feature = 0x00; //feature byte
 800637e:	2300      	movs	r3, #0
 8006380:	72fb      	strb	r3, [r7, #11]

	// Send Command
	cmd[0] = GET_FEATURE;
 8006382:	230f      	movs	r3, #15
 8006384:	733b      	strb	r3, [r7, #12]
	cmd[1] = featureAddr;
 8006386:	79fb      	ldrb	r3, [r7, #7]
 8006388:	737b      	strb	r3, [r7, #13]
	if (recieveSPI(&cmd[0], 2, &feature, 1, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 800638a:	f107 020b 	add.w	r2, r7, #11
 800638e:	f107 000c 	add.w	r0, r7, #12
 8006392:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <getFeature+0x48>)
 8006394:	9302      	str	r3, [sp, #8]
 8006396:	2340      	movs	r3, #64	; 0x40
 8006398:	9301      	str	r3, [sp, #4]
 800639a:	4b09      	ldr	r3, [pc, #36]	; (80063c0 <getFeature+0x4c>)
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	2301      	movs	r3, #1
 80063a0:	2102      	movs	r1, #2
 80063a2:	f7ff fdd1 	bl	8005f48 <recieveSPI>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <getFeature+0x3e>
		handleHalError(NAND);
 80063ac:	2004      	movs	r0, #4
 80063ae:	f7ff fe27 	bl	8006000 <handleHalError>
	}
	return feature;
 80063b2:	7afb      	ldrb	r3, [r7, #11]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	2000484c 	.word	0x2000484c
 80063c0:	40020400 	.word	0x40020400

080063c4 <setFeature>:
 * @param featureVal: Value to set
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
void setFeature(uint8_t featureAddr, uint8_t featureVal){
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	4603      	mov	r3, r0
 80063cc:	460a      	mov	r2, r1
 80063ce:	71fb      	strb	r3, [r7, #7]
 80063d0:	4613      	mov	r3, r2
 80063d2:	71bb      	strb	r3, [r7, #6]
	// Variables
	uint8_t cmd[3];  // Command sent to device

	// Send Command
	cmd[0] = SET_FEATURE;
 80063d4:	231f      	movs	r3, #31
 80063d6:	733b      	strb	r3, [r7, #12]
	cmd[1] = featureAddr;
 80063d8:	79fb      	ldrb	r3, [r7, #7]
 80063da:	737b      	strb	r3, [r7, #13]
	cmd[2] = featureVal;
 80063dc:	79bb      	ldrb	r3, [r7, #6]
 80063de:	73bb      	strb	r3, [r7, #14]
	if (sendSPI(&cmd[0], 3, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 80063e0:	f107 000c 	add.w	r0, r7, #12
 80063e4:	4b07      	ldr	r3, [pc, #28]	; (8006404 <setFeature+0x40>)
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	2340      	movs	r3, #64	; 0x40
 80063ea:	4a07      	ldr	r2, [pc, #28]	; (8006408 <setFeature+0x44>)
 80063ec:	2103      	movs	r1, #3
 80063ee:	f7ff fd57 	bl	8005ea0 <sendSPI>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <setFeature+0x3a>
		handleHalError(BMP);
 80063f8:	2001      	movs	r0, #1
 80063fa:	f7ff fe01 	bl	8006000 <handleHalError>
		return;
	}
}
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	2000484c 	.word	0x2000484c
 8006408:	40020400 	.word	0x40020400

0800640c <eraseBlock>:
 * @param rowAddr: block to erase
 *
 * @author Mark Batistich
 * @date 2/6/2021
 */
void eraseBlock(uint32_t rowAddr){
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af02      	add	r7, sp, #8
 8006412:	6078      	str	r0, [r7, #4]
	// Variables
	uint8_t cmd[4];  // Command sent to device
	uint8_t feature; //feature byte
	bool oip = true; //operation in progress
 8006414:	2301      	movs	r3, #1
 8006416:	73fb      	strb	r3, [r7, #15]

	//Load data from cell array into buffer
	cmd[0] = BLOCK_ERASE;
 8006418:	23d8      	movs	r3, #216	; 0xd8
 800641a:	723b      	strb	r3, [r7, #8]
	cmd[3] = rowAddr;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	b2db      	uxtb	r3, r3
 8006420:	72fb      	strb	r3, [r7, #11]
	cmd[2] = rowAddr >> 8;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	0a1b      	lsrs	r3, r3, #8
 8006426:	b2db      	uxtb	r3, r3
 8006428:	72bb      	strb	r3, [r7, #10]
	cmd[1] = rowAddr >> 16;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	0c1b      	lsrs	r3, r3, #16
 800642e:	b2db      	uxtb	r3, r3
 8006430:	727b      	strb	r3, [r7, #9]

	writeEnable();
 8006432:	f7ff ff6b 	bl	800630c <writeEnable>
	if (sendSPI(&cmd[0], 4, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 8006436:	f107 0008 	add.w	r0, r7, #8
 800643a:	4b11      	ldr	r3, [pc, #68]	; (8006480 <eraseBlock+0x74>)
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	2340      	movs	r3, #64	; 0x40
 8006440:	4a10      	ldr	r2, [pc, #64]	; (8006484 <eraseBlock+0x78>)
 8006442:	2104      	movs	r1, #4
 8006444:	f7ff fd2c 	bl	8005ea0 <sendSPI>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <eraseBlock+0x4a>
		handleHalError(BMP);
 800644e:	2001      	movs	r0, #1
 8006450:	f7ff fdd6 	bl	8006000 <handleHalError>
 8006454:	e011      	b.n	800647a <eraseBlock+0x6e>
		return;
	}

	do{
		feature = getFeature(FEATURE_ADDR_C);
 8006456:	20c0      	movs	r0, #192	; 0xc0
 8006458:	f7ff ff8c 	bl	8006374 <getFeature>
 800645c:	4603      	mov	r3, r0
 800645e:	73bb      	strb	r3, [r7, #14]
		oip = getBit(feature, 0);
 8006460:	7bbb      	ldrb	r3, [r7, #14]
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	bf14      	ite	ne
 800646a:	2301      	movne	r3, #1
 800646c:	2300      	moveq	r3, #0
 800646e:	73fb      	strb	r3, [r7, #15]
	}while(oip);
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1ef      	bne.n	8006456 <eraseBlock+0x4a>
	writeDisable();
 8006476:	f7ff ff63 	bl	8006340 <writeDisable>
}
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	2000484c 	.word	0x2000484c
 8006484:	40020400 	.word	0x40020400

08006488 <__errno>:
 8006488:	4b01      	ldr	r3, [pc, #4]	; (8006490 <__errno+0x8>)
 800648a:	6818      	ldr	r0, [r3, #0]
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	20000010 	.word	0x20000010

08006494 <__libc_init_array>:
 8006494:	b570      	push	{r4, r5, r6, lr}
 8006496:	4e0d      	ldr	r6, [pc, #52]	; (80064cc <__libc_init_array+0x38>)
 8006498:	4c0d      	ldr	r4, [pc, #52]	; (80064d0 <__libc_init_array+0x3c>)
 800649a:	1ba4      	subs	r4, r4, r6
 800649c:	10a4      	asrs	r4, r4, #2
 800649e:	2500      	movs	r5, #0
 80064a0:	42a5      	cmp	r5, r4
 80064a2:	d109      	bne.n	80064b8 <__libc_init_array+0x24>
 80064a4:	4e0b      	ldr	r6, [pc, #44]	; (80064d4 <__libc_init_array+0x40>)
 80064a6:	4c0c      	ldr	r4, [pc, #48]	; (80064d8 <__libc_init_array+0x44>)
 80064a8:	f004 fb0c 	bl	800aac4 <_init>
 80064ac:	1ba4      	subs	r4, r4, r6
 80064ae:	10a4      	asrs	r4, r4, #2
 80064b0:	2500      	movs	r5, #0
 80064b2:	42a5      	cmp	r5, r4
 80064b4:	d105      	bne.n	80064c2 <__libc_init_array+0x2e>
 80064b6:	bd70      	pop	{r4, r5, r6, pc}
 80064b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064bc:	4798      	blx	r3
 80064be:	3501      	adds	r5, #1
 80064c0:	e7ee      	b.n	80064a0 <__libc_init_array+0xc>
 80064c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064c6:	4798      	blx	r3
 80064c8:	3501      	adds	r5, #1
 80064ca:	e7f2      	b.n	80064b2 <__libc_init_array+0x1e>
 80064cc:	0800af68 	.word	0x0800af68
 80064d0:	0800af68 	.word	0x0800af68
 80064d4:	0800af68 	.word	0x0800af68
 80064d8:	0800af6c 	.word	0x0800af6c

080064dc <malloc>:
 80064dc:	4b02      	ldr	r3, [pc, #8]	; (80064e8 <malloc+0xc>)
 80064de:	4601      	mov	r1, r0
 80064e0:	6818      	ldr	r0, [r3, #0]
 80064e2:	f000 b873 	b.w	80065cc <_malloc_r>
 80064e6:	bf00      	nop
 80064e8:	20000010 	.word	0x20000010

080064ec <memcpy>:
 80064ec:	b510      	push	{r4, lr}
 80064ee:	1e43      	subs	r3, r0, #1
 80064f0:	440a      	add	r2, r1
 80064f2:	4291      	cmp	r1, r2
 80064f4:	d100      	bne.n	80064f8 <memcpy+0xc>
 80064f6:	bd10      	pop	{r4, pc}
 80064f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006500:	e7f7      	b.n	80064f2 <memcpy+0x6>

08006502 <memset>:
 8006502:	4402      	add	r2, r0
 8006504:	4603      	mov	r3, r0
 8006506:	4293      	cmp	r3, r2
 8006508:	d100      	bne.n	800650c <memset+0xa>
 800650a:	4770      	bx	lr
 800650c:	f803 1b01 	strb.w	r1, [r3], #1
 8006510:	e7f9      	b.n	8006506 <memset+0x4>

08006512 <_calloc_r>:
 8006512:	b538      	push	{r3, r4, r5, lr}
 8006514:	fb02 f401 	mul.w	r4, r2, r1
 8006518:	4621      	mov	r1, r4
 800651a:	f000 f857 	bl	80065cc <_malloc_r>
 800651e:	4605      	mov	r5, r0
 8006520:	b118      	cbz	r0, 800652a <_calloc_r+0x18>
 8006522:	4622      	mov	r2, r4
 8006524:	2100      	movs	r1, #0
 8006526:	f7ff ffec 	bl	8006502 <memset>
 800652a:	4628      	mov	r0, r5
 800652c:	bd38      	pop	{r3, r4, r5, pc}
	...

08006530 <_free_r>:
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4605      	mov	r5, r0
 8006534:	2900      	cmp	r1, #0
 8006536:	d045      	beq.n	80065c4 <_free_r+0x94>
 8006538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800653c:	1f0c      	subs	r4, r1, #4
 800653e:	2b00      	cmp	r3, #0
 8006540:	bfb8      	it	lt
 8006542:	18e4      	addlt	r4, r4, r3
 8006544:	f003 fb2a 	bl	8009b9c <__malloc_lock>
 8006548:	4a1f      	ldr	r2, [pc, #124]	; (80065c8 <_free_r+0x98>)
 800654a:	6813      	ldr	r3, [r2, #0]
 800654c:	4610      	mov	r0, r2
 800654e:	b933      	cbnz	r3, 800655e <_free_r+0x2e>
 8006550:	6063      	str	r3, [r4, #4]
 8006552:	6014      	str	r4, [r2, #0]
 8006554:	4628      	mov	r0, r5
 8006556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800655a:	f003 bb20 	b.w	8009b9e <__malloc_unlock>
 800655e:	42a3      	cmp	r3, r4
 8006560:	d90c      	bls.n	800657c <_free_r+0x4c>
 8006562:	6821      	ldr	r1, [r4, #0]
 8006564:	1862      	adds	r2, r4, r1
 8006566:	4293      	cmp	r3, r2
 8006568:	bf04      	itt	eq
 800656a:	681a      	ldreq	r2, [r3, #0]
 800656c:	685b      	ldreq	r3, [r3, #4]
 800656e:	6063      	str	r3, [r4, #4]
 8006570:	bf04      	itt	eq
 8006572:	1852      	addeq	r2, r2, r1
 8006574:	6022      	streq	r2, [r4, #0]
 8006576:	6004      	str	r4, [r0, #0]
 8006578:	e7ec      	b.n	8006554 <_free_r+0x24>
 800657a:	4613      	mov	r3, r2
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	b10a      	cbz	r2, 8006584 <_free_r+0x54>
 8006580:	42a2      	cmp	r2, r4
 8006582:	d9fa      	bls.n	800657a <_free_r+0x4a>
 8006584:	6819      	ldr	r1, [r3, #0]
 8006586:	1858      	adds	r0, r3, r1
 8006588:	42a0      	cmp	r0, r4
 800658a:	d10b      	bne.n	80065a4 <_free_r+0x74>
 800658c:	6820      	ldr	r0, [r4, #0]
 800658e:	4401      	add	r1, r0
 8006590:	1858      	adds	r0, r3, r1
 8006592:	4282      	cmp	r2, r0
 8006594:	6019      	str	r1, [r3, #0]
 8006596:	d1dd      	bne.n	8006554 <_free_r+0x24>
 8006598:	6810      	ldr	r0, [r2, #0]
 800659a:	6852      	ldr	r2, [r2, #4]
 800659c:	605a      	str	r2, [r3, #4]
 800659e:	4401      	add	r1, r0
 80065a0:	6019      	str	r1, [r3, #0]
 80065a2:	e7d7      	b.n	8006554 <_free_r+0x24>
 80065a4:	d902      	bls.n	80065ac <_free_r+0x7c>
 80065a6:	230c      	movs	r3, #12
 80065a8:	602b      	str	r3, [r5, #0]
 80065aa:	e7d3      	b.n	8006554 <_free_r+0x24>
 80065ac:	6820      	ldr	r0, [r4, #0]
 80065ae:	1821      	adds	r1, r4, r0
 80065b0:	428a      	cmp	r2, r1
 80065b2:	bf04      	itt	eq
 80065b4:	6811      	ldreq	r1, [r2, #0]
 80065b6:	6852      	ldreq	r2, [r2, #4]
 80065b8:	6062      	str	r2, [r4, #4]
 80065ba:	bf04      	itt	eq
 80065bc:	1809      	addeq	r1, r1, r0
 80065be:	6021      	streq	r1, [r4, #0]
 80065c0:	605c      	str	r4, [r3, #4]
 80065c2:	e7c7      	b.n	8006554 <_free_r+0x24>
 80065c4:	bd38      	pop	{r3, r4, r5, pc}
 80065c6:	bf00      	nop
 80065c8:	200041ac 	.word	0x200041ac

080065cc <_malloc_r>:
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	1ccd      	adds	r5, r1, #3
 80065d0:	f025 0503 	bic.w	r5, r5, #3
 80065d4:	3508      	adds	r5, #8
 80065d6:	2d0c      	cmp	r5, #12
 80065d8:	bf38      	it	cc
 80065da:	250c      	movcc	r5, #12
 80065dc:	2d00      	cmp	r5, #0
 80065de:	4606      	mov	r6, r0
 80065e0:	db01      	blt.n	80065e6 <_malloc_r+0x1a>
 80065e2:	42a9      	cmp	r1, r5
 80065e4:	d903      	bls.n	80065ee <_malloc_r+0x22>
 80065e6:	230c      	movs	r3, #12
 80065e8:	6033      	str	r3, [r6, #0]
 80065ea:	2000      	movs	r0, #0
 80065ec:	bd70      	pop	{r4, r5, r6, pc}
 80065ee:	f003 fad5 	bl	8009b9c <__malloc_lock>
 80065f2:	4a21      	ldr	r2, [pc, #132]	; (8006678 <_malloc_r+0xac>)
 80065f4:	6814      	ldr	r4, [r2, #0]
 80065f6:	4621      	mov	r1, r4
 80065f8:	b991      	cbnz	r1, 8006620 <_malloc_r+0x54>
 80065fa:	4c20      	ldr	r4, [pc, #128]	; (800667c <_malloc_r+0xb0>)
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	b91b      	cbnz	r3, 8006608 <_malloc_r+0x3c>
 8006600:	4630      	mov	r0, r6
 8006602:	f000 fef7 	bl	80073f4 <_sbrk_r>
 8006606:	6020      	str	r0, [r4, #0]
 8006608:	4629      	mov	r1, r5
 800660a:	4630      	mov	r0, r6
 800660c:	f000 fef2 	bl	80073f4 <_sbrk_r>
 8006610:	1c43      	adds	r3, r0, #1
 8006612:	d124      	bne.n	800665e <_malloc_r+0x92>
 8006614:	230c      	movs	r3, #12
 8006616:	6033      	str	r3, [r6, #0]
 8006618:	4630      	mov	r0, r6
 800661a:	f003 fac0 	bl	8009b9e <__malloc_unlock>
 800661e:	e7e4      	b.n	80065ea <_malloc_r+0x1e>
 8006620:	680b      	ldr	r3, [r1, #0]
 8006622:	1b5b      	subs	r3, r3, r5
 8006624:	d418      	bmi.n	8006658 <_malloc_r+0x8c>
 8006626:	2b0b      	cmp	r3, #11
 8006628:	d90f      	bls.n	800664a <_malloc_r+0x7e>
 800662a:	600b      	str	r3, [r1, #0]
 800662c:	50cd      	str	r5, [r1, r3]
 800662e:	18cc      	adds	r4, r1, r3
 8006630:	4630      	mov	r0, r6
 8006632:	f003 fab4 	bl	8009b9e <__malloc_unlock>
 8006636:	f104 000b 	add.w	r0, r4, #11
 800663a:	1d23      	adds	r3, r4, #4
 800663c:	f020 0007 	bic.w	r0, r0, #7
 8006640:	1ac3      	subs	r3, r0, r3
 8006642:	d0d3      	beq.n	80065ec <_malloc_r+0x20>
 8006644:	425a      	negs	r2, r3
 8006646:	50e2      	str	r2, [r4, r3]
 8006648:	e7d0      	b.n	80065ec <_malloc_r+0x20>
 800664a:	428c      	cmp	r4, r1
 800664c:	684b      	ldr	r3, [r1, #4]
 800664e:	bf16      	itet	ne
 8006650:	6063      	strne	r3, [r4, #4]
 8006652:	6013      	streq	r3, [r2, #0]
 8006654:	460c      	movne	r4, r1
 8006656:	e7eb      	b.n	8006630 <_malloc_r+0x64>
 8006658:	460c      	mov	r4, r1
 800665a:	6849      	ldr	r1, [r1, #4]
 800665c:	e7cc      	b.n	80065f8 <_malloc_r+0x2c>
 800665e:	1cc4      	adds	r4, r0, #3
 8006660:	f024 0403 	bic.w	r4, r4, #3
 8006664:	42a0      	cmp	r0, r4
 8006666:	d005      	beq.n	8006674 <_malloc_r+0xa8>
 8006668:	1a21      	subs	r1, r4, r0
 800666a:	4630      	mov	r0, r6
 800666c:	f000 fec2 	bl	80073f4 <_sbrk_r>
 8006670:	3001      	adds	r0, #1
 8006672:	d0cf      	beq.n	8006614 <_malloc_r+0x48>
 8006674:	6025      	str	r5, [r4, #0]
 8006676:	e7db      	b.n	8006630 <_malloc_r+0x64>
 8006678:	200041ac 	.word	0x200041ac
 800667c:	200041b0 	.word	0x200041b0

08006680 <__cvt>:
 8006680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006684:	ec55 4b10 	vmov	r4, r5, d0
 8006688:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800668a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800668e:	2d00      	cmp	r5, #0
 8006690:	460e      	mov	r6, r1
 8006692:	4691      	mov	r9, r2
 8006694:	4619      	mov	r1, r3
 8006696:	bfb8      	it	lt
 8006698:	4622      	movlt	r2, r4
 800669a:	462b      	mov	r3, r5
 800669c:	f027 0720 	bic.w	r7, r7, #32
 80066a0:	bfbb      	ittet	lt
 80066a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80066a6:	461d      	movlt	r5, r3
 80066a8:	2300      	movge	r3, #0
 80066aa:	232d      	movlt	r3, #45	; 0x2d
 80066ac:	bfb8      	it	lt
 80066ae:	4614      	movlt	r4, r2
 80066b0:	2f46      	cmp	r7, #70	; 0x46
 80066b2:	700b      	strb	r3, [r1, #0]
 80066b4:	d004      	beq.n	80066c0 <__cvt+0x40>
 80066b6:	2f45      	cmp	r7, #69	; 0x45
 80066b8:	d100      	bne.n	80066bc <__cvt+0x3c>
 80066ba:	3601      	adds	r6, #1
 80066bc:	2102      	movs	r1, #2
 80066be:	e000      	b.n	80066c2 <__cvt+0x42>
 80066c0:	2103      	movs	r1, #3
 80066c2:	ab03      	add	r3, sp, #12
 80066c4:	9301      	str	r3, [sp, #4]
 80066c6:	ab02      	add	r3, sp, #8
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	4632      	mov	r2, r6
 80066cc:	4653      	mov	r3, sl
 80066ce:	ec45 4b10 	vmov	d0, r4, r5
 80066d2:	f001 ff81 	bl	80085d8 <_dtoa_r>
 80066d6:	2f47      	cmp	r7, #71	; 0x47
 80066d8:	4680      	mov	r8, r0
 80066da:	d102      	bne.n	80066e2 <__cvt+0x62>
 80066dc:	f019 0f01 	tst.w	r9, #1
 80066e0:	d026      	beq.n	8006730 <__cvt+0xb0>
 80066e2:	2f46      	cmp	r7, #70	; 0x46
 80066e4:	eb08 0906 	add.w	r9, r8, r6
 80066e8:	d111      	bne.n	800670e <__cvt+0x8e>
 80066ea:	f898 3000 	ldrb.w	r3, [r8]
 80066ee:	2b30      	cmp	r3, #48	; 0x30
 80066f0:	d10a      	bne.n	8006708 <__cvt+0x88>
 80066f2:	2200      	movs	r2, #0
 80066f4:	2300      	movs	r3, #0
 80066f6:	4620      	mov	r0, r4
 80066f8:	4629      	mov	r1, r5
 80066fa:	f7fa f9ed 	bl	8000ad8 <__aeabi_dcmpeq>
 80066fe:	b918      	cbnz	r0, 8006708 <__cvt+0x88>
 8006700:	f1c6 0601 	rsb	r6, r6, #1
 8006704:	f8ca 6000 	str.w	r6, [sl]
 8006708:	f8da 3000 	ldr.w	r3, [sl]
 800670c:	4499      	add	r9, r3
 800670e:	2200      	movs	r2, #0
 8006710:	2300      	movs	r3, #0
 8006712:	4620      	mov	r0, r4
 8006714:	4629      	mov	r1, r5
 8006716:	f7fa f9df 	bl	8000ad8 <__aeabi_dcmpeq>
 800671a:	b938      	cbnz	r0, 800672c <__cvt+0xac>
 800671c:	2230      	movs	r2, #48	; 0x30
 800671e:	9b03      	ldr	r3, [sp, #12]
 8006720:	454b      	cmp	r3, r9
 8006722:	d205      	bcs.n	8006730 <__cvt+0xb0>
 8006724:	1c59      	adds	r1, r3, #1
 8006726:	9103      	str	r1, [sp, #12]
 8006728:	701a      	strb	r2, [r3, #0]
 800672a:	e7f8      	b.n	800671e <__cvt+0x9e>
 800672c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006730:	9b03      	ldr	r3, [sp, #12]
 8006732:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006734:	eba3 0308 	sub.w	r3, r3, r8
 8006738:	4640      	mov	r0, r8
 800673a:	6013      	str	r3, [r2, #0]
 800673c:	b004      	add	sp, #16
 800673e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006742 <__exponent>:
 8006742:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006744:	2900      	cmp	r1, #0
 8006746:	4604      	mov	r4, r0
 8006748:	bfba      	itte	lt
 800674a:	4249      	neglt	r1, r1
 800674c:	232d      	movlt	r3, #45	; 0x2d
 800674e:	232b      	movge	r3, #43	; 0x2b
 8006750:	2909      	cmp	r1, #9
 8006752:	f804 2b02 	strb.w	r2, [r4], #2
 8006756:	7043      	strb	r3, [r0, #1]
 8006758:	dd20      	ble.n	800679c <__exponent+0x5a>
 800675a:	f10d 0307 	add.w	r3, sp, #7
 800675e:	461f      	mov	r7, r3
 8006760:	260a      	movs	r6, #10
 8006762:	fb91 f5f6 	sdiv	r5, r1, r6
 8006766:	fb06 1115 	mls	r1, r6, r5, r1
 800676a:	3130      	adds	r1, #48	; 0x30
 800676c:	2d09      	cmp	r5, #9
 800676e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006772:	f103 32ff 	add.w	r2, r3, #4294967295
 8006776:	4629      	mov	r1, r5
 8006778:	dc09      	bgt.n	800678e <__exponent+0x4c>
 800677a:	3130      	adds	r1, #48	; 0x30
 800677c:	3b02      	subs	r3, #2
 800677e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006782:	42bb      	cmp	r3, r7
 8006784:	4622      	mov	r2, r4
 8006786:	d304      	bcc.n	8006792 <__exponent+0x50>
 8006788:	1a10      	subs	r0, r2, r0
 800678a:	b003      	add	sp, #12
 800678c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800678e:	4613      	mov	r3, r2
 8006790:	e7e7      	b.n	8006762 <__exponent+0x20>
 8006792:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006796:	f804 2b01 	strb.w	r2, [r4], #1
 800679a:	e7f2      	b.n	8006782 <__exponent+0x40>
 800679c:	2330      	movs	r3, #48	; 0x30
 800679e:	4419      	add	r1, r3
 80067a0:	7083      	strb	r3, [r0, #2]
 80067a2:	1d02      	adds	r2, r0, #4
 80067a4:	70c1      	strb	r1, [r0, #3]
 80067a6:	e7ef      	b.n	8006788 <__exponent+0x46>

080067a8 <_printf_float>:
 80067a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ac:	b08d      	sub	sp, #52	; 0x34
 80067ae:	460c      	mov	r4, r1
 80067b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80067b4:	4616      	mov	r6, r2
 80067b6:	461f      	mov	r7, r3
 80067b8:	4605      	mov	r5, r0
 80067ba:	f003 f96b 	bl	8009a94 <_localeconv_r>
 80067be:	6803      	ldr	r3, [r0, #0]
 80067c0:	9304      	str	r3, [sp, #16]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7f9 fd0c 	bl	80001e0 <strlen>
 80067c8:	2300      	movs	r3, #0
 80067ca:	930a      	str	r3, [sp, #40]	; 0x28
 80067cc:	f8d8 3000 	ldr.w	r3, [r8]
 80067d0:	9005      	str	r0, [sp, #20]
 80067d2:	3307      	adds	r3, #7
 80067d4:	f023 0307 	bic.w	r3, r3, #7
 80067d8:	f103 0208 	add.w	r2, r3, #8
 80067dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80067e0:	f8d4 b000 	ldr.w	fp, [r4]
 80067e4:	f8c8 2000 	str.w	r2, [r8]
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80067f0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80067f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80067f8:	9307      	str	r3, [sp, #28]
 80067fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80067fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006802:	4ba7      	ldr	r3, [pc, #668]	; (8006aa0 <_printf_float+0x2f8>)
 8006804:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006808:	f7fa f998 	bl	8000b3c <__aeabi_dcmpun>
 800680c:	bb70      	cbnz	r0, 800686c <_printf_float+0xc4>
 800680e:	f04f 32ff 	mov.w	r2, #4294967295
 8006812:	4ba3      	ldr	r3, [pc, #652]	; (8006aa0 <_printf_float+0x2f8>)
 8006814:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006818:	f7fa f972 	bl	8000b00 <__aeabi_dcmple>
 800681c:	bb30      	cbnz	r0, 800686c <_printf_float+0xc4>
 800681e:	2200      	movs	r2, #0
 8006820:	2300      	movs	r3, #0
 8006822:	4640      	mov	r0, r8
 8006824:	4649      	mov	r1, r9
 8006826:	f7fa f961 	bl	8000aec <__aeabi_dcmplt>
 800682a:	b110      	cbz	r0, 8006832 <_printf_float+0x8a>
 800682c:	232d      	movs	r3, #45	; 0x2d
 800682e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006832:	4a9c      	ldr	r2, [pc, #624]	; (8006aa4 <_printf_float+0x2fc>)
 8006834:	4b9c      	ldr	r3, [pc, #624]	; (8006aa8 <_printf_float+0x300>)
 8006836:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800683a:	bf8c      	ite	hi
 800683c:	4690      	movhi	r8, r2
 800683e:	4698      	movls	r8, r3
 8006840:	2303      	movs	r3, #3
 8006842:	f02b 0204 	bic.w	r2, fp, #4
 8006846:	6123      	str	r3, [r4, #16]
 8006848:	6022      	str	r2, [r4, #0]
 800684a:	f04f 0900 	mov.w	r9, #0
 800684e:	9700      	str	r7, [sp, #0]
 8006850:	4633      	mov	r3, r6
 8006852:	aa0b      	add	r2, sp, #44	; 0x2c
 8006854:	4621      	mov	r1, r4
 8006856:	4628      	mov	r0, r5
 8006858:	f000 f9e6 	bl	8006c28 <_printf_common>
 800685c:	3001      	adds	r0, #1
 800685e:	f040 808d 	bne.w	800697c <_printf_float+0x1d4>
 8006862:	f04f 30ff 	mov.w	r0, #4294967295
 8006866:	b00d      	add	sp, #52	; 0x34
 8006868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800686c:	4642      	mov	r2, r8
 800686e:	464b      	mov	r3, r9
 8006870:	4640      	mov	r0, r8
 8006872:	4649      	mov	r1, r9
 8006874:	f7fa f962 	bl	8000b3c <__aeabi_dcmpun>
 8006878:	b110      	cbz	r0, 8006880 <_printf_float+0xd8>
 800687a:	4a8c      	ldr	r2, [pc, #560]	; (8006aac <_printf_float+0x304>)
 800687c:	4b8c      	ldr	r3, [pc, #560]	; (8006ab0 <_printf_float+0x308>)
 800687e:	e7da      	b.n	8006836 <_printf_float+0x8e>
 8006880:	6861      	ldr	r1, [r4, #4]
 8006882:	1c4b      	adds	r3, r1, #1
 8006884:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006888:	a80a      	add	r0, sp, #40	; 0x28
 800688a:	d13e      	bne.n	800690a <_printf_float+0x162>
 800688c:	2306      	movs	r3, #6
 800688e:	6063      	str	r3, [r4, #4]
 8006890:	2300      	movs	r3, #0
 8006892:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006896:	ab09      	add	r3, sp, #36	; 0x24
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	ec49 8b10 	vmov	d0, r8, r9
 800689e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80068a2:	6022      	str	r2, [r4, #0]
 80068a4:	f8cd a004 	str.w	sl, [sp, #4]
 80068a8:	6861      	ldr	r1, [r4, #4]
 80068aa:	4628      	mov	r0, r5
 80068ac:	f7ff fee8 	bl	8006680 <__cvt>
 80068b0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80068b4:	2b47      	cmp	r3, #71	; 0x47
 80068b6:	4680      	mov	r8, r0
 80068b8:	d109      	bne.n	80068ce <_printf_float+0x126>
 80068ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068bc:	1cd8      	adds	r0, r3, #3
 80068be:	db02      	blt.n	80068c6 <_printf_float+0x11e>
 80068c0:	6862      	ldr	r2, [r4, #4]
 80068c2:	4293      	cmp	r3, r2
 80068c4:	dd47      	ble.n	8006956 <_printf_float+0x1ae>
 80068c6:	f1aa 0a02 	sub.w	sl, sl, #2
 80068ca:	fa5f fa8a 	uxtb.w	sl, sl
 80068ce:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80068d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068d4:	d824      	bhi.n	8006920 <_printf_float+0x178>
 80068d6:	3901      	subs	r1, #1
 80068d8:	4652      	mov	r2, sl
 80068da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80068de:	9109      	str	r1, [sp, #36]	; 0x24
 80068e0:	f7ff ff2f 	bl	8006742 <__exponent>
 80068e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068e6:	1813      	adds	r3, r2, r0
 80068e8:	2a01      	cmp	r2, #1
 80068ea:	4681      	mov	r9, r0
 80068ec:	6123      	str	r3, [r4, #16]
 80068ee:	dc02      	bgt.n	80068f6 <_printf_float+0x14e>
 80068f0:	6822      	ldr	r2, [r4, #0]
 80068f2:	07d1      	lsls	r1, r2, #31
 80068f4:	d501      	bpl.n	80068fa <_printf_float+0x152>
 80068f6:	3301      	adds	r3, #1
 80068f8:	6123      	str	r3, [r4, #16]
 80068fa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0a5      	beq.n	800684e <_printf_float+0xa6>
 8006902:	232d      	movs	r3, #45	; 0x2d
 8006904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006908:	e7a1      	b.n	800684e <_printf_float+0xa6>
 800690a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800690e:	f000 8177 	beq.w	8006c00 <_printf_float+0x458>
 8006912:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006916:	d1bb      	bne.n	8006890 <_printf_float+0xe8>
 8006918:	2900      	cmp	r1, #0
 800691a:	d1b9      	bne.n	8006890 <_printf_float+0xe8>
 800691c:	2301      	movs	r3, #1
 800691e:	e7b6      	b.n	800688e <_printf_float+0xe6>
 8006920:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006924:	d119      	bne.n	800695a <_printf_float+0x1b2>
 8006926:	2900      	cmp	r1, #0
 8006928:	6863      	ldr	r3, [r4, #4]
 800692a:	dd0c      	ble.n	8006946 <_printf_float+0x19e>
 800692c:	6121      	str	r1, [r4, #16]
 800692e:	b913      	cbnz	r3, 8006936 <_printf_float+0x18e>
 8006930:	6822      	ldr	r2, [r4, #0]
 8006932:	07d2      	lsls	r2, r2, #31
 8006934:	d502      	bpl.n	800693c <_printf_float+0x194>
 8006936:	3301      	adds	r3, #1
 8006938:	440b      	add	r3, r1
 800693a:	6123      	str	r3, [r4, #16]
 800693c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800693e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006940:	f04f 0900 	mov.w	r9, #0
 8006944:	e7d9      	b.n	80068fa <_printf_float+0x152>
 8006946:	b913      	cbnz	r3, 800694e <_printf_float+0x1a6>
 8006948:	6822      	ldr	r2, [r4, #0]
 800694a:	07d0      	lsls	r0, r2, #31
 800694c:	d501      	bpl.n	8006952 <_printf_float+0x1aa>
 800694e:	3302      	adds	r3, #2
 8006950:	e7f3      	b.n	800693a <_printf_float+0x192>
 8006952:	2301      	movs	r3, #1
 8006954:	e7f1      	b.n	800693a <_printf_float+0x192>
 8006956:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800695a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800695e:	4293      	cmp	r3, r2
 8006960:	db05      	blt.n	800696e <_printf_float+0x1c6>
 8006962:	6822      	ldr	r2, [r4, #0]
 8006964:	6123      	str	r3, [r4, #16]
 8006966:	07d1      	lsls	r1, r2, #31
 8006968:	d5e8      	bpl.n	800693c <_printf_float+0x194>
 800696a:	3301      	adds	r3, #1
 800696c:	e7e5      	b.n	800693a <_printf_float+0x192>
 800696e:	2b00      	cmp	r3, #0
 8006970:	bfd4      	ite	le
 8006972:	f1c3 0302 	rsble	r3, r3, #2
 8006976:	2301      	movgt	r3, #1
 8006978:	4413      	add	r3, r2
 800697a:	e7de      	b.n	800693a <_printf_float+0x192>
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	055a      	lsls	r2, r3, #21
 8006980:	d407      	bmi.n	8006992 <_printf_float+0x1ea>
 8006982:	6923      	ldr	r3, [r4, #16]
 8006984:	4642      	mov	r2, r8
 8006986:	4631      	mov	r1, r6
 8006988:	4628      	mov	r0, r5
 800698a:	47b8      	blx	r7
 800698c:	3001      	adds	r0, #1
 800698e:	d12b      	bne.n	80069e8 <_printf_float+0x240>
 8006990:	e767      	b.n	8006862 <_printf_float+0xba>
 8006992:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006996:	f240 80dc 	bls.w	8006b52 <_printf_float+0x3aa>
 800699a:	2200      	movs	r2, #0
 800699c:	2300      	movs	r3, #0
 800699e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069a2:	f7fa f899 	bl	8000ad8 <__aeabi_dcmpeq>
 80069a6:	2800      	cmp	r0, #0
 80069a8:	d033      	beq.n	8006a12 <_printf_float+0x26a>
 80069aa:	2301      	movs	r3, #1
 80069ac:	4a41      	ldr	r2, [pc, #260]	; (8006ab4 <_printf_float+0x30c>)
 80069ae:	4631      	mov	r1, r6
 80069b0:	4628      	mov	r0, r5
 80069b2:	47b8      	blx	r7
 80069b4:	3001      	adds	r0, #1
 80069b6:	f43f af54 	beq.w	8006862 <_printf_float+0xba>
 80069ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069be:	429a      	cmp	r2, r3
 80069c0:	db02      	blt.n	80069c8 <_printf_float+0x220>
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	07d8      	lsls	r0, r3, #31
 80069c6:	d50f      	bpl.n	80069e8 <_printf_float+0x240>
 80069c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069cc:	4631      	mov	r1, r6
 80069ce:	4628      	mov	r0, r5
 80069d0:	47b8      	blx	r7
 80069d2:	3001      	adds	r0, #1
 80069d4:	f43f af45 	beq.w	8006862 <_printf_float+0xba>
 80069d8:	f04f 0800 	mov.w	r8, #0
 80069dc:	f104 091a 	add.w	r9, r4, #26
 80069e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069e2:	3b01      	subs	r3, #1
 80069e4:	4543      	cmp	r3, r8
 80069e6:	dc09      	bgt.n	80069fc <_printf_float+0x254>
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	079b      	lsls	r3, r3, #30
 80069ec:	f100 8103 	bmi.w	8006bf6 <_printf_float+0x44e>
 80069f0:	68e0      	ldr	r0, [r4, #12]
 80069f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069f4:	4298      	cmp	r0, r3
 80069f6:	bfb8      	it	lt
 80069f8:	4618      	movlt	r0, r3
 80069fa:	e734      	b.n	8006866 <_printf_float+0xbe>
 80069fc:	2301      	movs	r3, #1
 80069fe:	464a      	mov	r2, r9
 8006a00:	4631      	mov	r1, r6
 8006a02:	4628      	mov	r0, r5
 8006a04:	47b8      	blx	r7
 8006a06:	3001      	adds	r0, #1
 8006a08:	f43f af2b 	beq.w	8006862 <_printf_float+0xba>
 8006a0c:	f108 0801 	add.w	r8, r8, #1
 8006a10:	e7e6      	b.n	80069e0 <_printf_float+0x238>
 8006a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	dc2b      	bgt.n	8006a70 <_printf_float+0x2c8>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	4a26      	ldr	r2, [pc, #152]	; (8006ab4 <_printf_float+0x30c>)
 8006a1c:	4631      	mov	r1, r6
 8006a1e:	4628      	mov	r0, r5
 8006a20:	47b8      	blx	r7
 8006a22:	3001      	adds	r0, #1
 8006a24:	f43f af1d 	beq.w	8006862 <_printf_float+0xba>
 8006a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a2a:	b923      	cbnz	r3, 8006a36 <_printf_float+0x28e>
 8006a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a2e:	b913      	cbnz	r3, 8006a36 <_printf_float+0x28e>
 8006a30:	6823      	ldr	r3, [r4, #0]
 8006a32:	07d9      	lsls	r1, r3, #31
 8006a34:	d5d8      	bpl.n	80069e8 <_printf_float+0x240>
 8006a36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	47b8      	blx	r7
 8006a40:	3001      	adds	r0, #1
 8006a42:	f43f af0e 	beq.w	8006862 <_printf_float+0xba>
 8006a46:	f04f 0900 	mov.w	r9, #0
 8006a4a:	f104 0a1a 	add.w	sl, r4, #26
 8006a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a50:	425b      	negs	r3, r3
 8006a52:	454b      	cmp	r3, r9
 8006a54:	dc01      	bgt.n	8006a5a <_printf_float+0x2b2>
 8006a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a58:	e794      	b.n	8006984 <_printf_float+0x1dc>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	4652      	mov	r2, sl
 8006a5e:	4631      	mov	r1, r6
 8006a60:	4628      	mov	r0, r5
 8006a62:	47b8      	blx	r7
 8006a64:	3001      	adds	r0, #1
 8006a66:	f43f aefc 	beq.w	8006862 <_printf_float+0xba>
 8006a6a:	f109 0901 	add.w	r9, r9, #1
 8006a6e:	e7ee      	b.n	8006a4e <_printf_float+0x2a6>
 8006a70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a74:	429a      	cmp	r2, r3
 8006a76:	bfa8      	it	ge
 8006a78:	461a      	movge	r2, r3
 8006a7a:	2a00      	cmp	r2, #0
 8006a7c:	4691      	mov	r9, r2
 8006a7e:	dd07      	ble.n	8006a90 <_printf_float+0x2e8>
 8006a80:	4613      	mov	r3, r2
 8006a82:	4631      	mov	r1, r6
 8006a84:	4642      	mov	r2, r8
 8006a86:	4628      	mov	r0, r5
 8006a88:	47b8      	blx	r7
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	f43f aee9 	beq.w	8006862 <_printf_float+0xba>
 8006a90:	f104 031a 	add.w	r3, r4, #26
 8006a94:	f04f 0b00 	mov.w	fp, #0
 8006a98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a9c:	9306      	str	r3, [sp, #24]
 8006a9e:	e015      	b.n	8006acc <_printf_float+0x324>
 8006aa0:	7fefffff 	.word	0x7fefffff
 8006aa4:	0800ac44 	.word	0x0800ac44
 8006aa8:	0800ac40 	.word	0x0800ac40
 8006aac:	0800ac4c 	.word	0x0800ac4c
 8006ab0:	0800ac48 	.word	0x0800ac48
 8006ab4:	0800ac50 	.word	0x0800ac50
 8006ab8:	2301      	movs	r3, #1
 8006aba:	9a06      	ldr	r2, [sp, #24]
 8006abc:	4631      	mov	r1, r6
 8006abe:	4628      	mov	r0, r5
 8006ac0:	47b8      	blx	r7
 8006ac2:	3001      	adds	r0, #1
 8006ac4:	f43f aecd 	beq.w	8006862 <_printf_float+0xba>
 8006ac8:	f10b 0b01 	add.w	fp, fp, #1
 8006acc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006ad0:	ebaa 0309 	sub.w	r3, sl, r9
 8006ad4:	455b      	cmp	r3, fp
 8006ad6:	dcef      	bgt.n	8006ab8 <_printf_float+0x310>
 8006ad8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006adc:	429a      	cmp	r2, r3
 8006ade:	44d0      	add	r8, sl
 8006ae0:	db15      	blt.n	8006b0e <_printf_float+0x366>
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	07da      	lsls	r2, r3, #31
 8006ae6:	d412      	bmi.n	8006b0e <_printf_float+0x366>
 8006ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006aec:	eba3 020a 	sub.w	r2, r3, sl
 8006af0:	eba3 0a01 	sub.w	sl, r3, r1
 8006af4:	4592      	cmp	sl, r2
 8006af6:	bfa8      	it	ge
 8006af8:	4692      	movge	sl, r2
 8006afa:	f1ba 0f00 	cmp.w	sl, #0
 8006afe:	dc0e      	bgt.n	8006b1e <_printf_float+0x376>
 8006b00:	f04f 0800 	mov.w	r8, #0
 8006b04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b08:	f104 091a 	add.w	r9, r4, #26
 8006b0c:	e019      	b.n	8006b42 <_printf_float+0x39a>
 8006b0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b12:	4631      	mov	r1, r6
 8006b14:	4628      	mov	r0, r5
 8006b16:	47b8      	blx	r7
 8006b18:	3001      	adds	r0, #1
 8006b1a:	d1e5      	bne.n	8006ae8 <_printf_float+0x340>
 8006b1c:	e6a1      	b.n	8006862 <_printf_float+0xba>
 8006b1e:	4653      	mov	r3, sl
 8006b20:	4642      	mov	r2, r8
 8006b22:	4631      	mov	r1, r6
 8006b24:	4628      	mov	r0, r5
 8006b26:	47b8      	blx	r7
 8006b28:	3001      	adds	r0, #1
 8006b2a:	d1e9      	bne.n	8006b00 <_printf_float+0x358>
 8006b2c:	e699      	b.n	8006862 <_printf_float+0xba>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	464a      	mov	r2, r9
 8006b32:	4631      	mov	r1, r6
 8006b34:	4628      	mov	r0, r5
 8006b36:	47b8      	blx	r7
 8006b38:	3001      	adds	r0, #1
 8006b3a:	f43f ae92 	beq.w	8006862 <_printf_float+0xba>
 8006b3e:	f108 0801 	add.w	r8, r8, #1
 8006b42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b46:	1a9b      	subs	r3, r3, r2
 8006b48:	eba3 030a 	sub.w	r3, r3, sl
 8006b4c:	4543      	cmp	r3, r8
 8006b4e:	dcee      	bgt.n	8006b2e <_printf_float+0x386>
 8006b50:	e74a      	b.n	80069e8 <_printf_float+0x240>
 8006b52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b54:	2a01      	cmp	r2, #1
 8006b56:	dc01      	bgt.n	8006b5c <_printf_float+0x3b4>
 8006b58:	07db      	lsls	r3, r3, #31
 8006b5a:	d53a      	bpl.n	8006bd2 <_printf_float+0x42a>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	4642      	mov	r2, r8
 8006b60:	4631      	mov	r1, r6
 8006b62:	4628      	mov	r0, r5
 8006b64:	47b8      	blx	r7
 8006b66:	3001      	adds	r0, #1
 8006b68:	f43f ae7b 	beq.w	8006862 <_printf_float+0xba>
 8006b6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b70:	4631      	mov	r1, r6
 8006b72:	4628      	mov	r0, r5
 8006b74:	47b8      	blx	r7
 8006b76:	3001      	adds	r0, #1
 8006b78:	f108 0801 	add.w	r8, r8, #1
 8006b7c:	f43f ae71 	beq.w	8006862 <_printf_float+0xba>
 8006b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b82:	2200      	movs	r2, #0
 8006b84:	f103 3aff 	add.w	sl, r3, #4294967295
 8006b88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	f7f9 ffa3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b92:	b9c8      	cbnz	r0, 8006bc8 <_printf_float+0x420>
 8006b94:	4653      	mov	r3, sl
 8006b96:	4642      	mov	r2, r8
 8006b98:	4631      	mov	r1, r6
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	47b8      	blx	r7
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	d10e      	bne.n	8006bc0 <_printf_float+0x418>
 8006ba2:	e65e      	b.n	8006862 <_printf_float+0xba>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	4652      	mov	r2, sl
 8006ba8:	4631      	mov	r1, r6
 8006baa:	4628      	mov	r0, r5
 8006bac:	47b8      	blx	r7
 8006bae:	3001      	adds	r0, #1
 8006bb0:	f43f ae57 	beq.w	8006862 <_printf_float+0xba>
 8006bb4:	f108 0801 	add.w	r8, r8, #1
 8006bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	4543      	cmp	r3, r8
 8006bbe:	dcf1      	bgt.n	8006ba4 <_printf_float+0x3fc>
 8006bc0:	464b      	mov	r3, r9
 8006bc2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006bc6:	e6de      	b.n	8006986 <_printf_float+0x1de>
 8006bc8:	f04f 0800 	mov.w	r8, #0
 8006bcc:	f104 0a1a 	add.w	sl, r4, #26
 8006bd0:	e7f2      	b.n	8006bb8 <_printf_float+0x410>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e7df      	b.n	8006b96 <_printf_float+0x3ee>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	464a      	mov	r2, r9
 8006bda:	4631      	mov	r1, r6
 8006bdc:	4628      	mov	r0, r5
 8006bde:	47b8      	blx	r7
 8006be0:	3001      	adds	r0, #1
 8006be2:	f43f ae3e 	beq.w	8006862 <_printf_float+0xba>
 8006be6:	f108 0801 	add.w	r8, r8, #1
 8006bea:	68e3      	ldr	r3, [r4, #12]
 8006bec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006bee:	1a9b      	subs	r3, r3, r2
 8006bf0:	4543      	cmp	r3, r8
 8006bf2:	dcf0      	bgt.n	8006bd6 <_printf_float+0x42e>
 8006bf4:	e6fc      	b.n	80069f0 <_printf_float+0x248>
 8006bf6:	f04f 0800 	mov.w	r8, #0
 8006bfa:	f104 0919 	add.w	r9, r4, #25
 8006bfe:	e7f4      	b.n	8006bea <_printf_float+0x442>
 8006c00:	2900      	cmp	r1, #0
 8006c02:	f43f ae8b 	beq.w	800691c <_printf_float+0x174>
 8006c06:	2300      	movs	r3, #0
 8006c08:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006c0c:	ab09      	add	r3, sp, #36	; 0x24
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	ec49 8b10 	vmov	d0, r8, r9
 8006c14:	6022      	str	r2, [r4, #0]
 8006c16:	f8cd a004 	str.w	sl, [sp, #4]
 8006c1a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f7ff fd2e 	bl	8006680 <__cvt>
 8006c24:	4680      	mov	r8, r0
 8006c26:	e648      	b.n	80068ba <_printf_float+0x112>

08006c28 <_printf_common>:
 8006c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c2c:	4691      	mov	r9, r2
 8006c2e:	461f      	mov	r7, r3
 8006c30:	688a      	ldr	r2, [r1, #8]
 8006c32:	690b      	ldr	r3, [r1, #16]
 8006c34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	bfb8      	it	lt
 8006c3c:	4613      	movlt	r3, r2
 8006c3e:	f8c9 3000 	str.w	r3, [r9]
 8006c42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c46:	4606      	mov	r6, r0
 8006c48:	460c      	mov	r4, r1
 8006c4a:	b112      	cbz	r2, 8006c52 <_printf_common+0x2a>
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	f8c9 3000 	str.w	r3, [r9]
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	0699      	lsls	r1, r3, #26
 8006c56:	bf42      	ittt	mi
 8006c58:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006c5c:	3302      	addmi	r3, #2
 8006c5e:	f8c9 3000 	strmi.w	r3, [r9]
 8006c62:	6825      	ldr	r5, [r4, #0]
 8006c64:	f015 0506 	ands.w	r5, r5, #6
 8006c68:	d107      	bne.n	8006c7a <_printf_common+0x52>
 8006c6a:	f104 0a19 	add.w	sl, r4, #25
 8006c6e:	68e3      	ldr	r3, [r4, #12]
 8006c70:	f8d9 2000 	ldr.w	r2, [r9]
 8006c74:	1a9b      	subs	r3, r3, r2
 8006c76:	42ab      	cmp	r3, r5
 8006c78:	dc28      	bgt.n	8006ccc <_printf_common+0xa4>
 8006c7a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006c7e:	6822      	ldr	r2, [r4, #0]
 8006c80:	3300      	adds	r3, #0
 8006c82:	bf18      	it	ne
 8006c84:	2301      	movne	r3, #1
 8006c86:	0692      	lsls	r2, r2, #26
 8006c88:	d42d      	bmi.n	8006ce6 <_printf_common+0xbe>
 8006c8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c8e:	4639      	mov	r1, r7
 8006c90:	4630      	mov	r0, r6
 8006c92:	47c0      	blx	r8
 8006c94:	3001      	adds	r0, #1
 8006c96:	d020      	beq.n	8006cda <_printf_common+0xb2>
 8006c98:	6823      	ldr	r3, [r4, #0]
 8006c9a:	68e5      	ldr	r5, [r4, #12]
 8006c9c:	f8d9 2000 	ldr.w	r2, [r9]
 8006ca0:	f003 0306 	and.w	r3, r3, #6
 8006ca4:	2b04      	cmp	r3, #4
 8006ca6:	bf08      	it	eq
 8006ca8:	1aad      	subeq	r5, r5, r2
 8006caa:	68a3      	ldr	r3, [r4, #8]
 8006cac:	6922      	ldr	r2, [r4, #16]
 8006cae:	bf0c      	ite	eq
 8006cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cb4:	2500      	movne	r5, #0
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	bfc4      	itt	gt
 8006cba:	1a9b      	subgt	r3, r3, r2
 8006cbc:	18ed      	addgt	r5, r5, r3
 8006cbe:	f04f 0900 	mov.w	r9, #0
 8006cc2:	341a      	adds	r4, #26
 8006cc4:	454d      	cmp	r5, r9
 8006cc6:	d11a      	bne.n	8006cfe <_printf_common+0xd6>
 8006cc8:	2000      	movs	r0, #0
 8006cca:	e008      	b.n	8006cde <_printf_common+0xb6>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	4652      	mov	r2, sl
 8006cd0:	4639      	mov	r1, r7
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	47c0      	blx	r8
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	d103      	bne.n	8006ce2 <_printf_common+0xba>
 8006cda:	f04f 30ff 	mov.w	r0, #4294967295
 8006cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce2:	3501      	adds	r5, #1
 8006ce4:	e7c3      	b.n	8006c6e <_printf_common+0x46>
 8006ce6:	18e1      	adds	r1, r4, r3
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	2030      	movs	r0, #48	; 0x30
 8006cec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cf0:	4422      	add	r2, r4
 8006cf2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cf6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cfa:	3302      	adds	r3, #2
 8006cfc:	e7c5      	b.n	8006c8a <_printf_common+0x62>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	4622      	mov	r2, r4
 8006d02:	4639      	mov	r1, r7
 8006d04:	4630      	mov	r0, r6
 8006d06:	47c0      	blx	r8
 8006d08:	3001      	adds	r0, #1
 8006d0a:	d0e6      	beq.n	8006cda <_printf_common+0xb2>
 8006d0c:	f109 0901 	add.w	r9, r9, #1
 8006d10:	e7d8      	b.n	8006cc4 <_printf_common+0x9c>
	...

08006d14 <_printf_i>:
 8006d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	7e09      	ldrb	r1, [r1, #24]
 8006d20:	b085      	sub	sp, #20
 8006d22:	296e      	cmp	r1, #110	; 0x6e
 8006d24:	4617      	mov	r7, r2
 8006d26:	4606      	mov	r6, r0
 8006d28:	4698      	mov	r8, r3
 8006d2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d2c:	f000 80b3 	beq.w	8006e96 <_printf_i+0x182>
 8006d30:	d822      	bhi.n	8006d78 <_printf_i+0x64>
 8006d32:	2963      	cmp	r1, #99	; 0x63
 8006d34:	d036      	beq.n	8006da4 <_printf_i+0x90>
 8006d36:	d80a      	bhi.n	8006d4e <_printf_i+0x3a>
 8006d38:	2900      	cmp	r1, #0
 8006d3a:	f000 80b9 	beq.w	8006eb0 <_printf_i+0x19c>
 8006d3e:	2958      	cmp	r1, #88	; 0x58
 8006d40:	f000 8083 	beq.w	8006e4a <_printf_i+0x136>
 8006d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006d4c:	e032      	b.n	8006db4 <_printf_i+0xa0>
 8006d4e:	2964      	cmp	r1, #100	; 0x64
 8006d50:	d001      	beq.n	8006d56 <_printf_i+0x42>
 8006d52:	2969      	cmp	r1, #105	; 0x69
 8006d54:	d1f6      	bne.n	8006d44 <_printf_i+0x30>
 8006d56:	6820      	ldr	r0, [r4, #0]
 8006d58:	6813      	ldr	r3, [r2, #0]
 8006d5a:	0605      	lsls	r5, r0, #24
 8006d5c:	f103 0104 	add.w	r1, r3, #4
 8006d60:	d52a      	bpl.n	8006db8 <_printf_i+0xa4>
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6011      	str	r1, [r2, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	da03      	bge.n	8006d72 <_printf_i+0x5e>
 8006d6a:	222d      	movs	r2, #45	; 0x2d
 8006d6c:	425b      	negs	r3, r3
 8006d6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006d72:	486f      	ldr	r0, [pc, #444]	; (8006f30 <_printf_i+0x21c>)
 8006d74:	220a      	movs	r2, #10
 8006d76:	e039      	b.n	8006dec <_printf_i+0xd8>
 8006d78:	2973      	cmp	r1, #115	; 0x73
 8006d7a:	f000 809d 	beq.w	8006eb8 <_printf_i+0x1a4>
 8006d7e:	d808      	bhi.n	8006d92 <_printf_i+0x7e>
 8006d80:	296f      	cmp	r1, #111	; 0x6f
 8006d82:	d020      	beq.n	8006dc6 <_printf_i+0xb2>
 8006d84:	2970      	cmp	r1, #112	; 0x70
 8006d86:	d1dd      	bne.n	8006d44 <_printf_i+0x30>
 8006d88:	6823      	ldr	r3, [r4, #0]
 8006d8a:	f043 0320 	orr.w	r3, r3, #32
 8006d8e:	6023      	str	r3, [r4, #0]
 8006d90:	e003      	b.n	8006d9a <_printf_i+0x86>
 8006d92:	2975      	cmp	r1, #117	; 0x75
 8006d94:	d017      	beq.n	8006dc6 <_printf_i+0xb2>
 8006d96:	2978      	cmp	r1, #120	; 0x78
 8006d98:	d1d4      	bne.n	8006d44 <_printf_i+0x30>
 8006d9a:	2378      	movs	r3, #120	; 0x78
 8006d9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006da0:	4864      	ldr	r0, [pc, #400]	; (8006f34 <_printf_i+0x220>)
 8006da2:	e055      	b.n	8006e50 <_printf_i+0x13c>
 8006da4:	6813      	ldr	r3, [r2, #0]
 8006da6:	1d19      	adds	r1, r3, #4
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6011      	str	r1, [r2, #0]
 8006dac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006db0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006db4:	2301      	movs	r3, #1
 8006db6:	e08c      	b.n	8006ed2 <_printf_i+0x1be>
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6011      	str	r1, [r2, #0]
 8006dbc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006dc0:	bf18      	it	ne
 8006dc2:	b21b      	sxthne	r3, r3
 8006dc4:	e7cf      	b.n	8006d66 <_printf_i+0x52>
 8006dc6:	6813      	ldr	r3, [r2, #0]
 8006dc8:	6825      	ldr	r5, [r4, #0]
 8006dca:	1d18      	adds	r0, r3, #4
 8006dcc:	6010      	str	r0, [r2, #0]
 8006dce:	0628      	lsls	r0, r5, #24
 8006dd0:	d501      	bpl.n	8006dd6 <_printf_i+0xc2>
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	e002      	b.n	8006ddc <_printf_i+0xc8>
 8006dd6:	0668      	lsls	r0, r5, #25
 8006dd8:	d5fb      	bpl.n	8006dd2 <_printf_i+0xbe>
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	4854      	ldr	r0, [pc, #336]	; (8006f30 <_printf_i+0x21c>)
 8006dde:	296f      	cmp	r1, #111	; 0x6f
 8006de0:	bf14      	ite	ne
 8006de2:	220a      	movne	r2, #10
 8006de4:	2208      	moveq	r2, #8
 8006de6:	2100      	movs	r1, #0
 8006de8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006dec:	6865      	ldr	r5, [r4, #4]
 8006dee:	60a5      	str	r5, [r4, #8]
 8006df0:	2d00      	cmp	r5, #0
 8006df2:	f2c0 8095 	blt.w	8006f20 <_printf_i+0x20c>
 8006df6:	6821      	ldr	r1, [r4, #0]
 8006df8:	f021 0104 	bic.w	r1, r1, #4
 8006dfc:	6021      	str	r1, [r4, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d13d      	bne.n	8006e7e <_printf_i+0x16a>
 8006e02:	2d00      	cmp	r5, #0
 8006e04:	f040 808e 	bne.w	8006f24 <_printf_i+0x210>
 8006e08:	4665      	mov	r5, ip
 8006e0a:	2a08      	cmp	r2, #8
 8006e0c:	d10b      	bne.n	8006e26 <_printf_i+0x112>
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	07db      	lsls	r3, r3, #31
 8006e12:	d508      	bpl.n	8006e26 <_printf_i+0x112>
 8006e14:	6923      	ldr	r3, [r4, #16]
 8006e16:	6862      	ldr	r2, [r4, #4]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	bfde      	ittt	le
 8006e1c:	2330      	movle	r3, #48	; 0x30
 8006e1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e22:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e26:	ebac 0305 	sub.w	r3, ip, r5
 8006e2a:	6123      	str	r3, [r4, #16]
 8006e2c:	f8cd 8000 	str.w	r8, [sp]
 8006e30:	463b      	mov	r3, r7
 8006e32:	aa03      	add	r2, sp, #12
 8006e34:	4621      	mov	r1, r4
 8006e36:	4630      	mov	r0, r6
 8006e38:	f7ff fef6 	bl	8006c28 <_printf_common>
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	d14d      	bne.n	8006edc <_printf_i+0x1c8>
 8006e40:	f04f 30ff 	mov.w	r0, #4294967295
 8006e44:	b005      	add	sp, #20
 8006e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e4a:	4839      	ldr	r0, [pc, #228]	; (8006f30 <_printf_i+0x21c>)
 8006e4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006e50:	6813      	ldr	r3, [r2, #0]
 8006e52:	6821      	ldr	r1, [r4, #0]
 8006e54:	1d1d      	adds	r5, r3, #4
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6015      	str	r5, [r2, #0]
 8006e5a:	060a      	lsls	r2, r1, #24
 8006e5c:	d50b      	bpl.n	8006e76 <_printf_i+0x162>
 8006e5e:	07ca      	lsls	r2, r1, #31
 8006e60:	bf44      	itt	mi
 8006e62:	f041 0120 	orrmi.w	r1, r1, #32
 8006e66:	6021      	strmi	r1, [r4, #0]
 8006e68:	b91b      	cbnz	r3, 8006e72 <_printf_i+0x15e>
 8006e6a:	6822      	ldr	r2, [r4, #0]
 8006e6c:	f022 0220 	bic.w	r2, r2, #32
 8006e70:	6022      	str	r2, [r4, #0]
 8006e72:	2210      	movs	r2, #16
 8006e74:	e7b7      	b.n	8006de6 <_printf_i+0xd2>
 8006e76:	064d      	lsls	r5, r1, #25
 8006e78:	bf48      	it	mi
 8006e7a:	b29b      	uxthmi	r3, r3
 8006e7c:	e7ef      	b.n	8006e5e <_printf_i+0x14a>
 8006e7e:	4665      	mov	r5, ip
 8006e80:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e84:	fb02 3311 	mls	r3, r2, r1, r3
 8006e88:	5cc3      	ldrb	r3, [r0, r3]
 8006e8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006e8e:	460b      	mov	r3, r1
 8006e90:	2900      	cmp	r1, #0
 8006e92:	d1f5      	bne.n	8006e80 <_printf_i+0x16c>
 8006e94:	e7b9      	b.n	8006e0a <_printf_i+0xf6>
 8006e96:	6813      	ldr	r3, [r2, #0]
 8006e98:	6825      	ldr	r5, [r4, #0]
 8006e9a:	6961      	ldr	r1, [r4, #20]
 8006e9c:	1d18      	adds	r0, r3, #4
 8006e9e:	6010      	str	r0, [r2, #0]
 8006ea0:	0628      	lsls	r0, r5, #24
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	d501      	bpl.n	8006eaa <_printf_i+0x196>
 8006ea6:	6019      	str	r1, [r3, #0]
 8006ea8:	e002      	b.n	8006eb0 <_printf_i+0x19c>
 8006eaa:	066a      	lsls	r2, r5, #25
 8006eac:	d5fb      	bpl.n	8006ea6 <_printf_i+0x192>
 8006eae:	8019      	strh	r1, [r3, #0]
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	6123      	str	r3, [r4, #16]
 8006eb4:	4665      	mov	r5, ip
 8006eb6:	e7b9      	b.n	8006e2c <_printf_i+0x118>
 8006eb8:	6813      	ldr	r3, [r2, #0]
 8006eba:	1d19      	adds	r1, r3, #4
 8006ebc:	6011      	str	r1, [r2, #0]
 8006ebe:	681d      	ldr	r5, [r3, #0]
 8006ec0:	6862      	ldr	r2, [r4, #4]
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	f7f9 f993 	bl	80001f0 <memchr>
 8006eca:	b108      	cbz	r0, 8006ed0 <_printf_i+0x1bc>
 8006ecc:	1b40      	subs	r0, r0, r5
 8006ece:	6060      	str	r0, [r4, #4]
 8006ed0:	6863      	ldr	r3, [r4, #4]
 8006ed2:	6123      	str	r3, [r4, #16]
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eda:	e7a7      	b.n	8006e2c <_printf_i+0x118>
 8006edc:	6923      	ldr	r3, [r4, #16]
 8006ede:	462a      	mov	r2, r5
 8006ee0:	4639      	mov	r1, r7
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	47c0      	blx	r8
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	d0aa      	beq.n	8006e40 <_printf_i+0x12c>
 8006eea:	6823      	ldr	r3, [r4, #0]
 8006eec:	079b      	lsls	r3, r3, #30
 8006eee:	d413      	bmi.n	8006f18 <_printf_i+0x204>
 8006ef0:	68e0      	ldr	r0, [r4, #12]
 8006ef2:	9b03      	ldr	r3, [sp, #12]
 8006ef4:	4298      	cmp	r0, r3
 8006ef6:	bfb8      	it	lt
 8006ef8:	4618      	movlt	r0, r3
 8006efa:	e7a3      	b.n	8006e44 <_printf_i+0x130>
 8006efc:	2301      	movs	r3, #1
 8006efe:	464a      	mov	r2, r9
 8006f00:	4639      	mov	r1, r7
 8006f02:	4630      	mov	r0, r6
 8006f04:	47c0      	blx	r8
 8006f06:	3001      	adds	r0, #1
 8006f08:	d09a      	beq.n	8006e40 <_printf_i+0x12c>
 8006f0a:	3501      	adds	r5, #1
 8006f0c:	68e3      	ldr	r3, [r4, #12]
 8006f0e:	9a03      	ldr	r2, [sp, #12]
 8006f10:	1a9b      	subs	r3, r3, r2
 8006f12:	42ab      	cmp	r3, r5
 8006f14:	dcf2      	bgt.n	8006efc <_printf_i+0x1e8>
 8006f16:	e7eb      	b.n	8006ef0 <_printf_i+0x1dc>
 8006f18:	2500      	movs	r5, #0
 8006f1a:	f104 0919 	add.w	r9, r4, #25
 8006f1e:	e7f5      	b.n	8006f0c <_printf_i+0x1f8>
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1ac      	bne.n	8006e7e <_printf_i+0x16a>
 8006f24:	7803      	ldrb	r3, [r0, #0]
 8006f26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f2e:	e76c      	b.n	8006e0a <_printf_i+0xf6>
 8006f30:	0800ac52 	.word	0x0800ac52
 8006f34:	0800ac63 	.word	0x0800ac63

08006f38 <_scanf_float>:
 8006f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3c:	469a      	mov	sl, r3
 8006f3e:	688b      	ldr	r3, [r1, #8]
 8006f40:	4616      	mov	r6, r2
 8006f42:	1e5a      	subs	r2, r3, #1
 8006f44:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006f48:	b087      	sub	sp, #28
 8006f4a:	bf83      	ittte	hi
 8006f4c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006f50:	189b      	addhi	r3, r3, r2
 8006f52:	9301      	strhi	r3, [sp, #4]
 8006f54:	2300      	movls	r3, #0
 8006f56:	bf86      	itte	hi
 8006f58:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006f5c:	608b      	strhi	r3, [r1, #8]
 8006f5e:	9301      	strls	r3, [sp, #4]
 8006f60:	680b      	ldr	r3, [r1, #0]
 8006f62:	4688      	mov	r8, r1
 8006f64:	f04f 0b00 	mov.w	fp, #0
 8006f68:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006f6c:	f848 3b1c 	str.w	r3, [r8], #28
 8006f70:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006f74:	4607      	mov	r7, r0
 8006f76:	460c      	mov	r4, r1
 8006f78:	4645      	mov	r5, r8
 8006f7a:	465a      	mov	r2, fp
 8006f7c:	46d9      	mov	r9, fp
 8006f7e:	f8cd b008 	str.w	fp, [sp, #8]
 8006f82:	68a1      	ldr	r1, [r4, #8]
 8006f84:	b181      	cbz	r1, 8006fa8 <_scanf_float+0x70>
 8006f86:	6833      	ldr	r3, [r6, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	2b49      	cmp	r3, #73	; 0x49
 8006f8c:	d071      	beq.n	8007072 <_scanf_float+0x13a>
 8006f8e:	d84d      	bhi.n	800702c <_scanf_float+0xf4>
 8006f90:	2b39      	cmp	r3, #57	; 0x39
 8006f92:	d840      	bhi.n	8007016 <_scanf_float+0xde>
 8006f94:	2b31      	cmp	r3, #49	; 0x31
 8006f96:	f080 8088 	bcs.w	80070aa <_scanf_float+0x172>
 8006f9a:	2b2d      	cmp	r3, #45	; 0x2d
 8006f9c:	f000 8090 	beq.w	80070c0 <_scanf_float+0x188>
 8006fa0:	d815      	bhi.n	8006fce <_scanf_float+0x96>
 8006fa2:	2b2b      	cmp	r3, #43	; 0x2b
 8006fa4:	f000 808c 	beq.w	80070c0 <_scanf_float+0x188>
 8006fa8:	f1b9 0f00 	cmp.w	r9, #0
 8006fac:	d003      	beq.n	8006fb6 <_scanf_float+0x7e>
 8006fae:	6823      	ldr	r3, [r4, #0]
 8006fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	3a01      	subs	r2, #1
 8006fb8:	2a01      	cmp	r2, #1
 8006fba:	f200 80ea 	bhi.w	8007192 <_scanf_float+0x25a>
 8006fbe:	4545      	cmp	r5, r8
 8006fc0:	f200 80dc 	bhi.w	800717c <_scanf_float+0x244>
 8006fc4:	2601      	movs	r6, #1
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	b007      	add	sp, #28
 8006fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fce:	2b2e      	cmp	r3, #46	; 0x2e
 8006fd0:	f000 809f 	beq.w	8007112 <_scanf_float+0x1da>
 8006fd4:	2b30      	cmp	r3, #48	; 0x30
 8006fd6:	d1e7      	bne.n	8006fa8 <_scanf_float+0x70>
 8006fd8:	6820      	ldr	r0, [r4, #0]
 8006fda:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006fde:	d064      	beq.n	80070aa <_scanf_float+0x172>
 8006fe0:	9b01      	ldr	r3, [sp, #4]
 8006fe2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006fe6:	6020      	str	r0, [r4, #0]
 8006fe8:	f109 0901 	add.w	r9, r9, #1
 8006fec:	b11b      	cbz	r3, 8006ff6 <_scanf_float+0xbe>
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	3101      	adds	r1, #1
 8006ff2:	9301      	str	r3, [sp, #4]
 8006ff4:	60a1      	str	r1, [r4, #8]
 8006ff6:	68a3      	ldr	r3, [r4, #8]
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	60a3      	str	r3, [r4, #8]
 8006ffc:	6923      	ldr	r3, [r4, #16]
 8006ffe:	3301      	adds	r3, #1
 8007000:	6123      	str	r3, [r4, #16]
 8007002:	6873      	ldr	r3, [r6, #4]
 8007004:	3b01      	subs	r3, #1
 8007006:	2b00      	cmp	r3, #0
 8007008:	6073      	str	r3, [r6, #4]
 800700a:	f340 80ac 	ble.w	8007166 <_scanf_float+0x22e>
 800700e:	6833      	ldr	r3, [r6, #0]
 8007010:	3301      	adds	r3, #1
 8007012:	6033      	str	r3, [r6, #0]
 8007014:	e7b5      	b.n	8006f82 <_scanf_float+0x4a>
 8007016:	2b45      	cmp	r3, #69	; 0x45
 8007018:	f000 8085 	beq.w	8007126 <_scanf_float+0x1ee>
 800701c:	2b46      	cmp	r3, #70	; 0x46
 800701e:	d06a      	beq.n	80070f6 <_scanf_float+0x1be>
 8007020:	2b41      	cmp	r3, #65	; 0x41
 8007022:	d1c1      	bne.n	8006fa8 <_scanf_float+0x70>
 8007024:	2a01      	cmp	r2, #1
 8007026:	d1bf      	bne.n	8006fa8 <_scanf_float+0x70>
 8007028:	2202      	movs	r2, #2
 800702a:	e046      	b.n	80070ba <_scanf_float+0x182>
 800702c:	2b65      	cmp	r3, #101	; 0x65
 800702e:	d07a      	beq.n	8007126 <_scanf_float+0x1ee>
 8007030:	d818      	bhi.n	8007064 <_scanf_float+0x12c>
 8007032:	2b54      	cmp	r3, #84	; 0x54
 8007034:	d066      	beq.n	8007104 <_scanf_float+0x1cc>
 8007036:	d811      	bhi.n	800705c <_scanf_float+0x124>
 8007038:	2b4e      	cmp	r3, #78	; 0x4e
 800703a:	d1b5      	bne.n	8006fa8 <_scanf_float+0x70>
 800703c:	2a00      	cmp	r2, #0
 800703e:	d146      	bne.n	80070ce <_scanf_float+0x196>
 8007040:	f1b9 0f00 	cmp.w	r9, #0
 8007044:	d145      	bne.n	80070d2 <_scanf_float+0x19a>
 8007046:	6821      	ldr	r1, [r4, #0]
 8007048:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800704c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007050:	d13f      	bne.n	80070d2 <_scanf_float+0x19a>
 8007052:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007056:	6021      	str	r1, [r4, #0]
 8007058:	2201      	movs	r2, #1
 800705a:	e02e      	b.n	80070ba <_scanf_float+0x182>
 800705c:	2b59      	cmp	r3, #89	; 0x59
 800705e:	d01e      	beq.n	800709e <_scanf_float+0x166>
 8007060:	2b61      	cmp	r3, #97	; 0x61
 8007062:	e7de      	b.n	8007022 <_scanf_float+0xea>
 8007064:	2b6e      	cmp	r3, #110	; 0x6e
 8007066:	d0e9      	beq.n	800703c <_scanf_float+0x104>
 8007068:	d815      	bhi.n	8007096 <_scanf_float+0x15e>
 800706a:	2b66      	cmp	r3, #102	; 0x66
 800706c:	d043      	beq.n	80070f6 <_scanf_float+0x1be>
 800706e:	2b69      	cmp	r3, #105	; 0x69
 8007070:	d19a      	bne.n	8006fa8 <_scanf_float+0x70>
 8007072:	f1bb 0f00 	cmp.w	fp, #0
 8007076:	d138      	bne.n	80070ea <_scanf_float+0x1b2>
 8007078:	f1b9 0f00 	cmp.w	r9, #0
 800707c:	d197      	bne.n	8006fae <_scanf_float+0x76>
 800707e:	6821      	ldr	r1, [r4, #0]
 8007080:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007084:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007088:	d195      	bne.n	8006fb6 <_scanf_float+0x7e>
 800708a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800708e:	6021      	str	r1, [r4, #0]
 8007090:	f04f 0b01 	mov.w	fp, #1
 8007094:	e011      	b.n	80070ba <_scanf_float+0x182>
 8007096:	2b74      	cmp	r3, #116	; 0x74
 8007098:	d034      	beq.n	8007104 <_scanf_float+0x1cc>
 800709a:	2b79      	cmp	r3, #121	; 0x79
 800709c:	d184      	bne.n	8006fa8 <_scanf_float+0x70>
 800709e:	f1bb 0f07 	cmp.w	fp, #7
 80070a2:	d181      	bne.n	8006fa8 <_scanf_float+0x70>
 80070a4:	f04f 0b08 	mov.w	fp, #8
 80070a8:	e007      	b.n	80070ba <_scanf_float+0x182>
 80070aa:	eb12 0f0b 	cmn.w	r2, fp
 80070ae:	f47f af7b 	bne.w	8006fa8 <_scanf_float+0x70>
 80070b2:	6821      	ldr	r1, [r4, #0]
 80070b4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80070b8:	6021      	str	r1, [r4, #0]
 80070ba:	702b      	strb	r3, [r5, #0]
 80070bc:	3501      	adds	r5, #1
 80070be:	e79a      	b.n	8006ff6 <_scanf_float+0xbe>
 80070c0:	6821      	ldr	r1, [r4, #0]
 80070c2:	0608      	lsls	r0, r1, #24
 80070c4:	f57f af70 	bpl.w	8006fa8 <_scanf_float+0x70>
 80070c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80070cc:	e7f4      	b.n	80070b8 <_scanf_float+0x180>
 80070ce:	2a02      	cmp	r2, #2
 80070d0:	d047      	beq.n	8007162 <_scanf_float+0x22a>
 80070d2:	f1bb 0f01 	cmp.w	fp, #1
 80070d6:	d003      	beq.n	80070e0 <_scanf_float+0x1a8>
 80070d8:	f1bb 0f04 	cmp.w	fp, #4
 80070dc:	f47f af64 	bne.w	8006fa8 <_scanf_float+0x70>
 80070e0:	f10b 0b01 	add.w	fp, fp, #1
 80070e4:	fa5f fb8b 	uxtb.w	fp, fp
 80070e8:	e7e7      	b.n	80070ba <_scanf_float+0x182>
 80070ea:	f1bb 0f03 	cmp.w	fp, #3
 80070ee:	d0f7      	beq.n	80070e0 <_scanf_float+0x1a8>
 80070f0:	f1bb 0f05 	cmp.w	fp, #5
 80070f4:	e7f2      	b.n	80070dc <_scanf_float+0x1a4>
 80070f6:	f1bb 0f02 	cmp.w	fp, #2
 80070fa:	f47f af55 	bne.w	8006fa8 <_scanf_float+0x70>
 80070fe:	f04f 0b03 	mov.w	fp, #3
 8007102:	e7da      	b.n	80070ba <_scanf_float+0x182>
 8007104:	f1bb 0f06 	cmp.w	fp, #6
 8007108:	f47f af4e 	bne.w	8006fa8 <_scanf_float+0x70>
 800710c:	f04f 0b07 	mov.w	fp, #7
 8007110:	e7d3      	b.n	80070ba <_scanf_float+0x182>
 8007112:	6821      	ldr	r1, [r4, #0]
 8007114:	0588      	lsls	r0, r1, #22
 8007116:	f57f af47 	bpl.w	8006fa8 <_scanf_float+0x70>
 800711a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800711e:	6021      	str	r1, [r4, #0]
 8007120:	f8cd 9008 	str.w	r9, [sp, #8]
 8007124:	e7c9      	b.n	80070ba <_scanf_float+0x182>
 8007126:	6821      	ldr	r1, [r4, #0]
 8007128:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800712c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007130:	d006      	beq.n	8007140 <_scanf_float+0x208>
 8007132:	0548      	lsls	r0, r1, #21
 8007134:	f57f af38 	bpl.w	8006fa8 <_scanf_float+0x70>
 8007138:	f1b9 0f00 	cmp.w	r9, #0
 800713c:	f43f af3b 	beq.w	8006fb6 <_scanf_float+0x7e>
 8007140:	0588      	lsls	r0, r1, #22
 8007142:	bf58      	it	pl
 8007144:	9802      	ldrpl	r0, [sp, #8]
 8007146:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800714a:	bf58      	it	pl
 800714c:	eba9 0000 	subpl.w	r0, r9, r0
 8007150:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8007154:	bf58      	it	pl
 8007156:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800715a:	6021      	str	r1, [r4, #0]
 800715c:	f04f 0900 	mov.w	r9, #0
 8007160:	e7ab      	b.n	80070ba <_scanf_float+0x182>
 8007162:	2203      	movs	r2, #3
 8007164:	e7a9      	b.n	80070ba <_scanf_float+0x182>
 8007166:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800716a:	9205      	str	r2, [sp, #20]
 800716c:	4631      	mov	r1, r6
 800716e:	4638      	mov	r0, r7
 8007170:	4798      	blx	r3
 8007172:	9a05      	ldr	r2, [sp, #20]
 8007174:	2800      	cmp	r0, #0
 8007176:	f43f af04 	beq.w	8006f82 <_scanf_float+0x4a>
 800717a:	e715      	b.n	8006fa8 <_scanf_float+0x70>
 800717c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007180:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007184:	4632      	mov	r2, r6
 8007186:	4638      	mov	r0, r7
 8007188:	4798      	blx	r3
 800718a:	6923      	ldr	r3, [r4, #16]
 800718c:	3b01      	subs	r3, #1
 800718e:	6123      	str	r3, [r4, #16]
 8007190:	e715      	b.n	8006fbe <_scanf_float+0x86>
 8007192:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007196:	2b06      	cmp	r3, #6
 8007198:	d80a      	bhi.n	80071b0 <_scanf_float+0x278>
 800719a:	f1bb 0f02 	cmp.w	fp, #2
 800719e:	d968      	bls.n	8007272 <_scanf_float+0x33a>
 80071a0:	f1ab 0b03 	sub.w	fp, fp, #3
 80071a4:	fa5f fb8b 	uxtb.w	fp, fp
 80071a8:	eba5 0b0b 	sub.w	fp, r5, fp
 80071ac:	455d      	cmp	r5, fp
 80071ae:	d14b      	bne.n	8007248 <_scanf_float+0x310>
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	05da      	lsls	r2, r3, #23
 80071b4:	d51f      	bpl.n	80071f6 <_scanf_float+0x2be>
 80071b6:	055b      	lsls	r3, r3, #21
 80071b8:	d468      	bmi.n	800728c <_scanf_float+0x354>
 80071ba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80071be:	6923      	ldr	r3, [r4, #16]
 80071c0:	2965      	cmp	r1, #101	; 0x65
 80071c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80071c6:	f105 3bff 	add.w	fp, r5, #4294967295
 80071ca:	6123      	str	r3, [r4, #16]
 80071cc:	d00d      	beq.n	80071ea <_scanf_float+0x2b2>
 80071ce:	2945      	cmp	r1, #69	; 0x45
 80071d0:	d00b      	beq.n	80071ea <_scanf_float+0x2b2>
 80071d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071d6:	4632      	mov	r2, r6
 80071d8:	4638      	mov	r0, r7
 80071da:	4798      	blx	r3
 80071dc:	6923      	ldr	r3, [r4, #16]
 80071de:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	f1a5 0b02 	sub.w	fp, r5, #2
 80071e8:	6123      	str	r3, [r4, #16]
 80071ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071ee:	4632      	mov	r2, r6
 80071f0:	4638      	mov	r0, r7
 80071f2:	4798      	blx	r3
 80071f4:	465d      	mov	r5, fp
 80071f6:	6826      	ldr	r6, [r4, #0]
 80071f8:	f016 0610 	ands.w	r6, r6, #16
 80071fc:	d17a      	bne.n	80072f4 <_scanf_float+0x3bc>
 80071fe:	702e      	strb	r6, [r5, #0]
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800720a:	d142      	bne.n	8007292 <_scanf_float+0x35a>
 800720c:	9b02      	ldr	r3, [sp, #8]
 800720e:	eba9 0303 	sub.w	r3, r9, r3
 8007212:	425a      	negs	r2, r3
 8007214:	2b00      	cmp	r3, #0
 8007216:	d149      	bne.n	80072ac <_scanf_float+0x374>
 8007218:	2200      	movs	r2, #0
 800721a:	4641      	mov	r1, r8
 800721c:	4638      	mov	r0, r7
 800721e:	f000 ffef 	bl	8008200 <_strtod_r>
 8007222:	6825      	ldr	r5, [r4, #0]
 8007224:	f8da 3000 	ldr.w	r3, [sl]
 8007228:	f015 0f02 	tst.w	r5, #2
 800722c:	f103 0204 	add.w	r2, r3, #4
 8007230:	ec59 8b10 	vmov	r8, r9, d0
 8007234:	f8ca 2000 	str.w	r2, [sl]
 8007238:	d043      	beq.n	80072c2 <_scanf_float+0x38a>
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	e9c3 8900 	strd	r8, r9, [r3]
 8007240:	68e3      	ldr	r3, [r4, #12]
 8007242:	3301      	adds	r3, #1
 8007244:	60e3      	str	r3, [r4, #12]
 8007246:	e6be      	b.n	8006fc6 <_scanf_float+0x8e>
 8007248:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800724c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007250:	4632      	mov	r2, r6
 8007252:	4638      	mov	r0, r7
 8007254:	4798      	blx	r3
 8007256:	6923      	ldr	r3, [r4, #16]
 8007258:	3b01      	subs	r3, #1
 800725a:	6123      	str	r3, [r4, #16]
 800725c:	e7a6      	b.n	80071ac <_scanf_float+0x274>
 800725e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007262:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007266:	4632      	mov	r2, r6
 8007268:	4638      	mov	r0, r7
 800726a:	4798      	blx	r3
 800726c:	6923      	ldr	r3, [r4, #16]
 800726e:	3b01      	subs	r3, #1
 8007270:	6123      	str	r3, [r4, #16]
 8007272:	4545      	cmp	r5, r8
 8007274:	d8f3      	bhi.n	800725e <_scanf_float+0x326>
 8007276:	e6a5      	b.n	8006fc4 <_scanf_float+0x8c>
 8007278:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800727c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007280:	4632      	mov	r2, r6
 8007282:	4638      	mov	r0, r7
 8007284:	4798      	blx	r3
 8007286:	6923      	ldr	r3, [r4, #16]
 8007288:	3b01      	subs	r3, #1
 800728a:	6123      	str	r3, [r4, #16]
 800728c:	4545      	cmp	r5, r8
 800728e:	d8f3      	bhi.n	8007278 <_scanf_float+0x340>
 8007290:	e698      	b.n	8006fc4 <_scanf_float+0x8c>
 8007292:	9b03      	ldr	r3, [sp, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d0bf      	beq.n	8007218 <_scanf_float+0x2e0>
 8007298:	9904      	ldr	r1, [sp, #16]
 800729a:	230a      	movs	r3, #10
 800729c:	4632      	mov	r2, r6
 800729e:	3101      	adds	r1, #1
 80072a0:	4638      	mov	r0, r7
 80072a2:	f001 f839 	bl	8008318 <_strtol_r>
 80072a6:	9b03      	ldr	r3, [sp, #12]
 80072a8:	9d04      	ldr	r5, [sp, #16]
 80072aa:	1ac2      	subs	r2, r0, r3
 80072ac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80072b0:	429d      	cmp	r5, r3
 80072b2:	bf28      	it	cs
 80072b4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80072b8:	490f      	ldr	r1, [pc, #60]	; (80072f8 <_scanf_float+0x3c0>)
 80072ba:	4628      	mov	r0, r5
 80072bc:	f000 f95e 	bl	800757c <siprintf>
 80072c0:	e7aa      	b.n	8007218 <_scanf_float+0x2e0>
 80072c2:	f015 0504 	ands.w	r5, r5, #4
 80072c6:	d1b8      	bne.n	800723a <_scanf_float+0x302>
 80072c8:	681f      	ldr	r7, [r3, #0]
 80072ca:	ee10 2a10 	vmov	r2, s0
 80072ce:	464b      	mov	r3, r9
 80072d0:	ee10 0a10 	vmov	r0, s0
 80072d4:	4649      	mov	r1, r9
 80072d6:	f7f9 fc31 	bl	8000b3c <__aeabi_dcmpun>
 80072da:	b128      	cbz	r0, 80072e8 <_scanf_float+0x3b0>
 80072dc:	4628      	mov	r0, r5
 80072de:	f000 f947 	bl	8007570 <nanf>
 80072e2:	ed87 0a00 	vstr	s0, [r7]
 80072e6:	e7ab      	b.n	8007240 <_scanf_float+0x308>
 80072e8:	4640      	mov	r0, r8
 80072ea:	4649      	mov	r1, r9
 80072ec:	f7f9 fc84 	bl	8000bf8 <__aeabi_d2f>
 80072f0:	6038      	str	r0, [r7, #0]
 80072f2:	e7a5      	b.n	8007240 <_scanf_float+0x308>
 80072f4:	2600      	movs	r6, #0
 80072f6:	e666      	b.n	8006fc6 <_scanf_float+0x8e>
 80072f8:	0800ac74 	.word	0x0800ac74

080072fc <iprintf>:
 80072fc:	b40f      	push	{r0, r1, r2, r3}
 80072fe:	4b0a      	ldr	r3, [pc, #40]	; (8007328 <iprintf+0x2c>)
 8007300:	b513      	push	{r0, r1, r4, lr}
 8007302:	681c      	ldr	r4, [r3, #0]
 8007304:	b124      	cbz	r4, 8007310 <iprintf+0x14>
 8007306:	69a3      	ldr	r3, [r4, #24]
 8007308:	b913      	cbnz	r3, 8007310 <iprintf+0x14>
 800730a:	4620      	mov	r0, r4
 800730c:	f002 f80c 	bl	8009328 <__sinit>
 8007310:	ab05      	add	r3, sp, #20
 8007312:	9a04      	ldr	r2, [sp, #16]
 8007314:	68a1      	ldr	r1, [r4, #8]
 8007316:	9301      	str	r3, [sp, #4]
 8007318:	4620      	mov	r0, r4
 800731a:	f003 f9bd 	bl	800a698 <_vfiprintf_r>
 800731e:	b002      	add	sp, #8
 8007320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007324:	b004      	add	sp, #16
 8007326:	4770      	bx	lr
 8007328:	20000010 	.word	0x20000010

0800732c <_puts_r>:
 800732c:	b570      	push	{r4, r5, r6, lr}
 800732e:	460e      	mov	r6, r1
 8007330:	4605      	mov	r5, r0
 8007332:	b118      	cbz	r0, 800733c <_puts_r+0x10>
 8007334:	6983      	ldr	r3, [r0, #24]
 8007336:	b90b      	cbnz	r3, 800733c <_puts_r+0x10>
 8007338:	f001 fff6 	bl	8009328 <__sinit>
 800733c:	69ab      	ldr	r3, [r5, #24]
 800733e:	68ac      	ldr	r4, [r5, #8]
 8007340:	b913      	cbnz	r3, 8007348 <_puts_r+0x1c>
 8007342:	4628      	mov	r0, r5
 8007344:	f001 fff0 	bl	8009328 <__sinit>
 8007348:	4b23      	ldr	r3, [pc, #140]	; (80073d8 <_puts_r+0xac>)
 800734a:	429c      	cmp	r4, r3
 800734c:	d117      	bne.n	800737e <_puts_r+0x52>
 800734e:	686c      	ldr	r4, [r5, #4]
 8007350:	89a3      	ldrh	r3, [r4, #12]
 8007352:	071b      	lsls	r3, r3, #28
 8007354:	d51d      	bpl.n	8007392 <_puts_r+0x66>
 8007356:	6923      	ldr	r3, [r4, #16]
 8007358:	b1db      	cbz	r3, 8007392 <_puts_r+0x66>
 800735a:	3e01      	subs	r6, #1
 800735c:	68a3      	ldr	r3, [r4, #8]
 800735e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007362:	3b01      	subs	r3, #1
 8007364:	60a3      	str	r3, [r4, #8]
 8007366:	b9e9      	cbnz	r1, 80073a4 <_puts_r+0x78>
 8007368:	2b00      	cmp	r3, #0
 800736a:	da2e      	bge.n	80073ca <_puts_r+0x9e>
 800736c:	4622      	mov	r2, r4
 800736e:	210a      	movs	r1, #10
 8007370:	4628      	mov	r0, r5
 8007372:	f000 ffe3 	bl	800833c <__swbuf_r>
 8007376:	3001      	adds	r0, #1
 8007378:	d011      	beq.n	800739e <_puts_r+0x72>
 800737a:	200a      	movs	r0, #10
 800737c:	e011      	b.n	80073a2 <_puts_r+0x76>
 800737e:	4b17      	ldr	r3, [pc, #92]	; (80073dc <_puts_r+0xb0>)
 8007380:	429c      	cmp	r4, r3
 8007382:	d101      	bne.n	8007388 <_puts_r+0x5c>
 8007384:	68ac      	ldr	r4, [r5, #8]
 8007386:	e7e3      	b.n	8007350 <_puts_r+0x24>
 8007388:	4b15      	ldr	r3, [pc, #84]	; (80073e0 <_puts_r+0xb4>)
 800738a:	429c      	cmp	r4, r3
 800738c:	bf08      	it	eq
 800738e:	68ec      	ldreq	r4, [r5, #12]
 8007390:	e7de      	b.n	8007350 <_puts_r+0x24>
 8007392:	4621      	mov	r1, r4
 8007394:	4628      	mov	r0, r5
 8007396:	f001 f823 	bl	80083e0 <__swsetup_r>
 800739a:	2800      	cmp	r0, #0
 800739c:	d0dd      	beq.n	800735a <_puts_r+0x2e>
 800739e:	f04f 30ff 	mov.w	r0, #4294967295
 80073a2:	bd70      	pop	{r4, r5, r6, pc}
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	da04      	bge.n	80073b2 <_puts_r+0x86>
 80073a8:	69a2      	ldr	r2, [r4, #24]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	dc06      	bgt.n	80073bc <_puts_r+0x90>
 80073ae:	290a      	cmp	r1, #10
 80073b0:	d004      	beq.n	80073bc <_puts_r+0x90>
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	1c5a      	adds	r2, r3, #1
 80073b6:	6022      	str	r2, [r4, #0]
 80073b8:	7019      	strb	r1, [r3, #0]
 80073ba:	e7cf      	b.n	800735c <_puts_r+0x30>
 80073bc:	4622      	mov	r2, r4
 80073be:	4628      	mov	r0, r5
 80073c0:	f000 ffbc 	bl	800833c <__swbuf_r>
 80073c4:	3001      	adds	r0, #1
 80073c6:	d1c9      	bne.n	800735c <_puts_r+0x30>
 80073c8:	e7e9      	b.n	800739e <_puts_r+0x72>
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	200a      	movs	r0, #10
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	6022      	str	r2, [r4, #0]
 80073d2:	7018      	strb	r0, [r3, #0]
 80073d4:	e7e5      	b.n	80073a2 <_puts_r+0x76>
 80073d6:	bf00      	nop
 80073d8:	0800ad00 	.word	0x0800ad00
 80073dc:	0800ad20 	.word	0x0800ad20
 80073e0:	0800ace0 	.word	0x0800ace0

080073e4 <puts>:
 80073e4:	4b02      	ldr	r3, [pc, #8]	; (80073f0 <puts+0xc>)
 80073e6:	4601      	mov	r1, r0
 80073e8:	6818      	ldr	r0, [r3, #0]
 80073ea:	f7ff bf9f 	b.w	800732c <_puts_r>
 80073ee:	bf00      	nop
 80073f0:	20000010 	.word	0x20000010

080073f4 <_sbrk_r>:
 80073f4:	b538      	push	{r3, r4, r5, lr}
 80073f6:	4c06      	ldr	r4, [pc, #24]	; (8007410 <_sbrk_r+0x1c>)
 80073f8:	2300      	movs	r3, #0
 80073fa:	4605      	mov	r5, r0
 80073fc:	4608      	mov	r0, r1
 80073fe:	6023      	str	r3, [r4, #0]
 8007400:	f7fa fcc4 	bl	8001d8c <_sbrk>
 8007404:	1c43      	adds	r3, r0, #1
 8007406:	d102      	bne.n	800740e <_sbrk_r+0x1a>
 8007408:	6823      	ldr	r3, [r4, #0]
 800740a:	b103      	cbz	r3, 800740e <_sbrk_r+0x1a>
 800740c:	602b      	str	r3, [r5, #0]
 800740e:	bd38      	pop	{r3, r4, r5, pc}
 8007410:	20004d1c 	.word	0x20004d1c

08007414 <setvbuf>:
 8007414:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007418:	461d      	mov	r5, r3
 800741a:	4b51      	ldr	r3, [pc, #324]	; (8007560 <setvbuf+0x14c>)
 800741c:	681e      	ldr	r6, [r3, #0]
 800741e:	4604      	mov	r4, r0
 8007420:	460f      	mov	r7, r1
 8007422:	4690      	mov	r8, r2
 8007424:	b126      	cbz	r6, 8007430 <setvbuf+0x1c>
 8007426:	69b3      	ldr	r3, [r6, #24]
 8007428:	b913      	cbnz	r3, 8007430 <setvbuf+0x1c>
 800742a:	4630      	mov	r0, r6
 800742c:	f001 ff7c 	bl	8009328 <__sinit>
 8007430:	4b4c      	ldr	r3, [pc, #304]	; (8007564 <setvbuf+0x150>)
 8007432:	429c      	cmp	r4, r3
 8007434:	d152      	bne.n	80074dc <setvbuf+0xc8>
 8007436:	6874      	ldr	r4, [r6, #4]
 8007438:	f1b8 0f02 	cmp.w	r8, #2
 800743c:	d006      	beq.n	800744c <setvbuf+0x38>
 800743e:	f1b8 0f01 	cmp.w	r8, #1
 8007442:	f200 8089 	bhi.w	8007558 <setvbuf+0x144>
 8007446:	2d00      	cmp	r5, #0
 8007448:	f2c0 8086 	blt.w	8007558 <setvbuf+0x144>
 800744c:	4621      	mov	r1, r4
 800744e:	4630      	mov	r0, r6
 8007450:	f001 ff00 	bl	8009254 <_fflush_r>
 8007454:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007456:	b141      	cbz	r1, 800746a <setvbuf+0x56>
 8007458:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800745c:	4299      	cmp	r1, r3
 800745e:	d002      	beq.n	8007466 <setvbuf+0x52>
 8007460:	4630      	mov	r0, r6
 8007462:	f7ff f865 	bl	8006530 <_free_r>
 8007466:	2300      	movs	r3, #0
 8007468:	6363      	str	r3, [r4, #52]	; 0x34
 800746a:	2300      	movs	r3, #0
 800746c:	61a3      	str	r3, [r4, #24]
 800746e:	6063      	str	r3, [r4, #4]
 8007470:	89a3      	ldrh	r3, [r4, #12]
 8007472:	061b      	lsls	r3, r3, #24
 8007474:	d503      	bpl.n	800747e <setvbuf+0x6a>
 8007476:	6921      	ldr	r1, [r4, #16]
 8007478:	4630      	mov	r0, r6
 800747a:	f7ff f859 	bl	8006530 <_free_r>
 800747e:	89a3      	ldrh	r3, [r4, #12]
 8007480:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007484:	f023 0303 	bic.w	r3, r3, #3
 8007488:	f1b8 0f02 	cmp.w	r8, #2
 800748c:	81a3      	strh	r3, [r4, #12]
 800748e:	d05d      	beq.n	800754c <setvbuf+0x138>
 8007490:	ab01      	add	r3, sp, #4
 8007492:	466a      	mov	r2, sp
 8007494:	4621      	mov	r1, r4
 8007496:	4630      	mov	r0, r6
 8007498:	f002 fb0a 	bl	8009ab0 <__swhatbuf_r>
 800749c:	89a3      	ldrh	r3, [r4, #12]
 800749e:	4318      	orrs	r0, r3
 80074a0:	81a0      	strh	r0, [r4, #12]
 80074a2:	bb2d      	cbnz	r5, 80074f0 <setvbuf+0xdc>
 80074a4:	9d00      	ldr	r5, [sp, #0]
 80074a6:	4628      	mov	r0, r5
 80074a8:	f7ff f818 	bl	80064dc <malloc>
 80074ac:	4607      	mov	r7, r0
 80074ae:	2800      	cmp	r0, #0
 80074b0:	d14e      	bne.n	8007550 <setvbuf+0x13c>
 80074b2:	f8dd 9000 	ldr.w	r9, [sp]
 80074b6:	45a9      	cmp	r9, r5
 80074b8:	d13c      	bne.n	8007534 <setvbuf+0x120>
 80074ba:	f04f 30ff 	mov.w	r0, #4294967295
 80074be:	89a3      	ldrh	r3, [r4, #12]
 80074c0:	f043 0302 	orr.w	r3, r3, #2
 80074c4:	81a3      	strh	r3, [r4, #12]
 80074c6:	2300      	movs	r3, #0
 80074c8:	60a3      	str	r3, [r4, #8]
 80074ca:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80074ce:	6023      	str	r3, [r4, #0]
 80074d0:	6123      	str	r3, [r4, #16]
 80074d2:	2301      	movs	r3, #1
 80074d4:	6163      	str	r3, [r4, #20]
 80074d6:	b003      	add	sp, #12
 80074d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074dc:	4b22      	ldr	r3, [pc, #136]	; (8007568 <setvbuf+0x154>)
 80074de:	429c      	cmp	r4, r3
 80074e0:	d101      	bne.n	80074e6 <setvbuf+0xd2>
 80074e2:	68b4      	ldr	r4, [r6, #8]
 80074e4:	e7a8      	b.n	8007438 <setvbuf+0x24>
 80074e6:	4b21      	ldr	r3, [pc, #132]	; (800756c <setvbuf+0x158>)
 80074e8:	429c      	cmp	r4, r3
 80074ea:	bf08      	it	eq
 80074ec:	68f4      	ldreq	r4, [r6, #12]
 80074ee:	e7a3      	b.n	8007438 <setvbuf+0x24>
 80074f0:	2f00      	cmp	r7, #0
 80074f2:	d0d8      	beq.n	80074a6 <setvbuf+0x92>
 80074f4:	69b3      	ldr	r3, [r6, #24]
 80074f6:	b913      	cbnz	r3, 80074fe <setvbuf+0xea>
 80074f8:	4630      	mov	r0, r6
 80074fa:	f001 ff15 	bl	8009328 <__sinit>
 80074fe:	f1b8 0f01 	cmp.w	r8, #1
 8007502:	bf08      	it	eq
 8007504:	89a3      	ldrheq	r3, [r4, #12]
 8007506:	6027      	str	r7, [r4, #0]
 8007508:	bf04      	itt	eq
 800750a:	f043 0301 	orreq.w	r3, r3, #1
 800750e:	81a3      	strheq	r3, [r4, #12]
 8007510:	89a3      	ldrh	r3, [r4, #12]
 8007512:	f013 0008 	ands.w	r0, r3, #8
 8007516:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800751a:	d01b      	beq.n	8007554 <setvbuf+0x140>
 800751c:	f013 0001 	ands.w	r0, r3, #1
 8007520:	bf18      	it	ne
 8007522:	426d      	negne	r5, r5
 8007524:	f04f 0300 	mov.w	r3, #0
 8007528:	bf1d      	ittte	ne
 800752a:	60a3      	strne	r3, [r4, #8]
 800752c:	61a5      	strne	r5, [r4, #24]
 800752e:	4618      	movne	r0, r3
 8007530:	60a5      	streq	r5, [r4, #8]
 8007532:	e7d0      	b.n	80074d6 <setvbuf+0xc2>
 8007534:	4648      	mov	r0, r9
 8007536:	f7fe ffd1 	bl	80064dc <malloc>
 800753a:	4607      	mov	r7, r0
 800753c:	2800      	cmp	r0, #0
 800753e:	d0bc      	beq.n	80074ba <setvbuf+0xa6>
 8007540:	89a3      	ldrh	r3, [r4, #12]
 8007542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007546:	81a3      	strh	r3, [r4, #12]
 8007548:	464d      	mov	r5, r9
 800754a:	e7d3      	b.n	80074f4 <setvbuf+0xe0>
 800754c:	2000      	movs	r0, #0
 800754e:	e7b6      	b.n	80074be <setvbuf+0xaa>
 8007550:	46a9      	mov	r9, r5
 8007552:	e7f5      	b.n	8007540 <setvbuf+0x12c>
 8007554:	60a0      	str	r0, [r4, #8]
 8007556:	e7be      	b.n	80074d6 <setvbuf+0xc2>
 8007558:	f04f 30ff 	mov.w	r0, #4294967295
 800755c:	e7bb      	b.n	80074d6 <setvbuf+0xc2>
 800755e:	bf00      	nop
 8007560:	20000010 	.word	0x20000010
 8007564:	0800ad00 	.word	0x0800ad00
 8007568:	0800ad20 	.word	0x0800ad20
 800756c:	0800ace0 	.word	0x0800ace0

08007570 <nanf>:
 8007570:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007578 <nanf+0x8>
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	7fc00000 	.word	0x7fc00000

0800757c <siprintf>:
 800757c:	b40e      	push	{r1, r2, r3}
 800757e:	b500      	push	{lr}
 8007580:	b09c      	sub	sp, #112	; 0x70
 8007582:	ab1d      	add	r3, sp, #116	; 0x74
 8007584:	9002      	str	r0, [sp, #8]
 8007586:	9006      	str	r0, [sp, #24]
 8007588:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800758c:	4809      	ldr	r0, [pc, #36]	; (80075b4 <siprintf+0x38>)
 800758e:	9107      	str	r1, [sp, #28]
 8007590:	9104      	str	r1, [sp, #16]
 8007592:	4909      	ldr	r1, [pc, #36]	; (80075b8 <siprintf+0x3c>)
 8007594:	f853 2b04 	ldr.w	r2, [r3], #4
 8007598:	9105      	str	r1, [sp, #20]
 800759a:	6800      	ldr	r0, [r0, #0]
 800759c:	9301      	str	r3, [sp, #4]
 800759e:	a902      	add	r1, sp, #8
 80075a0:	f002 ff58 	bl	800a454 <_svfiprintf_r>
 80075a4:	9b02      	ldr	r3, [sp, #8]
 80075a6:	2200      	movs	r2, #0
 80075a8:	701a      	strb	r2, [r3, #0]
 80075aa:	b01c      	add	sp, #112	; 0x70
 80075ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80075b0:	b003      	add	sp, #12
 80075b2:	4770      	bx	lr
 80075b4:	20000010 	.word	0x20000010
 80075b8:	ffff0208 	.word	0xffff0208

080075bc <strncmp>:
 80075bc:	b510      	push	{r4, lr}
 80075be:	b16a      	cbz	r2, 80075dc <strncmp+0x20>
 80075c0:	3901      	subs	r1, #1
 80075c2:	1884      	adds	r4, r0, r2
 80075c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80075c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d103      	bne.n	80075d8 <strncmp+0x1c>
 80075d0:	42a0      	cmp	r0, r4
 80075d2:	d001      	beq.n	80075d8 <strncmp+0x1c>
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1f5      	bne.n	80075c4 <strncmp+0x8>
 80075d8:	1a98      	subs	r0, r3, r2
 80075da:	bd10      	pop	{r4, pc}
 80075dc:	4610      	mov	r0, r2
 80075de:	e7fc      	b.n	80075da <strncmp+0x1e>

080075e0 <sulp>:
 80075e0:	b570      	push	{r4, r5, r6, lr}
 80075e2:	4604      	mov	r4, r0
 80075e4:	460d      	mov	r5, r1
 80075e6:	ec45 4b10 	vmov	d0, r4, r5
 80075ea:	4616      	mov	r6, r2
 80075ec:	f002 fda4 	bl	800a138 <__ulp>
 80075f0:	ec51 0b10 	vmov	r0, r1, d0
 80075f4:	b17e      	cbz	r6, 8007616 <sulp+0x36>
 80075f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80075fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80075fe:	2b00      	cmp	r3, #0
 8007600:	dd09      	ble.n	8007616 <sulp+0x36>
 8007602:	051b      	lsls	r3, r3, #20
 8007604:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007608:	2400      	movs	r4, #0
 800760a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800760e:	4622      	mov	r2, r4
 8007610:	462b      	mov	r3, r5
 8007612:	f7f8 fff9 	bl	8000608 <__aeabi_dmul>
 8007616:	bd70      	pop	{r4, r5, r6, pc}

08007618 <_strtod_l>:
 8007618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761c:	461f      	mov	r7, r3
 800761e:	b0a1      	sub	sp, #132	; 0x84
 8007620:	2300      	movs	r3, #0
 8007622:	4681      	mov	r9, r0
 8007624:	4638      	mov	r0, r7
 8007626:	460e      	mov	r6, r1
 8007628:	9217      	str	r2, [sp, #92]	; 0x5c
 800762a:	931c      	str	r3, [sp, #112]	; 0x70
 800762c:	f002 fa2f 	bl	8009a8e <__localeconv_l>
 8007630:	4680      	mov	r8, r0
 8007632:	6800      	ldr	r0, [r0, #0]
 8007634:	f7f8 fdd4 	bl	80001e0 <strlen>
 8007638:	f04f 0a00 	mov.w	sl, #0
 800763c:	4604      	mov	r4, r0
 800763e:	f04f 0b00 	mov.w	fp, #0
 8007642:	961b      	str	r6, [sp, #108]	; 0x6c
 8007644:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007646:	781a      	ldrb	r2, [r3, #0]
 8007648:	2a0d      	cmp	r2, #13
 800764a:	d832      	bhi.n	80076b2 <_strtod_l+0x9a>
 800764c:	2a09      	cmp	r2, #9
 800764e:	d236      	bcs.n	80076be <_strtod_l+0xa6>
 8007650:	2a00      	cmp	r2, #0
 8007652:	d03e      	beq.n	80076d2 <_strtod_l+0xba>
 8007654:	2300      	movs	r3, #0
 8007656:	930d      	str	r3, [sp, #52]	; 0x34
 8007658:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800765a:	782b      	ldrb	r3, [r5, #0]
 800765c:	2b30      	cmp	r3, #48	; 0x30
 800765e:	f040 80ac 	bne.w	80077ba <_strtod_l+0x1a2>
 8007662:	786b      	ldrb	r3, [r5, #1]
 8007664:	2b58      	cmp	r3, #88	; 0x58
 8007666:	d001      	beq.n	800766c <_strtod_l+0x54>
 8007668:	2b78      	cmp	r3, #120	; 0x78
 800766a:	d167      	bne.n	800773c <_strtod_l+0x124>
 800766c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800766e:	9301      	str	r3, [sp, #4]
 8007670:	ab1c      	add	r3, sp, #112	; 0x70
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	9702      	str	r7, [sp, #8]
 8007676:	ab1d      	add	r3, sp, #116	; 0x74
 8007678:	4a88      	ldr	r2, [pc, #544]	; (800789c <_strtod_l+0x284>)
 800767a:	a91b      	add	r1, sp, #108	; 0x6c
 800767c:	4648      	mov	r0, r9
 800767e:	f001 ff2c 	bl	80094da <__gethex>
 8007682:	f010 0407 	ands.w	r4, r0, #7
 8007686:	4606      	mov	r6, r0
 8007688:	d005      	beq.n	8007696 <_strtod_l+0x7e>
 800768a:	2c06      	cmp	r4, #6
 800768c:	d12b      	bne.n	80076e6 <_strtod_l+0xce>
 800768e:	3501      	adds	r5, #1
 8007690:	2300      	movs	r3, #0
 8007692:	951b      	str	r5, [sp, #108]	; 0x6c
 8007694:	930d      	str	r3, [sp, #52]	; 0x34
 8007696:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007698:	2b00      	cmp	r3, #0
 800769a:	f040 859a 	bne.w	80081d2 <_strtod_l+0xbba>
 800769e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076a0:	b1e3      	cbz	r3, 80076dc <_strtod_l+0xc4>
 80076a2:	4652      	mov	r2, sl
 80076a4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80076a8:	ec43 2b10 	vmov	d0, r2, r3
 80076ac:	b021      	add	sp, #132	; 0x84
 80076ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b2:	2a2b      	cmp	r2, #43	; 0x2b
 80076b4:	d015      	beq.n	80076e2 <_strtod_l+0xca>
 80076b6:	2a2d      	cmp	r2, #45	; 0x2d
 80076b8:	d004      	beq.n	80076c4 <_strtod_l+0xac>
 80076ba:	2a20      	cmp	r2, #32
 80076bc:	d1ca      	bne.n	8007654 <_strtod_l+0x3c>
 80076be:	3301      	adds	r3, #1
 80076c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80076c2:	e7bf      	b.n	8007644 <_strtod_l+0x2c>
 80076c4:	2201      	movs	r2, #1
 80076c6:	920d      	str	r2, [sp, #52]	; 0x34
 80076c8:	1c5a      	adds	r2, r3, #1
 80076ca:	921b      	str	r2, [sp, #108]	; 0x6c
 80076cc:	785b      	ldrb	r3, [r3, #1]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1c2      	bne.n	8007658 <_strtod_l+0x40>
 80076d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076d4:	961b      	str	r6, [sp, #108]	; 0x6c
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	f040 8579 	bne.w	80081ce <_strtod_l+0xbb6>
 80076dc:	4652      	mov	r2, sl
 80076de:	465b      	mov	r3, fp
 80076e0:	e7e2      	b.n	80076a8 <_strtod_l+0x90>
 80076e2:	2200      	movs	r2, #0
 80076e4:	e7ef      	b.n	80076c6 <_strtod_l+0xae>
 80076e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80076e8:	b13a      	cbz	r2, 80076fa <_strtod_l+0xe2>
 80076ea:	2135      	movs	r1, #53	; 0x35
 80076ec:	a81e      	add	r0, sp, #120	; 0x78
 80076ee:	f002 fe1b 	bl	800a328 <__copybits>
 80076f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80076f4:	4648      	mov	r0, r9
 80076f6:	f002 fa87 	bl	8009c08 <_Bfree>
 80076fa:	3c01      	subs	r4, #1
 80076fc:	2c04      	cmp	r4, #4
 80076fe:	d806      	bhi.n	800770e <_strtod_l+0xf6>
 8007700:	e8df f004 	tbb	[pc, r4]
 8007704:	1714030a 	.word	0x1714030a
 8007708:	0a          	.byte	0x0a
 8007709:	00          	.byte	0x00
 800770a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800770e:	0730      	lsls	r0, r6, #28
 8007710:	d5c1      	bpl.n	8007696 <_strtod_l+0x7e>
 8007712:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007716:	e7be      	b.n	8007696 <_strtod_l+0x7e>
 8007718:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800771c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800771e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007722:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007726:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800772a:	e7f0      	b.n	800770e <_strtod_l+0xf6>
 800772c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80078a0 <_strtod_l+0x288>
 8007730:	e7ed      	b.n	800770e <_strtod_l+0xf6>
 8007732:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007736:	f04f 3aff 	mov.w	sl, #4294967295
 800773a:	e7e8      	b.n	800770e <_strtod_l+0xf6>
 800773c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800773e:	1c5a      	adds	r2, r3, #1
 8007740:	921b      	str	r2, [sp, #108]	; 0x6c
 8007742:	785b      	ldrb	r3, [r3, #1]
 8007744:	2b30      	cmp	r3, #48	; 0x30
 8007746:	d0f9      	beq.n	800773c <_strtod_l+0x124>
 8007748:	2b00      	cmp	r3, #0
 800774a:	d0a4      	beq.n	8007696 <_strtod_l+0x7e>
 800774c:	2301      	movs	r3, #1
 800774e:	2500      	movs	r5, #0
 8007750:	9306      	str	r3, [sp, #24]
 8007752:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007754:	9308      	str	r3, [sp, #32]
 8007756:	9507      	str	r5, [sp, #28]
 8007758:	9505      	str	r5, [sp, #20]
 800775a:	220a      	movs	r2, #10
 800775c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800775e:	7807      	ldrb	r7, [r0, #0]
 8007760:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007764:	b2d9      	uxtb	r1, r3
 8007766:	2909      	cmp	r1, #9
 8007768:	d929      	bls.n	80077be <_strtod_l+0x1a6>
 800776a:	4622      	mov	r2, r4
 800776c:	f8d8 1000 	ldr.w	r1, [r8]
 8007770:	f7ff ff24 	bl	80075bc <strncmp>
 8007774:	2800      	cmp	r0, #0
 8007776:	d031      	beq.n	80077dc <_strtod_l+0x1c4>
 8007778:	2000      	movs	r0, #0
 800777a:	9c05      	ldr	r4, [sp, #20]
 800777c:	9004      	str	r0, [sp, #16]
 800777e:	463b      	mov	r3, r7
 8007780:	4602      	mov	r2, r0
 8007782:	2b65      	cmp	r3, #101	; 0x65
 8007784:	d001      	beq.n	800778a <_strtod_l+0x172>
 8007786:	2b45      	cmp	r3, #69	; 0x45
 8007788:	d114      	bne.n	80077b4 <_strtod_l+0x19c>
 800778a:	b924      	cbnz	r4, 8007796 <_strtod_l+0x17e>
 800778c:	b910      	cbnz	r0, 8007794 <_strtod_l+0x17c>
 800778e:	9b06      	ldr	r3, [sp, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d09e      	beq.n	80076d2 <_strtod_l+0xba>
 8007794:	2400      	movs	r4, #0
 8007796:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007798:	1c73      	adds	r3, r6, #1
 800779a:	931b      	str	r3, [sp, #108]	; 0x6c
 800779c:	7873      	ldrb	r3, [r6, #1]
 800779e:	2b2b      	cmp	r3, #43	; 0x2b
 80077a0:	d078      	beq.n	8007894 <_strtod_l+0x27c>
 80077a2:	2b2d      	cmp	r3, #45	; 0x2d
 80077a4:	d070      	beq.n	8007888 <_strtod_l+0x270>
 80077a6:	f04f 0c00 	mov.w	ip, #0
 80077aa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80077ae:	2f09      	cmp	r7, #9
 80077b0:	d97c      	bls.n	80078ac <_strtod_l+0x294>
 80077b2:	961b      	str	r6, [sp, #108]	; 0x6c
 80077b4:	f04f 0e00 	mov.w	lr, #0
 80077b8:	e09a      	b.n	80078f0 <_strtod_l+0x2d8>
 80077ba:	2300      	movs	r3, #0
 80077bc:	e7c7      	b.n	800774e <_strtod_l+0x136>
 80077be:	9905      	ldr	r1, [sp, #20]
 80077c0:	2908      	cmp	r1, #8
 80077c2:	bfdd      	ittte	le
 80077c4:	9907      	ldrle	r1, [sp, #28]
 80077c6:	fb02 3301 	mlale	r3, r2, r1, r3
 80077ca:	9307      	strle	r3, [sp, #28]
 80077cc:	fb02 3505 	mlagt	r5, r2, r5, r3
 80077d0:	9b05      	ldr	r3, [sp, #20]
 80077d2:	3001      	adds	r0, #1
 80077d4:	3301      	adds	r3, #1
 80077d6:	9305      	str	r3, [sp, #20]
 80077d8:	901b      	str	r0, [sp, #108]	; 0x6c
 80077da:	e7bf      	b.n	800775c <_strtod_l+0x144>
 80077dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077de:	191a      	adds	r2, r3, r4
 80077e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80077e2:	9a05      	ldr	r2, [sp, #20]
 80077e4:	5d1b      	ldrb	r3, [r3, r4]
 80077e6:	2a00      	cmp	r2, #0
 80077e8:	d037      	beq.n	800785a <_strtod_l+0x242>
 80077ea:	9c05      	ldr	r4, [sp, #20]
 80077ec:	4602      	mov	r2, r0
 80077ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80077f2:	2909      	cmp	r1, #9
 80077f4:	d913      	bls.n	800781e <_strtod_l+0x206>
 80077f6:	2101      	movs	r1, #1
 80077f8:	9104      	str	r1, [sp, #16]
 80077fa:	e7c2      	b.n	8007782 <_strtod_l+0x16a>
 80077fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077fe:	1c5a      	adds	r2, r3, #1
 8007800:	921b      	str	r2, [sp, #108]	; 0x6c
 8007802:	785b      	ldrb	r3, [r3, #1]
 8007804:	3001      	adds	r0, #1
 8007806:	2b30      	cmp	r3, #48	; 0x30
 8007808:	d0f8      	beq.n	80077fc <_strtod_l+0x1e4>
 800780a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800780e:	2a08      	cmp	r2, #8
 8007810:	f200 84e4 	bhi.w	80081dc <_strtod_l+0xbc4>
 8007814:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007816:	9208      	str	r2, [sp, #32]
 8007818:	4602      	mov	r2, r0
 800781a:	2000      	movs	r0, #0
 800781c:	4604      	mov	r4, r0
 800781e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007822:	f100 0101 	add.w	r1, r0, #1
 8007826:	d012      	beq.n	800784e <_strtod_l+0x236>
 8007828:	440a      	add	r2, r1
 800782a:	eb00 0c04 	add.w	ip, r0, r4
 800782e:	4621      	mov	r1, r4
 8007830:	270a      	movs	r7, #10
 8007832:	458c      	cmp	ip, r1
 8007834:	d113      	bne.n	800785e <_strtod_l+0x246>
 8007836:	1821      	adds	r1, r4, r0
 8007838:	2908      	cmp	r1, #8
 800783a:	f104 0401 	add.w	r4, r4, #1
 800783e:	4404      	add	r4, r0
 8007840:	dc19      	bgt.n	8007876 <_strtod_l+0x25e>
 8007842:	9b07      	ldr	r3, [sp, #28]
 8007844:	210a      	movs	r1, #10
 8007846:	fb01 e303 	mla	r3, r1, r3, lr
 800784a:	9307      	str	r3, [sp, #28]
 800784c:	2100      	movs	r1, #0
 800784e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007850:	1c58      	adds	r0, r3, #1
 8007852:	901b      	str	r0, [sp, #108]	; 0x6c
 8007854:	785b      	ldrb	r3, [r3, #1]
 8007856:	4608      	mov	r0, r1
 8007858:	e7c9      	b.n	80077ee <_strtod_l+0x1d6>
 800785a:	9805      	ldr	r0, [sp, #20]
 800785c:	e7d3      	b.n	8007806 <_strtod_l+0x1ee>
 800785e:	2908      	cmp	r1, #8
 8007860:	f101 0101 	add.w	r1, r1, #1
 8007864:	dc03      	bgt.n	800786e <_strtod_l+0x256>
 8007866:	9b07      	ldr	r3, [sp, #28]
 8007868:	437b      	muls	r3, r7
 800786a:	9307      	str	r3, [sp, #28]
 800786c:	e7e1      	b.n	8007832 <_strtod_l+0x21a>
 800786e:	2910      	cmp	r1, #16
 8007870:	bfd8      	it	le
 8007872:	437d      	mulle	r5, r7
 8007874:	e7dd      	b.n	8007832 <_strtod_l+0x21a>
 8007876:	2c10      	cmp	r4, #16
 8007878:	bfdc      	itt	le
 800787a:	210a      	movle	r1, #10
 800787c:	fb01 e505 	mlale	r5, r1, r5, lr
 8007880:	e7e4      	b.n	800784c <_strtod_l+0x234>
 8007882:	2301      	movs	r3, #1
 8007884:	9304      	str	r3, [sp, #16]
 8007886:	e781      	b.n	800778c <_strtod_l+0x174>
 8007888:	f04f 0c01 	mov.w	ip, #1
 800788c:	1cb3      	adds	r3, r6, #2
 800788e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007890:	78b3      	ldrb	r3, [r6, #2]
 8007892:	e78a      	b.n	80077aa <_strtod_l+0x192>
 8007894:	f04f 0c00 	mov.w	ip, #0
 8007898:	e7f8      	b.n	800788c <_strtod_l+0x274>
 800789a:	bf00      	nop
 800789c:	0800ac7c 	.word	0x0800ac7c
 80078a0:	7ff00000 	.word	0x7ff00000
 80078a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078a6:	1c5f      	adds	r7, r3, #1
 80078a8:	971b      	str	r7, [sp, #108]	; 0x6c
 80078aa:	785b      	ldrb	r3, [r3, #1]
 80078ac:	2b30      	cmp	r3, #48	; 0x30
 80078ae:	d0f9      	beq.n	80078a4 <_strtod_l+0x28c>
 80078b0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80078b4:	2f08      	cmp	r7, #8
 80078b6:	f63f af7d 	bhi.w	80077b4 <_strtod_l+0x19c>
 80078ba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80078be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078c0:	930a      	str	r3, [sp, #40]	; 0x28
 80078c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078c4:	1c5f      	adds	r7, r3, #1
 80078c6:	971b      	str	r7, [sp, #108]	; 0x6c
 80078c8:	785b      	ldrb	r3, [r3, #1]
 80078ca:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80078ce:	f1b8 0f09 	cmp.w	r8, #9
 80078d2:	d937      	bls.n	8007944 <_strtod_l+0x32c>
 80078d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80078d6:	1a7f      	subs	r7, r7, r1
 80078d8:	2f08      	cmp	r7, #8
 80078da:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80078de:	dc37      	bgt.n	8007950 <_strtod_l+0x338>
 80078e0:	45be      	cmp	lr, r7
 80078e2:	bfa8      	it	ge
 80078e4:	46be      	movge	lr, r7
 80078e6:	f1bc 0f00 	cmp.w	ip, #0
 80078ea:	d001      	beq.n	80078f0 <_strtod_l+0x2d8>
 80078ec:	f1ce 0e00 	rsb	lr, lr, #0
 80078f0:	2c00      	cmp	r4, #0
 80078f2:	d151      	bne.n	8007998 <_strtod_l+0x380>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	f47f aece 	bne.w	8007696 <_strtod_l+0x7e>
 80078fa:	9a06      	ldr	r2, [sp, #24]
 80078fc:	2a00      	cmp	r2, #0
 80078fe:	f47f aeca 	bne.w	8007696 <_strtod_l+0x7e>
 8007902:	9a04      	ldr	r2, [sp, #16]
 8007904:	2a00      	cmp	r2, #0
 8007906:	f47f aee4 	bne.w	80076d2 <_strtod_l+0xba>
 800790a:	2b4e      	cmp	r3, #78	; 0x4e
 800790c:	d027      	beq.n	800795e <_strtod_l+0x346>
 800790e:	dc21      	bgt.n	8007954 <_strtod_l+0x33c>
 8007910:	2b49      	cmp	r3, #73	; 0x49
 8007912:	f47f aede 	bne.w	80076d2 <_strtod_l+0xba>
 8007916:	49a0      	ldr	r1, [pc, #640]	; (8007b98 <_strtod_l+0x580>)
 8007918:	a81b      	add	r0, sp, #108	; 0x6c
 800791a:	f002 f811 	bl	8009940 <__match>
 800791e:	2800      	cmp	r0, #0
 8007920:	f43f aed7 	beq.w	80076d2 <_strtod_l+0xba>
 8007924:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007926:	499d      	ldr	r1, [pc, #628]	; (8007b9c <_strtod_l+0x584>)
 8007928:	3b01      	subs	r3, #1
 800792a:	a81b      	add	r0, sp, #108	; 0x6c
 800792c:	931b      	str	r3, [sp, #108]	; 0x6c
 800792e:	f002 f807 	bl	8009940 <__match>
 8007932:	b910      	cbnz	r0, 800793a <_strtod_l+0x322>
 8007934:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007936:	3301      	adds	r3, #1
 8007938:	931b      	str	r3, [sp, #108]	; 0x6c
 800793a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007bb0 <_strtod_l+0x598>
 800793e:	f04f 0a00 	mov.w	sl, #0
 8007942:	e6a8      	b.n	8007696 <_strtod_l+0x7e>
 8007944:	210a      	movs	r1, #10
 8007946:	fb01 3e0e 	mla	lr, r1, lr, r3
 800794a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800794e:	e7b8      	b.n	80078c2 <_strtod_l+0x2aa>
 8007950:	46be      	mov	lr, r7
 8007952:	e7c8      	b.n	80078e6 <_strtod_l+0x2ce>
 8007954:	2b69      	cmp	r3, #105	; 0x69
 8007956:	d0de      	beq.n	8007916 <_strtod_l+0x2fe>
 8007958:	2b6e      	cmp	r3, #110	; 0x6e
 800795a:	f47f aeba 	bne.w	80076d2 <_strtod_l+0xba>
 800795e:	4990      	ldr	r1, [pc, #576]	; (8007ba0 <_strtod_l+0x588>)
 8007960:	a81b      	add	r0, sp, #108	; 0x6c
 8007962:	f001 ffed 	bl	8009940 <__match>
 8007966:	2800      	cmp	r0, #0
 8007968:	f43f aeb3 	beq.w	80076d2 <_strtod_l+0xba>
 800796c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	2b28      	cmp	r3, #40	; 0x28
 8007972:	d10e      	bne.n	8007992 <_strtod_l+0x37a>
 8007974:	aa1e      	add	r2, sp, #120	; 0x78
 8007976:	498b      	ldr	r1, [pc, #556]	; (8007ba4 <_strtod_l+0x58c>)
 8007978:	a81b      	add	r0, sp, #108	; 0x6c
 800797a:	f001 fff5 	bl	8009968 <__hexnan>
 800797e:	2805      	cmp	r0, #5
 8007980:	d107      	bne.n	8007992 <_strtod_l+0x37a>
 8007982:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007984:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007988:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800798c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007990:	e681      	b.n	8007696 <_strtod_l+0x7e>
 8007992:	f8df b224 	ldr.w	fp, [pc, #548]	; 8007bb8 <_strtod_l+0x5a0>
 8007996:	e7d2      	b.n	800793e <_strtod_l+0x326>
 8007998:	ebae 0302 	sub.w	r3, lr, r2
 800799c:	9306      	str	r3, [sp, #24]
 800799e:	9b05      	ldr	r3, [sp, #20]
 80079a0:	9807      	ldr	r0, [sp, #28]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	bf08      	it	eq
 80079a6:	4623      	moveq	r3, r4
 80079a8:	2c10      	cmp	r4, #16
 80079aa:	9305      	str	r3, [sp, #20]
 80079ac:	46a0      	mov	r8, r4
 80079ae:	bfa8      	it	ge
 80079b0:	f04f 0810 	movge.w	r8, #16
 80079b4:	f7f8 fdae 	bl	8000514 <__aeabi_ui2d>
 80079b8:	2c09      	cmp	r4, #9
 80079ba:	4682      	mov	sl, r0
 80079bc:	468b      	mov	fp, r1
 80079be:	dc13      	bgt.n	80079e8 <_strtod_l+0x3d0>
 80079c0:	9b06      	ldr	r3, [sp, #24]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f43f ae67 	beq.w	8007696 <_strtod_l+0x7e>
 80079c8:	9b06      	ldr	r3, [sp, #24]
 80079ca:	dd7a      	ble.n	8007ac2 <_strtod_l+0x4aa>
 80079cc:	2b16      	cmp	r3, #22
 80079ce:	dc61      	bgt.n	8007a94 <_strtod_l+0x47c>
 80079d0:	4a75      	ldr	r2, [pc, #468]	; (8007ba8 <_strtod_l+0x590>)
 80079d2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80079d6:	e9de 0100 	ldrd	r0, r1, [lr]
 80079da:	4652      	mov	r2, sl
 80079dc:	465b      	mov	r3, fp
 80079de:	f7f8 fe13 	bl	8000608 <__aeabi_dmul>
 80079e2:	4682      	mov	sl, r0
 80079e4:	468b      	mov	fp, r1
 80079e6:	e656      	b.n	8007696 <_strtod_l+0x7e>
 80079e8:	4b6f      	ldr	r3, [pc, #444]	; (8007ba8 <_strtod_l+0x590>)
 80079ea:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80079ee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80079f2:	f7f8 fe09 	bl	8000608 <__aeabi_dmul>
 80079f6:	4606      	mov	r6, r0
 80079f8:	4628      	mov	r0, r5
 80079fa:	460f      	mov	r7, r1
 80079fc:	f7f8 fd8a 	bl	8000514 <__aeabi_ui2d>
 8007a00:	4602      	mov	r2, r0
 8007a02:	460b      	mov	r3, r1
 8007a04:	4630      	mov	r0, r6
 8007a06:	4639      	mov	r1, r7
 8007a08:	f7f8 fc48 	bl	800029c <__adddf3>
 8007a0c:	2c0f      	cmp	r4, #15
 8007a0e:	4682      	mov	sl, r0
 8007a10:	468b      	mov	fp, r1
 8007a12:	ddd5      	ble.n	80079c0 <_strtod_l+0x3a8>
 8007a14:	9b06      	ldr	r3, [sp, #24]
 8007a16:	eba4 0808 	sub.w	r8, r4, r8
 8007a1a:	4498      	add	r8, r3
 8007a1c:	f1b8 0f00 	cmp.w	r8, #0
 8007a20:	f340 8096 	ble.w	8007b50 <_strtod_l+0x538>
 8007a24:	f018 030f 	ands.w	r3, r8, #15
 8007a28:	d00a      	beq.n	8007a40 <_strtod_l+0x428>
 8007a2a:	495f      	ldr	r1, [pc, #380]	; (8007ba8 <_strtod_l+0x590>)
 8007a2c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a30:	4652      	mov	r2, sl
 8007a32:	465b      	mov	r3, fp
 8007a34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a38:	f7f8 fde6 	bl	8000608 <__aeabi_dmul>
 8007a3c:	4682      	mov	sl, r0
 8007a3e:	468b      	mov	fp, r1
 8007a40:	f038 080f 	bics.w	r8, r8, #15
 8007a44:	d073      	beq.n	8007b2e <_strtod_l+0x516>
 8007a46:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007a4a:	dd47      	ble.n	8007adc <_strtod_l+0x4c4>
 8007a4c:	2400      	movs	r4, #0
 8007a4e:	46a0      	mov	r8, r4
 8007a50:	9407      	str	r4, [sp, #28]
 8007a52:	9405      	str	r4, [sp, #20]
 8007a54:	2322      	movs	r3, #34	; 0x22
 8007a56:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007bb0 <_strtod_l+0x598>
 8007a5a:	f8c9 3000 	str.w	r3, [r9]
 8007a5e:	f04f 0a00 	mov.w	sl, #0
 8007a62:	9b07      	ldr	r3, [sp, #28]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f43f ae16 	beq.w	8007696 <_strtod_l+0x7e>
 8007a6a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007a6c:	4648      	mov	r0, r9
 8007a6e:	f002 f8cb 	bl	8009c08 <_Bfree>
 8007a72:	9905      	ldr	r1, [sp, #20]
 8007a74:	4648      	mov	r0, r9
 8007a76:	f002 f8c7 	bl	8009c08 <_Bfree>
 8007a7a:	4641      	mov	r1, r8
 8007a7c:	4648      	mov	r0, r9
 8007a7e:	f002 f8c3 	bl	8009c08 <_Bfree>
 8007a82:	9907      	ldr	r1, [sp, #28]
 8007a84:	4648      	mov	r0, r9
 8007a86:	f002 f8bf 	bl	8009c08 <_Bfree>
 8007a8a:	4621      	mov	r1, r4
 8007a8c:	4648      	mov	r0, r9
 8007a8e:	f002 f8bb 	bl	8009c08 <_Bfree>
 8007a92:	e600      	b.n	8007696 <_strtod_l+0x7e>
 8007a94:	9a06      	ldr	r2, [sp, #24]
 8007a96:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	dbba      	blt.n	8007a14 <_strtod_l+0x3fc>
 8007a9e:	4d42      	ldr	r5, [pc, #264]	; (8007ba8 <_strtod_l+0x590>)
 8007aa0:	f1c4 040f 	rsb	r4, r4, #15
 8007aa4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007aa8:	4652      	mov	r2, sl
 8007aaa:	465b      	mov	r3, fp
 8007aac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ab0:	f7f8 fdaa 	bl	8000608 <__aeabi_dmul>
 8007ab4:	9b06      	ldr	r3, [sp, #24]
 8007ab6:	1b1c      	subs	r4, r3, r4
 8007ab8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007abc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ac0:	e78d      	b.n	80079de <_strtod_l+0x3c6>
 8007ac2:	f113 0f16 	cmn.w	r3, #22
 8007ac6:	dba5      	blt.n	8007a14 <_strtod_l+0x3fc>
 8007ac8:	4a37      	ldr	r2, [pc, #220]	; (8007ba8 <_strtod_l+0x590>)
 8007aca:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007ace:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007ad2:	4650      	mov	r0, sl
 8007ad4:	4659      	mov	r1, fp
 8007ad6:	f7f8 fec1 	bl	800085c <__aeabi_ddiv>
 8007ada:	e782      	b.n	80079e2 <_strtod_l+0x3ca>
 8007adc:	2300      	movs	r3, #0
 8007ade:	4e33      	ldr	r6, [pc, #204]	; (8007bac <_strtod_l+0x594>)
 8007ae0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007ae4:	4650      	mov	r0, sl
 8007ae6:	4659      	mov	r1, fp
 8007ae8:	461d      	mov	r5, r3
 8007aea:	f1b8 0f01 	cmp.w	r8, #1
 8007aee:	dc21      	bgt.n	8007b34 <_strtod_l+0x51c>
 8007af0:	b10b      	cbz	r3, 8007af6 <_strtod_l+0x4de>
 8007af2:	4682      	mov	sl, r0
 8007af4:	468b      	mov	fp, r1
 8007af6:	4b2d      	ldr	r3, [pc, #180]	; (8007bac <_strtod_l+0x594>)
 8007af8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007afc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007b00:	4652      	mov	r2, sl
 8007b02:	465b      	mov	r3, fp
 8007b04:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007b08:	f7f8 fd7e 	bl	8000608 <__aeabi_dmul>
 8007b0c:	4b28      	ldr	r3, [pc, #160]	; (8007bb0 <_strtod_l+0x598>)
 8007b0e:	460a      	mov	r2, r1
 8007b10:	400b      	ands	r3, r1
 8007b12:	4928      	ldr	r1, [pc, #160]	; (8007bb4 <_strtod_l+0x59c>)
 8007b14:	428b      	cmp	r3, r1
 8007b16:	4682      	mov	sl, r0
 8007b18:	d898      	bhi.n	8007a4c <_strtod_l+0x434>
 8007b1a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007b1e:	428b      	cmp	r3, r1
 8007b20:	bf86      	itte	hi
 8007b22:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007bbc <_strtod_l+0x5a4>
 8007b26:	f04f 3aff 	movhi.w	sl, #4294967295
 8007b2a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007b2e:	2300      	movs	r3, #0
 8007b30:	9304      	str	r3, [sp, #16]
 8007b32:	e077      	b.n	8007c24 <_strtod_l+0x60c>
 8007b34:	f018 0f01 	tst.w	r8, #1
 8007b38:	d006      	beq.n	8007b48 <_strtod_l+0x530>
 8007b3a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b42:	f7f8 fd61 	bl	8000608 <__aeabi_dmul>
 8007b46:	2301      	movs	r3, #1
 8007b48:	3501      	adds	r5, #1
 8007b4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007b4e:	e7cc      	b.n	8007aea <_strtod_l+0x4d2>
 8007b50:	d0ed      	beq.n	8007b2e <_strtod_l+0x516>
 8007b52:	f1c8 0800 	rsb	r8, r8, #0
 8007b56:	f018 020f 	ands.w	r2, r8, #15
 8007b5a:	d00a      	beq.n	8007b72 <_strtod_l+0x55a>
 8007b5c:	4b12      	ldr	r3, [pc, #72]	; (8007ba8 <_strtod_l+0x590>)
 8007b5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b62:	4650      	mov	r0, sl
 8007b64:	4659      	mov	r1, fp
 8007b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6a:	f7f8 fe77 	bl	800085c <__aeabi_ddiv>
 8007b6e:	4682      	mov	sl, r0
 8007b70:	468b      	mov	fp, r1
 8007b72:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007b76:	d0da      	beq.n	8007b2e <_strtod_l+0x516>
 8007b78:	f1b8 0f1f 	cmp.w	r8, #31
 8007b7c:	dd20      	ble.n	8007bc0 <_strtod_l+0x5a8>
 8007b7e:	2400      	movs	r4, #0
 8007b80:	46a0      	mov	r8, r4
 8007b82:	9407      	str	r4, [sp, #28]
 8007b84:	9405      	str	r4, [sp, #20]
 8007b86:	2322      	movs	r3, #34	; 0x22
 8007b88:	f04f 0a00 	mov.w	sl, #0
 8007b8c:	f04f 0b00 	mov.w	fp, #0
 8007b90:	f8c9 3000 	str.w	r3, [r9]
 8007b94:	e765      	b.n	8007a62 <_strtod_l+0x44a>
 8007b96:	bf00      	nop
 8007b98:	0800ac45 	.word	0x0800ac45
 8007b9c:	0800acd3 	.word	0x0800acd3
 8007ba0:	0800ac4d 	.word	0x0800ac4d
 8007ba4:	0800ac90 	.word	0x0800ac90
 8007ba8:	0800ad78 	.word	0x0800ad78
 8007bac:	0800ad50 	.word	0x0800ad50
 8007bb0:	7ff00000 	.word	0x7ff00000
 8007bb4:	7ca00000 	.word	0x7ca00000
 8007bb8:	fff80000 	.word	0xfff80000
 8007bbc:	7fefffff 	.word	0x7fefffff
 8007bc0:	f018 0310 	ands.w	r3, r8, #16
 8007bc4:	bf18      	it	ne
 8007bc6:	236a      	movne	r3, #106	; 0x6a
 8007bc8:	4da0      	ldr	r5, [pc, #640]	; (8007e4c <_strtod_l+0x834>)
 8007bca:	9304      	str	r3, [sp, #16]
 8007bcc:	4650      	mov	r0, sl
 8007bce:	4659      	mov	r1, fp
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	f1b8 0f00 	cmp.w	r8, #0
 8007bd6:	f300 810a 	bgt.w	8007dee <_strtod_l+0x7d6>
 8007bda:	b10b      	cbz	r3, 8007be0 <_strtod_l+0x5c8>
 8007bdc:	4682      	mov	sl, r0
 8007bde:	468b      	mov	fp, r1
 8007be0:	9b04      	ldr	r3, [sp, #16]
 8007be2:	b1bb      	cbz	r3, 8007c14 <_strtod_l+0x5fc>
 8007be4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007be8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	4659      	mov	r1, fp
 8007bf0:	dd10      	ble.n	8007c14 <_strtod_l+0x5fc>
 8007bf2:	2b1f      	cmp	r3, #31
 8007bf4:	f340 8107 	ble.w	8007e06 <_strtod_l+0x7ee>
 8007bf8:	2b34      	cmp	r3, #52	; 0x34
 8007bfa:	bfde      	ittt	le
 8007bfc:	3b20      	suble	r3, #32
 8007bfe:	f04f 32ff 	movle.w	r2, #4294967295
 8007c02:	fa02 f303 	lslle.w	r3, r2, r3
 8007c06:	f04f 0a00 	mov.w	sl, #0
 8007c0a:	bfcc      	ite	gt
 8007c0c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007c10:	ea03 0b01 	andle.w	fp, r3, r1
 8007c14:	2200      	movs	r2, #0
 8007c16:	2300      	movs	r3, #0
 8007c18:	4650      	mov	r0, sl
 8007c1a:	4659      	mov	r1, fp
 8007c1c:	f7f8 ff5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c20:	2800      	cmp	r0, #0
 8007c22:	d1ac      	bne.n	8007b7e <_strtod_l+0x566>
 8007c24:	9b07      	ldr	r3, [sp, #28]
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	9a05      	ldr	r2, [sp, #20]
 8007c2a:	9908      	ldr	r1, [sp, #32]
 8007c2c:	4623      	mov	r3, r4
 8007c2e:	4648      	mov	r0, r9
 8007c30:	f002 f83c 	bl	8009cac <__s2b>
 8007c34:	9007      	str	r0, [sp, #28]
 8007c36:	2800      	cmp	r0, #0
 8007c38:	f43f af08 	beq.w	8007a4c <_strtod_l+0x434>
 8007c3c:	9a06      	ldr	r2, [sp, #24]
 8007c3e:	9b06      	ldr	r3, [sp, #24]
 8007c40:	2a00      	cmp	r2, #0
 8007c42:	f1c3 0300 	rsb	r3, r3, #0
 8007c46:	bfa8      	it	ge
 8007c48:	2300      	movge	r3, #0
 8007c4a:	930e      	str	r3, [sp, #56]	; 0x38
 8007c4c:	2400      	movs	r4, #0
 8007c4e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007c52:	9316      	str	r3, [sp, #88]	; 0x58
 8007c54:	46a0      	mov	r8, r4
 8007c56:	9b07      	ldr	r3, [sp, #28]
 8007c58:	4648      	mov	r0, r9
 8007c5a:	6859      	ldr	r1, [r3, #4]
 8007c5c:	f001 ffa0 	bl	8009ba0 <_Balloc>
 8007c60:	9005      	str	r0, [sp, #20]
 8007c62:	2800      	cmp	r0, #0
 8007c64:	f43f aef6 	beq.w	8007a54 <_strtod_l+0x43c>
 8007c68:	9b07      	ldr	r3, [sp, #28]
 8007c6a:	691a      	ldr	r2, [r3, #16]
 8007c6c:	3202      	adds	r2, #2
 8007c6e:	f103 010c 	add.w	r1, r3, #12
 8007c72:	0092      	lsls	r2, r2, #2
 8007c74:	300c      	adds	r0, #12
 8007c76:	f7fe fc39 	bl	80064ec <memcpy>
 8007c7a:	aa1e      	add	r2, sp, #120	; 0x78
 8007c7c:	a91d      	add	r1, sp, #116	; 0x74
 8007c7e:	ec4b ab10 	vmov	d0, sl, fp
 8007c82:	4648      	mov	r0, r9
 8007c84:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007c88:	f002 facc 	bl	800a224 <__d2b>
 8007c8c:	901c      	str	r0, [sp, #112]	; 0x70
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	f43f aee0 	beq.w	8007a54 <_strtod_l+0x43c>
 8007c94:	2101      	movs	r1, #1
 8007c96:	4648      	mov	r0, r9
 8007c98:	f002 f894 	bl	8009dc4 <__i2b>
 8007c9c:	4680      	mov	r8, r0
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	f43f aed8 	beq.w	8007a54 <_strtod_l+0x43c>
 8007ca4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007ca6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007ca8:	2e00      	cmp	r6, #0
 8007caa:	bfab      	itete	ge
 8007cac:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007cae:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007cb0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007cb2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8007cb4:	bfac      	ite	ge
 8007cb6:	18f7      	addge	r7, r6, r3
 8007cb8:	1b9d      	sublt	r5, r3, r6
 8007cba:	9b04      	ldr	r3, [sp, #16]
 8007cbc:	1af6      	subs	r6, r6, r3
 8007cbe:	4416      	add	r6, r2
 8007cc0:	4b63      	ldr	r3, [pc, #396]	; (8007e50 <_strtod_l+0x838>)
 8007cc2:	3e01      	subs	r6, #1
 8007cc4:	429e      	cmp	r6, r3
 8007cc6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007cca:	f280 80af 	bge.w	8007e2c <_strtod_l+0x814>
 8007cce:	1b9b      	subs	r3, r3, r6
 8007cd0:	2b1f      	cmp	r3, #31
 8007cd2:	eba2 0203 	sub.w	r2, r2, r3
 8007cd6:	f04f 0101 	mov.w	r1, #1
 8007cda:	f300 809b 	bgt.w	8007e14 <_strtod_l+0x7fc>
 8007cde:	fa01 f303 	lsl.w	r3, r1, r3
 8007ce2:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ce8:	18be      	adds	r6, r7, r2
 8007cea:	9b04      	ldr	r3, [sp, #16]
 8007cec:	42b7      	cmp	r7, r6
 8007cee:	4415      	add	r5, r2
 8007cf0:	441d      	add	r5, r3
 8007cf2:	463b      	mov	r3, r7
 8007cf4:	bfa8      	it	ge
 8007cf6:	4633      	movge	r3, r6
 8007cf8:	42ab      	cmp	r3, r5
 8007cfa:	bfa8      	it	ge
 8007cfc:	462b      	movge	r3, r5
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	bfc2      	ittt	gt
 8007d02:	1af6      	subgt	r6, r6, r3
 8007d04:	1aed      	subgt	r5, r5, r3
 8007d06:	1aff      	subgt	r7, r7, r3
 8007d08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d0a:	b1bb      	cbz	r3, 8007d3c <_strtod_l+0x724>
 8007d0c:	4641      	mov	r1, r8
 8007d0e:	461a      	mov	r2, r3
 8007d10:	4648      	mov	r0, r9
 8007d12:	f002 f8f7 	bl	8009f04 <__pow5mult>
 8007d16:	4680      	mov	r8, r0
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	f43f ae9b 	beq.w	8007a54 <_strtod_l+0x43c>
 8007d1e:	4601      	mov	r1, r0
 8007d20:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007d22:	4648      	mov	r0, r9
 8007d24:	f002 f857 	bl	8009dd6 <__multiply>
 8007d28:	900c      	str	r0, [sp, #48]	; 0x30
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	f43f ae92 	beq.w	8007a54 <_strtod_l+0x43c>
 8007d30:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007d32:	4648      	mov	r0, r9
 8007d34:	f001 ff68 	bl	8009c08 <_Bfree>
 8007d38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d3a:	931c      	str	r3, [sp, #112]	; 0x70
 8007d3c:	2e00      	cmp	r6, #0
 8007d3e:	dc7a      	bgt.n	8007e36 <_strtod_l+0x81e>
 8007d40:	9b06      	ldr	r3, [sp, #24]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	dd08      	ble.n	8007d58 <_strtod_l+0x740>
 8007d46:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007d48:	9905      	ldr	r1, [sp, #20]
 8007d4a:	4648      	mov	r0, r9
 8007d4c:	f002 f8da 	bl	8009f04 <__pow5mult>
 8007d50:	9005      	str	r0, [sp, #20]
 8007d52:	2800      	cmp	r0, #0
 8007d54:	f43f ae7e 	beq.w	8007a54 <_strtod_l+0x43c>
 8007d58:	2d00      	cmp	r5, #0
 8007d5a:	dd08      	ble.n	8007d6e <_strtod_l+0x756>
 8007d5c:	462a      	mov	r2, r5
 8007d5e:	9905      	ldr	r1, [sp, #20]
 8007d60:	4648      	mov	r0, r9
 8007d62:	f002 f91d 	bl	8009fa0 <__lshift>
 8007d66:	9005      	str	r0, [sp, #20]
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	f43f ae73 	beq.w	8007a54 <_strtod_l+0x43c>
 8007d6e:	2f00      	cmp	r7, #0
 8007d70:	dd08      	ble.n	8007d84 <_strtod_l+0x76c>
 8007d72:	4641      	mov	r1, r8
 8007d74:	463a      	mov	r2, r7
 8007d76:	4648      	mov	r0, r9
 8007d78:	f002 f912 	bl	8009fa0 <__lshift>
 8007d7c:	4680      	mov	r8, r0
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	f43f ae68 	beq.w	8007a54 <_strtod_l+0x43c>
 8007d84:	9a05      	ldr	r2, [sp, #20]
 8007d86:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007d88:	4648      	mov	r0, r9
 8007d8a:	f002 f977 	bl	800a07c <__mdiff>
 8007d8e:	4604      	mov	r4, r0
 8007d90:	2800      	cmp	r0, #0
 8007d92:	f43f ae5f 	beq.w	8007a54 <_strtod_l+0x43c>
 8007d96:	68c3      	ldr	r3, [r0, #12]
 8007d98:	930c      	str	r3, [sp, #48]	; 0x30
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	60c3      	str	r3, [r0, #12]
 8007d9e:	4641      	mov	r1, r8
 8007da0:	f002 f952 	bl	800a048 <__mcmp>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	da55      	bge.n	8007e54 <_strtod_l+0x83c>
 8007da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007daa:	b9e3      	cbnz	r3, 8007de6 <_strtod_l+0x7ce>
 8007dac:	f1ba 0f00 	cmp.w	sl, #0
 8007db0:	d119      	bne.n	8007de6 <_strtod_l+0x7ce>
 8007db2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007db6:	b9b3      	cbnz	r3, 8007de6 <_strtod_l+0x7ce>
 8007db8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007dbc:	0d1b      	lsrs	r3, r3, #20
 8007dbe:	051b      	lsls	r3, r3, #20
 8007dc0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007dc4:	d90f      	bls.n	8007de6 <_strtod_l+0x7ce>
 8007dc6:	6963      	ldr	r3, [r4, #20]
 8007dc8:	b913      	cbnz	r3, 8007dd0 <_strtod_l+0x7b8>
 8007dca:	6923      	ldr	r3, [r4, #16]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	dd0a      	ble.n	8007de6 <_strtod_l+0x7ce>
 8007dd0:	4621      	mov	r1, r4
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	4648      	mov	r0, r9
 8007dd6:	f002 f8e3 	bl	8009fa0 <__lshift>
 8007dda:	4641      	mov	r1, r8
 8007ddc:	4604      	mov	r4, r0
 8007dde:	f002 f933 	bl	800a048 <__mcmp>
 8007de2:	2800      	cmp	r0, #0
 8007de4:	dc67      	bgt.n	8007eb6 <_strtod_l+0x89e>
 8007de6:	9b04      	ldr	r3, [sp, #16]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d171      	bne.n	8007ed0 <_strtod_l+0x8b8>
 8007dec:	e63d      	b.n	8007a6a <_strtod_l+0x452>
 8007dee:	f018 0f01 	tst.w	r8, #1
 8007df2:	d004      	beq.n	8007dfe <_strtod_l+0x7e6>
 8007df4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007df8:	f7f8 fc06 	bl	8000608 <__aeabi_dmul>
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007e02:	3508      	adds	r5, #8
 8007e04:	e6e5      	b.n	8007bd2 <_strtod_l+0x5ba>
 8007e06:	f04f 32ff 	mov.w	r2, #4294967295
 8007e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0e:	ea03 0a0a 	and.w	sl, r3, sl
 8007e12:	e6ff      	b.n	8007c14 <_strtod_l+0x5fc>
 8007e14:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007e18:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007e1c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007e20:	36e2      	adds	r6, #226	; 0xe2
 8007e22:	fa01 f306 	lsl.w	r3, r1, r6
 8007e26:	930a      	str	r3, [sp, #40]	; 0x28
 8007e28:	910f      	str	r1, [sp, #60]	; 0x3c
 8007e2a:	e75d      	b.n	8007ce8 <_strtod_l+0x6d0>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e30:	2301      	movs	r3, #1
 8007e32:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e34:	e758      	b.n	8007ce8 <_strtod_l+0x6d0>
 8007e36:	4632      	mov	r2, r6
 8007e38:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007e3a:	4648      	mov	r0, r9
 8007e3c:	f002 f8b0 	bl	8009fa0 <__lshift>
 8007e40:	901c      	str	r0, [sp, #112]	; 0x70
 8007e42:	2800      	cmp	r0, #0
 8007e44:	f47f af7c 	bne.w	8007d40 <_strtod_l+0x728>
 8007e48:	e604      	b.n	8007a54 <_strtod_l+0x43c>
 8007e4a:	bf00      	nop
 8007e4c:	0800aca8 	.word	0x0800aca8
 8007e50:	fffffc02 	.word	0xfffffc02
 8007e54:	465d      	mov	r5, fp
 8007e56:	f040 8086 	bne.w	8007f66 <_strtod_l+0x94e>
 8007e5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e60:	b32a      	cbz	r2, 8007eae <_strtod_l+0x896>
 8007e62:	4aaf      	ldr	r2, [pc, #700]	; (8008120 <_strtod_l+0xb08>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d153      	bne.n	8007f10 <_strtod_l+0x8f8>
 8007e68:	9b04      	ldr	r3, [sp, #16]
 8007e6a:	4650      	mov	r0, sl
 8007e6c:	b1d3      	cbz	r3, 8007ea4 <_strtod_l+0x88c>
 8007e6e:	4aad      	ldr	r2, [pc, #692]	; (8008124 <_strtod_l+0xb0c>)
 8007e70:	402a      	ands	r2, r5
 8007e72:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007e76:	f04f 31ff 	mov.w	r1, #4294967295
 8007e7a:	d816      	bhi.n	8007eaa <_strtod_l+0x892>
 8007e7c:	0d12      	lsrs	r2, r2, #20
 8007e7e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007e82:	fa01 f303 	lsl.w	r3, r1, r3
 8007e86:	4298      	cmp	r0, r3
 8007e88:	d142      	bne.n	8007f10 <_strtod_l+0x8f8>
 8007e8a:	4ba7      	ldr	r3, [pc, #668]	; (8008128 <_strtod_l+0xb10>)
 8007e8c:	429d      	cmp	r5, r3
 8007e8e:	d102      	bne.n	8007e96 <_strtod_l+0x87e>
 8007e90:	3001      	adds	r0, #1
 8007e92:	f43f addf 	beq.w	8007a54 <_strtod_l+0x43c>
 8007e96:	4ba3      	ldr	r3, [pc, #652]	; (8008124 <_strtod_l+0xb0c>)
 8007e98:	402b      	ands	r3, r5
 8007e9a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007e9e:	f04f 0a00 	mov.w	sl, #0
 8007ea2:	e7a0      	b.n	8007de6 <_strtod_l+0x7ce>
 8007ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea8:	e7ed      	b.n	8007e86 <_strtod_l+0x86e>
 8007eaa:	460b      	mov	r3, r1
 8007eac:	e7eb      	b.n	8007e86 <_strtod_l+0x86e>
 8007eae:	bb7b      	cbnz	r3, 8007f10 <_strtod_l+0x8f8>
 8007eb0:	f1ba 0f00 	cmp.w	sl, #0
 8007eb4:	d12c      	bne.n	8007f10 <_strtod_l+0x8f8>
 8007eb6:	9904      	ldr	r1, [sp, #16]
 8007eb8:	4a9a      	ldr	r2, [pc, #616]	; (8008124 <_strtod_l+0xb0c>)
 8007eba:	465b      	mov	r3, fp
 8007ebc:	b1f1      	cbz	r1, 8007efc <_strtod_l+0x8e4>
 8007ebe:	ea02 010b 	and.w	r1, r2, fp
 8007ec2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007ec6:	dc19      	bgt.n	8007efc <_strtod_l+0x8e4>
 8007ec8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007ecc:	f77f ae5b 	ble.w	8007b86 <_strtod_l+0x56e>
 8007ed0:	4a96      	ldr	r2, [pc, #600]	; (800812c <_strtod_l+0xb14>)
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007ed8:	4650      	mov	r0, sl
 8007eda:	4659      	mov	r1, fp
 8007edc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007ee0:	f7f8 fb92 	bl	8000608 <__aeabi_dmul>
 8007ee4:	4682      	mov	sl, r0
 8007ee6:	468b      	mov	fp, r1
 8007ee8:	2900      	cmp	r1, #0
 8007eea:	f47f adbe 	bne.w	8007a6a <_strtod_l+0x452>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	f47f adbb 	bne.w	8007a6a <_strtod_l+0x452>
 8007ef4:	2322      	movs	r3, #34	; 0x22
 8007ef6:	f8c9 3000 	str.w	r3, [r9]
 8007efa:	e5b6      	b.n	8007a6a <_strtod_l+0x452>
 8007efc:	4013      	ands	r3, r2
 8007efe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007f02:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007f06:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007f0a:	f04f 3aff 	mov.w	sl, #4294967295
 8007f0e:	e76a      	b.n	8007de6 <_strtod_l+0x7ce>
 8007f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f12:	b193      	cbz	r3, 8007f3a <_strtod_l+0x922>
 8007f14:	422b      	tst	r3, r5
 8007f16:	f43f af66 	beq.w	8007de6 <_strtod_l+0x7ce>
 8007f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f1c:	9a04      	ldr	r2, [sp, #16]
 8007f1e:	4650      	mov	r0, sl
 8007f20:	4659      	mov	r1, fp
 8007f22:	b173      	cbz	r3, 8007f42 <_strtod_l+0x92a>
 8007f24:	f7ff fb5c 	bl	80075e0 <sulp>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f30:	f7f8 f9b4 	bl	800029c <__adddf3>
 8007f34:	4682      	mov	sl, r0
 8007f36:	468b      	mov	fp, r1
 8007f38:	e755      	b.n	8007de6 <_strtod_l+0x7ce>
 8007f3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f3c:	ea13 0f0a 	tst.w	r3, sl
 8007f40:	e7e9      	b.n	8007f16 <_strtod_l+0x8fe>
 8007f42:	f7ff fb4d 	bl	80075e0 <sulp>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f4e:	f7f8 f9a3 	bl	8000298 <__aeabi_dsub>
 8007f52:	2200      	movs	r2, #0
 8007f54:	2300      	movs	r3, #0
 8007f56:	4682      	mov	sl, r0
 8007f58:	468b      	mov	fp, r1
 8007f5a:	f7f8 fdbd 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	f47f ae11 	bne.w	8007b86 <_strtod_l+0x56e>
 8007f64:	e73f      	b.n	8007de6 <_strtod_l+0x7ce>
 8007f66:	4641      	mov	r1, r8
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f002 f9aa 	bl	800a2c2 <__ratio>
 8007f6e:	ec57 6b10 	vmov	r6, r7, d0
 8007f72:	2200      	movs	r2, #0
 8007f74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f78:	ee10 0a10 	vmov	r0, s0
 8007f7c:	4639      	mov	r1, r7
 8007f7e:	f7f8 fdbf 	bl	8000b00 <__aeabi_dcmple>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d077      	beq.n	8008076 <_strtod_l+0xa5e>
 8007f86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d04a      	beq.n	8008022 <_strtod_l+0xa0a>
 8007f8c:	4b68      	ldr	r3, [pc, #416]	; (8008130 <_strtod_l+0xb18>)
 8007f8e:	2200      	movs	r2, #0
 8007f90:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007f94:	4f66      	ldr	r7, [pc, #408]	; (8008130 <_strtod_l+0xb18>)
 8007f96:	2600      	movs	r6, #0
 8007f98:	4b62      	ldr	r3, [pc, #392]	; (8008124 <_strtod_l+0xb0c>)
 8007f9a:	402b      	ands	r3, r5
 8007f9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007fa0:	4b64      	ldr	r3, [pc, #400]	; (8008134 <_strtod_l+0xb1c>)
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	f040 80ce 	bne.w	8008144 <_strtod_l+0xb2c>
 8007fa8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007fac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007fb0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8007fb4:	ec4b ab10 	vmov	d0, sl, fp
 8007fb8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007fbc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007fc0:	f002 f8ba 	bl	800a138 <__ulp>
 8007fc4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007fc8:	ec53 2b10 	vmov	r2, r3, d0
 8007fcc:	f7f8 fb1c 	bl	8000608 <__aeabi_dmul>
 8007fd0:	4652      	mov	r2, sl
 8007fd2:	465b      	mov	r3, fp
 8007fd4:	f7f8 f962 	bl	800029c <__adddf3>
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4952      	ldr	r1, [pc, #328]	; (8008124 <_strtod_l+0xb0c>)
 8007fdc:	4a56      	ldr	r2, [pc, #344]	; (8008138 <_strtod_l+0xb20>)
 8007fde:	4019      	ands	r1, r3
 8007fe0:	4291      	cmp	r1, r2
 8007fe2:	4682      	mov	sl, r0
 8007fe4:	d95b      	bls.n	800809e <_strtod_l+0xa86>
 8007fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d103      	bne.n	8007ff8 <_strtod_l+0x9e0>
 8007ff0:	9b08      	ldr	r3, [sp, #32]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	f43f ad2e 	beq.w	8007a54 <_strtod_l+0x43c>
 8007ff8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008128 <_strtod_l+0xb10>
 8007ffc:	f04f 3aff 	mov.w	sl, #4294967295
 8008000:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008002:	4648      	mov	r0, r9
 8008004:	f001 fe00 	bl	8009c08 <_Bfree>
 8008008:	9905      	ldr	r1, [sp, #20]
 800800a:	4648      	mov	r0, r9
 800800c:	f001 fdfc 	bl	8009c08 <_Bfree>
 8008010:	4641      	mov	r1, r8
 8008012:	4648      	mov	r0, r9
 8008014:	f001 fdf8 	bl	8009c08 <_Bfree>
 8008018:	4621      	mov	r1, r4
 800801a:	4648      	mov	r0, r9
 800801c:	f001 fdf4 	bl	8009c08 <_Bfree>
 8008020:	e619      	b.n	8007c56 <_strtod_l+0x63e>
 8008022:	f1ba 0f00 	cmp.w	sl, #0
 8008026:	d11a      	bne.n	800805e <_strtod_l+0xa46>
 8008028:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800802c:	b9eb      	cbnz	r3, 800806a <_strtod_l+0xa52>
 800802e:	2200      	movs	r2, #0
 8008030:	4b3f      	ldr	r3, [pc, #252]	; (8008130 <_strtod_l+0xb18>)
 8008032:	4630      	mov	r0, r6
 8008034:	4639      	mov	r1, r7
 8008036:	f7f8 fd59 	bl	8000aec <__aeabi_dcmplt>
 800803a:	b9c8      	cbnz	r0, 8008070 <_strtod_l+0xa58>
 800803c:	4630      	mov	r0, r6
 800803e:	4639      	mov	r1, r7
 8008040:	2200      	movs	r2, #0
 8008042:	4b3e      	ldr	r3, [pc, #248]	; (800813c <_strtod_l+0xb24>)
 8008044:	f7f8 fae0 	bl	8000608 <__aeabi_dmul>
 8008048:	4606      	mov	r6, r0
 800804a:	460f      	mov	r7, r1
 800804c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008050:	9618      	str	r6, [sp, #96]	; 0x60
 8008052:	9319      	str	r3, [sp, #100]	; 0x64
 8008054:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008058:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800805c:	e79c      	b.n	8007f98 <_strtod_l+0x980>
 800805e:	f1ba 0f01 	cmp.w	sl, #1
 8008062:	d102      	bne.n	800806a <_strtod_l+0xa52>
 8008064:	2d00      	cmp	r5, #0
 8008066:	f43f ad8e 	beq.w	8007b86 <_strtod_l+0x56e>
 800806a:	2200      	movs	r2, #0
 800806c:	4b34      	ldr	r3, [pc, #208]	; (8008140 <_strtod_l+0xb28>)
 800806e:	e78f      	b.n	8007f90 <_strtod_l+0x978>
 8008070:	2600      	movs	r6, #0
 8008072:	4f32      	ldr	r7, [pc, #200]	; (800813c <_strtod_l+0xb24>)
 8008074:	e7ea      	b.n	800804c <_strtod_l+0xa34>
 8008076:	4b31      	ldr	r3, [pc, #196]	; (800813c <_strtod_l+0xb24>)
 8008078:	4630      	mov	r0, r6
 800807a:	4639      	mov	r1, r7
 800807c:	2200      	movs	r2, #0
 800807e:	f7f8 fac3 	bl	8000608 <__aeabi_dmul>
 8008082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008084:	4606      	mov	r6, r0
 8008086:	460f      	mov	r7, r1
 8008088:	b933      	cbnz	r3, 8008098 <_strtod_l+0xa80>
 800808a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800808e:	9010      	str	r0, [sp, #64]	; 0x40
 8008090:	9311      	str	r3, [sp, #68]	; 0x44
 8008092:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008096:	e7df      	b.n	8008058 <_strtod_l+0xa40>
 8008098:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800809c:	e7f9      	b.n	8008092 <_strtod_l+0xa7a>
 800809e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80080a2:	9b04      	ldr	r3, [sp, #16]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1ab      	bne.n	8008000 <_strtod_l+0x9e8>
 80080a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80080ac:	0d1b      	lsrs	r3, r3, #20
 80080ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080b0:	051b      	lsls	r3, r3, #20
 80080b2:	429a      	cmp	r2, r3
 80080b4:	465d      	mov	r5, fp
 80080b6:	d1a3      	bne.n	8008000 <_strtod_l+0x9e8>
 80080b8:	4639      	mov	r1, r7
 80080ba:	4630      	mov	r0, r6
 80080bc:	f7f8 fd54 	bl	8000b68 <__aeabi_d2iz>
 80080c0:	f7f8 fa38 	bl	8000534 <__aeabi_i2d>
 80080c4:	460b      	mov	r3, r1
 80080c6:	4602      	mov	r2, r0
 80080c8:	4639      	mov	r1, r7
 80080ca:	4630      	mov	r0, r6
 80080cc:	f7f8 f8e4 	bl	8000298 <__aeabi_dsub>
 80080d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080d2:	4606      	mov	r6, r0
 80080d4:	460f      	mov	r7, r1
 80080d6:	b933      	cbnz	r3, 80080e6 <_strtod_l+0xace>
 80080d8:	f1ba 0f00 	cmp.w	sl, #0
 80080dc:	d103      	bne.n	80080e6 <_strtod_l+0xace>
 80080de:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80080e2:	2d00      	cmp	r5, #0
 80080e4:	d06d      	beq.n	80081c2 <_strtod_l+0xbaa>
 80080e6:	a30a      	add	r3, pc, #40	; (adr r3, 8008110 <_strtod_l+0xaf8>)
 80080e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ec:	4630      	mov	r0, r6
 80080ee:	4639      	mov	r1, r7
 80080f0:	f7f8 fcfc 	bl	8000aec <__aeabi_dcmplt>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	f47f acb8 	bne.w	8007a6a <_strtod_l+0x452>
 80080fa:	a307      	add	r3, pc, #28	; (adr r3, 8008118 <_strtod_l+0xb00>)
 80080fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008100:	4630      	mov	r0, r6
 8008102:	4639      	mov	r1, r7
 8008104:	f7f8 fd10 	bl	8000b28 <__aeabi_dcmpgt>
 8008108:	2800      	cmp	r0, #0
 800810a:	f43f af79 	beq.w	8008000 <_strtod_l+0x9e8>
 800810e:	e4ac      	b.n	8007a6a <_strtod_l+0x452>
 8008110:	94a03595 	.word	0x94a03595
 8008114:	3fdfffff 	.word	0x3fdfffff
 8008118:	35afe535 	.word	0x35afe535
 800811c:	3fe00000 	.word	0x3fe00000
 8008120:	000fffff 	.word	0x000fffff
 8008124:	7ff00000 	.word	0x7ff00000
 8008128:	7fefffff 	.word	0x7fefffff
 800812c:	39500000 	.word	0x39500000
 8008130:	3ff00000 	.word	0x3ff00000
 8008134:	7fe00000 	.word	0x7fe00000
 8008138:	7c9fffff 	.word	0x7c9fffff
 800813c:	3fe00000 	.word	0x3fe00000
 8008140:	bff00000 	.word	0xbff00000
 8008144:	9b04      	ldr	r3, [sp, #16]
 8008146:	b333      	cbz	r3, 8008196 <_strtod_l+0xb7e>
 8008148:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800814a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800814e:	d822      	bhi.n	8008196 <_strtod_l+0xb7e>
 8008150:	a327      	add	r3, pc, #156	; (adr r3, 80081f0 <_strtod_l+0xbd8>)
 8008152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008156:	4630      	mov	r0, r6
 8008158:	4639      	mov	r1, r7
 800815a:	f7f8 fcd1 	bl	8000b00 <__aeabi_dcmple>
 800815e:	b1a0      	cbz	r0, 800818a <_strtod_l+0xb72>
 8008160:	4639      	mov	r1, r7
 8008162:	4630      	mov	r0, r6
 8008164:	f7f8 fd28 	bl	8000bb8 <__aeabi_d2uiz>
 8008168:	2800      	cmp	r0, #0
 800816a:	bf08      	it	eq
 800816c:	2001      	moveq	r0, #1
 800816e:	f7f8 f9d1 	bl	8000514 <__aeabi_ui2d>
 8008172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008174:	4606      	mov	r6, r0
 8008176:	460f      	mov	r7, r1
 8008178:	bb03      	cbnz	r3, 80081bc <_strtod_l+0xba4>
 800817a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800817e:	9012      	str	r0, [sp, #72]	; 0x48
 8008180:	9313      	str	r3, [sp, #76]	; 0x4c
 8008182:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008186:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800818a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800818c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800818e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008192:	1a9b      	subs	r3, r3, r2
 8008194:	930b      	str	r3, [sp, #44]	; 0x2c
 8008196:	ed9d 0b08 	vldr	d0, [sp, #32]
 800819a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800819e:	f001 ffcb 	bl	800a138 <__ulp>
 80081a2:	4650      	mov	r0, sl
 80081a4:	ec53 2b10 	vmov	r2, r3, d0
 80081a8:	4659      	mov	r1, fp
 80081aa:	f7f8 fa2d 	bl	8000608 <__aeabi_dmul>
 80081ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80081b2:	f7f8 f873 	bl	800029c <__adddf3>
 80081b6:	4682      	mov	sl, r0
 80081b8:	468b      	mov	fp, r1
 80081ba:	e772      	b.n	80080a2 <_strtod_l+0xa8a>
 80081bc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80081c0:	e7df      	b.n	8008182 <_strtod_l+0xb6a>
 80081c2:	a30d      	add	r3, pc, #52	; (adr r3, 80081f8 <_strtod_l+0xbe0>)
 80081c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c8:	f7f8 fc90 	bl	8000aec <__aeabi_dcmplt>
 80081cc:	e79c      	b.n	8008108 <_strtod_l+0xaf0>
 80081ce:	2300      	movs	r3, #0
 80081d0:	930d      	str	r3, [sp, #52]	; 0x34
 80081d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80081d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	f7ff ba61 	b.w	800769e <_strtod_l+0x86>
 80081dc:	2b65      	cmp	r3, #101	; 0x65
 80081de:	f04f 0200 	mov.w	r2, #0
 80081e2:	f43f ab4e 	beq.w	8007882 <_strtod_l+0x26a>
 80081e6:	2101      	movs	r1, #1
 80081e8:	4614      	mov	r4, r2
 80081ea:	9104      	str	r1, [sp, #16]
 80081ec:	f7ff bacb 	b.w	8007786 <_strtod_l+0x16e>
 80081f0:	ffc00000 	.word	0xffc00000
 80081f4:	41dfffff 	.word	0x41dfffff
 80081f8:	94a03595 	.word	0x94a03595
 80081fc:	3fcfffff 	.word	0x3fcfffff

08008200 <_strtod_r>:
 8008200:	4b05      	ldr	r3, [pc, #20]	; (8008218 <_strtod_r+0x18>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	b410      	push	{r4}
 8008206:	6a1b      	ldr	r3, [r3, #32]
 8008208:	4c04      	ldr	r4, [pc, #16]	; (800821c <_strtod_r+0x1c>)
 800820a:	2b00      	cmp	r3, #0
 800820c:	bf08      	it	eq
 800820e:	4623      	moveq	r3, r4
 8008210:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008214:	f7ff ba00 	b.w	8007618 <_strtod_l>
 8008218:	20000010 	.word	0x20000010
 800821c:	20000074 	.word	0x20000074

08008220 <_strtol_l.isra.0>:
 8008220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008224:	4680      	mov	r8, r0
 8008226:	4689      	mov	r9, r1
 8008228:	4692      	mov	sl, r2
 800822a:	461e      	mov	r6, r3
 800822c:	460f      	mov	r7, r1
 800822e:	463d      	mov	r5, r7
 8008230:	9808      	ldr	r0, [sp, #32]
 8008232:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008236:	f001 fc27 	bl	8009a88 <__locale_ctype_ptr_l>
 800823a:	4420      	add	r0, r4
 800823c:	7843      	ldrb	r3, [r0, #1]
 800823e:	f013 0308 	ands.w	r3, r3, #8
 8008242:	d132      	bne.n	80082aa <_strtol_l.isra.0+0x8a>
 8008244:	2c2d      	cmp	r4, #45	; 0x2d
 8008246:	d132      	bne.n	80082ae <_strtol_l.isra.0+0x8e>
 8008248:	787c      	ldrb	r4, [r7, #1]
 800824a:	1cbd      	adds	r5, r7, #2
 800824c:	2201      	movs	r2, #1
 800824e:	2e00      	cmp	r6, #0
 8008250:	d05d      	beq.n	800830e <_strtol_l.isra.0+0xee>
 8008252:	2e10      	cmp	r6, #16
 8008254:	d109      	bne.n	800826a <_strtol_l.isra.0+0x4a>
 8008256:	2c30      	cmp	r4, #48	; 0x30
 8008258:	d107      	bne.n	800826a <_strtol_l.isra.0+0x4a>
 800825a:	782b      	ldrb	r3, [r5, #0]
 800825c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008260:	2b58      	cmp	r3, #88	; 0x58
 8008262:	d14f      	bne.n	8008304 <_strtol_l.isra.0+0xe4>
 8008264:	786c      	ldrb	r4, [r5, #1]
 8008266:	2610      	movs	r6, #16
 8008268:	3502      	adds	r5, #2
 800826a:	2a00      	cmp	r2, #0
 800826c:	bf14      	ite	ne
 800826e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008272:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008276:	2700      	movs	r7, #0
 8008278:	fbb1 fcf6 	udiv	ip, r1, r6
 800827c:	4638      	mov	r0, r7
 800827e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008282:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008286:	2b09      	cmp	r3, #9
 8008288:	d817      	bhi.n	80082ba <_strtol_l.isra.0+0x9a>
 800828a:	461c      	mov	r4, r3
 800828c:	42a6      	cmp	r6, r4
 800828e:	dd23      	ble.n	80082d8 <_strtol_l.isra.0+0xb8>
 8008290:	1c7b      	adds	r3, r7, #1
 8008292:	d007      	beq.n	80082a4 <_strtol_l.isra.0+0x84>
 8008294:	4584      	cmp	ip, r0
 8008296:	d31c      	bcc.n	80082d2 <_strtol_l.isra.0+0xb2>
 8008298:	d101      	bne.n	800829e <_strtol_l.isra.0+0x7e>
 800829a:	45a6      	cmp	lr, r4
 800829c:	db19      	blt.n	80082d2 <_strtol_l.isra.0+0xb2>
 800829e:	fb00 4006 	mla	r0, r0, r6, r4
 80082a2:	2701      	movs	r7, #1
 80082a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80082a8:	e7eb      	b.n	8008282 <_strtol_l.isra.0+0x62>
 80082aa:	462f      	mov	r7, r5
 80082ac:	e7bf      	b.n	800822e <_strtol_l.isra.0+0xe>
 80082ae:	2c2b      	cmp	r4, #43	; 0x2b
 80082b0:	bf04      	itt	eq
 80082b2:	1cbd      	addeq	r5, r7, #2
 80082b4:	787c      	ldrbeq	r4, [r7, #1]
 80082b6:	461a      	mov	r2, r3
 80082b8:	e7c9      	b.n	800824e <_strtol_l.isra.0+0x2e>
 80082ba:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80082be:	2b19      	cmp	r3, #25
 80082c0:	d801      	bhi.n	80082c6 <_strtol_l.isra.0+0xa6>
 80082c2:	3c37      	subs	r4, #55	; 0x37
 80082c4:	e7e2      	b.n	800828c <_strtol_l.isra.0+0x6c>
 80082c6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80082ca:	2b19      	cmp	r3, #25
 80082cc:	d804      	bhi.n	80082d8 <_strtol_l.isra.0+0xb8>
 80082ce:	3c57      	subs	r4, #87	; 0x57
 80082d0:	e7dc      	b.n	800828c <_strtol_l.isra.0+0x6c>
 80082d2:	f04f 37ff 	mov.w	r7, #4294967295
 80082d6:	e7e5      	b.n	80082a4 <_strtol_l.isra.0+0x84>
 80082d8:	1c7b      	adds	r3, r7, #1
 80082da:	d108      	bne.n	80082ee <_strtol_l.isra.0+0xce>
 80082dc:	2322      	movs	r3, #34	; 0x22
 80082de:	f8c8 3000 	str.w	r3, [r8]
 80082e2:	4608      	mov	r0, r1
 80082e4:	f1ba 0f00 	cmp.w	sl, #0
 80082e8:	d107      	bne.n	80082fa <_strtol_l.isra.0+0xda>
 80082ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ee:	b102      	cbz	r2, 80082f2 <_strtol_l.isra.0+0xd2>
 80082f0:	4240      	negs	r0, r0
 80082f2:	f1ba 0f00 	cmp.w	sl, #0
 80082f6:	d0f8      	beq.n	80082ea <_strtol_l.isra.0+0xca>
 80082f8:	b10f      	cbz	r7, 80082fe <_strtol_l.isra.0+0xde>
 80082fa:	f105 39ff 	add.w	r9, r5, #4294967295
 80082fe:	f8ca 9000 	str.w	r9, [sl]
 8008302:	e7f2      	b.n	80082ea <_strtol_l.isra.0+0xca>
 8008304:	2430      	movs	r4, #48	; 0x30
 8008306:	2e00      	cmp	r6, #0
 8008308:	d1af      	bne.n	800826a <_strtol_l.isra.0+0x4a>
 800830a:	2608      	movs	r6, #8
 800830c:	e7ad      	b.n	800826a <_strtol_l.isra.0+0x4a>
 800830e:	2c30      	cmp	r4, #48	; 0x30
 8008310:	d0a3      	beq.n	800825a <_strtol_l.isra.0+0x3a>
 8008312:	260a      	movs	r6, #10
 8008314:	e7a9      	b.n	800826a <_strtol_l.isra.0+0x4a>
	...

08008318 <_strtol_r>:
 8008318:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800831a:	4c06      	ldr	r4, [pc, #24]	; (8008334 <_strtol_r+0x1c>)
 800831c:	4d06      	ldr	r5, [pc, #24]	; (8008338 <_strtol_r+0x20>)
 800831e:	6824      	ldr	r4, [r4, #0]
 8008320:	6a24      	ldr	r4, [r4, #32]
 8008322:	2c00      	cmp	r4, #0
 8008324:	bf08      	it	eq
 8008326:	462c      	moveq	r4, r5
 8008328:	9400      	str	r4, [sp, #0]
 800832a:	f7ff ff79 	bl	8008220 <_strtol_l.isra.0>
 800832e:	b003      	add	sp, #12
 8008330:	bd30      	pop	{r4, r5, pc}
 8008332:	bf00      	nop
 8008334:	20000010 	.word	0x20000010
 8008338:	20000074 	.word	0x20000074

0800833c <__swbuf_r>:
 800833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833e:	460e      	mov	r6, r1
 8008340:	4614      	mov	r4, r2
 8008342:	4605      	mov	r5, r0
 8008344:	b118      	cbz	r0, 800834e <__swbuf_r+0x12>
 8008346:	6983      	ldr	r3, [r0, #24]
 8008348:	b90b      	cbnz	r3, 800834e <__swbuf_r+0x12>
 800834a:	f000 ffed 	bl	8009328 <__sinit>
 800834e:	4b21      	ldr	r3, [pc, #132]	; (80083d4 <__swbuf_r+0x98>)
 8008350:	429c      	cmp	r4, r3
 8008352:	d12a      	bne.n	80083aa <__swbuf_r+0x6e>
 8008354:	686c      	ldr	r4, [r5, #4]
 8008356:	69a3      	ldr	r3, [r4, #24]
 8008358:	60a3      	str	r3, [r4, #8]
 800835a:	89a3      	ldrh	r3, [r4, #12]
 800835c:	071a      	lsls	r2, r3, #28
 800835e:	d52e      	bpl.n	80083be <__swbuf_r+0x82>
 8008360:	6923      	ldr	r3, [r4, #16]
 8008362:	b363      	cbz	r3, 80083be <__swbuf_r+0x82>
 8008364:	6923      	ldr	r3, [r4, #16]
 8008366:	6820      	ldr	r0, [r4, #0]
 8008368:	1ac0      	subs	r0, r0, r3
 800836a:	6963      	ldr	r3, [r4, #20]
 800836c:	b2f6      	uxtb	r6, r6
 800836e:	4283      	cmp	r3, r0
 8008370:	4637      	mov	r7, r6
 8008372:	dc04      	bgt.n	800837e <__swbuf_r+0x42>
 8008374:	4621      	mov	r1, r4
 8008376:	4628      	mov	r0, r5
 8008378:	f000 ff6c 	bl	8009254 <_fflush_r>
 800837c:	bb28      	cbnz	r0, 80083ca <__swbuf_r+0x8e>
 800837e:	68a3      	ldr	r3, [r4, #8]
 8008380:	3b01      	subs	r3, #1
 8008382:	60a3      	str	r3, [r4, #8]
 8008384:	6823      	ldr	r3, [r4, #0]
 8008386:	1c5a      	adds	r2, r3, #1
 8008388:	6022      	str	r2, [r4, #0]
 800838a:	701e      	strb	r6, [r3, #0]
 800838c:	6963      	ldr	r3, [r4, #20]
 800838e:	3001      	adds	r0, #1
 8008390:	4283      	cmp	r3, r0
 8008392:	d004      	beq.n	800839e <__swbuf_r+0x62>
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	07db      	lsls	r3, r3, #31
 8008398:	d519      	bpl.n	80083ce <__swbuf_r+0x92>
 800839a:	2e0a      	cmp	r6, #10
 800839c:	d117      	bne.n	80083ce <__swbuf_r+0x92>
 800839e:	4621      	mov	r1, r4
 80083a0:	4628      	mov	r0, r5
 80083a2:	f000 ff57 	bl	8009254 <_fflush_r>
 80083a6:	b190      	cbz	r0, 80083ce <__swbuf_r+0x92>
 80083a8:	e00f      	b.n	80083ca <__swbuf_r+0x8e>
 80083aa:	4b0b      	ldr	r3, [pc, #44]	; (80083d8 <__swbuf_r+0x9c>)
 80083ac:	429c      	cmp	r4, r3
 80083ae:	d101      	bne.n	80083b4 <__swbuf_r+0x78>
 80083b0:	68ac      	ldr	r4, [r5, #8]
 80083b2:	e7d0      	b.n	8008356 <__swbuf_r+0x1a>
 80083b4:	4b09      	ldr	r3, [pc, #36]	; (80083dc <__swbuf_r+0xa0>)
 80083b6:	429c      	cmp	r4, r3
 80083b8:	bf08      	it	eq
 80083ba:	68ec      	ldreq	r4, [r5, #12]
 80083bc:	e7cb      	b.n	8008356 <__swbuf_r+0x1a>
 80083be:	4621      	mov	r1, r4
 80083c0:	4628      	mov	r0, r5
 80083c2:	f000 f80d 	bl	80083e0 <__swsetup_r>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	d0cc      	beq.n	8008364 <__swbuf_r+0x28>
 80083ca:	f04f 37ff 	mov.w	r7, #4294967295
 80083ce:	4638      	mov	r0, r7
 80083d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083d2:	bf00      	nop
 80083d4:	0800ad00 	.word	0x0800ad00
 80083d8:	0800ad20 	.word	0x0800ad20
 80083dc:	0800ace0 	.word	0x0800ace0

080083e0 <__swsetup_r>:
 80083e0:	4b32      	ldr	r3, [pc, #200]	; (80084ac <__swsetup_r+0xcc>)
 80083e2:	b570      	push	{r4, r5, r6, lr}
 80083e4:	681d      	ldr	r5, [r3, #0]
 80083e6:	4606      	mov	r6, r0
 80083e8:	460c      	mov	r4, r1
 80083ea:	b125      	cbz	r5, 80083f6 <__swsetup_r+0x16>
 80083ec:	69ab      	ldr	r3, [r5, #24]
 80083ee:	b913      	cbnz	r3, 80083f6 <__swsetup_r+0x16>
 80083f0:	4628      	mov	r0, r5
 80083f2:	f000 ff99 	bl	8009328 <__sinit>
 80083f6:	4b2e      	ldr	r3, [pc, #184]	; (80084b0 <__swsetup_r+0xd0>)
 80083f8:	429c      	cmp	r4, r3
 80083fa:	d10f      	bne.n	800841c <__swsetup_r+0x3c>
 80083fc:	686c      	ldr	r4, [r5, #4]
 80083fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008402:	b29a      	uxth	r2, r3
 8008404:	0715      	lsls	r5, r2, #28
 8008406:	d42c      	bmi.n	8008462 <__swsetup_r+0x82>
 8008408:	06d0      	lsls	r0, r2, #27
 800840a:	d411      	bmi.n	8008430 <__swsetup_r+0x50>
 800840c:	2209      	movs	r2, #9
 800840e:	6032      	str	r2, [r6, #0]
 8008410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008414:	81a3      	strh	r3, [r4, #12]
 8008416:	f04f 30ff 	mov.w	r0, #4294967295
 800841a:	e03e      	b.n	800849a <__swsetup_r+0xba>
 800841c:	4b25      	ldr	r3, [pc, #148]	; (80084b4 <__swsetup_r+0xd4>)
 800841e:	429c      	cmp	r4, r3
 8008420:	d101      	bne.n	8008426 <__swsetup_r+0x46>
 8008422:	68ac      	ldr	r4, [r5, #8]
 8008424:	e7eb      	b.n	80083fe <__swsetup_r+0x1e>
 8008426:	4b24      	ldr	r3, [pc, #144]	; (80084b8 <__swsetup_r+0xd8>)
 8008428:	429c      	cmp	r4, r3
 800842a:	bf08      	it	eq
 800842c:	68ec      	ldreq	r4, [r5, #12]
 800842e:	e7e6      	b.n	80083fe <__swsetup_r+0x1e>
 8008430:	0751      	lsls	r1, r2, #29
 8008432:	d512      	bpl.n	800845a <__swsetup_r+0x7a>
 8008434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008436:	b141      	cbz	r1, 800844a <__swsetup_r+0x6a>
 8008438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800843c:	4299      	cmp	r1, r3
 800843e:	d002      	beq.n	8008446 <__swsetup_r+0x66>
 8008440:	4630      	mov	r0, r6
 8008442:	f7fe f875 	bl	8006530 <_free_r>
 8008446:	2300      	movs	r3, #0
 8008448:	6363      	str	r3, [r4, #52]	; 0x34
 800844a:	89a3      	ldrh	r3, [r4, #12]
 800844c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008450:	81a3      	strh	r3, [r4, #12]
 8008452:	2300      	movs	r3, #0
 8008454:	6063      	str	r3, [r4, #4]
 8008456:	6923      	ldr	r3, [r4, #16]
 8008458:	6023      	str	r3, [r4, #0]
 800845a:	89a3      	ldrh	r3, [r4, #12]
 800845c:	f043 0308 	orr.w	r3, r3, #8
 8008460:	81a3      	strh	r3, [r4, #12]
 8008462:	6923      	ldr	r3, [r4, #16]
 8008464:	b94b      	cbnz	r3, 800847a <__swsetup_r+0x9a>
 8008466:	89a3      	ldrh	r3, [r4, #12]
 8008468:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800846c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008470:	d003      	beq.n	800847a <__swsetup_r+0x9a>
 8008472:	4621      	mov	r1, r4
 8008474:	4630      	mov	r0, r6
 8008476:	f001 fb3f 	bl	8009af8 <__smakebuf_r>
 800847a:	89a2      	ldrh	r2, [r4, #12]
 800847c:	f012 0301 	ands.w	r3, r2, #1
 8008480:	d00c      	beq.n	800849c <__swsetup_r+0xbc>
 8008482:	2300      	movs	r3, #0
 8008484:	60a3      	str	r3, [r4, #8]
 8008486:	6963      	ldr	r3, [r4, #20]
 8008488:	425b      	negs	r3, r3
 800848a:	61a3      	str	r3, [r4, #24]
 800848c:	6923      	ldr	r3, [r4, #16]
 800848e:	b953      	cbnz	r3, 80084a6 <__swsetup_r+0xc6>
 8008490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008494:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008498:	d1ba      	bne.n	8008410 <__swsetup_r+0x30>
 800849a:	bd70      	pop	{r4, r5, r6, pc}
 800849c:	0792      	lsls	r2, r2, #30
 800849e:	bf58      	it	pl
 80084a0:	6963      	ldrpl	r3, [r4, #20]
 80084a2:	60a3      	str	r3, [r4, #8]
 80084a4:	e7f2      	b.n	800848c <__swsetup_r+0xac>
 80084a6:	2000      	movs	r0, #0
 80084a8:	e7f7      	b.n	800849a <__swsetup_r+0xba>
 80084aa:	bf00      	nop
 80084ac:	20000010 	.word	0x20000010
 80084b0:	0800ad00 	.word	0x0800ad00
 80084b4:	0800ad20 	.word	0x0800ad20
 80084b8:	0800ace0 	.word	0x0800ace0

080084bc <quorem>:
 80084bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c0:	6903      	ldr	r3, [r0, #16]
 80084c2:	690c      	ldr	r4, [r1, #16]
 80084c4:	42a3      	cmp	r3, r4
 80084c6:	4680      	mov	r8, r0
 80084c8:	f2c0 8082 	blt.w	80085d0 <quorem+0x114>
 80084cc:	3c01      	subs	r4, #1
 80084ce:	f101 0714 	add.w	r7, r1, #20
 80084d2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80084d6:	f100 0614 	add.w	r6, r0, #20
 80084da:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80084de:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80084e2:	eb06 030c 	add.w	r3, r6, ip
 80084e6:	3501      	adds	r5, #1
 80084e8:	eb07 090c 	add.w	r9, r7, ip
 80084ec:	9301      	str	r3, [sp, #4]
 80084ee:	fbb0 f5f5 	udiv	r5, r0, r5
 80084f2:	b395      	cbz	r5, 800855a <quorem+0x9e>
 80084f4:	f04f 0a00 	mov.w	sl, #0
 80084f8:	4638      	mov	r0, r7
 80084fa:	46b6      	mov	lr, r6
 80084fc:	46d3      	mov	fp, sl
 80084fe:	f850 2b04 	ldr.w	r2, [r0], #4
 8008502:	b293      	uxth	r3, r2
 8008504:	fb05 a303 	mla	r3, r5, r3, sl
 8008508:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800850c:	b29b      	uxth	r3, r3
 800850e:	ebab 0303 	sub.w	r3, fp, r3
 8008512:	0c12      	lsrs	r2, r2, #16
 8008514:	f8de b000 	ldr.w	fp, [lr]
 8008518:	fb05 a202 	mla	r2, r5, r2, sl
 800851c:	fa13 f38b 	uxtah	r3, r3, fp
 8008520:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008524:	fa1f fb82 	uxth.w	fp, r2
 8008528:	f8de 2000 	ldr.w	r2, [lr]
 800852c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008530:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008534:	b29b      	uxth	r3, r3
 8008536:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800853a:	4581      	cmp	r9, r0
 800853c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008540:	f84e 3b04 	str.w	r3, [lr], #4
 8008544:	d2db      	bcs.n	80084fe <quorem+0x42>
 8008546:	f856 300c 	ldr.w	r3, [r6, ip]
 800854a:	b933      	cbnz	r3, 800855a <quorem+0x9e>
 800854c:	9b01      	ldr	r3, [sp, #4]
 800854e:	3b04      	subs	r3, #4
 8008550:	429e      	cmp	r6, r3
 8008552:	461a      	mov	r2, r3
 8008554:	d330      	bcc.n	80085b8 <quorem+0xfc>
 8008556:	f8c8 4010 	str.w	r4, [r8, #16]
 800855a:	4640      	mov	r0, r8
 800855c:	f001 fd74 	bl	800a048 <__mcmp>
 8008560:	2800      	cmp	r0, #0
 8008562:	db25      	blt.n	80085b0 <quorem+0xf4>
 8008564:	3501      	adds	r5, #1
 8008566:	4630      	mov	r0, r6
 8008568:	f04f 0c00 	mov.w	ip, #0
 800856c:	f857 2b04 	ldr.w	r2, [r7], #4
 8008570:	f8d0 e000 	ldr.w	lr, [r0]
 8008574:	b293      	uxth	r3, r2
 8008576:	ebac 0303 	sub.w	r3, ip, r3
 800857a:	0c12      	lsrs	r2, r2, #16
 800857c:	fa13 f38e 	uxtah	r3, r3, lr
 8008580:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008584:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008588:	b29b      	uxth	r3, r3
 800858a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800858e:	45b9      	cmp	r9, r7
 8008590:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008594:	f840 3b04 	str.w	r3, [r0], #4
 8008598:	d2e8      	bcs.n	800856c <quorem+0xb0>
 800859a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800859e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80085a2:	b92a      	cbnz	r2, 80085b0 <quorem+0xf4>
 80085a4:	3b04      	subs	r3, #4
 80085a6:	429e      	cmp	r6, r3
 80085a8:	461a      	mov	r2, r3
 80085aa:	d30b      	bcc.n	80085c4 <quorem+0x108>
 80085ac:	f8c8 4010 	str.w	r4, [r8, #16]
 80085b0:	4628      	mov	r0, r5
 80085b2:	b003      	add	sp, #12
 80085b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b8:	6812      	ldr	r2, [r2, #0]
 80085ba:	3b04      	subs	r3, #4
 80085bc:	2a00      	cmp	r2, #0
 80085be:	d1ca      	bne.n	8008556 <quorem+0x9a>
 80085c0:	3c01      	subs	r4, #1
 80085c2:	e7c5      	b.n	8008550 <quorem+0x94>
 80085c4:	6812      	ldr	r2, [r2, #0]
 80085c6:	3b04      	subs	r3, #4
 80085c8:	2a00      	cmp	r2, #0
 80085ca:	d1ef      	bne.n	80085ac <quorem+0xf0>
 80085cc:	3c01      	subs	r4, #1
 80085ce:	e7ea      	b.n	80085a6 <quorem+0xea>
 80085d0:	2000      	movs	r0, #0
 80085d2:	e7ee      	b.n	80085b2 <quorem+0xf6>
 80085d4:	0000      	movs	r0, r0
	...

080085d8 <_dtoa_r>:
 80085d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085dc:	ec57 6b10 	vmov	r6, r7, d0
 80085e0:	b097      	sub	sp, #92	; 0x5c
 80085e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80085e4:	9106      	str	r1, [sp, #24]
 80085e6:	4604      	mov	r4, r0
 80085e8:	920b      	str	r2, [sp, #44]	; 0x2c
 80085ea:	9312      	str	r3, [sp, #72]	; 0x48
 80085ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80085f0:	e9cd 6700 	strd	r6, r7, [sp]
 80085f4:	b93d      	cbnz	r5, 8008606 <_dtoa_r+0x2e>
 80085f6:	2010      	movs	r0, #16
 80085f8:	f7fd ff70 	bl	80064dc <malloc>
 80085fc:	6260      	str	r0, [r4, #36]	; 0x24
 80085fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008602:	6005      	str	r5, [r0, #0]
 8008604:	60c5      	str	r5, [r0, #12]
 8008606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008608:	6819      	ldr	r1, [r3, #0]
 800860a:	b151      	cbz	r1, 8008622 <_dtoa_r+0x4a>
 800860c:	685a      	ldr	r2, [r3, #4]
 800860e:	604a      	str	r2, [r1, #4]
 8008610:	2301      	movs	r3, #1
 8008612:	4093      	lsls	r3, r2
 8008614:	608b      	str	r3, [r1, #8]
 8008616:	4620      	mov	r0, r4
 8008618:	f001 faf6 	bl	8009c08 <_Bfree>
 800861c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800861e:	2200      	movs	r2, #0
 8008620:	601a      	str	r2, [r3, #0]
 8008622:	1e3b      	subs	r3, r7, #0
 8008624:	bfbb      	ittet	lt
 8008626:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800862a:	9301      	strlt	r3, [sp, #4]
 800862c:	2300      	movge	r3, #0
 800862e:	2201      	movlt	r2, #1
 8008630:	bfac      	ite	ge
 8008632:	f8c8 3000 	strge.w	r3, [r8]
 8008636:	f8c8 2000 	strlt.w	r2, [r8]
 800863a:	4baf      	ldr	r3, [pc, #700]	; (80088f8 <_dtoa_r+0x320>)
 800863c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008640:	ea33 0308 	bics.w	r3, r3, r8
 8008644:	d114      	bne.n	8008670 <_dtoa_r+0x98>
 8008646:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008648:	f242 730f 	movw	r3, #9999	; 0x270f
 800864c:	6013      	str	r3, [r2, #0]
 800864e:	9b00      	ldr	r3, [sp, #0]
 8008650:	b923      	cbnz	r3, 800865c <_dtoa_r+0x84>
 8008652:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008656:	2800      	cmp	r0, #0
 8008658:	f000 8542 	beq.w	80090e0 <_dtoa_r+0xb08>
 800865c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800865e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800890c <_dtoa_r+0x334>
 8008662:	2b00      	cmp	r3, #0
 8008664:	f000 8544 	beq.w	80090f0 <_dtoa_r+0xb18>
 8008668:	f10b 0303 	add.w	r3, fp, #3
 800866c:	f000 bd3e 	b.w	80090ec <_dtoa_r+0xb14>
 8008670:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008674:	2200      	movs	r2, #0
 8008676:	2300      	movs	r3, #0
 8008678:	4630      	mov	r0, r6
 800867a:	4639      	mov	r1, r7
 800867c:	f7f8 fa2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008680:	4681      	mov	r9, r0
 8008682:	b168      	cbz	r0, 80086a0 <_dtoa_r+0xc8>
 8008684:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008686:	2301      	movs	r3, #1
 8008688:	6013      	str	r3, [r2, #0]
 800868a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 8524 	beq.w	80090da <_dtoa_r+0xb02>
 8008692:	4b9a      	ldr	r3, [pc, #616]	; (80088fc <_dtoa_r+0x324>)
 8008694:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008696:	f103 3bff 	add.w	fp, r3, #4294967295
 800869a:	6013      	str	r3, [r2, #0]
 800869c:	f000 bd28 	b.w	80090f0 <_dtoa_r+0xb18>
 80086a0:	aa14      	add	r2, sp, #80	; 0x50
 80086a2:	a915      	add	r1, sp, #84	; 0x54
 80086a4:	ec47 6b10 	vmov	d0, r6, r7
 80086a8:	4620      	mov	r0, r4
 80086aa:	f001 fdbb 	bl	800a224 <__d2b>
 80086ae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80086b2:	9004      	str	r0, [sp, #16]
 80086b4:	2d00      	cmp	r5, #0
 80086b6:	d07c      	beq.n	80087b2 <_dtoa_r+0x1da>
 80086b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086bc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80086c0:	46b2      	mov	sl, r6
 80086c2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80086c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80086ca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80086ce:	2200      	movs	r2, #0
 80086d0:	4b8b      	ldr	r3, [pc, #556]	; (8008900 <_dtoa_r+0x328>)
 80086d2:	4650      	mov	r0, sl
 80086d4:	4659      	mov	r1, fp
 80086d6:	f7f7 fddf 	bl	8000298 <__aeabi_dsub>
 80086da:	a381      	add	r3, pc, #516	; (adr r3, 80088e0 <_dtoa_r+0x308>)
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	f7f7 ff92 	bl	8000608 <__aeabi_dmul>
 80086e4:	a380      	add	r3, pc, #512	; (adr r3, 80088e8 <_dtoa_r+0x310>)
 80086e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ea:	f7f7 fdd7 	bl	800029c <__adddf3>
 80086ee:	4606      	mov	r6, r0
 80086f0:	4628      	mov	r0, r5
 80086f2:	460f      	mov	r7, r1
 80086f4:	f7f7 ff1e 	bl	8000534 <__aeabi_i2d>
 80086f8:	a37d      	add	r3, pc, #500	; (adr r3, 80088f0 <_dtoa_r+0x318>)
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	f7f7 ff83 	bl	8000608 <__aeabi_dmul>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	4630      	mov	r0, r6
 8008708:	4639      	mov	r1, r7
 800870a:	f7f7 fdc7 	bl	800029c <__adddf3>
 800870e:	4606      	mov	r6, r0
 8008710:	460f      	mov	r7, r1
 8008712:	f7f8 fa29 	bl	8000b68 <__aeabi_d2iz>
 8008716:	2200      	movs	r2, #0
 8008718:	4682      	mov	sl, r0
 800871a:	2300      	movs	r3, #0
 800871c:	4630      	mov	r0, r6
 800871e:	4639      	mov	r1, r7
 8008720:	f7f8 f9e4 	bl	8000aec <__aeabi_dcmplt>
 8008724:	b148      	cbz	r0, 800873a <_dtoa_r+0x162>
 8008726:	4650      	mov	r0, sl
 8008728:	f7f7 ff04 	bl	8000534 <__aeabi_i2d>
 800872c:	4632      	mov	r2, r6
 800872e:	463b      	mov	r3, r7
 8008730:	f7f8 f9d2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008734:	b908      	cbnz	r0, 800873a <_dtoa_r+0x162>
 8008736:	f10a 3aff 	add.w	sl, sl, #4294967295
 800873a:	f1ba 0f16 	cmp.w	sl, #22
 800873e:	d859      	bhi.n	80087f4 <_dtoa_r+0x21c>
 8008740:	4970      	ldr	r1, [pc, #448]	; (8008904 <_dtoa_r+0x32c>)
 8008742:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008746:	e9dd 2300 	ldrd	r2, r3, [sp]
 800874a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800874e:	f7f8 f9eb 	bl	8000b28 <__aeabi_dcmpgt>
 8008752:	2800      	cmp	r0, #0
 8008754:	d050      	beq.n	80087f8 <_dtoa_r+0x220>
 8008756:	f10a 3aff 	add.w	sl, sl, #4294967295
 800875a:	2300      	movs	r3, #0
 800875c:	930f      	str	r3, [sp, #60]	; 0x3c
 800875e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008760:	1b5d      	subs	r5, r3, r5
 8008762:	f1b5 0801 	subs.w	r8, r5, #1
 8008766:	bf49      	itett	mi
 8008768:	f1c5 0301 	rsbmi	r3, r5, #1
 800876c:	2300      	movpl	r3, #0
 800876e:	9305      	strmi	r3, [sp, #20]
 8008770:	f04f 0800 	movmi.w	r8, #0
 8008774:	bf58      	it	pl
 8008776:	9305      	strpl	r3, [sp, #20]
 8008778:	f1ba 0f00 	cmp.w	sl, #0
 800877c:	db3e      	blt.n	80087fc <_dtoa_r+0x224>
 800877e:	2300      	movs	r3, #0
 8008780:	44d0      	add	r8, sl
 8008782:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008786:	9307      	str	r3, [sp, #28]
 8008788:	9b06      	ldr	r3, [sp, #24]
 800878a:	2b09      	cmp	r3, #9
 800878c:	f200 8090 	bhi.w	80088b0 <_dtoa_r+0x2d8>
 8008790:	2b05      	cmp	r3, #5
 8008792:	bfc4      	itt	gt
 8008794:	3b04      	subgt	r3, #4
 8008796:	9306      	strgt	r3, [sp, #24]
 8008798:	9b06      	ldr	r3, [sp, #24]
 800879a:	f1a3 0302 	sub.w	r3, r3, #2
 800879e:	bfcc      	ite	gt
 80087a0:	2500      	movgt	r5, #0
 80087a2:	2501      	movle	r5, #1
 80087a4:	2b03      	cmp	r3, #3
 80087a6:	f200 808f 	bhi.w	80088c8 <_dtoa_r+0x2f0>
 80087aa:	e8df f003 	tbb	[pc, r3]
 80087ae:	7f7d      	.short	0x7f7d
 80087b0:	7131      	.short	0x7131
 80087b2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80087b6:	441d      	add	r5, r3
 80087b8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80087bc:	2820      	cmp	r0, #32
 80087be:	dd13      	ble.n	80087e8 <_dtoa_r+0x210>
 80087c0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80087c4:	9b00      	ldr	r3, [sp, #0]
 80087c6:	fa08 f800 	lsl.w	r8, r8, r0
 80087ca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80087ce:	fa23 f000 	lsr.w	r0, r3, r0
 80087d2:	ea48 0000 	orr.w	r0, r8, r0
 80087d6:	f7f7 fe9d 	bl	8000514 <__aeabi_ui2d>
 80087da:	2301      	movs	r3, #1
 80087dc:	4682      	mov	sl, r0
 80087de:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80087e2:	3d01      	subs	r5, #1
 80087e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80087e6:	e772      	b.n	80086ce <_dtoa_r+0xf6>
 80087e8:	9b00      	ldr	r3, [sp, #0]
 80087ea:	f1c0 0020 	rsb	r0, r0, #32
 80087ee:	fa03 f000 	lsl.w	r0, r3, r0
 80087f2:	e7f0      	b.n	80087d6 <_dtoa_r+0x1fe>
 80087f4:	2301      	movs	r3, #1
 80087f6:	e7b1      	b.n	800875c <_dtoa_r+0x184>
 80087f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80087fa:	e7b0      	b.n	800875e <_dtoa_r+0x186>
 80087fc:	9b05      	ldr	r3, [sp, #20]
 80087fe:	eba3 030a 	sub.w	r3, r3, sl
 8008802:	9305      	str	r3, [sp, #20]
 8008804:	f1ca 0300 	rsb	r3, sl, #0
 8008808:	9307      	str	r3, [sp, #28]
 800880a:	2300      	movs	r3, #0
 800880c:	930e      	str	r3, [sp, #56]	; 0x38
 800880e:	e7bb      	b.n	8008788 <_dtoa_r+0x1b0>
 8008810:	2301      	movs	r3, #1
 8008812:	930a      	str	r3, [sp, #40]	; 0x28
 8008814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008816:	2b00      	cmp	r3, #0
 8008818:	dd59      	ble.n	80088ce <_dtoa_r+0x2f6>
 800881a:	9302      	str	r3, [sp, #8]
 800881c:	4699      	mov	r9, r3
 800881e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008820:	2200      	movs	r2, #0
 8008822:	6072      	str	r2, [r6, #4]
 8008824:	2204      	movs	r2, #4
 8008826:	f102 0014 	add.w	r0, r2, #20
 800882a:	4298      	cmp	r0, r3
 800882c:	6871      	ldr	r1, [r6, #4]
 800882e:	d953      	bls.n	80088d8 <_dtoa_r+0x300>
 8008830:	4620      	mov	r0, r4
 8008832:	f001 f9b5 	bl	8009ba0 <_Balloc>
 8008836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008838:	6030      	str	r0, [r6, #0]
 800883a:	f1b9 0f0e 	cmp.w	r9, #14
 800883e:	f8d3 b000 	ldr.w	fp, [r3]
 8008842:	f200 80e6 	bhi.w	8008a12 <_dtoa_r+0x43a>
 8008846:	2d00      	cmp	r5, #0
 8008848:	f000 80e3 	beq.w	8008a12 <_dtoa_r+0x43a>
 800884c:	ed9d 7b00 	vldr	d7, [sp]
 8008850:	f1ba 0f00 	cmp.w	sl, #0
 8008854:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008858:	dd74      	ble.n	8008944 <_dtoa_r+0x36c>
 800885a:	4a2a      	ldr	r2, [pc, #168]	; (8008904 <_dtoa_r+0x32c>)
 800885c:	f00a 030f 	and.w	r3, sl, #15
 8008860:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008864:	ed93 7b00 	vldr	d7, [r3]
 8008868:	ea4f 162a 	mov.w	r6, sl, asr #4
 800886c:	06f0      	lsls	r0, r6, #27
 800886e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008872:	d565      	bpl.n	8008940 <_dtoa_r+0x368>
 8008874:	4b24      	ldr	r3, [pc, #144]	; (8008908 <_dtoa_r+0x330>)
 8008876:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800887a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800887e:	f7f7 ffed 	bl	800085c <__aeabi_ddiv>
 8008882:	e9cd 0100 	strd	r0, r1, [sp]
 8008886:	f006 060f 	and.w	r6, r6, #15
 800888a:	2503      	movs	r5, #3
 800888c:	4f1e      	ldr	r7, [pc, #120]	; (8008908 <_dtoa_r+0x330>)
 800888e:	e04c      	b.n	800892a <_dtoa_r+0x352>
 8008890:	2301      	movs	r3, #1
 8008892:	930a      	str	r3, [sp, #40]	; 0x28
 8008894:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008896:	4453      	add	r3, sl
 8008898:	f103 0901 	add.w	r9, r3, #1
 800889c:	9302      	str	r3, [sp, #8]
 800889e:	464b      	mov	r3, r9
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	bfb8      	it	lt
 80088a4:	2301      	movlt	r3, #1
 80088a6:	e7ba      	b.n	800881e <_dtoa_r+0x246>
 80088a8:	2300      	movs	r3, #0
 80088aa:	e7b2      	b.n	8008812 <_dtoa_r+0x23a>
 80088ac:	2300      	movs	r3, #0
 80088ae:	e7f0      	b.n	8008892 <_dtoa_r+0x2ba>
 80088b0:	2501      	movs	r5, #1
 80088b2:	2300      	movs	r3, #0
 80088b4:	9306      	str	r3, [sp, #24]
 80088b6:	950a      	str	r5, [sp, #40]	; 0x28
 80088b8:	f04f 33ff 	mov.w	r3, #4294967295
 80088bc:	9302      	str	r3, [sp, #8]
 80088be:	4699      	mov	r9, r3
 80088c0:	2200      	movs	r2, #0
 80088c2:	2312      	movs	r3, #18
 80088c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80088c6:	e7aa      	b.n	800881e <_dtoa_r+0x246>
 80088c8:	2301      	movs	r3, #1
 80088ca:	930a      	str	r3, [sp, #40]	; 0x28
 80088cc:	e7f4      	b.n	80088b8 <_dtoa_r+0x2e0>
 80088ce:	2301      	movs	r3, #1
 80088d0:	9302      	str	r3, [sp, #8]
 80088d2:	4699      	mov	r9, r3
 80088d4:	461a      	mov	r2, r3
 80088d6:	e7f5      	b.n	80088c4 <_dtoa_r+0x2ec>
 80088d8:	3101      	adds	r1, #1
 80088da:	6071      	str	r1, [r6, #4]
 80088dc:	0052      	lsls	r2, r2, #1
 80088de:	e7a2      	b.n	8008826 <_dtoa_r+0x24e>
 80088e0:	636f4361 	.word	0x636f4361
 80088e4:	3fd287a7 	.word	0x3fd287a7
 80088e8:	8b60c8b3 	.word	0x8b60c8b3
 80088ec:	3fc68a28 	.word	0x3fc68a28
 80088f0:	509f79fb 	.word	0x509f79fb
 80088f4:	3fd34413 	.word	0x3fd34413
 80088f8:	7ff00000 	.word	0x7ff00000
 80088fc:	0800ac51 	.word	0x0800ac51
 8008900:	3ff80000 	.word	0x3ff80000
 8008904:	0800ad78 	.word	0x0800ad78
 8008908:	0800ad50 	.word	0x0800ad50
 800890c:	0800acd9 	.word	0x0800acd9
 8008910:	07f1      	lsls	r1, r6, #31
 8008912:	d508      	bpl.n	8008926 <_dtoa_r+0x34e>
 8008914:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800891c:	f7f7 fe74 	bl	8000608 <__aeabi_dmul>
 8008920:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008924:	3501      	adds	r5, #1
 8008926:	1076      	asrs	r6, r6, #1
 8008928:	3708      	adds	r7, #8
 800892a:	2e00      	cmp	r6, #0
 800892c:	d1f0      	bne.n	8008910 <_dtoa_r+0x338>
 800892e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008932:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008936:	f7f7 ff91 	bl	800085c <__aeabi_ddiv>
 800893a:	e9cd 0100 	strd	r0, r1, [sp]
 800893e:	e01a      	b.n	8008976 <_dtoa_r+0x39e>
 8008940:	2502      	movs	r5, #2
 8008942:	e7a3      	b.n	800888c <_dtoa_r+0x2b4>
 8008944:	f000 80a0 	beq.w	8008a88 <_dtoa_r+0x4b0>
 8008948:	f1ca 0600 	rsb	r6, sl, #0
 800894c:	4b9f      	ldr	r3, [pc, #636]	; (8008bcc <_dtoa_r+0x5f4>)
 800894e:	4fa0      	ldr	r7, [pc, #640]	; (8008bd0 <_dtoa_r+0x5f8>)
 8008950:	f006 020f 	and.w	r2, r6, #15
 8008954:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008960:	f7f7 fe52 	bl	8000608 <__aeabi_dmul>
 8008964:	e9cd 0100 	strd	r0, r1, [sp]
 8008968:	1136      	asrs	r6, r6, #4
 800896a:	2300      	movs	r3, #0
 800896c:	2502      	movs	r5, #2
 800896e:	2e00      	cmp	r6, #0
 8008970:	d17f      	bne.n	8008a72 <_dtoa_r+0x49a>
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1e1      	bne.n	800893a <_dtoa_r+0x362>
 8008976:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 8087 	beq.w	8008a8c <_dtoa_r+0x4b4>
 800897e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008982:	2200      	movs	r2, #0
 8008984:	4b93      	ldr	r3, [pc, #588]	; (8008bd4 <_dtoa_r+0x5fc>)
 8008986:	4630      	mov	r0, r6
 8008988:	4639      	mov	r1, r7
 800898a:	f7f8 f8af 	bl	8000aec <__aeabi_dcmplt>
 800898e:	2800      	cmp	r0, #0
 8008990:	d07c      	beq.n	8008a8c <_dtoa_r+0x4b4>
 8008992:	f1b9 0f00 	cmp.w	r9, #0
 8008996:	d079      	beq.n	8008a8c <_dtoa_r+0x4b4>
 8008998:	9b02      	ldr	r3, [sp, #8]
 800899a:	2b00      	cmp	r3, #0
 800899c:	dd35      	ble.n	8008a0a <_dtoa_r+0x432>
 800899e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80089a2:	9308      	str	r3, [sp, #32]
 80089a4:	4639      	mov	r1, r7
 80089a6:	2200      	movs	r2, #0
 80089a8:	4b8b      	ldr	r3, [pc, #556]	; (8008bd8 <_dtoa_r+0x600>)
 80089aa:	4630      	mov	r0, r6
 80089ac:	f7f7 fe2c 	bl	8000608 <__aeabi_dmul>
 80089b0:	e9cd 0100 	strd	r0, r1, [sp]
 80089b4:	9f02      	ldr	r7, [sp, #8]
 80089b6:	3501      	adds	r5, #1
 80089b8:	4628      	mov	r0, r5
 80089ba:	f7f7 fdbb 	bl	8000534 <__aeabi_i2d>
 80089be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089c2:	f7f7 fe21 	bl	8000608 <__aeabi_dmul>
 80089c6:	2200      	movs	r2, #0
 80089c8:	4b84      	ldr	r3, [pc, #528]	; (8008bdc <_dtoa_r+0x604>)
 80089ca:	f7f7 fc67 	bl	800029c <__adddf3>
 80089ce:	4605      	mov	r5, r0
 80089d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80089d4:	2f00      	cmp	r7, #0
 80089d6:	d15d      	bne.n	8008a94 <_dtoa_r+0x4bc>
 80089d8:	2200      	movs	r2, #0
 80089da:	4b81      	ldr	r3, [pc, #516]	; (8008be0 <_dtoa_r+0x608>)
 80089dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089e0:	f7f7 fc5a 	bl	8000298 <__aeabi_dsub>
 80089e4:	462a      	mov	r2, r5
 80089e6:	4633      	mov	r3, r6
 80089e8:	e9cd 0100 	strd	r0, r1, [sp]
 80089ec:	f7f8 f89c 	bl	8000b28 <__aeabi_dcmpgt>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	f040 8288 	bne.w	8008f06 <_dtoa_r+0x92e>
 80089f6:	462a      	mov	r2, r5
 80089f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80089fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a00:	f7f8 f874 	bl	8000aec <__aeabi_dcmplt>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	f040 827c 	bne.w	8008f02 <_dtoa_r+0x92a>
 8008a0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a0e:	e9cd 2300 	strd	r2, r3, [sp]
 8008a12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f2c0 8150 	blt.w	8008cba <_dtoa_r+0x6e2>
 8008a1a:	f1ba 0f0e 	cmp.w	sl, #14
 8008a1e:	f300 814c 	bgt.w	8008cba <_dtoa_r+0x6e2>
 8008a22:	4b6a      	ldr	r3, [pc, #424]	; (8008bcc <_dtoa_r+0x5f4>)
 8008a24:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008a28:	ed93 7b00 	vldr	d7, [r3]
 8008a2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008a34:	f280 80d8 	bge.w	8008be8 <_dtoa_r+0x610>
 8008a38:	f1b9 0f00 	cmp.w	r9, #0
 8008a3c:	f300 80d4 	bgt.w	8008be8 <_dtoa_r+0x610>
 8008a40:	f040 825e 	bne.w	8008f00 <_dtoa_r+0x928>
 8008a44:	2200      	movs	r2, #0
 8008a46:	4b66      	ldr	r3, [pc, #408]	; (8008be0 <_dtoa_r+0x608>)
 8008a48:	ec51 0b17 	vmov	r0, r1, d7
 8008a4c:	f7f7 fddc 	bl	8000608 <__aeabi_dmul>
 8008a50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a54:	f7f8 f85e 	bl	8000b14 <__aeabi_dcmpge>
 8008a58:	464f      	mov	r7, r9
 8008a5a:	464e      	mov	r6, r9
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	f040 8234 	bne.w	8008eca <_dtoa_r+0x8f2>
 8008a62:	2331      	movs	r3, #49	; 0x31
 8008a64:	f10b 0501 	add.w	r5, fp, #1
 8008a68:	f88b 3000 	strb.w	r3, [fp]
 8008a6c:	f10a 0a01 	add.w	sl, sl, #1
 8008a70:	e22f      	b.n	8008ed2 <_dtoa_r+0x8fa>
 8008a72:	07f2      	lsls	r2, r6, #31
 8008a74:	d505      	bpl.n	8008a82 <_dtoa_r+0x4aa>
 8008a76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a7a:	f7f7 fdc5 	bl	8000608 <__aeabi_dmul>
 8008a7e:	3501      	adds	r5, #1
 8008a80:	2301      	movs	r3, #1
 8008a82:	1076      	asrs	r6, r6, #1
 8008a84:	3708      	adds	r7, #8
 8008a86:	e772      	b.n	800896e <_dtoa_r+0x396>
 8008a88:	2502      	movs	r5, #2
 8008a8a:	e774      	b.n	8008976 <_dtoa_r+0x39e>
 8008a8c:	f8cd a020 	str.w	sl, [sp, #32]
 8008a90:	464f      	mov	r7, r9
 8008a92:	e791      	b.n	80089b8 <_dtoa_r+0x3e0>
 8008a94:	4b4d      	ldr	r3, [pc, #308]	; (8008bcc <_dtoa_r+0x5f4>)
 8008a96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a9a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d047      	beq.n	8008b34 <_dtoa_r+0x55c>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	494e      	ldr	r1, [pc, #312]	; (8008be4 <_dtoa_r+0x60c>)
 8008aac:	f7f7 fed6 	bl	800085c <__aeabi_ddiv>
 8008ab0:	462a      	mov	r2, r5
 8008ab2:	4633      	mov	r3, r6
 8008ab4:	f7f7 fbf0 	bl	8000298 <__aeabi_dsub>
 8008ab8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008abc:	465d      	mov	r5, fp
 8008abe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ac2:	f7f8 f851 	bl	8000b68 <__aeabi_d2iz>
 8008ac6:	4606      	mov	r6, r0
 8008ac8:	f7f7 fd34 	bl	8000534 <__aeabi_i2d>
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ad4:	f7f7 fbe0 	bl	8000298 <__aeabi_dsub>
 8008ad8:	3630      	adds	r6, #48	; 0x30
 8008ada:	f805 6b01 	strb.w	r6, [r5], #1
 8008ade:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008ae2:	e9cd 0100 	strd	r0, r1, [sp]
 8008ae6:	f7f8 f801 	bl	8000aec <__aeabi_dcmplt>
 8008aea:	2800      	cmp	r0, #0
 8008aec:	d163      	bne.n	8008bb6 <_dtoa_r+0x5de>
 8008aee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008af2:	2000      	movs	r0, #0
 8008af4:	4937      	ldr	r1, [pc, #220]	; (8008bd4 <_dtoa_r+0x5fc>)
 8008af6:	f7f7 fbcf 	bl	8000298 <__aeabi_dsub>
 8008afa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008afe:	f7f7 fff5 	bl	8000aec <__aeabi_dcmplt>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	f040 80b7 	bne.w	8008c76 <_dtoa_r+0x69e>
 8008b08:	eba5 030b 	sub.w	r3, r5, fp
 8008b0c:	429f      	cmp	r7, r3
 8008b0e:	f77f af7c 	ble.w	8008a0a <_dtoa_r+0x432>
 8008b12:	2200      	movs	r2, #0
 8008b14:	4b30      	ldr	r3, [pc, #192]	; (8008bd8 <_dtoa_r+0x600>)
 8008b16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b1a:	f7f7 fd75 	bl	8000608 <__aeabi_dmul>
 8008b1e:	2200      	movs	r2, #0
 8008b20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008b24:	4b2c      	ldr	r3, [pc, #176]	; (8008bd8 <_dtoa_r+0x600>)
 8008b26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b2a:	f7f7 fd6d 	bl	8000608 <__aeabi_dmul>
 8008b2e:	e9cd 0100 	strd	r0, r1, [sp]
 8008b32:	e7c4      	b.n	8008abe <_dtoa_r+0x4e6>
 8008b34:	462a      	mov	r2, r5
 8008b36:	4633      	mov	r3, r6
 8008b38:	f7f7 fd66 	bl	8000608 <__aeabi_dmul>
 8008b3c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008b40:	eb0b 0507 	add.w	r5, fp, r7
 8008b44:	465e      	mov	r6, fp
 8008b46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b4a:	f7f8 f80d 	bl	8000b68 <__aeabi_d2iz>
 8008b4e:	4607      	mov	r7, r0
 8008b50:	f7f7 fcf0 	bl	8000534 <__aeabi_i2d>
 8008b54:	3730      	adds	r7, #48	; 0x30
 8008b56:	4602      	mov	r2, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b5e:	f7f7 fb9b 	bl	8000298 <__aeabi_dsub>
 8008b62:	f806 7b01 	strb.w	r7, [r6], #1
 8008b66:	42ae      	cmp	r6, r5
 8008b68:	e9cd 0100 	strd	r0, r1, [sp]
 8008b6c:	f04f 0200 	mov.w	r2, #0
 8008b70:	d126      	bne.n	8008bc0 <_dtoa_r+0x5e8>
 8008b72:	4b1c      	ldr	r3, [pc, #112]	; (8008be4 <_dtoa_r+0x60c>)
 8008b74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b78:	f7f7 fb90 	bl	800029c <__adddf3>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b84:	f7f7 ffd0 	bl	8000b28 <__aeabi_dcmpgt>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d174      	bne.n	8008c76 <_dtoa_r+0x69e>
 8008b8c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008b90:	2000      	movs	r0, #0
 8008b92:	4914      	ldr	r1, [pc, #80]	; (8008be4 <_dtoa_r+0x60c>)
 8008b94:	f7f7 fb80 	bl	8000298 <__aeabi_dsub>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ba0:	f7f7 ffa4 	bl	8000aec <__aeabi_dcmplt>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	f43f af30 	beq.w	8008a0a <_dtoa_r+0x432>
 8008baa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008bae:	2b30      	cmp	r3, #48	; 0x30
 8008bb0:	f105 32ff 	add.w	r2, r5, #4294967295
 8008bb4:	d002      	beq.n	8008bbc <_dtoa_r+0x5e4>
 8008bb6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008bba:	e04a      	b.n	8008c52 <_dtoa_r+0x67a>
 8008bbc:	4615      	mov	r5, r2
 8008bbe:	e7f4      	b.n	8008baa <_dtoa_r+0x5d2>
 8008bc0:	4b05      	ldr	r3, [pc, #20]	; (8008bd8 <_dtoa_r+0x600>)
 8008bc2:	f7f7 fd21 	bl	8000608 <__aeabi_dmul>
 8008bc6:	e9cd 0100 	strd	r0, r1, [sp]
 8008bca:	e7bc      	b.n	8008b46 <_dtoa_r+0x56e>
 8008bcc:	0800ad78 	.word	0x0800ad78
 8008bd0:	0800ad50 	.word	0x0800ad50
 8008bd4:	3ff00000 	.word	0x3ff00000
 8008bd8:	40240000 	.word	0x40240000
 8008bdc:	401c0000 	.word	0x401c0000
 8008be0:	40140000 	.word	0x40140000
 8008be4:	3fe00000 	.word	0x3fe00000
 8008be8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008bec:	465d      	mov	r5, fp
 8008bee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	f7f7 fe31 	bl	800085c <__aeabi_ddiv>
 8008bfa:	f7f7 ffb5 	bl	8000b68 <__aeabi_d2iz>
 8008bfe:	4680      	mov	r8, r0
 8008c00:	f7f7 fc98 	bl	8000534 <__aeabi_i2d>
 8008c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c08:	f7f7 fcfe 	bl	8000608 <__aeabi_dmul>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4630      	mov	r0, r6
 8008c12:	4639      	mov	r1, r7
 8008c14:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008c18:	f7f7 fb3e 	bl	8000298 <__aeabi_dsub>
 8008c1c:	f805 6b01 	strb.w	r6, [r5], #1
 8008c20:	eba5 060b 	sub.w	r6, r5, fp
 8008c24:	45b1      	cmp	r9, r6
 8008c26:	4602      	mov	r2, r0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	d139      	bne.n	8008ca0 <_dtoa_r+0x6c8>
 8008c2c:	f7f7 fb36 	bl	800029c <__adddf3>
 8008c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c34:	4606      	mov	r6, r0
 8008c36:	460f      	mov	r7, r1
 8008c38:	f7f7 ff76 	bl	8000b28 <__aeabi_dcmpgt>
 8008c3c:	b9c8      	cbnz	r0, 8008c72 <_dtoa_r+0x69a>
 8008c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c42:	4630      	mov	r0, r6
 8008c44:	4639      	mov	r1, r7
 8008c46:	f7f7 ff47 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c4a:	b110      	cbz	r0, 8008c52 <_dtoa_r+0x67a>
 8008c4c:	f018 0f01 	tst.w	r8, #1
 8008c50:	d10f      	bne.n	8008c72 <_dtoa_r+0x69a>
 8008c52:	9904      	ldr	r1, [sp, #16]
 8008c54:	4620      	mov	r0, r4
 8008c56:	f000 ffd7 	bl	8009c08 <_Bfree>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c5e:	702b      	strb	r3, [r5, #0]
 8008c60:	f10a 0301 	add.w	r3, sl, #1
 8008c64:	6013      	str	r3, [r2, #0]
 8008c66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f000 8241 	beq.w	80090f0 <_dtoa_r+0xb18>
 8008c6e:	601d      	str	r5, [r3, #0]
 8008c70:	e23e      	b.n	80090f0 <_dtoa_r+0xb18>
 8008c72:	f8cd a020 	str.w	sl, [sp, #32]
 8008c76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c7a:	2a39      	cmp	r2, #57	; 0x39
 8008c7c:	f105 33ff 	add.w	r3, r5, #4294967295
 8008c80:	d108      	bne.n	8008c94 <_dtoa_r+0x6bc>
 8008c82:	459b      	cmp	fp, r3
 8008c84:	d10a      	bne.n	8008c9c <_dtoa_r+0x6c4>
 8008c86:	9b08      	ldr	r3, [sp, #32]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	9308      	str	r3, [sp, #32]
 8008c8c:	2330      	movs	r3, #48	; 0x30
 8008c8e:	f88b 3000 	strb.w	r3, [fp]
 8008c92:	465b      	mov	r3, fp
 8008c94:	781a      	ldrb	r2, [r3, #0]
 8008c96:	3201      	adds	r2, #1
 8008c98:	701a      	strb	r2, [r3, #0]
 8008c9a:	e78c      	b.n	8008bb6 <_dtoa_r+0x5de>
 8008c9c:	461d      	mov	r5, r3
 8008c9e:	e7ea      	b.n	8008c76 <_dtoa_r+0x69e>
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	4b9b      	ldr	r3, [pc, #620]	; (8008f10 <_dtoa_r+0x938>)
 8008ca4:	f7f7 fcb0 	bl	8000608 <__aeabi_dmul>
 8008ca8:	2200      	movs	r2, #0
 8008caa:	2300      	movs	r3, #0
 8008cac:	4606      	mov	r6, r0
 8008cae:	460f      	mov	r7, r1
 8008cb0:	f7f7 ff12 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	d09a      	beq.n	8008bee <_dtoa_r+0x616>
 8008cb8:	e7cb      	b.n	8008c52 <_dtoa_r+0x67a>
 8008cba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cbc:	2a00      	cmp	r2, #0
 8008cbe:	f000 808b 	beq.w	8008dd8 <_dtoa_r+0x800>
 8008cc2:	9a06      	ldr	r2, [sp, #24]
 8008cc4:	2a01      	cmp	r2, #1
 8008cc6:	dc6e      	bgt.n	8008da6 <_dtoa_r+0x7ce>
 8008cc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008cca:	2a00      	cmp	r2, #0
 8008ccc:	d067      	beq.n	8008d9e <_dtoa_r+0x7c6>
 8008cce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008cd2:	9f07      	ldr	r7, [sp, #28]
 8008cd4:	9d05      	ldr	r5, [sp, #20]
 8008cd6:	9a05      	ldr	r2, [sp, #20]
 8008cd8:	2101      	movs	r1, #1
 8008cda:	441a      	add	r2, r3
 8008cdc:	4620      	mov	r0, r4
 8008cde:	9205      	str	r2, [sp, #20]
 8008ce0:	4498      	add	r8, r3
 8008ce2:	f001 f86f 	bl	8009dc4 <__i2b>
 8008ce6:	4606      	mov	r6, r0
 8008ce8:	2d00      	cmp	r5, #0
 8008cea:	dd0c      	ble.n	8008d06 <_dtoa_r+0x72e>
 8008cec:	f1b8 0f00 	cmp.w	r8, #0
 8008cf0:	dd09      	ble.n	8008d06 <_dtoa_r+0x72e>
 8008cf2:	4545      	cmp	r5, r8
 8008cf4:	9a05      	ldr	r2, [sp, #20]
 8008cf6:	462b      	mov	r3, r5
 8008cf8:	bfa8      	it	ge
 8008cfa:	4643      	movge	r3, r8
 8008cfc:	1ad2      	subs	r2, r2, r3
 8008cfe:	9205      	str	r2, [sp, #20]
 8008d00:	1aed      	subs	r5, r5, r3
 8008d02:	eba8 0803 	sub.w	r8, r8, r3
 8008d06:	9b07      	ldr	r3, [sp, #28]
 8008d08:	b1eb      	cbz	r3, 8008d46 <_dtoa_r+0x76e>
 8008d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d067      	beq.n	8008de0 <_dtoa_r+0x808>
 8008d10:	b18f      	cbz	r7, 8008d36 <_dtoa_r+0x75e>
 8008d12:	4631      	mov	r1, r6
 8008d14:	463a      	mov	r2, r7
 8008d16:	4620      	mov	r0, r4
 8008d18:	f001 f8f4 	bl	8009f04 <__pow5mult>
 8008d1c:	9a04      	ldr	r2, [sp, #16]
 8008d1e:	4601      	mov	r1, r0
 8008d20:	4606      	mov	r6, r0
 8008d22:	4620      	mov	r0, r4
 8008d24:	f001 f857 	bl	8009dd6 <__multiply>
 8008d28:	9904      	ldr	r1, [sp, #16]
 8008d2a:	9008      	str	r0, [sp, #32]
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f000 ff6b 	bl	8009c08 <_Bfree>
 8008d32:	9b08      	ldr	r3, [sp, #32]
 8008d34:	9304      	str	r3, [sp, #16]
 8008d36:	9b07      	ldr	r3, [sp, #28]
 8008d38:	1bda      	subs	r2, r3, r7
 8008d3a:	d004      	beq.n	8008d46 <_dtoa_r+0x76e>
 8008d3c:	9904      	ldr	r1, [sp, #16]
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f001 f8e0 	bl	8009f04 <__pow5mult>
 8008d44:	9004      	str	r0, [sp, #16]
 8008d46:	2101      	movs	r1, #1
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f001 f83b 	bl	8009dc4 <__i2b>
 8008d4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d50:	4607      	mov	r7, r0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f000 81d0 	beq.w	80090f8 <_dtoa_r+0xb20>
 8008d58:	461a      	mov	r2, r3
 8008d5a:	4601      	mov	r1, r0
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f001 f8d1 	bl	8009f04 <__pow5mult>
 8008d62:	9b06      	ldr	r3, [sp, #24]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	4607      	mov	r7, r0
 8008d68:	dc40      	bgt.n	8008dec <_dtoa_r+0x814>
 8008d6a:	9b00      	ldr	r3, [sp, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d139      	bne.n	8008de4 <_dtoa_r+0x80c>
 8008d70:	9b01      	ldr	r3, [sp, #4]
 8008d72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d136      	bne.n	8008de8 <_dtoa_r+0x810>
 8008d7a:	9b01      	ldr	r3, [sp, #4]
 8008d7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d80:	0d1b      	lsrs	r3, r3, #20
 8008d82:	051b      	lsls	r3, r3, #20
 8008d84:	b12b      	cbz	r3, 8008d92 <_dtoa_r+0x7ba>
 8008d86:	9b05      	ldr	r3, [sp, #20]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	9305      	str	r3, [sp, #20]
 8008d8c:	f108 0801 	add.w	r8, r8, #1
 8008d90:	2301      	movs	r3, #1
 8008d92:	9307      	str	r3, [sp, #28]
 8008d94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d12a      	bne.n	8008df0 <_dtoa_r+0x818>
 8008d9a:	2001      	movs	r0, #1
 8008d9c:	e030      	b.n	8008e00 <_dtoa_r+0x828>
 8008d9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008da0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008da4:	e795      	b.n	8008cd2 <_dtoa_r+0x6fa>
 8008da6:	9b07      	ldr	r3, [sp, #28]
 8008da8:	f109 37ff 	add.w	r7, r9, #4294967295
 8008dac:	42bb      	cmp	r3, r7
 8008dae:	bfbf      	itttt	lt
 8008db0:	9b07      	ldrlt	r3, [sp, #28]
 8008db2:	9707      	strlt	r7, [sp, #28]
 8008db4:	1afa      	sublt	r2, r7, r3
 8008db6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008db8:	bfbb      	ittet	lt
 8008dba:	189b      	addlt	r3, r3, r2
 8008dbc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008dbe:	1bdf      	subge	r7, r3, r7
 8008dc0:	2700      	movlt	r7, #0
 8008dc2:	f1b9 0f00 	cmp.w	r9, #0
 8008dc6:	bfb5      	itete	lt
 8008dc8:	9b05      	ldrlt	r3, [sp, #20]
 8008dca:	9d05      	ldrge	r5, [sp, #20]
 8008dcc:	eba3 0509 	sublt.w	r5, r3, r9
 8008dd0:	464b      	movge	r3, r9
 8008dd2:	bfb8      	it	lt
 8008dd4:	2300      	movlt	r3, #0
 8008dd6:	e77e      	b.n	8008cd6 <_dtoa_r+0x6fe>
 8008dd8:	9f07      	ldr	r7, [sp, #28]
 8008dda:	9d05      	ldr	r5, [sp, #20]
 8008ddc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008dde:	e783      	b.n	8008ce8 <_dtoa_r+0x710>
 8008de0:	9a07      	ldr	r2, [sp, #28]
 8008de2:	e7ab      	b.n	8008d3c <_dtoa_r+0x764>
 8008de4:	2300      	movs	r3, #0
 8008de6:	e7d4      	b.n	8008d92 <_dtoa_r+0x7ba>
 8008de8:	9b00      	ldr	r3, [sp, #0]
 8008dea:	e7d2      	b.n	8008d92 <_dtoa_r+0x7ba>
 8008dec:	2300      	movs	r3, #0
 8008dee:	9307      	str	r3, [sp, #28]
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008df6:	6918      	ldr	r0, [r3, #16]
 8008df8:	f000 ff96 	bl	8009d28 <__hi0bits>
 8008dfc:	f1c0 0020 	rsb	r0, r0, #32
 8008e00:	4440      	add	r0, r8
 8008e02:	f010 001f 	ands.w	r0, r0, #31
 8008e06:	d047      	beq.n	8008e98 <_dtoa_r+0x8c0>
 8008e08:	f1c0 0320 	rsb	r3, r0, #32
 8008e0c:	2b04      	cmp	r3, #4
 8008e0e:	dd3b      	ble.n	8008e88 <_dtoa_r+0x8b0>
 8008e10:	9b05      	ldr	r3, [sp, #20]
 8008e12:	f1c0 001c 	rsb	r0, r0, #28
 8008e16:	4403      	add	r3, r0
 8008e18:	9305      	str	r3, [sp, #20]
 8008e1a:	4405      	add	r5, r0
 8008e1c:	4480      	add	r8, r0
 8008e1e:	9b05      	ldr	r3, [sp, #20]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	dd05      	ble.n	8008e30 <_dtoa_r+0x858>
 8008e24:	461a      	mov	r2, r3
 8008e26:	9904      	ldr	r1, [sp, #16]
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f001 f8b9 	bl	8009fa0 <__lshift>
 8008e2e:	9004      	str	r0, [sp, #16]
 8008e30:	f1b8 0f00 	cmp.w	r8, #0
 8008e34:	dd05      	ble.n	8008e42 <_dtoa_r+0x86a>
 8008e36:	4639      	mov	r1, r7
 8008e38:	4642      	mov	r2, r8
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f001 f8b0 	bl	8009fa0 <__lshift>
 8008e40:	4607      	mov	r7, r0
 8008e42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e44:	b353      	cbz	r3, 8008e9c <_dtoa_r+0x8c4>
 8008e46:	4639      	mov	r1, r7
 8008e48:	9804      	ldr	r0, [sp, #16]
 8008e4a:	f001 f8fd 	bl	800a048 <__mcmp>
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	da24      	bge.n	8008e9c <_dtoa_r+0x8c4>
 8008e52:	2300      	movs	r3, #0
 8008e54:	220a      	movs	r2, #10
 8008e56:	9904      	ldr	r1, [sp, #16]
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f000 feec 	bl	8009c36 <__multadd>
 8008e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e60:	9004      	str	r0, [sp, #16]
 8008e62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f000 814d 	beq.w	8009106 <_dtoa_r+0xb2e>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	4631      	mov	r1, r6
 8008e70:	220a      	movs	r2, #10
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 fedf 	bl	8009c36 <__multadd>
 8008e78:	9b02      	ldr	r3, [sp, #8]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	4606      	mov	r6, r0
 8008e7e:	dc4f      	bgt.n	8008f20 <_dtoa_r+0x948>
 8008e80:	9b06      	ldr	r3, [sp, #24]
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	dd4c      	ble.n	8008f20 <_dtoa_r+0x948>
 8008e86:	e011      	b.n	8008eac <_dtoa_r+0x8d4>
 8008e88:	d0c9      	beq.n	8008e1e <_dtoa_r+0x846>
 8008e8a:	9a05      	ldr	r2, [sp, #20]
 8008e8c:	331c      	adds	r3, #28
 8008e8e:	441a      	add	r2, r3
 8008e90:	9205      	str	r2, [sp, #20]
 8008e92:	441d      	add	r5, r3
 8008e94:	4498      	add	r8, r3
 8008e96:	e7c2      	b.n	8008e1e <_dtoa_r+0x846>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	e7f6      	b.n	8008e8a <_dtoa_r+0x8b2>
 8008e9c:	f1b9 0f00 	cmp.w	r9, #0
 8008ea0:	dc38      	bgt.n	8008f14 <_dtoa_r+0x93c>
 8008ea2:	9b06      	ldr	r3, [sp, #24]
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	dd35      	ble.n	8008f14 <_dtoa_r+0x93c>
 8008ea8:	f8cd 9008 	str.w	r9, [sp, #8]
 8008eac:	9b02      	ldr	r3, [sp, #8]
 8008eae:	b963      	cbnz	r3, 8008eca <_dtoa_r+0x8f2>
 8008eb0:	4639      	mov	r1, r7
 8008eb2:	2205      	movs	r2, #5
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f000 febe 	bl	8009c36 <__multadd>
 8008eba:	4601      	mov	r1, r0
 8008ebc:	4607      	mov	r7, r0
 8008ebe:	9804      	ldr	r0, [sp, #16]
 8008ec0:	f001 f8c2 	bl	800a048 <__mcmp>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	f73f adcc 	bgt.w	8008a62 <_dtoa_r+0x48a>
 8008eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ecc:	465d      	mov	r5, fp
 8008ece:	ea6f 0a03 	mvn.w	sl, r3
 8008ed2:	f04f 0900 	mov.w	r9, #0
 8008ed6:	4639      	mov	r1, r7
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f000 fe95 	bl	8009c08 <_Bfree>
 8008ede:	2e00      	cmp	r6, #0
 8008ee0:	f43f aeb7 	beq.w	8008c52 <_dtoa_r+0x67a>
 8008ee4:	f1b9 0f00 	cmp.w	r9, #0
 8008ee8:	d005      	beq.n	8008ef6 <_dtoa_r+0x91e>
 8008eea:	45b1      	cmp	r9, r6
 8008eec:	d003      	beq.n	8008ef6 <_dtoa_r+0x91e>
 8008eee:	4649      	mov	r1, r9
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f000 fe89 	bl	8009c08 <_Bfree>
 8008ef6:	4631      	mov	r1, r6
 8008ef8:	4620      	mov	r0, r4
 8008efa:	f000 fe85 	bl	8009c08 <_Bfree>
 8008efe:	e6a8      	b.n	8008c52 <_dtoa_r+0x67a>
 8008f00:	2700      	movs	r7, #0
 8008f02:	463e      	mov	r6, r7
 8008f04:	e7e1      	b.n	8008eca <_dtoa_r+0x8f2>
 8008f06:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008f0a:	463e      	mov	r6, r7
 8008f0c:	e5a9      	b.n	8008a62 <_dtoa_r+0x48a>
 8008f0e:	bf00      	nop
 8008f10:	40240000 	.word	0x40240000
 8008f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f16:	f8cd 9008 	str.w	r9, [sp, #8]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f000 80fa 	beq.w	8009114 <_dtoa_r+0xb3c>
 8008f20:	2d00      	cmp	r5, #0
 8008f22:	dd05      	ble.n	8008f30 <_dtoa_r+0x958>
 8008f24:	4631      	mov	r1, r6
 8008f26:	462a      	mov	r2, r5
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f001 f839 	bl	8009fa0 <__lshift>
 8008f2e:	4606      	mov	r6, r0
 8008f30:	9b07      	ldr	r3, [sp, #28]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d04c      	beq.n	8008fd0 <_dtoa_r+0x9f8>
 8008f36:	6871      	ldr	r1, [r6, #4]
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f000 fe31 	bl	8009ba0 <_Balloc>
 8008f3e:	6932      	ldr	r2, [r6, #16]
 8008f40:	3202      	adds	r2, #2
 8008f42:	4605      	mov	r5, r0
 8008f44:	0092      	lsls	r2, r2, #2
 8008f46:	f106 010c 	add.w	r1, r6, #12
 8008f4a:	300c      	adds	r0, #12
 8008f4c:	f7fd face 	bl	80064ec <memcpy>
 8008f50:	2201      	movs	r2, #1
 8008f52:	4629      	mov	r1, r5
 8008f54:	4620      	mov	r0, r4
 8008f56:	f001 f823 	bl	8009fa0 <__lshift>
 8008f5a:	9b00      	ldr	r3, [sp, #0]
 8008f5c:	f8cd b014 	str.w	fp, [sp, #20]
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	46b1      	mov	r9, r6
 8008f66:	9307      	str	r3, [sp, #28]
 8008f68:	4606      	mov	r6, r0
 8008f6a:	4639      	mov	r1, r7
 8008f6c:	9804      	ldr	r0, [sp, #16]
 8008f6e:	f7ff faa5 	bl	80084bc <quorem>
 8008f72:	4649      	mov	r1, r9
 8008f74:	4605      	mov	r5, r0
 8008f76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008f7a:	9804      	ldr	r0, [sp, #16]
 8008f7c:	f001 f864 	bl	800a048 <__mcmp>
 8008f80:	4632      	mov	r2, r6
 8008f82:	9000      	str	r0, [sp, #0]
 8008f84:	4639      	mov	r1, r7
 8008f86:	4620      	mov	r0, r4
 8008f88:	f001 f878 	bl	800a07c <__mdiff>
 8008f8c:	68c3      	ldr	r3, [r0, #12]
 8008f8e:	4602      	mov	r2, r0
 8008f90:	bb03      	cbnz	r3, 8008fd4 <_dtoa_r+0x9fc>
 8008f92:	4601      	mov	r1, r0
 8008f94:	9008      	str	r0, [sp, #32]
 8008f96:	9804      	ldr	r0, [sp, #16]
 8008f98:	f001 f856 	bl	800a048 <__mcmp>
 8008f9c:	9a08      	ldr	r2, [sp, #32]
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	4611      	mov	r1, r2
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	9308      	str	r3, [sp, #32]
 8008fa6:	f000 fe2f 	bl	8009c08 <_Bfree>
 8008faa:	9b08      	ldr	r3, [sp, #32]
 8008fac:	b9a3      	cbnz	r3, 8008fd8 <_dtoa_r+0xa00>
 8008fae:	9a06      	ldr	r2, [sp, #24]
 8008fb0:	b992      	cbnz	r2, 8008fd8 <_dtoa_r+0xa00>
 8008fb2:	9a07      	ldr	r2, [sp, #28]
 8008fb4:	b982      	cbnz	r2, 8008fd8 <_dtoa_r+0xa00>
 8008fb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008fba:	d029      	beq.n	8009010 <_dtoa_r+0xa38>
 8008fbc:	9b00      	ldr	r3, [sp, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	dd01      	ble.n	8008fc6 <_dtoa_r+0x9ee>
 8008fc2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008fc6:	9b05      	ldr	r3, [sp, #20]
 8008fc8:	1c5d      	adds	r5, r3, #1
 8008fca:	f883 8000 	strb.w	r8, [r3]
 8008fce:	e782      	b.n	8008ed6 <_dtoa_r+0x8fe>
 8008fd0:	4630      	mov	r0, r6
 8008fd2:	e7c2      	b.n	8008f5a <_dtoa_r+0x982>
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e7e3      	b.n	8008fa0 <_dtoa_r+0x9c8>
 8008fd8:	9a00      	ldr	r2, [sp, #0]
 8008fda:	2a00      	cmp	r2, #0
 8008fdc:	db04      	blt.n	8008fe8 <_dtoa_r+0xa10>
 8008fde:	d125      	bne.n	800902c <_dtoa_r+0xa54>
 8008fe0:	9a06      	ldr	r2, [sp, #24]
 8008fe2:	bb1a      	cbnz	r2, 800902c <_dtoa_r+0xa54>
 8008fe4:	9a07      	ldr	r2, [sp, #28]
 8008fe6:	bb0a      	cbnz	r2, 800902c <_dtoa_r+0xa54>
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	ddec      	ble.n	8008fc6 <_dtoa_r+0x9ee>
 8008fec:	2201      	movs	r2, #1
 8008fee:	9904      	ldr	r1, [sp, #16]
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f000 ffd5 	bl	8009fa0 <__lshift>
 8008ff6:	4639      	mov	r1, r7
 8008ff8:	9004      	str	r0, [sp, #16]
 8008ffa:	f001 f825 	bl	800a048 <__mcmp>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	dc03      	bgt.n	800900a <_dtoa_r+0xa32>
 8009002:	d1e0      	bne.n	8008fc6 <_dtoa_r+0x9ee>
 8009004:	f018 0f01 	tst.w	r8, #1
 8009008:	d0dd      	beq.n	8008fc6 <_dtoa_r+0x9ee>
 800900a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800900e:	d1d8      	bne.n	8008fc2 <_dtoa_r+0x9ea>
 8009010:	9b05      	ldr	r3, [sp, #20]
 8009012:	9a05      	ldr	r2, [sp, #20]
 8009014:	1c5d      	adds	r5, r3, #1
 8009016:	2339      	movs	r3, #57	; 0x39
 8009018:	7013      	strb	r3, [r2, #0]
 800901a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800901e:	2b39      	cmp	r3, #57	; 0x39
 8009020:	f105 32ff 	add.w	r2, r5, #4294967295
 8009024:	d04f      	beq.n	80090c6 <_dtoa_r+0xaee>
 8009026:	3301      	adds	r3, #1
 8009028:	7013      	strb	r3, [r2, #0]
 800902a:	e754      	b.n	8008ed6 <_dtoa_r+0x8fe>
 800902c:	9a05      	ldr	r2, [sp, #20]
 800902e:	2b00      	cmp	r3, #0
 8009030:	f102 0501 	add.w	r5, r2, #1
 8009034:	dd06      	ble.n	8009044 <_dtoa_r+0xa6c>
 8009036:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800903a:	d0e9      	beq.n	8009010 <_dtoa_r+0xa38>
 800903c:	f108 0801 	add.w	r8, r8, #1
 8009040:	9b05      	ldr	r3, [sp, #20]
 8009042:	e7c2      	b.n	8008fca <_dtoa_r+0x9f2>
 8009044:	9a02      	ldr	r2, [sp, #8]
 8009046:	f805 8c01 	strb.w	r8, [r5, #-1]
 800904a:	eba5 030b 	sub.w	r3, r5, fp
 800904e:	4293      	cmp	r3, r2
 8009050:	d021      	beq.n	8009096 <_dtoa_r+0xabe>
 8009052:	2300      	movs	r3, #0
 8009054:	220a      	movs	r2, #10
 8009056:	9904      	ldr	r1, [sp, #16]
 8009058:	4620      	mov	r0, r4
 800905a:	f000 fdec 	bl	8009c36 <__multadd>
 800905e:	45b1      	cmp	r9, r6
 8009060:	9004      	str	r0, [sp, #16]
 8009062:	f04f 0300 	mov.w	r3, #0
 8009066:	f04f 020a 	mov.w	r2, #10
 800906a:	4649      	mov	r1, r9
 800906c:	4620      	mov	r0, r4
 800906e:	d105      	bne.n	800907c <_dtoa_r+0xaa4>
 8009070:	f000 fde1 	bl	8009c36 <__multadd>
 8009074:	4681      	mov	r9, r0
 8009076:	4606      	mov	r6, r0
 8009078:	9505      	str	r5, [sp, #20]
 800907a:	e776      	b.n	8008f6a <_dtoa_r+0x992>
 800907c:	f000 fddb 	bl	8009c36 <__multadd>
 8009080:	4631      	mov	r1, r6
 8009082:	4681      	mov	r9, r0
 8009084:	2300      	movs	r3, #0
 8009086:	220a      	movs	r2, #10
 8009088:	4620      	mov	r0, r4
 800908a:	f000 fdd4 	bl	8009c36 <__multadd>
 800908e:	4606      	mov	r6, r0
 8009090:	e7f2      	b.n	8009078 <_dtoa_r+0xaa0>
 8009092:	f04f 0900 	mov.w	r9, #0
 8009096:	2201      	movs	r2, #1
 8009098:	9904      	ldr	r1, [sp, #16]
 800909a:	4620      	mov	r0, r4
 800909c:	f000 ff80 	bl	8009fa0 <__lshift>
 80090a0:	4639      	mov	r1, r7
 80090a2:	9004      	str	r0, [sp, #16]
 80090a4:	f000 ffd0 	bl	800a048 <__mcmp>
 80090a8:	2800      	cmp	r0, #0
 80090aa:	dcb6      	bgt.n	800901a <_dtoa_r+0xa42>
 80090ac:	d102      	bne.n	80090b4 <_dtoa_r+0xadc>
 80090ae:	f018 0f01 	tst.w	r8, #1
 80090b2:	d1b2      	bne.n	800901a <_dtoa_r+0xa42>
 80090b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090b8:	2b30      	cmp	r3, #48	; 0x30
 80090ba:	f105 32ff 	add.w	r2, r5, #4294967295
 80090be:	f47f af0a 	bne.w	8008ed6 <_dtoa_r+0x8fe>
 80090c2:	4615      	mov	r5, r2
 80090c4:	e7f6      	b.n	80090b4 <_dtoa_r+0xadc>
 80090c6:	4593      	cmp	fp, r2
 80090c8:	d105      	bne.n	80090d6 <_dtoa_r+0xafe>
 80090ca:	2331      	movs	r3, #49	; 0x31
 80090cc:	f10a 0a01 	add.w	sl, sl, #1
 80090d0:	f88b 3000 	strb.w	r3, [fp]
 80090d4:	e6ff      	b.n	8008ed6 <_dtoa_r+0x8fe>
 80090d6:	4615      	mov	r5, r2
 80090d8:	e79f      	b.n	800901a <_dtoa_r+0xa42>
 80090da:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009140 <_dtoa_r+0xb68>
 80090de:	e007      	b.n	80090f0 <_dtoa_r+0xb18>
 80090e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009144 <_dtoa_r+0xb6c>
 80090e6:	b11b      	cbz	r3, 80090f0 <_dtoa_r+0xb18>
 80090e8:	f10b 0308 	add.w	r3, fp, #8
 80090ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80090ee:	6013      	str	r3, [r2, #0]
 80090f0:	4658      	mov	r0, fp
 80090f2:	b017      	add	sp, #92	; 0x5c
 80090f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f8:	9b06      	ldr	r3, [sp, #24]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	f77f ae35 	ble.w	8008d6a <_dtoa_r+0x792>
 8009100:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009102:	9307      	str	r3, [sp, #28]
 8009104:	e649      	b.n	8008d9a <_dtoa_r+0x7c2>
 8009106:	9b02      	ldr	r3, [sp, #8]
 8009108:	2b00      	cmp	r3, #0
 800910a:	dc03      	bgt.n	8009114 <_dtoa_r+0xb3c>
 800910c:	9b06      	ldr	r3, [sp, #24]
 800910e:	2b02      	cmp	r3, #2
 8009110:	f73f aecc 	bgt.w	8008eac <_dtoa_r+0x8d4>
 8009114:	465d      	mov	r5, fp
 8009116:	4639      	mov	r1, r7
 8009118:	9804      	ldr	r0, [sp, #16]
 800911a:	f7ff f9cf 	bl	80084bc <quorem>
 800911e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009122:	f805 8b01 	strb.w	r8, [r5], #1
 8009126:	9a02      	ldr	r2, [sp, #8]
 8009128:	eba5 030b 	sub.w	r3, r5, fp
 800912c:	429a      	cmp	r2, r3
 800912e:	ddb0      	ble.n	8009092 <_dtoa_r+0xaba>
 8009130:	2300      	movs	r3, #0
 8009132:	220a      	movs	r2, #10
 8009134:	9904      	ldr	r1, [sp, #16]
 8009136:	4620      	mov	r0, r4
 8009138:	f000 fd7d 	bl	8009c36 <__multadd>
 800913c:	9004      	str	r0, [sp, #16]
 800913e:	e7ea      	b.n	8009116 <_dtoa_r+0xb3e>
 8009140:	0800ac50 	.word	0x0800ac50
 8009144:	0800acd0 	.word	0x0800acd0

08009148 <__sflush_r>:
 8009148:	898a      	ldrh	r2, [r1, #12]
 800914a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800914e:	4605      	mov	r5, r0
 8009150:	0710      	lsls	r0, r2, #28
 8009152:	460c      	mov	r4, r1
 8009154:	d458      	bmi.n	8009208 <__sflush_r+0xc0>
 8009156:	684b      	ldr	r3, [r1, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	dc05      	bgt.n	8009168 <__sflush_r+0x20>
 800915c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800915e:	2b00      	cmp	r3, #0
 8009160:	dc02      	bgt.n	8009168 <__sflush_r+0x20>
 8009162:	2000      	movs	r0, #0
 8009164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800916a:	2e00      	cmp	r6, #0
 800916c:	d0f9      	beq.n	8009162 <__sflush_r+0x1a>
 800916e:	2300      	movs	r3, #0
 8009170:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009174:	682f      	ldr	r7, [r5, #0]
 8009176:	6a21      	ldr	r1, [r4, #32]
 8009178:	602b      	str	r3, [r5, #0]
 800917a:	d032      	beq.n	80091e2 <__sflush_r+0x9a>
 800917c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800917e:	89a3      	ldrh	r3, [r4, #12]
 8009180:	075a      	lsls	r2, r3, #29
 8009182:	d505      	bpl.n	8009190 <__sflush_r+0x48>
 8009184:	6863      	ldr	r3, [r4, #4]
 8009186:	1ac0      	subs	r0, r0, r3
 8009188:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800918a:	b10b      	cbz	r3, 8009190 <__sflush_r+0x48>
 800918c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800918e:	1ac0      	subs	r0, r0, r3
 8009190:	2300      	movs	r3, #0
 8009192:	4602      	mov	r2, r0
 8009194:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009196:	6a21      	ldr	r1, [r4, #32]
 8009198:	4628      	mov	r0, r5
 800919a:	47b0      	blx	r6
 800919c:	1c43      	adds	r3, r0, #1
 800919e:	89a3      	ldrh	r3, [r4, #12]
 80091a0:	d106      	bne.n	80091b0 <__sflush_r+0x68>
 80091a2:	6829      	ldr	r1, [r5, #0]
 80091a4:	291d      	cmp	r1, #29
 80091a6:	d848      	bhi.n	800923a <__sflush_r+0xf2>
 80091a8:	4a29      	ldr	r2, [pc, #164]	; (8009250 <__sflush_r+0x108>)
 80091aa:	40ca      	lsrs	r2, r1
 80091ac:	07d6      	lsls	r6, r2, #31
 80091ae:	d544      	bpl.n	800923a <__sflush_r+0xf2>
 80091b0:	2200      	movs	r2, #0
 80091b2:	6062      	str	r2, [r4, #4]
 80091b4:	04d9      	lsls	r1, r3, #19
 80091b6:	6922      	ldr	r2, [r4, #16]
 80091b8:	6022      	str	r2, [r4, #0]
 80091ba:	d504      	bpl.n	80091c6 <__sflush_r+0x7e>
 80091bc:	1c42      	adds	r2, r0, #1
 80091be:	d101      	bne.n	80091c4 <__sflush_r+0x7c>
 80091c0:	682b      	ldr	r3, [r5, #0]
 80091c2:	b903      	cbnz	r3, 80091c6 <__sflush_r+0x7e>
 80091c4:	6560      	str	r0, [r4, #84]	; 0x54
 80091c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091c8:	602f      	str	r7, [r5, #0]
 80091ca:	2900      	cmp	r1, #0
 80091cc:	d0c9      	beq.n	8009162 <__sflush_r+0x1a>
 80091ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091d2:	4299      	cmp	r1, r3
 80091d4:	d002      	beq.n	80091dc <__sflush_r+0x94>
 80091d6:	4628      	mov	r0, r5
 80091d8:	f7fd f9aa 	bl	8006530 <_free_r>
 80091dc:	2000      	movs	r0, #0
 80091de:	6360      	str	r0, [r4, #52]	; 0x34
 80091e0:	e7c0      	b.n	8009164 <__sflush_r+0x1c>
 80091e2:	2301      	movs	r3, #1
 80091e4:	4628      	mov	r0, r5
 80091e6:	47b0      	blx	r6
 80091e8:	1c41      	adds	r1, r0, #1
 80091ea:	d1c8      	bne.n	800917e <__sflush_r+0x36>
 80091ec:	682b      	ldr	r3, [r5, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d0c5      	beq.n	800917e <__sflush_r+0x36>
 80091f2:	2b1d      	cmp	r3, #29
 80091f4:	d001      	beq.n	80091fa <__sflush_r+0xb2>
 80091f6:	2b16      	cmp	r3, #22
 80091f8:	d101      	bne.n	80091fe <__sflush_r+0xb6>
 80091fa:	602f      	str	r7, [r5, #0]
 80091fc:	e7b1      	b.n	8009162 <__sflush_r+0x1a>
 80091fe:	89a3      	ldrh	r3, [r4, #12]
 8009200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009204:	81a3      	strh	r3, [r4, #12]
 8009206:	e7ad      	b.n	8009164 <__sflush_r+0x1c>
 8009208:	690f      	ldr	r7, [r1, #16]
 800920a:	2f00      	cmp	r7, #0
 800920c:	d0a9      	beq.n	8009162 <__sflush_r+0x1a>
 800920e:	0793      	lsls	r3, r2, #30
 8009210:	680e      	ldr	r6, [r1, #0]
 8009212:	bf08      	it	eq
 8009214:	694b      	ldreq	r3, [r1, #20]
 8009216:	600f      	str	r7, [r1, #0]
 8009218:	bf18      	it	ne
 800921a:	2300      	movne	r3, #0
 800921c:	eba6 0807 	sub.w	r8, r6, r7
 8009220:	608b      	str	r3, [r1, #8]
 8009222:	f1b8 0f00 	cmp.w	r8, #0
 8009226:	dd9c      	ble.n	8009162 <__sflush_r+0x1a>
 8009228:	4643      	mov	r3, r8
 800922a:	463a      	mov	r2, r7
 800922c:	6a21      	ldr	r1, [r4, #32]
 800922e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009230:	4628      	mov	r0, r5
 8009232:	47b0      	blx	r6
 8009234:	2800      	cmp	r0, #0
 8009236:	dc06      	bgt.n	8009246 <__sflush_r+0xfe>
 8009238:	89a3      	ldrh	r3, [r4, #12]
 800923a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800923e:	81a3      	strh	r3, [r4, #12]
 8009240:	f04f 30ff 	mov.w	r0, #4294967295
 8009244:	e78e      	b.n	8009164 <__sflush_r+0x1c>
 8009246:	4407      	add	r7, r0
 8009248:	eba8 0800 	sub.w	r8, r8, r0
 800924c:	e7e9      	b.n	8009222 <__sflush_r+0xda>
 800924e:	bf00      	nop
 8009250:	20400001 	.word	0x20400001

08009254 <_fflush_r>:
 8009254:	b538      	push	{r3, r4, r5, lr}
 8009256:	690b      	ldr	r3, [r1, #16]
 8009258:	4605      	mov	r5, r0
 800925a:	460c      	mov	r4, r1
 800925c:	b1db      	cbz	r3, 8009296 <_fflush_r+0x42>
 800925e:	b118      	cbz	r0, 8009268 <_fflush_r+0x14>
 8009260:	6983      	ldr	r3, [r0, #24]
 8009262:	b90b      	cbnz	r3, 8009268 <_fflush_r+0x14>
 8009264:	f000 f860 	bl	8009328 <__sinit>
 8009268:	4b0c      	ldr	r3, [pc, #48]	; (800929c <_fflush_r+0x48>)
 800926a:	429c      	cmp	r4, r3
 800926c:	d109      	bne.n	8009282 <_fflush_r+0x2e>
 800926e:	686c      	ldr	r4, [r5, #4]
 8009270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009274:	b17b      	cbz	r3, 8009296 <_fflush_r+0x42>
 8009276:	4621      	mov	r1, r4
 8009278:	4628      	mov	r0, r5
 800927a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800927e:	f7ff bf63 	b.w	8009148 <__sflush_r>
 8009282:	4b07      	ldr	r3, [pc, #28]	; (80092a0 <_fflush_r+0x4c>)
 8009284:	429c      	cmp	r4, r3
 8009286:	d101      	bne.n	800928c <_fflush_r+0x38>
 8009288:	68ac      	ldr	r4, [r5, #8]
 800928a:	e7f1      	b.n	8009270 <_fflush_r+0x1c>
 800928c:	4b05      	ldr	r3, [pc, #20]	; (80092a4 <_fflush_r+0x50>)
 800928e:	429c      	cmp	r4, r3
 8009290:	bf08      	it	eq
 8009292:	68ec      	ldreq	r4, [r5, #12]
 8009294:	e7ec      	b.n	8009270 <_fflush_r+0x1c>
 8009296:	2000      	movs	r0, #0
 8009298:	bd38      	pop	{r3, r4, r5, pc}
 800929a:	bf00      	nop
 800929c:	0800ad00 	.word	0x0800ad00
 80092a0:	0800ad20 	.word	0x0800ad20
 80092a4:	0800ace0 	.word	0x0800ace0

080092a8 <std>:
 80092a8:	2300      	movs	r3, #0
 80092aa:	b510      	push	{r4, lr}
 80092ac:	4604      	mov	r4, r0
 80092ae:	e9c0 3300 	strd	r3, r3, [r0]
 80092b2:	6083      	str	r3, [r0, #8]
 80092b4:	8181      	strh	r1, [r0, #12]
 80092b6:	6643      	str	r3, [r0, #100]	; 0x64
 80092b8:	81c2      	strh	r2, [r0, #14]
 80092ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092be:	6183      	str	r3, [r0, #24]
 80092c0:	4619      	mov	r1, r3
 80092c2:	2208      	movs	r2, #8
 80092c4:	305c      	adds	r0, #92	; 0x5c
 80092c6:	f7fd f91c 	bl	8006502 <memset>
 80092ca:	4b05      	ldr	r3, [pc, #20]	; (80092e0 <std+0x38>)
 80092cc:	6263      	str	r3, [r4, #36]	; 0x24
 80092ce:	4b05      	ldr	r3, [pc, #20]	; (80092e4 <std+0x3c>)
 80092d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80092d2:	4b05      	ldr	r3, [pc, #20]	; (80092e8 <std+0x40>)
 80092d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092d6:	4b05      	ldr	r3, [pc, #20]	; (80092ec <std+0x44>)
 80092d8:	6224      	str	r4, [r4, #32]
 80092da:	6323      	str	r3, [r4, #48]	; 0x30
 80092dc:	bd10      	pop	{r4, pc}
 80092de:	bf00      	nop
 80092e0:	0800a8c5 	.word	0x0800a8c5
 80092e4:	0800a8e7 	.word	0x0800a8e7
 80092e8:	0800a91f 	.word	0x0800a91f
 80092ec:	0800a943 	.word	0x0800a943

080092f0 <_cleanup_r>:
 80092f0:	4901      	ldr	r1, [pc, #4]	; (80092f8 <_cleanup_r+0x8>)
 80092f2:	f000 b885 	b.w	8009400 <_fwalk_reent>
 80092f6:	bf00      	nop
 80092f8:	08009255 	.word	0x08009255

080092fc <__sfmoreglue>:
 80092fc:	b570      	push	{r4, r5, r6, lr}
 80092fe:	1e4a      	subs	r2, r1, #1
 8009300:	2568      	movs	r5, #104	; 0x68
 8009302:	4355      	muls	r5, r2
 8009304:	460e      	mov	r6, r1
 8009306:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800930a:	f7fd f95f 	bl	80065cc <_malloc_r>
 800930e:	4604      	mov	r4, r0
 8009310:	b140      	cbz	r0, 8009324 <__sfmoreglue+0x28>
 8009312:	2100      	movs	r1, #0
 8009314:	e9c0 1600 	strd	r1, r6, [r0]
 8009318:	300c      	adds	r0, #12
 800931a:	60a0      	str	r0, [r4, #8]
 800931c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009320:	f7fd f8ef 	bl	8006502 <memset>
 8009324:	4620      	mov	r0, r4
 8009326:	bd70      	pop	{r4, r5, r6, pc}

08009328 <__sinit>:
 8009328:	6983      	ldr	r3, [r0, #24]
 800932a:	b510      	push	{r4, lr}
 800932c:	4604      	mov	r4, r0
 800932e:	bb33      	cbnz	r3, 800937e <__sinit+0x56>
 8009330:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009334:	6503      	str	r3, [r0, #80]	; 0x50
 8009336:	4b12      	ldr	r3, [pc, #72]	; (8009380 <__sinit+0x58>)
 8009338:	4a12      	ldr	r2, [pc, #72]	; (8009384 <__sinit+0x5c>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	6282      	str	r2, [r0, #40]	; 0x28
 800933e:	4298      	cmp	r0, r3
 8009340:	bf04      	itt	eq
 8009342:	2301      	moveq	r3, #1
 8009344:	6183      	streq	r3, [r0, #24]
 8009346:	f000 f81f 	bl	8009388 <__sfp>
 800934a:	6060      	str	r0, [r4, #4]
 800934c:	4620      	mov	r0, r4
 800934e:	f000 f81b 	bl	8009388 <__sfp>
 8009352:	60a0      	str	r0, [r4, #8]
 8009354:	4620      	mov	r0, r4
 8009356:	f000 f817 	bl	8009388 <__sfp>
 800935a:	2200      	movs	r2, #0
 800935c:	60e0      	str	r0, [r4, #12]
 800935e:	2104      	movs	r1, #4
 8009360:	6860      	ldr	r0, [r4, #4]
 8009362:	f7ff ffa1 	bl	80092a8 <std>
 8009366:	2201      	movs	r2, #1
 8009368:	2109      	movs	r1, #9
 800936a:	68a0      	ldr	r0, [r4, #8]
 800936c:	f7ff ff9c 	bl	80092a8 <std>
 8009370:	2202      	movs	r2, #2
 8009372:	2112      	movs	r1, #18
 8009374:	68e0      	ldr	r0, [r4, #12]
 8009376:	f7ff ff97 	bl	80092a8 <std>
 800937a:	2301      	movs	r3, #1
 800937c:	61a3      	str	r3, [r4, #24]
 800937e:	bd10      	pop	{r4, pc}
 8009380:	0800ac3c 	.word	0x0800ac3c
 8009384:	080092f1 	.word	0x080092f1

08009388 <__sfp>:
 8009388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938a:	4b1b      	ldr	r3, [pc, #108]	; (80093f8 <__sfp+0x70>)
 800938c:	681e      	ldr	r6, [r3, #0]
 800938e:	69b3      	ldr	r3, [r6, #24]
 8009390:	4607      	mov	r7, r0
 8009392:	b913      	cbnz	r3, 800939a <__sfp+0x12>
 8009394:	4630      	mov	r0, r6
 8009396:	f7ff ffc7 	bl	8009328 <__sinit>
 800939a:	3648      	adds	r6, #72	; 0x48
 800939c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80093a0:	3b01      	subs	r3, #1
 80093a2:	d503      	bpl.n	80093ac <__sfp+0x24>
 80093a4:	6833      	ldr	r3, [r6, #0]
 80093a6:	b133      	cbz	r3, 80093b6 <__sfp+0x2e>
 80093a8:	6836      	ldr	r6, [r6, #0]
 80093aa:	e7f7      	b.n	800939c <__sfp+0x14>
 80093ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80093b0:	b16d      	cbz	r5, 80093ce <__sfp+0x46>
 80093b2:	3468      	adds	r4, #104	; 0x68
 80093b4:	e7f4      	b.n	80093a0 <__sfp+0x18>
 80093b6:	2104      	movs	r1, #4
 80093b8:	4638      	mov	r0, r7
 80093ba:	f7ff ff9f 	bl	80092fc <__sfmoreglue>
 80093be:	6030      	str	r0, [r6, #0]
 80093c0:	2800      	cmp	r0, #0
 80093c2:	d1f1      	bne.n	80093a8 <__sfp+0x20>
 80093c4:	230c      	movs	r3, #12
 80093c6:	603b      	str	r3, [r7, #0]
 80093c8:	4604      	mov	r4, r0
 80093ca:	4620      	mov	r0, r4
 80093cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093ce:	4b0b      	ldr	r3, [pc, #44]	; (80093fc <__sfp+0x74>)
 80093d0:	6665      	str	r5, [r4, #100]	; 0x64
 80093d2:	e9c4 5500 	strd	r5, r5, [r4]
 80093d6:	60a5      	str	r5, [r4, #8]
 80093d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80093dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80093e0:	2208      	movs	r2, #8
 80093e2:	4629      	mov	r1, r5
 80093e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80093e8:	f7fd f88b 	bl	8006502 <memset>
 80093ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80093f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80093f4:	e7e9      	b.n	80093ca <__sfp+0x42>
 80093f6:	bf00      	nop
 80093f8:	0800ac3c 	.word	0x0800ac3c
 80093fc:	ffff0001 	.word	0xffff0001

08009400 <_fwalk_reent>:
 8009400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009404:	4680      	mov	r8, r0
 8009406:	4689      	mov	r9, r1
 8009408:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800940c:	2600      	movs	r6, #0
 800940e:	b914      	cbnz	r4, 8009416 <_fwalk_reent+0x16>
 8009410:	4630      	mov	r0, r6
 8009412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009416:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800941a:	3f01      	subs	r7, #1
 800941c:	d501      	bpl.n	8009422 <_fwalk_reent+0x22>
 800941e:	6824      	ldr	r4, [r4, #0]
 8009420:	e7f5      	b.n	800940e <_fwalk_reent+0xe>
 8009422:	89ab      	ldrh	r3, [r5, #12]
 8009424:	2b01      	cmp	r3, #1
 8009426:	d907      	bls.n	8009438 <_fwalk_reent+0x38>
 8009428:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800942c:	3301      	adds	r3, #1
 800942e:	d003      	beq.n	8009438 <_fwalk_reent+0x38>
 8009430:	4629      	mov	r1, r5
 8009432:	4640      	mov	r0, r8
 8009434:	47c8      	blx	r9
 8009436:	4306      	orrs	r6, r0
 8009438:	3568      	adds	r5, #104	; 0x68
 800943a:	e7ee      	b.n	800941a <_fwalk_reent+0x1a>

0800943c <rshift>:
 800943c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800943e:	6906      	ldr	r6, [r0, #16]
 8009440:	114b      	asrs	r3, r1, #5
 8009442:	429e      	cmp	r6, r3
 8009444:	f100 0414 	add.w	r4, r0, #20
 8009448:	dd30      	ble.n	80094ac <rshift+0x70>
 800944a:	f011 011f 	ands.w	r1, r1, #31
 800944e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009452:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009456:	d108      	bne.n	800946a <rshift+0x2e>
 8009458:	4621      	mov	r1, r4
 800945a:	42b2      	cmp	r2, r6
 800945c:	460b      	mov	r3, r1
 800945e:	d211      	bcs.n	8009484 <rshift+0x48>
 8009460:	f852 3b04 	ldr.w	r3, [r2], #4
 8009464:	f841 3b04 	str.w	r3, [r1], #4
 8009468:	e7f7      	b.n	800945a <rshift+0x1e>
 800946a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800946e:	f1c1 0c20 	rsb	ip, r1, #32
 8009472:	40cd      	lsrs	r5, r1
 8009474:	3204      	adds	r2, #4
 8009476:	4623      	mov	r3, r4
 8009478:	42b2      	cmp	r2, r6
 800947a:	4617      	mov	r7, r2
 800947c:	d30c      	bcc.n	8009498 <rshift+0x5c>
 800947e:	601d      	str	r5, [r3, #0]
 8009480:	b105      	cbz	r5, 8009484 <rshift+0x48>
 8009482:	3304      	adds	r3, #4
 8009484:	1b1a      	subs	r2, r3, r4
 8009486:	42a3      	cmp	r3, r4
 8009488:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800948c:	bf08      	it	eq
 800948e:	2300      	moveq	r3, #0
 8009490:	6102      	str	r2, [r0, #16]
 8009492:	bf08      	it	eq
 8009494:	6143      	streq	r3, [r0, #20]
 8009496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009498:	683f      	ldr	r7, [r7, #0]
 800949a:	fa07 f70c 	lsl.w	r7, r7, ip
 800949e:	433d      	orrs	r5, r7
 80094a0:	f843 5b04 	str.w	r5, [r3], #4
 80094a4:	f852 5b04 	ldr.w	r5, [r2], #4
 80094a8:	40cd      	lsrs	r5, r1
 80094aa:	e7e5      	b.n	8009478 <rshift+0x3c>
 80094ac:	4623      	mov	r3, r4
 80094ae:	e7e9      	b.n	8009484 <rshift+0x48>

080094b0 <__hexdig_fun>:
 80094b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80094b4:	2b09      	cmp	r3, #9
 80094b6:	d802      	bhi.n	80094be <__hexdig_fun+0xe>
 80094b8:	3820      	subs	r0, #32
 80094ba:	b2c0      	uxtb	r0, r0
 80094bc:	4770      	bx	lr
 80094be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80094c2:	2b05      	cmp	r3, #5
 80094c4:	d801      	bhi.n	80094ca <__hexdig_fun+0x1a>
 80094c6:	3847      	subs	r0, #71	; 0x47
 80094c8:	e7f7      	b.n	80094ba <__hexdig_fun+0xa>
 80094ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80094ce:	2b05      	cmp	r3, #5
 80094d0:	d801      	bhi.n	80094d6 <__hexdig_fun+0x26>
 80094d2:	3827      	subs	r0, #39	; 0x27
 80094d4:	e7f1      	b.n	80094ba <__hexdig_fun+0xa>
 80094d6:	2000      	movs	r0, #0
 80094d8:	4770      	bx	lr

080094da <__gethex>:
 80094da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094de:	b08b      	sub	sp, #44	; 0x2c
 80094e0:	468a      	mov	sl, r1
 80094e2:	9002      	str	r0, [sp, #8]
 80094e4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80094e6:	9306      	str	r3, [sp, #24]
 80094e8:	4690      	mov	r8, r2
 80094ea:	f000 fad0 	bl	8009a8e <__localeconv_l>
 80094ee:	6803      	ldr	r3, [r0, #0]
 80094f0:	9303      	str	r3, [sp, #12]
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7f6 fe74 	bl	80001e0 <strlen>
 80094f8:	9b03      	ldr	r3, [sp, #12]
 80094fa:	9001      	str	r0, [sp, #4]
 80094fc:	4403      	add	r3, r0
 80094fe:	f04f 0b00 	mov.w	fp, #0
 8009502:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009506:	9307      	str	r3, [sp, #28]
 8009508:	f8da 3000 	ldr.w	r3, [sl]
 800950c:	3302      	adds	r3, #2
 800950e:	461f      	mov	r7, r3
 8009510:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009514:	2830      	cmp	r0, #48	; 0x30
 8009516:	d06c      	beq.n	80095f2 <__gethex+0x118>
 8009518:	f7ff ffca 	bl	80094b0 <__hexdig_fun>
 800951c:	4604      	mov	r4, r0
 800951e:	2800      	cmp	r0, #0
 8009520:	d16a      	bne.n	80095f8 <__gethex+0x11e>
 8009522:	9a01      	ldr	r2, [sp, #4]
 8009524:	9903      	ldr	r1, [sp, #12]
 8009526:	4638      	mov	r0, r7
 8009528:	f7fe f848 	bl	80075bc <strncmp>
 800952c:	2800      	cmp	r0, #0
 800952e:	d166      	bne.n	80095fe <__gethex+0x124>
 8009530:	9b01      	ldr	r3, [sp, #4]
 8009532:	5cf8      	ldrb	r0, [r7, r3]
 8009534:	18fe      	adds	r6, r7, r3
 8009536:	f7ff ffbb 	bl	80094b0 <__hexdig_fun>
 800953a:	2800      	cmp	r0, #0
 800953c:	d062      	beq.n	8009604 <__gethex+0x12a>
 800953e:	4633      	mov	r3, r6
 8009540:	7818      	ldrb	r0, [r3, #0]
 8009542:	2830      	cmp	r0, #48	; 0x30
 8009544:	461f      	mov	r7, r3
 8009546:	f103 0301 	add.w	r3, r3, #1
 800954a:	d0f9      	beq.n	8009540 <__gethex+0x66>
 800954c:	f7ff ffb0 	bl	80094b0 <__hexdig_fun>
 8009550:	fab0 f580 	clz	r5, r0
 8009554:	096d      	lsrs	r5, r5, #5
 8009556:	4634      	mov	r4, r6
 8009558:	f04f 0b01 	mov.w	fp, #1
 800955c:	463a      	mov	r2, r7
 800955e:	4616      	mov	r6, r2
 8009560:	3201      	adds	r2, #1
 8009562:	7830      	ldrb	r0, [r6, #0]
 8009564:	f7ff ffa4 	bl	80094b0 <__hexdig_fun>
 8009568:	2800      	cmp	r0, #0
 800956a:	d1f8      	bne.n	800955e <__gethex+0x84>
 800956c:	9a01      	ldr	r2, [sp, #4]
 800956e:	9903      	ldr	r1, [sp, #12]
 8009570:	4630      	mov	r0, r6
 8009572:	f7fe f823 	bl	80075bc <strncmp>
 8009576:	b950      	cbnz	r0, 800958e <__gethex+0xb4>
 8009578:	b954      	cbnz	r4, 8009590 <__gethex+0xb6>
 800957a:	9b01      	ldr	r3, [sp, #4]
 800957c:	18f4      	adds	r4, r6, r3
 800957e:	4622      	mov	r2, r4
 8009580:	4616      	mov	r6, r2
 8009582:	3201      	adds	r2, #1
 8009584:	7830      	ldrb	r0, [r6, #0]
 8009586:	f7ff ff93 	bl	80094b0 <__hexdig_fun>
 800958a:	2800      	cmp	r0, #0
 800958c:	d1f8      	bne.n	8009580 <__gethex+0xa6>
 800958e:	b10c      	cbz	r4, 8009594 <__gethex+0xba>
 8009590:	1ba4      	subs	r4, r4, r6
 8009592:	00a4      	lsls	r4, r4, #2
 8009594:	7833      	ldrb	r3, [r6, #0]
 8009596:	2b50      	cmp	r3, #80	; 0x50
 8009598:	d001      	beq.n	800959e <__gethex+0xc4>
 800959a:	2b70      	cmp	r3, #112	; 0x70
 800959c:	d140      	bne.n	8009620 <__gethex+0x146>
 800959e:	7873      	ldrb	r3, [r6, #1]
 80095a0:	2b2b      	cmp	r3, #43	; 0x2b
 80095a2:	d031      	beq.n	8009608 <__gethex+0x12e>
 80095a4:	2b2d      	cmp	r3, #45	; 0x2d
 80095a6:	d033      	beq.n	8009610 <__gethex+0x136>
 80095a8:	1c71      	adds	r1, r6, #1
 80095aa:	f04f 0900 	mov.w	r9, #0
 80095ae:	7808      	ldrb	r0, [r1, #0]
 80095b0:	f7ff ff7e 	bl	80094b0 <__hexdig_fun>
 80095b4:	1e43      	subs	r3, r0, #1
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	2b18      	cmp	r3, #24
 80095ba:	d831      	bhi.n	8009620 <__gethex+0x146>
 80095bc:	f1a0 0210 	sub.w	r2, r0, #16
 80095c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80095c4:	f7ff ff74 	bl	80094b0 <__hexdig_fun>
 80095c8:	1e43      	subs	r3, r0, #1
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	2b18      	cmp	r3, #24
 80095ce:	d922      	bls.n	8009616 <__gethex+0x13c>
 80095d0:	f1b9 0f00 	cmp.w	r9, #0
 80095d4:	d000      	beq.n	80095d8 <__gethex+0xfe>
 80095d6:	4252      	negs	r2, r2
 80095d8:	4414      	add	r4, r2
 80095da:	f8ca 1000 	str.w	r1, [sl]
 80095de:	b30d      	cbz	r5, 8009624 <__gethex+0x14a>
 80095e0:	f1bb 0f00 	cmp.w	fp, #0
 80095e4:	bf0c      	ite	eq
 80095e6:	2706      	moveq	r7, #6
 80095e8:	2700      	movne	r7, #0
 80095ea:	4638      	mov	r0, r7
 80095ec:	b00b      	add	sp, #44	; 0x2c
 80095ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f2:	f10b 0b01 	add.w	fp, fp, #1
 80095f6:	e78a      	b.n	800950e <__gethex+0x34>
 80095f8:	2500      	movs	r5, #0
 80095fa:	462c      	mov	r4, r5
 80095fc:	e7ae      	b.n	800955c <__gethex+0x82>
 80095fe:	463e      	mov	r6, r7
 8009600:	2501      	movs	r5, #1
 8009602:	e7c7      	b.n	8009594 <__gethex+0xba>
 8009604:	4604      	mov	r4, r0
 8009606:	e7fb      	b.n	8009600 <__gethex+0x126>
 8009608:	f04f 0900 	mov.w	r9, #0
 800960c:	1cb1      	adds	r1, r6, #2
 800960e:	e7ce      	b.n	80095ae <__gethex+0xd4>
 8009610:	f04f 0901 	mov.w	r9, #1
 8009614:	e7fa      	b.n	800960c <__gethex+0x132>
 8009616:	230a      	movs	r3, #10
 8009618:	fb03 0202 	mla	r2, r3, r2, r0
 800961c:	3a10      	subs	r2, #16
 800961e:	e7cf      	b.n	80095c0 <__gethex+0xe6>
 8009620:	4631      	mov	r1, r6
 8009622:	e7da      	b.n	80095da <__gethex+0x100>
 8009624:	1bf3      	subs	r3, r6, r7
 8009626:	3b01      	subs	r3, #1
 8009628:	4629      	mov	r1, r5
 800962a:	2b07      	cmp	r3, #7
 800962c:	dc49      	bgt.n	80096c2 <__gethex+0x1e8>
 800962e:	9802      	ldr	r0, [sp, #8]
 8009630:	f000 fab6 	bl	8009ba0 <_Balloc>
 8009634:	9b01      	ldr	r3, [sp, #4]
 8009636:	f100 0914 	add.w	r9, r0, #20
 800963a:	f04f 0b00 	mov.w	fp, #0
 800963e:	f1c3 0301 	rsb	r3, r3, #1
 8009642:	4605      	mov	r5, r0
 8009644:	f8cd 9010 	str.w	r9, [sp, #16]
 8009648:	46da      	mov	sl, fp
 800964a:	9308      	str	r3, [sp, #32]
 800964c:	42b7      	cmp	r7, r6
 800964e:	d33b      	bcc.n	80096c8 <__gethex+0x1ee>
 8009650:	9804      	ldr	r0, [sp, #16]
 8009652:	f840 ab04 	str.w	sl, [r0], #4
 8009656:	eba0 0009 	sub.w	r0, r0, r9
 800965a:	1080      	asrs	r0, r0, #2
 800965c:	6128      	str	r0, [r5, #16]
 800965e:	0147      	lsls	r7, r0, #5
 8009660:	4650      	mov	r0, sl
 8009662:	f000 fb61 	bl	8009d28 <__hi0bits>
 8009666:	f8d8 6000 	ldr.w	r6, [r8]
 800966a:	1a3f      	subs	r7, r7, r0
 800966c:	42b7      	cmp	r7, r6
 800966e:	dd64      	ble.n	800973a <__gethex+0x260>
 8009670:	1bbf      	subs	r7, r7, r6
 8009672:	4639      	mov	r1, r7
 8009674:	4628      	mov	r0, r5
 8009676:	f000 fe71 	bl	800a35c <__any_on>
 800967a:	4682      	mov	sl, r0
 800967c:	b178      	cbz	r0, 800969e <__gethex+0x1c4>
 800967e:	1e7b      	subs	r3, r7, #1
 8009680:	1159      	asrs	r1, r3, #5
 8009682:	f003 021f 	and.w	r2, r3, #31
 8009686:	f04f 0a01 	mov.w	sl, #1
 800968a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800968e:	fa0a f202 	lsl.w	r2, sl, r2
 8009692:	420a      	tst	r2, r1
 8009694:	d003      	beq.n	800969e <__gethex+0x1c4>
 8009696:	4553      	cmp	r3, sl
 8009698:	dc46      	bgt.n	8009728 <__gethex+0x24e>
 800969a:	f04f 0a02 	mov.w	sl, #2
 800969e:	4639      	mov	r1, r7
 80096a0:	4628      	mov	r0, r5
 80096a2:	f7ff fecb 	bl	800943c <rshift>
 80096a6:	443c      	add	r4, r7
 80096a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096ac:	42a3      	cmp	r3, r4
 80096ae:	da52      	bge.n	8009756 <__gethex+0x27c>
 80096b0:	4629      	mov	r1, r5
 80096b2:	9802      	ldr	r0, [sp, #8]
 80096b4:	f000 faa8 	bl	8009c08 <_Bfree>
 80096b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80096ba:	2300      	movs	r3, #0
 80096bc:	6013      	str	r3, [r2, #0]
 80096be:	27a3      	movs	r7, #163	; 0xa3
 80096c0:	e793      	b.n	80095ea <__gethex+0x110>
 80096c2:	3101      	adds	r1, #1
 80096c4:	105b      	asrs	r3, r3, #1
 80096c6:	e7b0      	b.n	800962a <__gethex+0x150>
 80096c8:	1e73      	subs	r3, r6, #1
 80096ca:	9305      	str	r3, [sp, #20]
 80096cc:	9a07      	ldr	r2, [sp, #28]
 80096ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d018      	beq.n	8009708 <__gethex+0x22e>
 80096d6:	f1bb 0f20 	cmp.w	fp, #32
 80096da:	d107      	bne.n	80096ec <__gethex+0x212>
 80096dc:	9b04      	ldr	r3, [sp, #16]
 80096de:	f8c3 a000 	str.w	sl, [r3]
 80096e2:	3304      	adds	r3, #4
 80096e4:	f04f 0a00 	mov.w	sl, #0
 80096e8:	9304      	str	r3, [sp, #16]
 80096ea:	46d3      	mov	fp, sl
 80096ec:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80096f0:	f7ff fede 	bl	80094b0 <__hexdig_fun>
 80096f4:	f000 000f 	and.w	r0, r0, #15
 80096f8:	fa00 f00b 	lsl.w	r0, r0, fp
 80096fc:	ea4a 0a00 	orr.w	sl, sl, r0
 8009700:	f10b 0b04 	add.w	fp, fp, #4
 8009704:	9b05      	ldr	r3, [sp, #20]
 8009706:	e00d      	b.n	8009724 <__gethex+0x24a>
 8009708:	9b05      	ldr	r3, [sp, #20]
 800970a:	9a08      	ldr	r2, [sp, #32]
 800970c:	4413      	add	r3, r2
 800970e:	42bb      	cmp	r3, r7
 8009710:	d3e1      	bcc.n	80096d6 <__gethex+0x1fc>
 8009712:	4618      	mov	r0, r3
 8009714:	9a01      	ldr	r2, [sp, #4]
 8009716:	9903      	ldr	r1, [sp, #12]
 8009718:	9309      	str	r3, [sp, #36]	; 0x24
 800971a:	f7fd ff4f 	bl	80075bc <strncmp>
 800971e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009720:	2800      	cmp	r0, #0
 8009722:	d1d8      	bne.n	80096d6 <__gethex+0x1fc>
 8009724:	461e      	mov	r6, r3
 8009726:	e791      	b.n	800964c <__gethex+0x172>
 8009728:	1eb9      	subs	r1, r7, #2
 800972a:	4628      	mov	r0, r5
 800972c:	f000 fe16 	bl	800a35c <__any_on>
 8009730:	2800      	cmp	r0, #0
 8009732:	d0b2      	beq.n	800969a <__gethex+0x1c0>
 8009734:	f04f 0a03 	mov.w	sl, #3
 8009738:	e7b1      	b.n	800969e <__gethex+0x1c4>
 800973a:	da09      	bge.n	8009750 <__gethex+0x276>
 800973c:	1bf7      	subs	r7, r6, r7
 800973e:	4629      	mov	r1, r5
 8009740:	463a      	mov	r2, r7
 8009742:	9802      	ldr	r0, [sp, #8]
 8009744:	f000 fc2c 	bl	8009fa0 <__lshift>
 8009748:	1be4      	subs	r4, r4, r7
 800974a:	4605      	mov	r5, r0
 800974c:	f100 0914 	add.w	r9, r0, #20
 8009750:	f04f 0a00 	mov.w	sl, #0
 8009754:	e7a8      	b.n	80096a8 <__gethex+0x1ce>
 8009756:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800975a:	42a0      	cmp	r0, r4
 800975c:	dd6a      	ble.n	8009834 <__gethex+0x35a>
 800975e:	1b04      	subs	r4, r0, r4
 8009760:	42a6      	cmp	r6, r4
 8009762:	dc2e      	bgt.n	80097c2 <__gethex+0x2e8>
 8009764:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009768:	2b02      	cmp	r3, #2
 800976a:	d022      	beq.n	80097b2 <__gethex+0x2d8>
 800976c:	2b03      	cmp	r3, #3
 800976e:	d024      	beq.n	80097ba <__gethex+0x2e0>
 8009770:	2b01      	cmp	r3, #1
 8009772:	d115      	bne.n	80097a0 <__gethex+0x2c6>
 8009774:	42a6      	cmp	r6, r4
 8009776:	d113      	bne.n	80097a0 <__gethex+0x2c6>
 8009778:	2e01      	cmp	r6, #1
 800977a:	dc0b      	bgt.n	8009794 <__gethex+0x2ba>
 800977c:	9a06      	ldr	r2, [sp, #24]
 800977e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009782:	6013      	str	r3, [r2, #0]
 8009784:	2301      	movs	r3, #1
 8009786:	612b      	str	r3, [r5, #16]
 8009788:	f8c9 3000 	str.w	r3, [r9]
 800978c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800978e:	2762      	movs	r7, #98	; 0x62
 8009790:	601d      	str	r5, [r3, #0]
 8009792:	e72a      	b.n	80095ea <__gethex+0x110>
 8009794:	1e71      	subs	r1, r6, #1
 8009796:	4628      	mov	r0, r5
 8009798:	f000 fde0 	bl	800a35c <__any_on>
 800979c:	2800      	cmp	r0, #0
 800979e:	d1ed      	bne.n	800977c <__gethex+0x2a2>
 80097a0:	4629      	mov	r1, r5
 80097a2:	9802      	ldr	r0, [sp, #8]
 80097a4:	f000 fa30 	bl	8009c08 <_Bfree>
 80097a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80097aa:	2300      	movs	r3, #0
 80097ac:	6013      	str	r3, [r2, #0]
 80097ae:	2750      	movs	r7, #80	; 0x50
 80097b0:	e71b      	b.n	80095ea <__gethex+0x110>
 80097b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d0e1      	beq.n	800977c <__gethex+0x2a2>
 80097b8:	e7f2      	b.n	80097a0 <__gethex+0x2c6>
 80097ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1dd      	bne.n	800977c <__gethex+0x2a2>
 80097c0:	e7ee      	b.n	80097a0 <__gethex+0x2c6>
 80097c2:	1e67      	subs	r7, r4, #1
 80097c4:	f1ba 0f00 	cmp.w	sl, #0
 80097c8:	d131      	bne.n	800982e <__gethex+0x354>
 80097ca:	b127      	cbz	r7, 80097d6 <__gethex+0x2fc>
 80097cc:	4639      	mov	r1, r7
 80097ce:	4628      	mov	r0, r5
 80097d0:	f000 fdc4 	bl	800a35c <__any_on>
 80097d4:	4682      	mov	sl, r0
 80097d6:	117a      	asrs	r2, r7, #5
 80097d8:	2301      	movs	r3, #1
 80097da:	f007 071f 	and.w	r7, r7, #31
 80097de:	fa03 f707 	lsl.w	r7, r3, r7
 80097e2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80097e6:	4621      	mov	r1, r4
 80097e8:	421f      	tst	r7, r3
 80097ea:	4628      	mov	r0, r5
 80097ec:	bf18      	it	ne
 80097ee:	f04a 0a02 	orrne.w	sl, sl, #2
 80097f2:	1b36      	subs	r6, r6, r4
 80097f4:	f7ff fe22 	bl	800943c <rshift>
 80097f8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80097fc:	2702      	movs	r7, #2
 80097fe:	f1ba 0f00 	cmp.w	sl, #0
 8009802:	d048      	beq.n	8009896 <__gethex+0x3bc>
 8009804:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009808:	2b02      	cmp	r3, #2
 800980a:	d015      	beq.n	8009838 <__gethex+0x35e>
 800980c:	2b03      	cmp	r3, #3
 800980e:	d017      	beq.n	8009840 <__gethex+0x366>
 8009810:	2b01      	cmp	r3, #1
 8009812:	d109      	bne.n	8009828 <__gethex+0x34e>
 8009814:	f01a 0f02 	tst.w	sl, #2
 8009818:	d006      	beq.n	8009828 <__gethex+0x34e>
 800981a:	f8d9 3000 	ldr.w	r3, [r9]
 800981e:	ea4a 0a03 	orr.w	sl, sl, r3
 8009822:	f01a 0f01 	tst.w	sl, #1
 8009826:	d10e      	bne.n	8009846 <__gethex+0x36c>
 8009828:	f047 0710 	orr.w	r7, r7, #16
 800982c:	e033      	b.n	8009896 <__gethex+0x3bc>
 800982e:	f04f 0a01 	mov.w	sl, #1
 8009832:	e7d0      	b.n	80097d6 <__gethex+0x2fc>
 8009834:	2701      	movs	r7, #1
 8009836:	e7e2      	b.n	80097fe <__gethex+0x324>
 8009838:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800983a:	f1c3 0301 	rsb	r3, r3, #1
 800983e:	9315      	str	r3, [sp, #84]	; 0x54
 8009840:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009842:	2b00      	cmp	r3, #0
 8009844:	d0f0      	beq.n	8009828 <__gethex+0x34e>
 8009846:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800984a:	f105 0314 	add.w	r3, r5, #20
 800984e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009852:	eb03 010a 	add.w	r1, r3, sl
 8009856:	f04f 0c00 	mov.w	ip, #0
 800985a:	4618      	mov	r0, r3
 800985c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009860:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009864:	d01c      	beq.n	80098a0 <__gethex+0x3c6>
 8009866:	3201      	adds	r2, #1
 8009868:	6002      	str	r2, [r0, #0]
 800986a:	2f02      	cmp	r7, #2
 800986c:	f105 0314 	add.w	r3, r5, #20
 8009870:	d138      	bne.n	80098e4 <__gethex+0x40a>
 8009872:	f8d8 2000 	ldr.w	r2, [r8]
 8009876:	3a01      	subs	r2, #1
 8009878:	42b2      	cmp	r2, r6
 800987a:	d10a      	bne.n	8009892 <__gethex+0x3b8>
 800987c:	1171      	asrs	r1, r6, #5
 800987e:	2201      	movs	r2, #1
 8009880:	f006 061f 	and.w	r6, r6, #31
 8009884:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009888:	fa02 f606 	lsl.w	r6, r2, r6
 800988c:	421e      	tst	r6, r3
 800988e:	bf18      	it	ne
 8009890:	4617      	movne	r7, r2
 8009892:	f047 0720 	orr.w	r7, r7, #32
 8009896:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009898:	601d      	str	r5, [r3, #0]
 800989a:	9b06      	ldr	r3, [sp, #24]
 800989c:	601c      	str	r4, [r3, #0]
 800989e:	e6a4      	b.n	80095ea <__gethex+0x110>
 80098a0:	4299      	cmp	r1, r3
 80098a2:	f843 cc04 	str.w	ip, [r3, #-4]
 80098a6:	d8d8      	bhi.n	800985a <__gethex+0x380>
 80098a8:	68ab      	ldr	r3, [r5, #8]
 80098aa:	4599      	cmp	r9, r3
 80098ac:	db12      	blt.n	80098d4 <__gethex+0x3fa>
 80098ae:	6869      	ldr	r1, [r5, #4]
 80098b0:	9802      	ldr	r0, [sp, #8]
 80098b2:	3101      	adds	r1, #1
 80098b4:	f000 f974 	bl	8009ba0 <_Balloc>
 80098b8:	692a      	ldr	r2, [r5, #16]
 80098ba:	3202      	adds	r2, #2
 80098bc:	f105 010c 	add.w	r1, r5, #12
 80098c0:	4683      	mov	fp, r0
 80098c2:	0092      	lsls	r2, r2, #2
 80098c4:	300c      	adds	r0, #12
 80098c6:	f7fc fe11 	bl	80064ec <memcpy>
 80098ca:	4629      	mov	r1, r5
 80098cc:	9802      	ldr	r0, [sp, #8]
 80098ce:	f000 f99b 	bl	8009c08 <_Bfree>
 80098d2:	465d      	mov	r5, fp
 80098d4:	692b      	ldr	r3, [r5, #16]
 80098d6:	1c5a      	adds	r2, r3, #1
 80098d8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80098dc:	612a      	str	r2, [r5, #16]
 80098de:	2201      	movs	r2, #1
 80098e0:	615a      	str	r2, [r3, #20]
 80098e2:	e7c2      	b.n	800986a <__gethex+0x390>
 80098e4:	692a      	ldr	r2, [r5, #16]
 80098e6:	454a      	cmp	r2, r9
 80098e8:	dd0b      	ble.n	8009902 <__gethex+0x428>
 80098ea:	2101      	movs	r1, #1
 80098ec:	4628      	mov	r0, r5
 80098ee:	f7ff fda5 	bl	800943c <rshift>
 80098f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098f6:	3401      	adds	r4, #1
 80098f8:	42a3      	cmp	r3, r4
 80098fa:	f6ff aed9 	blt.w	80096b0 <__gethex+0x1d6>
 80098fe:	2701      	movs	r7, #1
 8009900:	e7c7      	b.n	8009892 <__gethex+0x3b8>
 8009902:	f016 061f 	ands.w	r6, r6, #31
 8009906:	d0fa      	beq.n	80098fe <__gethex+0x424>
 8009908:	449a      	add	sl, r3
 800990a:	f1c6 0620 	rsb	r6, r6, #32
 800990e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009912:	f000 fa09 	bl	8009d28 <__hi0bits>
 8009916:	42b0      	cmp	r0, r6
 8009918:	dbe7      	blt.n	80098ea <__gethex+0x410>
 800991a:	e7f0      	b.n	80098fe <__gethex+0x424>

0800991c <L_shift>:
 800991c:	f1c2 0208 	rsb	r2, r2, #8
 8009920:	0092      	lsls	r2, r2, #2
 8009922:	b570      	push	{r4, r5, r6, lr}
 8009924:	f1c2 0620 	rsb	r6, r2, #32
 8009928:	6843      	ldr	r3, [r0, #4]
 800992a:	6804      	ldr	r4, [r0, #0]
 800992c:	fa03 f506 	lsl.w	r5, r3, r6
 8009930:	432c      	orrs	r4, r5
 8009932:	40d3      	lsrs	r3, r2
 8009934:	6004      	str	r4, [r0, #0]
 8009936:	f840 3f04 	str.w	r3, [r0, #4]!
 800993a:	4288      	cmp	r0, r1
 800993c:	d3f4      	bcc.n	8009928 <L_shift+0xc>
 800993e:	bd70      	pop	{r4, r5, r6, pc}

08009940 <__match>:
 8009940:	b530      	push	{r4, r5, lr}
 8009942:	6803      	ldr	r3, [r0, #0]
 8009944:	3301      	adds	r3, #1
 8009946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800994a:	b914      	cbnz	r4, 8009952 <__match+0x12>
 800994c:	6003      	str	r3, [r0, #0]
 800994e:	2001      	movs	r0, #1
 8009950:	bd30      	pop	{r4, r5, pc}
 8009952:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009956:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800995a:	2d19      	cmp	r5, #25
 800995c:	bf98      	it	ls
 800995e:	3220      	addls	r2, #32
 8009960:	42a2      	cmp	r2, r4
 8009962:	d0f0      	beq.n	8009946 <__match+0x6>
 8009964:	2000      	movs	r0, #0
 8009966:	e7f3      	b.n	8009950 <__match+0x10>

08009968 <__hexnan>:
 8009968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996c:	680b      	ldr	r3, [r1, #0]
 800996e:	6801      	ldr	r1, [r0, #0]
 8009970:	115f      	asrs	r7, r3, #5
 8009972:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009976:	f013 031f 	ands.w	r3, r3, #31
 800997a:	b087      	sub	sp, #28
 800997c:	bf18      	it	ne
 800997e:	3704      	addne	r7, #4
 8009980:	2500      	movs	r5, #0
 8009982:	1f3e      	subs	r6, r7, #4
 8009984:	4682      	mov	sl, r0
 8009986:	4690      	mov	r8, r2
 8009988:	9301      	str	r3, [sp, #4]
 800998a:	f847 5c04 	str.w	r5, [r7, #-4]
 800998e:	46b1      	mov	r9, r6
 8009990:	4634      	mov	r4, r6
 8009992:	9502      	str	r5, [sp, #8]
 8009994:	46ab      	mov	fp, r5
 8009996:	784a      	ldrb	r2, [r1, #1]
 8009998:	1c4b      	adds	r3, r1, #1
 800999a:	9303      	str	r3, [sp, #12]
 800999c:	b342      	cbz	r2, 80099f0 <__hexnan+0x88>
 800999e:	4610      	mov	r0, r2
 80099a0:	9105      	str	r1, [sp, #20]
 80099a2:	9204      	str	r2, [sp, #16]
 80099a4:	f7ff fd84 	bl	80094b0 <__hexdig_fun>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d143      	bne.n	8009a34 <__hexnan+0xcc>
 80099ac:	9a04      	ldr	r2, [sp, #16]
 80099ae:	9905      	ldr	r1, [sp, #20]
 80099b0:	2a20      	cmp	r2, #32
 80099b2:	d818      	bhi.n	80099e6 <__hexnan+0x7e>
 80099b4:	9b02      	ldr	r3, [sp, #8]
 80099b6:	459b      	cmp	fp, r3
 80099b8:	dd13      	ble.n	80099e2 <__hexnan+0x7a>
 80099ba:	454c      	cmp	r4, r9
 80099bc:	d206      	bcs.n	80099cc <__hexnan+0x64>
 80099be:	2d07      	cmp	r5, #7
 80099c0:	dc04      	bgt.n	80099cc <__hexnan+0x64>
 80099c2:	462a      	mov	r2, r5
 80099c4:	4649      	mov	r1, r9
 80099c6:	4620      	mov	r0, r4
 80099c8:	f7ff ffa8 	bl	800991c <L_shift>
 80099cc:	4544      	cmp	r4, r8
 80099ce:	d944      	bls.n	8009a5a <__hexnan+0xf2>
 80099d0:	2300      	movs	r3, #0
 80099d2:	f1a4 0904 	sub.w	r9, r4, #4
 80099d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80099da:	f8cd b008 	str.w	fp, [sp, #8]
 80099de:	464c      	mov	r4, r9
 80099e0:	461d      	mov	r5, r3
 80099e2:	9903      	ldr	r1, [sp, #12]
 80099e4:	e7d7      	b.n	8009996 <__hexnan+0x2e>
 80099e6:	2a29      	cmp	r2, #41	; 0x29
 80099e8:	d14a      	bne.n	8009a80 <__hexnan+0x118>
 80099ea:	3102      	adds	r1, #2
 80099ec:	f8ca 1000 	str.w	r1, [sl]
 80099f0:	f1bb 0f00 	cmp.w	fp, #0
 80099f4:	d044      	beq.n	8009a80 <__hexnan+0x118>
 80099f6:	454c      	cmp	r4, r9
 80099f8:	d206      	bcs.n	8009a08 <__hexnan+0xa0>
 80099fa:	2d07      	cmp	r5, #7
 80099fc:	dc04      	bgt.n	8009a08 <__hexnan+0xa0>
 80099fe:	462a      	mov	r2, r5
 8009a00:	4649      	mov	r1, r9
 8009a02:	4620      	mov	r0, r4
 8009a04:	f7ff ff8a 	bl	800991c <L_shift>
 8009a08:	4544      	cmp	r4, r8
 8009a0a:	d928      	bls.n	8009a5e <__hexnan+0xf6>
 8009a0c:	4643      	mov	r3, r8
 8009a0e:	f854 2b04 	ldr.w	r2, [r4], #4
 8009a12:	f843 2b04 	str.w	r2, [r3], #4
 8009a16:	42a6      	cmp	r6, r4
 8009a18:	d2f9      	bcs.n	8009a0e <__hexnan+0xa6>
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f843 2b04 	str.w	r2, [r3], #4
 8009a20:	429e      	cmp	r6, r3
 8009a22:	d2fb      	bcs.n	8009a1c <__hexnan+0xb4>
 8009a24:	6833      	ldr	r3, [r6, #0]
 8009a26:	b91b      	cbnz	r3, 8009a30 <__hexnan+0xc8>
 8009a28:	4546      	cmp	r6, r8
 8009a2a:	d127      	bne.n	8009a7c <__hexnan+0x114>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	6033      	str	r3, [r6, #0]
 8009a30:	2005      	movs	r0, #5
 8009a32:	e026      	b.n	8009a82 <__hexnan+0x11a>
 8009a34:	3501      	adds	r5, #1
 8009a36:	2d08      	cmp	r5, #8
 8009a38:	f10b 0b01 	add.w	fp, fp, #1
 8009a3c:	dd06      	ble.n	8009a4c <__hexnan+0xe4>
 8009a3e:	4544      	cmp	r4, r8
 8009a40:	d9cf      	bls.n	80099e2 <__hexnan+0x7a>
 8009a42:	2300      	movs	r3, #0
 8009a44:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a48:	2501      	movs	r5, #1
 8009a4a:	3c04      	subs	r4, #4
 8009a4c:	6822      	ldr	r2, [r4, #0]
 8009a4e:	f000 000f 	and.w	r0, r0, #15
 8009a52:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009a56:	6020      	str	r0, [r4, #0]
 8009a58:	e7c3      	b.n	80099e2 <__hexnan+0x7a>
 8009a5a:	2508      	movs	r5, #8
 8009a5c:	e7c1      	b.n	80099e2 <__hexnan+0x7a>
 8009a5e:	9b01      	ldr	r3, [sp, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d0df      	beq.n	8009a24 <__hexnan+0xbc>
 8009a64:	f04f 32ff 	mov.w	r2, #4294967295
 8009a68:	f1c3 0320 	rsb	r3, r3, #32
 8009a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a70:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009a74:	401a      	ands	r2, r3
 8009a76:	f847 2c04 	str.w	r2, [r7, #-4]
 8009a7a:	e7d3      	b.n	8009a24 <__hexnan+0xbc>
 8009a7c:	3e04      	subs	r6, #4
 8009a7e:	e7d1      	b.n	8009a24 <__hexnan+0xbc>
 8009a80:	2004      	movs	r0, #4
 8009a82:	b007      	add	sp, #28
 8009a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a88 <__locale_ctype_ptr_l>:
 8009a88:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009a8c:	4770      	bx	lr

08009a8e <__localeconv_l>:
 8009a8e:	30f0      	adds	r0, #240	; 0xf0
 8009a90:	4770      	bx	lr
	...

08009a94 <_localeconv_r>:
 8009a94:	4b04      	ldr	r3, [pc, #16]	; (8009aa8 <_localeconv_r+0x14>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	6a18      	ldr	r0, [r3, #32]
 8009a9a:	4b04      	ldr	r3, [pc, #16]	; (8009aac <_localeconv_r+0x18>)
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	bf08      	it	eq
 8009aa0:	4618      	moveq	r0, r3
 8009aa2:	30f0      	adds	r0, #240	; 0xf0
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	20000010 	.word	0x20000010
 8009aac:	20000074 	.word	0x20000074

08009ab0 <__swhatbuf_r>:
 8009ab0:	b570      	push	{r4, r5, r6, lr}
 8009ab2:	460e      	mov	r6, r1
 8009ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ab8:	2900      	cmp	r1, #0
 8009aba:	b096      	sub	sp, #88	; 0x58
 8009abc:	4614      	mov	r4, r2
 8009abe:	461d      	mov	r5, r3
 8009ac0:	da07      	bge.n	8009ad2 <__swhatbuf_r+0x22>
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	602b      	str	r3, [r5, #0]
 8009ac6:	89b3      	ldrh	r3, [r6, #12]
 8009ac8:	061a      	lsls	r2, r3, #24
 8009aca:	d410      	bmi.n	8009aee <__swhatbuf_r+0x3e>
 8009acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ad0:	e00e      	b.n	8009af0 <__swhatbuf_r+0x40>
 8009ad2:	466a      	mov	r2, sp
 8009ad4:	f000 ff68 	bl	800a9a8 <_fstat_r>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	dbf2      	blt.n	8009ac2 <__swhatbuf_r+0x12>
 8009adc:	9a01      	ldr	r2, [sp, #4]
 8009ade:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ae2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ae6:	425a      	negs	r2, r3
 8009ae8:	415a      	adcs	r2, r3
 8009aea:	602a      	str	r2, [r5, #0]
 8009aec:	e7ee      	b.n	8009acc <__swhatbuf_r+0x1c>
 8009aee:	2340      	movs	r3, #64	; 0x40
 8009af0:	2000      	movs	r0, #0
 8009af2:	6023      	str	r3, [r4, #0]
 8009af4:	b016      	add	sp, #88	; 0x58
 8009af6:	bd70      	pop	{r4, r5, r6, pc}

08009af8 <__smakebuf_r>:
 8009af8:	898b      	ldrh	r3, [r1, #12]
 8009afa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009afc:	079d      	lsls	r5, r3, #30
 8009afe:	4606      	mov	r6, r0
 8009b00:	460c      	mov	r4, r1
 8009b02:	d507      	bpl.n	8009b14 <__smakebuf_r+0x1c>
 8009b04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b08:	6023      	str	r3, [r4, #0]
 8009b0a:	6123      	str	r3, [r4, #16]
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	6163      	str	r3, [r4, #20]
 8009b10:	b002      	add	sp, #8
 8009b12:	bd70      	pop	{r4, r5, r6, pc}
 8009b14:	ab01      	add	r3, sp, #4
 8009b16:	466a      	mov	r2, sp
 8009b18:	f7ff ffca 	bl	8009ab0 <__swhatbuf_r>
 8009b1c:	9900      	ldr	r1, [sp, #0]
 8009b1e:	4605      	mov	r5, r0
 8009b20:	4630      	mov	r0, r6
 8009b22:	f7fc fd53 	bl	80065cc <_malloc_r>
 8009b26:	b948      	cbnz	r0, 8009b3c <__smakebuf_r+0x44>
 8009b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b2c:	059a      	lsls	r2, r3, #22
 8009b2e:	d4ef      	bmi.n	8009b10 <__smakebuf_r+0x18>
 8009b30:	f023 0303 	bic.w	r3, r3, #3
 8009b34:	f043 0302 	orr.w	r3, r3, #2
 8009b38:	81a3      	strh	r3, [r4, #12]
 8009b3a:	e7e3      	b.n	8009b04 <__smakebuf_r+0xc>
 8009b3c:	4b0d      	ldr	r3, [pc, #52]	; (8009b74 <__smakebuf_r+0x7c>)
 8009b3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b40:	89a3      	ldrh	r3, [r4, #12]
 8009b42:	6020      	str	r0, [r4, #0]
 8009b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b48:	81a3      	strh	r3, [r4, #12]
 8009b4a:	9b00      	ldr	r3, [sp, #0]
 8009b4c:	6163      	str	r3, [r4, #20]
 8009b4e:	9b01      	ldr	r3, [sp, #4]
 8009b50:	6120      	str	r0, [r4, #16]
 8009b52:	b15b      	cbz	r3, 8009b6c <__smakebuf_r+0x74>
 8009b54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b58:	4630      	mov	r0, r6
 8009b5a:	f000 ff37 	bl	800a9cc <_isatty_r>
 8009b5e:	b128      	cbz	r0, 8009b6c <__smakebuf_r+0x74>
 8009b60:	89a3      	ldrh	r3, [r4, #12]
 8009b62:	f023 0303 	bic.w	r3, r3, #3
 8009b66:	f043 0301 	orr.w	r3, r3, #1
 8009b6a:	81a3      	strh	r3, [r4, #12]
 8009b6c:	89a3      	ldrh	r3, [r4, #12]
 8009b6e:	431d      	orrs	r5, r3
 8009b70:	81a5      	strh	r5, [r4, #12]
 8009b72:	e7cd      	b.n	8009b10 <__smakebuf_r+0x18>
 8009b74:	080092f1 	.word	0x080092f1

08009b78 <__ascii_mbtowc>:
 8009b78:	b082      	sub	sp, #8
 8009b7a:	b901      	cbnz	r1, 8009b7e <__ascii_mbtowc+0x6>
 8009b7c:	a901      	add	r1, sp, #4
 8009b7e:	b142      	cbz	r2, 8009b92 <__ascii_mbtowc+0x1a>
 8009b80:	b14b      	cbz	r3, 8009b96 <__ascii_mbtowc+0x1e>
 8009b82:	7813      	ldrb	r3, [r2, #0]
 8009b84:	600b      	str	r3, [r1, #0]
 8009b86:	7812      	ldrb	r2, [r2, #0]
 8009b88:	1c10      	adds	r0, r2, #0
 8009b8a:	bf18      	it	ne
 8009b8c:	2001      	movne	r0, #1
 8009b8e:	b002      	add	sp, #8
 8009b90:	4770      	bx	lr
 8009b92:	4610      	mov	r0, r2
 8009b94:	e7fb      	b.n	8009b8e <__ascii_mbtowc+0x16>
 8009b96:	f06f 0001 	mvn.w	r0, #1
 8009b9a:	e7f8      	b.n	8009b8e <__ascii_mbtowc+0x16>

08009b9c <__malloc_lock>:
 8009b9c:	4770      	bx	lr

08009b9e <__malloc_unlock>:
 8009b9e:	4770      	bx	lr

08009ba0 <_Balloc>:
 8009ba0:	b570      	push	{r4, r5, r6, lr}
 8009ba2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009ba4:	4604      	mov	r4, r0
 8009ba6:	460e      	mov	r6, r1
 8009ba8:	b93d      	cbnz	r5, 8009bba <_Balloc+0x1a>
 8009baa:	2010      	movs	r0, #16
 8009bac:	f7fc fc96 	bl	80064dc <malloc>
 8009bb0:	6260      	str	r0, [r4, #36]	; 0x24
 8009bb2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009bb6:	6005      	str	r5, [r0, #0]
 8009bb8:	60c5      	str	r5, [r0, #12]
 8009bba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009bbc:	68eb      	ldr	r3, [r5, #12]
 8009bbe:	b183      	cbz	r3, 8009be2 <_Balloc+0x42>
 8009bc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009bc8:	b9b8      	cbnz	r0, 8009bfa <_Balloc+0x5a>
 8009bca:	2101      	movs	r1, #1
 8009bcc:	fa01 f506 	lsl.w	r5, r1, r6
 8009bd0:	1d6a      	adds	r2, r5, #5
 8009bd2:	0092      	lsls	r2, r2, #2
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	f7fc fc9c 	bl	8006512 <_calloc_r>
 8009bda:	b160      	cbz	r0, 8009bf6 <_Balloc+0x56>
 8009bdc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009be0:	e00e      	b.n	8009c00 <_Balloc+0x60>
 8009be2:	2221      	movs	r2, #33	; 0x21
 8009be4:	2104      	movs	r1, #4
 8009be6:	4620      	mov	r0, r4
 8009be8:	f7fc fc93 	bl	8006512 <_calloc_r>
 8009bec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bee:	60e8      	str	r0, [r5, #12]
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1e4      	bne.n	8009bc0 <_Balloc+0x20>
 8009bf6:	2000      	movs	r0, #0
 8009bf8:	bd70      	pop	{r4, r5, r6, pc}
 8009bfa:	6802      	ldr	r2, [r0, #0]
 8009bfc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009c00:	2300      	movs	r3, #0
 8009c02:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c06:	e7f7      	b.n	8009bf8 <_Balloc+0x58>

08009c08 <_Bfree>:
 8009c08:	b570      	push	{r4, r5, r6, lr}
 8009c0a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009c0c:	4606      	mov	r6, r0
 8009c0e:	460d      	mov	r5, r1
 8009c10:	b93c      	cbnz	r4, 8009c22 <_Bfree+0x1a>
 8009c12:	2010      	movs	r0, #16
 8009c14:	f7fc fc62 	bl	80064dc <malloc>
 8009c18:	6270      	str	r0, [r6, #36]	; 0x24
 8009c1a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c1e:	6004      	str	r4, [r0, #0]
 8009c20:	60c4      	str	r4, [r0, #12]
 8009c22:	b13d      	cbz	r5, 8009c34 <_Bfree+0x2c>
 8009c24:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009c26:	686a      	ldr	r2, [r5, #4]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c2e:	6029      	str	r1, [r5, #0]
 8009c30:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009c34:	bd70      	pop	{r4, r5, r6, pc}

08009c36 <__multadd>:
 8009c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c3a:	690d      	ldr	r5, [r1, #16]
 8009c3c:	461f      	mov	r7, r3
 8009c3e:	4606      	mov	r6, r0
 8009c40:	460c      	mov	r4, r1
 8009c42:	f101 0c14 	add.w	ip, r1, #20
 8009c46:	2300      	movs	r3, #0
 8009c48:	f8dc 0000 	ldr.w	r0, [ip]
 8009c4c:	b281      	uxth	r1, r0
 8009c4e:	fb02 7101 	mla	r1, r2, r1, r7
 8009c52:	0c0f      	lsrs	r7, r1, #16
 8009c54:	0c00      	lsrs	r0, r0, #16
 8009c56:	fb02 7000 	mla	r0, r2, r0, r7
 8009c5a:	b289      	uxth	r1, r1
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009c62:	429d      	cmp	r5, r3
 8009c64:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009c68:	f84c 1b04 	str.w	r1, [ip], #4
 8009c6c:	dcec      	bgt.n	8009c48 <__multadd+0x12>
 8009c6e:	b1d7      	cbz	r7, 8009ca6 <__multadd+0x70>
 8009c70:	68a3      	ldr	r3, [r4, #8]
 8009c72:	42ab      	cmp	r3, r5
 8009c74:	dc12      	bgt.n	8009c9c <__multadd+0x66>
 8009c76:	6861      	ldr	r1, [r4, #4]
 8009c78:	4630      	mov	r0, r6
 8009c7a:	3101      	adds	r1, #1
 8009c7c:	f7ff ff90 	bl	8009ba0 <_Balloc>
 8009c80:	6922      	ldr	r2, [r4, #16]
 8009c82:	3202      	adds	r2, #2
 8009c84:	f104 010c 	add.w	r1, r4, #12
 8009c88:	4680      	mov	r8, r0
 8009c8a:	0092      	lsls	r2, r2, #2
 8009c8c:	300c      	adds	r0, #12
 8009c8e:	f7fc fc2d 	bl	80064ec <memcpy>
 8009c92:	4621      	mov	r1, r4
 8009c94:	4630      	mov	r0, r6
 8009c96:	f7ff ffb7 	bl	8009c08 <_Bfree>
 8009c9a:	4644      	mov	r4, r8
 8009c9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ca0:	3501      	adds	r5, #1
 8009ca2:	615f      	str	r7, [r3, #20]
 8009ca4:	6125      	str	r5, [r4, #16]
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009cac <__s2b>:
 8009cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cb0:	460c      	mov	r4, r1
 8009cb2:	4615      	mov	r5, r2
 8009cb4:	461f      	mov	r7, r3
 8009cb6:	2209      	movs	r2, #9
 8009cb8:	3308      	adds	r3, #8
 8009cba:	4606      	mov	r6, r0
 8009cbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	db20      	blt.n	8009d0a <__s2b+0x5e>
 8009cc8:	4630      	mov	r0, r6
 8009cca:	f7ff ff69 	bl	8009ba0 <_Balloc>
 8009cce:	9b08      	ldr	r3, [sp, #32]
 8009cd0:	6143      	str	r3, [r0, #20]
 8009cd2:	2d09      	cmp	r5, #9
 8009cd4:	f04f 0301 	mov.w	r3, #1
 8009cd8:	6103      	str	r3, [r0, #16]
 8009cda:	dd19      	ble.n	8009d10 <__s2b+0x64>
 8009cdc:	f104 0809 	add.w	r8, r4, #9
 8009ce0:	46c1      	mov	r9, r8
 8009ce2:	442c      	add	r4, r5
 8009ce4:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009ce8:	4601      	mov	r1, r0
 8009cea:	3b30      	subs	r3, #48	; 0x30
 8009cec:	220a      	movs	r2, #10
 8009cee:	4630      	mov	r0, r6
 8009cf0:	f7ff ffa1 	bl	8009c36 <__multadd>
 8009cf4:	45a1      	cmp	r9, r4
 8009cf6:	d1f5      	bne.n	8009ce4 <__s2b+0x38>
 8009cf8:	eb08 0405 	add.w	r4, r8, r5
 8009cfc:	3c08      	subs	r4, #8
 8009cfe:	1b2d      	subs	r5, r5, r4
 8009d00:	1963      	adds	r3, r4, r5
 8009d02:	42bb      	cmp	r3, r7
 8009d04:	db07      	blt.n	8009d16 <__s2b+0x6a>
 8009d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d0a:	0052      	lsls	r2, r2, #1
 8009d0c:	3101      	adds	r1, #1
 8009d0e:	e7d9      	b.n	8009cc4 <__s2b+0x18>
 8009d10:	340a      	adds	r4, #10
 8009d12:	2509      	movs	r5, #9
 8009d14:	e7f3      	b.n	8009cfe <__s2b+0x52>
 8009d16:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009d1a:	4601      	mov	r1, r0
 8009d1c:	3b30      	subs	r3, #48	; 0x30
 8009d1e:	220a      	movs	r2, #10
 8009d20:	4630      	mov	r0, r6
 8009d22:	f7ff ff88 	bl	8009c36 <__multadd>
 8009d26:	e7eb      	b.n	8009d00 <__s2b+0x54>

08009d28 <__hi0bits>:
 8009d28:	0c02      	lsrs	r2, r0, #16
 8009d2a:	0412      	lsls	r2, r2, #16
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	b9b2      	cbnz	r2, 8009d5e <__hi0bits+0x36>
 8009d30:	0403      	lsls	r3, r0, #16
 8009d32:	2010      	movs	r0, #16
 8009d34:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009d38:	bf04      	itt	eq
 8009d3a:	021b      	lsleq	r3, r3, #8
 8009d3c:	3008      	addeq	r0, #8
 8009d3e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009d42:	bf04      	itt	eq
 8009d44:	011b      	lsleq	r3, r3, #4
 8009d46:	3004      	addeq	r0, #4
 8009d48:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009d4c:	bf04      	itt	eq
 8009d4e:	009b      	lsleq	r3, r3, #2
 8009d50:	3002      	addeq	r0, #2
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	db06      	blt.n	8009d64 <__hi0bits+0x3c>
 8009d56:	005b      	lsls	r3, r3, #1
 8009d58:	d503      	bpl.n	8009d62 <__hi0bits+0x3a>
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	4770      	bx	lr
 8009d5e:	2000      	movs	r0, #0
 8009d60:	e7e8      	b.n	8009d34 <__hi0bits+0xc>
 8009d62:	2020      	movs	r0, #32
 8009d64:	4770      	bx	lr

08009d66 <__lo0bits>:
 8009d66:	6803      	ldr	r3, [r0, #0]
 8009d68:	f013 0207 	ands.w	r2, r3, #7
 8009d6c:	4601      	mov	r1, r0
 8009d6e:	d00b      	beq.n	8009d88 <__lo0bits+0x22>
 8009d70:	07da      	lsls	r2, r3, #31
 8009d72:	d423      	bmi.n	8009dbc <__lo0bits+0x56>
 8009d74:	0798      	lsls	r0, r3, #30
 8009d76:	bf49      	itett	mi
 8009d78:	085b      	lsrmi	r3, r3, #1
 8009d7a:	089b      	lsrpl	r3, r3, #2
 8009d7c:	2001      	movmi	r0, #1
 8009d7e:	600b      	strmi	r3, [r1, #0]
 8009d80:	bf5c      	itt	pl
 8009d82:	600b      	strpl	r3, [r1, #0]
 8009d84:	2002      	movpl	r0, #2
 8009d86:	4770      	bx	lr
 8009d88:	b298      	uxth	r0, r3
 8009d8a:	b9a8      	cbnz	r0, 8009db8 <__lo0bits+0x52>
 8009d8c:	0c1b      	lsrs	r3, r3, #16
 8009d8e:	2010      	movs	r0, #16
 8009d90:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009d94:	bf04      	itt	eq
 8009d96:	0a1b      	lsreq	r3, r3, #8
 8009d98:	3008      	addeq	r0, #8
 8009d9a:	071a      	lsls	r2, r3, #28
 8009d9c:	bf04      	itt	eq
 8009d9e:	091b      	lsreq	r3, r3, #4
 8009da0:	3004      	addeq	r0, #4
 8009da2:	079a      	lsls	r2, r3, #30
 8009da4:	bf04      	itt	eq
 8009da6:	089b      	lsreq	r3, r3, #2
 8009da8:	3002      	addeq	r0, #2
 8009daa:	07da      	lsls	r2, r3, #31
 8009dac:	d402      	bmi.n	8009db4 <__lo0bits+0x4e>
 8009dae:	085b      	lsrs	r3, r3, #1
 8009db0:	d006      	beq.n	8009dc0 <__lo0bits+0x5a>
 8009db2:	3001      	adds	r0, #1
 8009db4:	600b      	str	r3, [r1, #0]
 8009db6:	4770      	bx	lr
 8009db8:	4610      	mov	r0, r2
 8009dba:	e7e9      	b.n	8009d90 <__lo0bits+0x2a>
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	4770      	bx	lr
 8009dc0:	2020      	movs	r0, #32
 8009dc2:	4770      	bx	lr

08009dc4 <__i2b>:
 8009dc4:	b510      	push	{r4, lr}
 8009dc6:	460c      	mov	r4, r1
 8009dc8:	2101      	movs	r1, #1
 8009dca:	f7ff fee9 	bl	8009ba0 <_Balloc>
 8009dce:	2201      	movs	r2, #1
 8009dd0:	6144      	str	r4, [r0, #20]
 8009dd2:	6102      	str	r2, [r0, #16]
 8009dd4:	bd10      	pop	{r4, pc}

08009dd6 <__multiply>:
 8009dd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dda:	4614      	mov	r4, r2
 8009ddc:	690a      	ldr	r2, [r1, #16]
 8009dde:	6923      	ldr	r3, [r4, #16]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	bfb8      	it	lt
 8009de4:	460b      	movlt	r3, r1
 8009de6:	4688      	mov	r8, r1
 8009de8:	bfbc      	itt	lt
 8009dea:	46a0      	movlt	r8, r4
 8009dec:	461c      	movlt	r4, r3
 8009dee:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009df2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009df6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009dfa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009dfe:	eb07 0609 	add.w	r6, r7, r9
 8009e02:	42b3      	cmp	r3, r6
 8009e04:	bfb8      	it	lt
 8009e06:	3101      	addlt	r1, #1
 8009e08:	f7ff feca 	bl	8009ba0 <_Balloc>
 8009e0c:	f100 0514 	add.w	r5, r0, #20
 8009e10:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009e14:	462b      	mov	r3, r5
 8009e16:	2200      	movs	r2, #0
 8009e18:	4573      	cmp	r3, lr
 8009e1a:	d316      	bcc.n	8009e4a <__multiply+0x74>
 8009e1c:	f104 0214 	add.w	r2, r4, #20
 8009e20:	f108 0114 	add.w	r1, r8, #20
 8009e24:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009e28:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009e2c:	9300      	str	r3, [sp, #0]
 8009e2e:	9b00      	ldr	r3, [sp, #0]
 8009e30:	9201      	str	r2, [sp, #4]
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d80c      	bhi.n	8009e50 <__multiply+0x7a>
 8009e36:	2e00      	cmp	r6, #0
 8009e38:	dd03      	ble.n	8009e42 <__multiply+0x6c>
 8009e3a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d05d      	beq.n	8009efe <__multiply+0x128>
 8009e42:	6106      	str	r6, [r0, #16]
 8009e44:	b003      	add	sp, #12
 8009e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e4a:	f843 2b04 	str.w	r2, [r3], #4
 8009e4e:	e7e3      	b.n	8009e18 <__multiply+0x42>
 8009e50:	f8b2 b000 	ldrh.w	fp, [r2]
 8009e54:	f1bb 0f00 	cmp.w	fp, #0
 8009e58:	d023      	beq.n	8009ea2 <__multiply+0xcc>
 8009e5a:	4689      	mov	r9, r1
 8009e5c:	46ac      	mov	ip, r5
 8009e5e:	f04f 0800 	mov.w	r8, #0
 8009e62:	f859 4b04 	ldr.w	r4, [r9], #4
 8009e66:	f8dc a000 	ldr.w	sl, [ip]
 8009e6a:	b2a3      	uxth	r3, r4
 8009e6c:	fa1f fa8a 	uxth.w	sl, sl
 8009e70:	fb0b a303 	mla	r3, fp, r3, sl
 8009e74:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009e78:	f8dc 4000 	ldr.w	r4, [ip]
 8009e7c:	4443      	add	r3, r8
 8009e7e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009e82:	fb0b 840a 	mla	r4, fp, sl, r8
 8009e86:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009e8a:	46e2      	mov	sl, ip
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009e92:	454f      	cmp	r7, r9
 8009e94:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009e98:	f84a 3b04 	str.w	r3, [sl], #4
 8009e9c:	d82b      	bhi.n	8009ef6 <__multiply+0x120>
 8009e9e:	f8cc 8004 	str.w	r8, [ip, #4]
 8009ea2:	9b01      	ldr	r3, [sp, #4]
 8009ea4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009ea8:	3204      	adds	r2, #4
 8009eaa:	f1ba 0f00 	cmp.w	sl, #0
 8009eae:	d020      	beq.n	8009ef2 <__multiply+0x11c>
 8009eb0:	682b      	ldr	r3, [r5, #0]
 8009eb2:	4689      	mov	r9, r1
 8009eb4:	46a8      	mov	r8, r5
 8009eb6:	f04f 0b00 	mov.w	fp, #0
 8009eba:	f8b9 c000 	ldrh.w	ip, [r9]
 8009ebe:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009ec2:	fb0a 440c 	mla	r4, sl, ip, r4
 8009ec6:	445c      	add	r4, fp
 8009ec8:	46c4      	mov	ip, r8
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009ed0:	f84c 3b04 	str.w	r3, [ip], #4
 8009ed4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ed8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009edc:	0c1b      	lsrs	r3, r3, #16
 8009ede:	fb0a b303 	mla	r3, sl, r3, fp
 8009ee2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009ee6:	454f      	cmp	r7, r9
 8009ee8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009eec:	d805      	bhi.n	8009efa <__multiply+0x124>
 8009eee:	f8c8 3004 	str.w	r3, [r8, #4]
 8009ef2:	3504      	adds	r5, #4
 8009ef4:	e79b      	b.n	8009e2e <__multiply+0x58>
 8009ef6:	46d4      	mov	ip, sl
 8009ef8:	e7b3      	b.n	8009e62 <__multiply+0x8c>
 8009efa:	46e0      	mov	r8, ip
 8009efc:	e7dd      	b.n	8009eba <__multiply+0xe4>
 8009efe:	3e01      	subs	r6, #1
 8009f00:	e799      	b.n	8009e36 <__multiply+0x60>
	...

08009f04 <__pow5mult>:
 8009f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f08:	4615      	mov	r5, r2
 8009f0a:	f012 0203 	ands.w	r2, r2, #3
 8009f0e:	4606      	mov	r6, r0
 8009f10:	460f      	mov	r7, r1
 8009f12:	d007      	beq.n	8009f24 <__pow5mult+0x20>
 8009f14:	3a01      	subs	r2, #1
 8009f16:	4c21      	ldr	r4, [pc, #132]	; (8009f9c <__pow5mult+0x98>)
 8009f18:	2300      	movs	r3, #0
 8009f1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f1e:	f7ff fe8a 	bl	8009c36 <__multadd>
 8009f22:	4607      	mov	r7, r0
 8009f24:	10ad      	asrs	r5, r5, #2
 8009f26:	d035      	beq.n	8009f94 <__pow5mult+0x90>
 8009f28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f2a:	b93c      	cbnz	r4, 8009f3c <__pow5mult+0x38>
 8009f2c:	2010      	movs	r0, #16
 8009f2e:	f7fc fad5 	bl	80064dc <malloc>
 8009f32:	6270      	str	r0, [r6, #36]	; 0x24
 8009f34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f38:	6004      	str	r4, [r0, #0]
 8009f3a:	60c4      	str	r4, [r0, #12]
 8009f3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f44:	b94c      	cbnz	r4, 8009f5a <__pow5mult+0x56>
 8009f46:	f240 2171 	movw	r1, #625	; 0x271
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	f7ff ff3a 	bl	8009dc4 <__i2b>
 8009f50:	2300      	movs	r3, #0
 8009f52:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f56:	4604      	mov	r4, r0
 8009f58:	6003      	str	r3, [r0, #0]
 8009f5a:	f04f 0800 	mov.w	r8, #0
 8009f5e:	07eb      	lsls	r3, r5, #31
 8009f60:	d50a      	bpl.n	8009f78 <__pow5mult+0x74>
 8009f62:	4639      	mov	r1, r7
 8009f64:	4622      	mov	r2, r4
 8009f66:	4630      	mov	r0, r6
 8009f68:	f7ff ff35 	bl	8009dd6 <__multiply>
 8009f6c:	4639      	mov	r1, r7
 8009f6e:	4681      	mov	r9, r0
 8009f70:	4630      	mov	r0, r6
 8009f72:	f7ff fe49 	bl	8009c08 <_Bfree>
 8009f76:	464f      	mov	r7, r9
 8009f78:	106d      	asrs	r5, r5, #1
 8009f7a:	d00b      	beq.n	8009f94 <__pow5mult+0x90>
 8009f7c:	6820      	ldr	r0, [r4, #0]
 8009f7e:	b938      	cbnz	r0, 8009f90 <__pow5mult+0x8c>
 8009f80:	4622      	mov	r2, r4
 8009f82:	4621      	mov	r1, r4
 8009f84:	4630      	mov	r0, r6
 8009f86:	f7ff ff26 	bl	8009dd6 <__multiply>
 8009f8a:	6020      	str	r0, [r4, #0]
 8009f8c:	f8c0 8000 	str.w	r8, [r0]
 8009f90:	4604      	mov	r4, r0
 8009f92:	e7e4      	b.n	8009f5e <__pow5mult+0x5a>
 8009f94:	4638      	mov	r0, r7
 8009f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f9a:	bf00      	nop
 8009f9c:	0800ae40 	.word	0x0800ae40

08009fa0 <__lshift>:
 8009fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fa4:	460c      	mov	r4, r1
 8009fa6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009faa:	6923      	ldr	r3, [r4, #16]
 8009fac:	6849      	ldr	r1, [r1, #4]
 8009fae:	eb0a 0903 	add.w	r9, sl, r3
 8009fb2:	68a3      	ldr	r3, [r4, #8]
 8009fb4:	4607      	mov	r7, r0
 8009fb6:	4616      	mov	r6, r2
 8009fb8:	f109 0501 	add.w	r5, r9, #1
 8009fbc:	42ab      	cmp	r3, r5
 8009fbe:	db32      	blt.n	800a026 <__lshift+0x86>
 8009fc0:	4638      	mov	r0, r7
 8009fc2:	f7ff fded 	bl	8009ba0 <_Balloc>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	4680      	mov	r8, r0
 8009fca:	f100 0114 	add.w	r1, r0, #20
 8009fce:	461a      	mov	r2, r3
 8009fd0:	4553      	cmp	r3, sl
 8009fd2:	db2b      	blt.n	800a02c <__lshift+0x8c>
 8009fd4:	6920      	ldr	r0, [r4, #16]
 8009fd6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fda:	f104 0314 	add.w	r3, r4, #20
 8009fde:	f016 021f 	ands.w	r2, r6, #31
 8009fe2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009fe6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009fea:	d025      	beq.n	800a038 <__lshift+0x98>
 8009fec:	f1c2 0e20 	rsb	lr, r2, #32
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	681e      	ldr	r6, [r3, #0]
 8009ff4:	468a      	mov	sl, r1
 8009ff6:	4096      	lsls	r6, r2
 8009ff8:	4330      	orrs	r0, r6
 8009ffa:	f84a 0b04 	str.w	r0, [sl], #4
 8009ffe:	f853 0b04 	ldr.w	r0, [r3], #4
 800a002:	459c      	cmp	ip, r3
 800a004:	fa20 f00e 	lsr.w	r0, r0, lr
 800a008:	d814      	bhi.n	800a034 <__lshift+0x94>
 800a00a:	6048      	str	r0, [r1, #4]
 800a00c:	b108      	cbz	r0, 800a012 <__lshift+0x72>
 800a00e:	f109 0502 	add.w	r5, r9, #2
 800a012:	3d01      	subs	r5, #1
 800a014:	4638      	mov	r0, r7
 800a016:	f8c8 5010 	str.w	r5, [r8, #16]
 800a01a:	4621      	mov	r1, r4
 800a01c:	f7ff fdf4 	bl	8009c08 <_Bfree>
 800a020:	4640      	mov	r0, r8
 800a022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a026:	3101      	adds	r1, #1
 800a028:	005b      	lsls	r3, r3, #1
 800a02a:	e7c7      	b.n	8009fbc <__lshift+0x1c>
 800a02c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a030:	3301      	adds	r3, #1
 800a032:	e7cd      	b.n	8009fd0 <__lshift+0x30>
 800a034:	4651      	mov	r1, sl
 800a036:	e7dc      	b.n	8009ff2 <__lshift+0x52>
 800a038:	3904      	subs	r1, #4
 800a03a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a03e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a042:	459c      	cmp	ip, r3
 800a044:	d8f9      	bhi.n	800a03a <__lshift+0x9a>
 800a046:	e7e4      	b.n	800a012 <__lshift+0x72>

0800a048 <__mcmp>:
 800a048:	6903      	ldr	r3, [r0, #16]
 800a04a:	690a      	ldr	r2, [r1, #16]
 800a04c:	1a9b      	subs	r3, r3, r2
 800a04e:	b530      	push	{r4, r5, lr}
 800a050:	d10c      	bne.n	800a06c <__mcmp+0x24>
 800a052:	0092      	lsls	r2, r2, #2
 800a054:	3014      	adds	r0, #20
 800a056:	3114      	adds	r1, #20
 800a058:	1884      	adds	r4, r0, r2
 800a05a:	4411      	add	r1, r2
 800a05c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a060:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a064:	4295      	cmp	r5, r2
 800a066:	d003      	beq.n	800a070 <__mcmp+0x28>
 800a068:	d305      	bcc.n	800a076 <__mcmp+0x2e>
 800a06a:	2301      	movs	r3, #1
 800a06c:	4618      	mov	r0, r3
 800a06e:	bd30      	pop	{r4, r5, pc}
 800a070:	42a0      	cmp	r0, r4
 800a072:	d3f3      	bcc.n	800a05c <__mcmp+0x14>
 800a074:	e7fa      	b.n	800a06c <__mcmp+0x24>
 800a076:	f04f 33ff 	mov.w	r3, #4294967295
 800a07a:	e7f7      	b.n	800a06c <__mcmp+0x24>

0800a07c <__mdiff>:
 800a07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a080:	460d      	mov	r5, r1
 800a082:	4607      	mov	r7, r0
 800a084:	4611      	mov	r1, r2
 800a086:	4628      	mov	r0, r5
 800a088:	4614      	mov	r4, r2
 800a08a:	f7ff ffdd 	bl	800a048 <__mcmp>
 800a08e:	1e06      	subs	r6, r0, #0
 800a090:	d108      	bne.n	800a0a4 <__mdiff+0x28>
 800a092:	4631      	mov	r1, r6
 800a094:	4638      	mov	r0, r7
 800a096:	f7ff fd83 	bl	8009ba0 <_Balloc>
 800a09a:	2301      	movs	r3, #1
 800a09c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a0a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0a4:	bfa4      	itt	ge
 800a0a6:	4623      	movge	r3, r4
 800a0a8:	462c      	movge	r4, r5
 800a0aa:	4638      	mov	r0, r7
 800a0ac:	6861      	ldr	r1, [r4, #4]
 800a0ae:	bfa6      	itte	ge
 800a0b0:	461d      	movge	r5, r3
 800a0b2:	2600      	movge	r6, #0
 800a0b4:	2601      	movlt	r6, #1
 800a0b6:	f7ff fd73 	bl	8009ba0 <_Balloc>
 800a0ba:	692b      	ldr	r3, [r5, #16]
 800a0bc:	60c6      	str	r6, [r0, #12]
 800a0be:	6926      	ldr	r6, [r4, #16]
 800a0c0:	f105 0914 	add.w	r9, r5, #20
 800a0c4:	f104 0214 	add.w	r2, r4, #20
 800a0c8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a0cc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a0d0:	f100 0514 	add.w	r5, r0, #20
 800a0d4:	f04f 0e00 	mov.w	lr, #0
 800a0d8:	f852 ab04 	ldr.w	sl, [r2], #4
 800a0dc:	f859 4b04 	ldr.w	r4, [r9], #4
 800a0e0:	fa1e f18a 	uxtah	r1, lr, sl
 800a0e4:	b2a3      	uxth	r3, r4
 800a0e6:	1ac9      	subs	r1, r1, r3
 800a0e8:	0c23      	lsrs	r3, r4, #16
 800a0ea:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a0ee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a0f2:	b289      	uxth	r1, r1
 800a0f4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a0f8:	45c8      	cmp	r8, r9
 800a0fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a0fe:	4694      	mov	ip, r2
 800a100:	f845 3b04 	str.w	r3, [r5], #4
 800a104:	d8e8      	bhi.n	800a0d8 <__mdiff+0x5c>
 800a106:	45bc      	cmp	ip, r7
 800a108:	d304      	bcc.n	800a114 <__mdiff+0x98>
 800a10a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a10e:	b183      	cbz	r3, 800a132 <__mdiff+0xb6>
 800a110:	6106      	str	r6, [r0, #16]
 800a112:	e7c5      	b.n	800a0a0 <__mdiff+0x24>
 800a114:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a118:	fa1e f381 	uxtah	r3, lr, r1
 800a11c:	141a      	asrs	r2, r3, #16
 800a11e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a122:	b29b      	uxth	r3, r3
 800a124:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a128:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a12c:	f845 3b04 	str.w	r3, [r5], #4
 800a130:	e7e9      	b.n	800a106 <__mdiff+0x8a>
 800a132:	3e01      	subs	r6, #1
 800a134:	e7e9      	b.n	800a10a <__mdiff+0x8e>
	...

0800a138 <__ulp>:
 800a138:	4b12      	ldr	r3, [pc, #72]	; (800a184 <__ulp+0x4c>)
 800a13a:	ee10 2a90 	vmov	r2, s1
 800a13e:	401a      	ands	r2, r3
 800a140:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800a144:	2b00      	cmp	r3, #0
 800a146:	dd04      	ble.n	800a152 <__ulp+0x1a>
 800a148:	2000      	movs	r0, #0
 800a14a:	4619      	mov	r1, r3
 800a14c:	ec41 0b10 	vmov	d0, r0, r1
 800a150:	4770      	bx	lr
 800a152:	425b      	negs	r3, r3
 800a154:	151b      	asrs	r3, r3, #20
 800a156:	2b13      	cmp	r3, #19
 800a158:	f04f 0000 	mov.w	r0, #0
 800a15c:	f04f 0100 	mov.w	r1, #0
 800a160:	dc04      	bgt.n	800a16c <__ulp+0x34>
 800a162:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a166:	fa42 f103 	asr.w	r1, r2, r3
 800a16a:	e7ef      	b.n	800a14c <__ulp+0x14>
 800a16c:	3b14      	subs	r3, #20
 800a16e:	2b1e      	cmp	r3, #30
 800a170:	f04f 0201 	mov.w	r2, #1
 800a174:	bfda      	itte	le
 800a176:	f1c3 031f 	rsble	r3, r3, #31
 800a17a:	fa02 f303 	lslle.w	r3, r2, r3
 800a17e:	4613      	movgt	r3, r2
 800a180:	4618      	mov	r0, r3
 800a182:	e7e3      	b.n	800a14c <__ulp+0x14>
 800a184:	7ff00000 	.word	0x7ff00000

0800a188 <__b2d>:
 800a188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a18a:	6905      	ldr	r5, [r0, #16]
 800a18c:	f100 0714 	add.w	r7, r0, #20
 800a190:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a194:	1f2e      	subs	r6, r5, #4
 800a196:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a19a:	4620      	mov	r0, r4
 800a19c:	f7ff fdc4 	bl	8009d28 <__hi0bits>
 800a1a0:	f1c0 0320 	rsb	r3, r0, #32
 800a1a4:	280a      	cmp	r0, #10
 800a1a6:	600b      	str	r3, [r1, #0]
 800a1a8:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a220 <__b2d+0x98>
 800a1ac:	dc14      	bgt.n	800a1d8 <__b2d+0x50>
 800a1ae:	f1c0 0e0b 	rsb	lr, r0, #11
 800a1b2:	fa24 f10e 	lsr.w	r1, r4, lr
 800a1b6:	42b7      	cmp	r7, r6
 800a1b8:	ea41 030c 	orr.w	r3, r1, ip
 800a1bc:	bf34      	ite	cc
 800a1be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a1c2:	2100      	movcs	r1, #0
 800a1c4:	3015      	adds	r0, #21
 800a1c6:	fa04 f000 	lsl.w	r0, r4, r0
 800a1ca:	fa21 f10e 	lsr.w	r1, r1, lr
 800a1ce:	ea40 0201 	orr.w	r2, r0, r1
 800a1d2:	ec43 2b10 	vmov	d0, r2, r3
 800a1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1d8:	42b7      	cmp	r7, r6
 800a1da:	bf3a      	itte	cc
 800a1dc:	f1a5 0608 	subcc.w	r6, r5, #8
 800a1e0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a1e4:	2100      	movcs	r1, #0
 800a1e6:	380b      	subs	r0, #11
 800a1e8:	d015      	beq.n	800a216 <__b2d+0x8e>
 800a1ea:	4084      	lsls	r4, r0
 800a1ec:	f1c0 0520 	rsb	r5, r0, #32
 800a1f0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800a1f4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800a1f8:	42be      	cmp	r6, r7
 800a1fa:	fa21 fc05 	lsr.w	ip, r1, r5
 800a1fe:	ea44 030c 	orr.w	r3, r4, ip
 800a202:	bf8c      	ite	hi
 800a204:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a208:	2400      	movls	r4, #0
 800a20a:	fa01 f000 	lsl.w	r0, r1, r0
 800a20e:	40ec      	lsrs	r4, r5
 800a210:	ea40 0204 	orr.w	r2, r0, r4
 800a214:	e7dd      	b.n	800a1d2 <__b2d+0x4a>
 800a216:	ea44 030c 	orr.w	r3, r4, ip
 800a21a:	460a      	mov	r2, r1
 800a21c:	e7d9      	b.n	800a1d2 <__b2d+0x4a>
 800a21e:	bf00      	nop
 800a220:	3ff00000 	.word	0x3ff00000

0800a224 <__d2b>:
 800a224:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a228:	460e      	mov	r6, r1
 800a22a:	2101      	movs	r1, #1
 800a22c:	ec59 8b10 	vmov	r8, r9, d0
 800a230:	4615      	mov	r5, r2
 800a232:	f7ff fcb5 	bl	8009ba0 <_Balloc>
 800a236:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a23a:	4607      	mov	r7, r0
 800a23c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a240:	bb34      	cbnz	r4, 800a290 <__d2b+0x6c>
 800a242:	9301      	str	r3, [sp, #4]
 800a244:	f1b8 0300 	subs.w	r3, r8, #0
 800a248:	d027      	beq.n	800a29a <__d2b+0x76>
 800a24a:	a802      	add	r0, sp, #8
 800a24c:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a250:	f7ff fd89 	bl	8009d66 <__lo0bits>
 800a254:	9900      	ldr	r1, [sp, #0]
 800a256:	b1f0      	cbz	r0, 800a296 <__d2b+0x72>
 800a258:	9a01      	ldr	r2, [sp, #4]
 800a25a:	f1c0 0320 	rsb	r3, r0, #32
 800a25e:	fa02 f303 	lsl.w	r3, r2, r3
 800a262:	430b      	orrs	r3, r1
 800a264:	40c2      	lsrs	r2, r0
 800a266:	617b      	str	r3, [r7, #20]
 800a268:	9201      	str	r2, [sp, #4]
 800a26a:	9b01      	ldr	r3, [sp, #4]
 800a26c:	61bb      	str	r3, [r7, #24]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	bf14      	ite	ne
 800a272:	2102      	movne	r1, #2
 800a274:	2101      	moveq	r1, #1
 800a276:	6139      	str	r1, [r7, #16]
 800a278:	b1c4      	cbz	r4, 800a2ac <__d2b+0x88>
 800a27a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a27e:	4404      	add	r4, r0
 800a280:	6034      	str	r4, [r6, #0]
 800a282:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a286:	6028      	str	r0, [r5, #0]
 800a288:	4638      	mov	r0, r7
 800a28a:	b003      	add	sp, #12
 800a28c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a290:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a294:	e7d5      	b.n	800a242 <__d2b+0x1e>
 800a296:	6179      	str	r1, [r7, #20]
 800a298:	e7e7      	b.n	800a26a <__d2b+0x46>
 800a29a:	a801      	add	r0, sp, #4
 800a29c:	f7ff fd63 	bl	8009d66 <__lo0bits>
 800a2a0:	9b01      	ldr	r3, [sp, #4]
 800a2a2:	617b      	str	r3, [r7, #20]
 800a2a4:	2101      	movs	r1, #1
 800a2a6:	6139      	str	r1, [r7, #16]
 800a2a8:	3020      	adds	r0, #32
 800a2aa:	e7e5      	b.n	800a278 <__d2b+0x54>
 800a2ac:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a2b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a2b4:	6030      	str	r0, [r6, #0]
 800a2b6:	6918      	ldr	r0, [r3, #16]
 800a2b8:	f7ff fd36 	bl	8009d28 <__hi0bits>
 800a2bc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a2c0:	e7e1      	b.n	800a286 <__d2b+0x62>

0800a2c2 <__ratio>:
 800a2c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c6:	4688      	mov	r8, r1
 800a2c8:	4669      	mov	r1, sp
 800a2ca:	4681      	mov	r9, r0
 800a2cc:	f7ff ff5c 	bl	800a188 <__b2d>
 800a2d0:	a901      	add	r1, sp, #4
 800a2d2:	4640      	mov	r0, r8
 800a2d4:	ec57 6b10 	vmov	r6, r7, d0
 800a2d8:	f7ff ff56 	bl	800a188 <__b2d>
 800a2dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a2e0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a2e4:	eba3 0c02 	sub.w	ip, r3, r2
 800a2e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a2ec:	1a9b      	subs	r3, r3, r2
 800a2ee:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a2f2:	ec5b ab10 	vmov	sl, fp, d0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	bfce      	itee	gt
 800a2fa:	463a      	movgt	r2, r7
 800a2fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a300:	465a      	movle	r2, fp
 800a302:	4659      	mov	r1, fp
 800a304:	463d      	mov	r5, r7
 800a306:	bfd4      	ite	le
 800a308:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800a30c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800a310:	4630      	mov	r0, r6
 800a312:	ee10 2a10 	vmov	r2, s0
 800a316:	460b      	mov	r3, r1
 800a318:	4629      	mov	r1, r5
 800a31a:	f7f6 fa9f 	bl	800085c <__aeabi_ddiv>
 800a31e:	ec41 0b10 	vmov	d0, r0, r1
 800a322:	b003      	add	sp, #12
 800a324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a328 <__copybits>:
 800a328:	3901      	subs	r1, #1
 800a32a:	b510      	push	{r4, lr}
 800a32c:	1149      	asrs	r1, r1, #5
 800a32e:	6914      	ldr	r4, [r2, #16]
 800a330:	3101      	adds	r1, #1
 800a332:	f102 0314 	add.w	r3, r2, #20
 800a336:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a33a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a33e:	42a3      	cmp	r3, r4
 800a340:	4602      	mov	r2, r0
 800a342:	d303      	bcc.n	800a34c <__copybits+0x24>
 800a344:	2300      	movs	r3, #0
 800a346:	428a      	cmp	r2, r1
 800a348:	d305      	bcc.n	800a356 <__copybits+0x2e>
 800a34a:	bd10      	pop	{r4, pc}
 800a34c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a350:	f840 2b04 	str.w	r2, [r0], #4
 800a354:	e7f3      	b.n	800a33e <__copybits+0x16>
 800a356:	f842 3b04 	str.w	r3, [r2], #4
 800a35a:	e7f4      	b.n	800a346 <__copybits+0x1e>

0800a35c <__any_on>:
 800a35c:	f100 0214 	add.w	r2, r0, #20
 800a360:	6900      	ldr	r0, [r0, #16]
 800a362:	114b      	asrs	r3, r1, #5
 800a364:	4298      	cmp	r0, r3
 800a366:	b510      	push	{r4, lr}
 800a368:	db11      	blt.n	800a38e <__any_on+0x32>
 800a36a:	dd0a      	ble.n	800a382 <__any_on+0x26>
 800a36c:	f011 011f 	ands.w	r1, r1, #31
 800a370:	d007      	beq.n	800a382 <__any_on+0x26>
 800a372:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a376:	fa24 f001 	lsr.w	r0, r4, r1
 800a37a:	fa00 f101 	lsl.w	r1, r0, r1
 800a37e:	428c      	cmp	r4, r1
 800a380:	d10b      	bne.n	800a39a <__any_on+0x3e>
 800a382:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a386:	4293      	cmp	r3, r2
 800a388:	d803      	bhi.n	800a392 <__any_on+0x36>
 800a38a:	2000      	movs	r0, #0
 800a38c:	bd10      	pop	{r4, pc}
 800a38e:	4603      	mov	r3, r0
 800a390:	e7f7      	b.n	800a382 <__any_on+0x26>
 800a392:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a396:	2900      	cmp	r1, #0
 800a398:	d0f5      	beq.n	800a386 <__any_on+0x2a>
 800a39a:	2001      	movs	r0, #1
 800a39c:	e7f6      	b.n	800a38c <__any_on+0x30>

0800a39e <__ssputs_r>:
 800a39e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a2:	688e      	ldr	r6, [r1, #8]
 800a3a4:	429e      	cmp	r6, r3
 800a3a6:	4682      	mov	sl, r0
 800a3a8:	460c      	mov	r4, r1
 800a3aa:	4690      	mov	r8, r2
 800a3ac:	4699      	mov	r9, r3
 800a3ae:	d837      	bhi.n	800a420 <__ssputs_r+0x82>
 800a3b0:	898a      	ldrh	r2, [r1, #12]
 800a3b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3b6:	d031      	beq.n	800a41c <__ssputs_r+0x7e>
 800a3b8:	6825      	ldr	r5, [r4, #0]
 800a3ba:	6909      	ldr	r1, [r1, #16]
 800a3bc:	1a6f      	subs	r7, r5, r1
 800a3be:	6965      	ldr	r5, [r4, #20]
 800a3c0:	2302      	movs	r3, #2
 800a3c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3c6:	fb95 f5f3 	sdiv	r5, r5, r3
 800a3ca:	f109 0301 	add.w	r3, r9, #1
 800a3ce:	443b      	add	r3, r7
 800a3d0:	429d      	cmp	r5, r3
 800a3d2:	bf38      	it	cc
 800a3d4:	461d      	movcc	r5, r3
 800a3d6:	0553      	lsls	r3, r2, #21
 800a3d8:	d530      	bpl.n	800a43c <__ssputs_r+0x9e>
 800a3da:	4629      	mov	r1, r5
 800a3dc:	f7fc f8f6 	bl	80065cc <_malloc_r>
 800a3e0:	4606      	mov	r6, r0
 800a3e2:	b950      	cbnz	r0, 800a3fa <__ssputs_r+0x5c>
 800a3e4:	230c      	movs	r3, #12
 800a3e6:	f8ca 3000 	str.w	r3, [sl]
 800a3ea:	89a3      	ldrh	r3, [r4, #12]
 800a3ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3f0:	81a3      	strh	r3, [r4, #12]
 800a3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3fa:	463a      	mov	r2, r7
 800a3fc:	6921      	ldr	r1, [r4, #16]
 800a3fe:	f7fc f875 	bl	80064ec <memcpy>
 800a402:	89a3      	ldrh	r3, [r4, #12]
 800a404:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a40c:	81a3      	strh	r3, [r4, #12]
 800a40e:	6126      	str	r6, [r4, #16]
 800a410:	6165      	str	r5, [r4, #20]
 800a412:	443e      	add	r6, r7
 800a414:	1bed      	subs	r5, r5, r7
 800a416:	6026      	str	r6, [r4, #0]
 800a418:	60a5      	str	r5, [r4, #8]
 800a41a:	464e      	mov	r6, r9
 800a41c:	454e      	cmp	r6, r9
 800a41e:	d900      	bls.n	800a422 <__ssputs_r+0x84>
 800a420:	464e      	mov	r6, r9
 800a422:	4632      	mov	r2, r6
 800a424:	4641      	mov	r1, r8
 800a426:	6820      	ldr	r0, [r4, #0]
 800a428:	f000 faf2 	bl	800aa10 <memmove>
 800a42c:	68a3      	ldr	r3, [r4, #8]
 800a42e:	1b9b      	subs	r3, r3, r6
 800a430:	60a3      	str	r3, [r4, #8]
 800a432:	6823      	ldr	r3, [r4, #0]
 800a434:	441e      	add	r6, r3
 800a436:	6026      	str	r6, [r4, #0]
 800a438:	2000      	movs	r0, #0
 800a43a:	e7dc      	b.n	800a3f6 <__ssputs_r+0x58>
 800a43c:	462a      	mov	r2, r5
 800a43e:	f000 fb00 	bl	800aa42 <_realloc_r>
 800a442:	4606      	mov	r6, r0
 800a444:	2800      	cmp	r0, #0
 800a446:	d1e2      	bne.n	800a40e <__ssputs_r+0x70>
 800a448:	6921      	ldr	r1, [r4, #16]
 800a44a:	4650      	mov	r0, sl
 800a44c:	f7fc f870 	bl	8006530 <_free_r>
 800a450:	e7c8      	b.n	800a3e4 <__ssputs_r+0x46>
	...

0800a454 <_svfiprintf_r>:
 800a454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a458:	461d      	mov	r5, r3
 800a45a:	898b      	ldrh	r3, [r1, #12]
 800a45c:	061f      	lsls	r7, r3, #24
 800a45e:	b09d      	sub	sp, #116	; 0x74
 800a460:	4680      	mov	r8, r0
 800a462:	460c      	mov	r4, r1
 800a464:	4616      	mov	r6, r2
 800a466:	d50f      	bpl.n	800a488 <_svfiprintf_r+0x34>
 800a468:	690b      	ldr	r3, [r1, #16]
 800a46a:	b96b      	cbnz	r3, 800a488 <_svfiprintf_r+0x34>
 800a46c:	2140      	movs	r1, #64	; 0x40
 800a46e:	f7fc f8ad 	bl	80065cc <_malloc_r>
 800a472:	6020      	str	r0, [r4, #0]
 800a474:	6120      	str	r0, [r4, #16]
 800a476:	b928      	cbnz	r0, 800a484 <_svfiprintf_r+0x30>
 800a478:	230c      	movs	r3, #12
 800a47a:	f8c8 3000 	str.w	r3, [r8]
 800a47e:	f04f 30ff 	mov.w	r0, #4294967295
 800a482:	e0c8      	b.n	800a616 <_svfiprintf_r+0x1c2>
 800a484:	2340      	movs	r3, #64	; 0x40
 800a486:	6163      	str	r3, [r4, #20]
 800a488:	2300      	movs	r3, #0
 800a48a:	9309      	str	r3, [sp, #36]	; 0x24
 800a48c:	2320      	movs	r3, #32
 800a48e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a492:	2330      	movs	r3, #48	; 0x30
 800a494:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a498:	9503      	str	r5, [sp, #12]
 800a49a:	f04f 0b01 	mov.w	fp, #1
 800a49e:	4637      	mov	r7, r6
 800a4a0:	463d      	mov	r5, r7
 800a4a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a4a6:	b10b      	cbz	r3, 800a4ac <_svfiprintf_r+0x58>
 800a4a8:	2b25      	cmp	r3, #37	; 0x25
 800a4aa:	d13e      	bne.n	800a52a <_svfiprintf_r+0xd6>
 800a4ac:	ebb7 0a06 	subs.w	sl, r7, r6
 800a4b0:	d00b      	beq.n	800a4ca <_svfiprintf_r+0x76>
 800a4b2:	4653      	mov	r3, sl
 800a4b4:	4632      	mov	r2, r6
 800a4b6:	4621      	mov	r1, r4
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	f7ff ff70 	bl	800a39e <__ssputs_r>
 800a4be:	3001      	adds	r0, #1
 800a4c0:	f000 80a4 	beq.w	800a60c <_svfiprintf_r+0x1b8>
 800a4c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c6:	4453      	add	r3, sl
 800a4c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ca:	783b      	ldrb	r3, [r7, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f000 809d 	beq.w	800a60c <_svfiprintf_r+0x1b8>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4dc:	9304      	str	r3, [sp, #16]
 800a4de:	9307      	str	r3, [sp, #28]
 800a4e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4e4:	931a      	str	r3, [sp, #104]	; 0x68
 800a4e6:	462f      	mov	r7, r5
 800a4e8:	2205      	movs	r2, #5
 800a4ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a4ee:	4850      	ldr	r0, [pc, #320]	; (800a630 <_svfiprintf_r+0x1dc>)
 800a4f0:	f7f5 fe7e 	bl	80001f0 <memchr>
 800a4f4:	9b04      	ldr	r3, [sp, #16]
 800a4f6:	b9d0      	cbnz	r0, 800a52e <_svfiprintf_r+0xda>
 800a4f8:	06d9      	lsls	r1, r3, #27
 800a4fa:	bf44      	itt	mi
 800a4fc:	2220      	movmi	r2, #32
 800a4fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a502:	071a      	lsls	r2, r3, #28
 800a504:	bf44      	itt	mi
 800a506:	222b      	movmi	r2, #43	; 0x2b
 800a508:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a50c:	782a      	ldrb	r2, [r5, #0]
 800a50e:	2a2a      	cmp	r2, #42	; 0x2a
 800a510:	d015      	beq.n	800a53e <_svfiprintf_r+0xea>
 800a512:	9a07      	ldr	r2, [sp, #28]
 800a514:	462f      	mov	r7, r5
 800a516:	2000      	movs	r0, #0
 800a518:	250a      	movs	r5, #10
 800a51a:	4639      	mov	r1, r7
 800a51c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a520:	3b30      	subs	r3, #48	; 0x30
 800a522:	2b09      	cmp	r3, #9
 800a524:	d94d      	bls.n	800a5c2 <_svfiprintf_r+0x16e>
 800a526:	b1b8      	cbz	r0, 800a558 <_svfiprintf_r+0x104>
 800a528:	e00f      	b.n	800a54a <_svfiprintf_r+0xf6>
 800a52a:	462f      	mov	r7, r5
 800a52c:	e7b8      	b.n	800a4a0 <_svfiprintf_r+0x4c>
 800a52e:	4a40      	ldr	r2, [pc, #256]	; (800a630 <_svfiprintf_r+0x1dc>)
 800a530:	1a80      	subs	r0, r0, r2
 800a532:	fa0b f000 	lsl.w	r0, fp, r0
 800a536:	4318      	orrs	r0, r3
 800a538:	9004      	str	r0, [sp, #16]
 800a53a:	463d      	mov	r5, r7
 800a53c:	e7d3      	b.n	800a4e6 <_svfiprintf_r+0x92>
 800a53e:	9a03      	ldr	r2, [sp, #12]
 800a540:	1d11      	adds	r1, r2, #4
 800a542:	6812      	ldr	r2, [r2, #0]
 800a544:	9103      	str	r1, [sp, #12]
 800a546:	2a00      	cmp	r2, #0
 800a548:	db01      	blt.n	800a54e <_svfiprintf_r+0xfa>
 800a54a:	9207      	str	r2, [sp, #28]
 800a54c:	e004      	b.n	800a558 <_svfiprintf_r+0x104>
 800a54e:	4252      	negs	r2, r2
 800a550:	f043 0302 	orr.w	r3, r3, #2
 800a554:	9207      	str	r2, [sp, #28]
 800a556:	9304      	str	r3, [sp, #16]
 800a558:	783b      	ldrb	r3, [r7, #0]
 800a55a:	2b2e      	cmp	r3, #46	; 0x2e
 800a55c:	d10c      	bne.n	800a578 <_svfiprintf_r+0x124>
 800a55e:	787b      	ldrb	r3, [r7, #1]
 800a560:	2b2a      	cmp	r3, #42	; 0x2a
 800a562:	d133      	bne.n	800a5cc <_svfiprintf_r+0x178>
 800a564:	9b03      	ldr	r3, [sp, #12]
 800a566:	1d1a      	adds	r2, r3, #4
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	9203      	str	r2, [sp, #12]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	bfb8      	it	lt
 800a570:	f04f 33ff 	movlt.w	r3, #4294967295
 800a574:	3702      	adds	r7, #2
 800a576:	9305      	str	r3, [sp, #20]
 800a578:	4d2e      	ldr	r5, [pc, #184]	; (800a634 <_svfiprintf_r+0x1e0>)
 800a57a:	7839      	ldrb	r1, [r7, #0]
 800a57c:	2203      	movs	r2, #3
 800a57e:	4628      	mov	r0, r5
 800a580:	f7f5 fe36 	bl	80001f0 <memchr>
 800a584:	b138      	cbz	r0, 800a596 <_svfiprintf_r+0x142>
 800a586:	2340      	movs	r3, #64	; 0x40
 800a588:	1b40      	subs	r0, r0, r5
 800a58a:	fa03 f000 	lsl.w	r0, r3, r0
 800a58e:	9b04      	ldr	r3, [sp, #16]
 800a590:	4303      	orrs	r3, r0
 800a592:	3701      	adds	r7, #1
 800a594:	9304      	str	r3, [sp, #16]
 800a596:	7839      	ldrb	r1, [r7, #0]
 800a598:	4827      	ldr	r0, [pc, #156]	; (800a638 <_svfiprintf_r+0x1e4>)
 800a59a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a59e:	2206      	movs	r2, #6
 800a5a0:	1c7e      	adds	r6, r7, #1
 800a5a2:	f7f5 fe25 	bl	80001f0 <memchr>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	d038      	beq.n	800a61c <_svfiprintf_r+0x1c8>
 800a5aa:	4b24      	ldr	r3, [pc, #144]	; (800a63c <_svfiprintf_r+0x1e8>)
 800a5ac:	bb13      	cbnz	r3, 800a5f4 <_svfiprintf_r+0x1a0>
 800a5ae:	9b03      	ldr	r3, [sp, #12]
 800a5b0:	3307      	adds	r3, #7
 800a5b2:	f023 0307 	bic.w	r3, r3, #7
 800a5b6:	3308      	adds	r3, #8
 800a5b8:	9303      	str	r3, [sp, #12]
 800a5ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5bc:	444b      	add	r3, r9
 800a5be:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c0:	e76d      	b.n	800a49e <_svfiprintf_r+0x4a>
 800a5c2:	fb05 3202 	mla	r2, r5, r2, r3
 800a5c6:	2001      	movs	r0, #1
 800a5c8:	460f      	mov	r7, r1
 800a5ca:	e7a6      	b.n	800a51a <_svfiprintf_r+0xc6>
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	3701      	adds	r7, #1
 800a5d0:	9305      	str	r3, [sp, #20]
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	250a      	movs	r5, #10
 800a5d6:	4638      	mov	r0, r7
 800a5d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5dc:	3a30      	subs	r2, #48	; 0x30
 800a5de:	2a09      	cmp	r2, #9
 800a5e0:	d903      	bls.n	800a5ea <_svfiprintf_r+0x196>
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d0c8      	beq.n	800a578 <_svfiprintf_r+0x124>
 800a5e6:	9105      	str	r1, [sp, #20]
 800a5e8:	e7c6      	b.n	800a578 <_svfiprintf_r+0x124>
 800a5ea:	fb05 2101 	mla	r1, r5, r1, r2
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	4607      	mov	r7, r0
 800a5f2:	e7f0      	b.n	800a5d6 <_svfiprintf_r+0x182>
 800a5f4:	ab03      	add	r3, sp, #12
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	4622      	mov	r2, r4
 800a5fa:	4b11      	ldr	r3, [pc, #68]	; (800a640 <_svfiprintf_r+0x1ec>)
 800a5fc:	a904      	add	r1, sp, #16
 800a5fe:	4640      	mov	r0, r8
 800a600:	f7fc f8d2 	bl	80067a8 <_printf_float>
 800a604:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a608:	4681      	mov	r9, r0
 800a60a:	d1d6      	bne.n	800a5ba <_svfiprintf_r+0x166>
 800a60c:	89a3      	ldrh	r3, [r4, #12]
 800a60e:	065b      	lsls	r3, r3, #25
 800a610:	f53f af35 	bmi.w	800a47e <_svfiprintf_r+0x2a>
 800a614:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a616:	b01d      	add	sp, #116	; 0x74
 800a618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a61c:	ab03      	add	r3, sp, #12
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	4622      	mov	r2, r4
 800a622:	4b07      	ldr	r3, [pc, #28]	; (800a640 <_svfiprintf_r+0x1ec>)
 800a624:	a904      	add	r1, sp, #16
 800a626:	4640      	mov	r0, r8
 800a628:	f7fc fb74 	bl	8006d14 <_printf_i>
 800a62c:	e7ea      	b.n	800a604 <_svfiprintf_r+0x1b0>
 800a62e:	bf00      	nop
 800a630:	0800ae4c 	.word	0x0800ae4c
 800a634:	0800ae52 	.word	0x0800ae52
 800a638:	0800ae56 	.word	0x0800ae56
 800a63c:	080067a9 	.word	0x080067a9
 800a640:	0800a39f 	.word	0x0800a39f

0800a644 <__sfputc_r>:
 800a644:	6893      	ldr	r3, [r2, #8]
 800a646:	3b01      	subs	r3, #1
 800a648:	2b00      	cmp	r3, #0
 800a64a:	b410      	push	{r4}
 800a64c:	6093      	str	r3, [r2, #8]
 800a64e:	da08      	bge.n	800a662 <__sfputc_r+0x1e>
 800a650:	6994      	ldr	r4, [r2, #24]
 800a652:	42a3      	cmp	r3, r4
 800a654:	db01      	blt.n	800a65a <__sfputc_r+0x16>
 800a656:	290a      	cmp	r1, #10
 800a658:	d103      	bne.n	800a662 <__sfputc_r+0x1e>
 800a65a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a65e:	f7fd be6d 	b.w	800833c <__swbuf_r>
 800a662:	6813      	ldr	r3, [r2, #0]
 800a664:	1c58      	adds	r0, r3, #1
 800a666:	6010      	str	r0, [r2, #0]
 800a668:	7019      	strb	r1, [r3, #0]
 800a66a:	4608      	mov	r0, r1
 800a66c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <__sfputs_r>:
 800a672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a674:	4606      	mov	r6, r0
 800a676:	460f      	mov	r7, r1
 800a678:	4614      	mov	r4, r2
 800a67a:	18d5      	adds	r5, r2, r3
 800a67c:	42ac      	cmp	r4, r5
 800a67e:	d101      	bne.n	800a684 <__sfputs_r+0x12>
 800a680:	2000      	movs	r0, #0
 800a682:	e007      	b.n	800a694 <__sfputs_r+0x22>
 800a684:	463a      	mov	r2, r7
 800a686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a68a:	4630      	mov	r0, r6
 800a68c:	f7ff ffda 	bl	800a644 <__sfputc_r>
 800a690:	1c43      	adds	r3, r0, #1
 800a692:	d1f3      	bne.n	800a67c <__sfputs_r+0xa>
 800a694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a698 <_vfiprintf_r>:
 800a698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69c:	460c      	mov	r4, r1
 800a69e:	b09d      	sub	sp, #116	; 0x74
 800a6a0:	4617      	mov	r7, r2
 800a6a2:	461d      	mov	r5, r3
 800a6a4:	4606      	mov	r6, r0
 800a6a6:	b118      	cbz	r0, 800a6b0 <_vfiprintf_r+0x18>
 800a6a8:	6983      	ldr	r3, [r0, #24]
 800a6aa:	b90b      	cbnz	r3, 800a6b0 <_vfiprintf_r+0x18>
 800a6ac:	f7fe fe3c 	bl	8009328 <__sinit>
 800a6b0:	4b7c      	ldr	r3, [pc, #496]	; (800a8a4 <_vfiprintf_r+0x20c>)
 800a6b2:	429c      	cmp	r4, r3
 800a6b4:	d158      	bne.n	800a768 <_vfiprintf_r+0xd0>
 800a6b6:	6874      	ldr	r4, [r6, #4]
 800a6b8:	89a3      	ldrh	r3, [r4, #12]
 800a6ba:	0718      	lsls	r0, r3, #28
 800a6bc:	d55e      	bpl.n	800a77c <_vfiprintf_r+0xe4>
 800a6be:	6923      	ldr	r3, [r4, #16]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d05b      	beq.n	800a77c <_vfiprintf_r+0xe4>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6c8:	2320      	movs	r3, #32
 800a6ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6ce:	2330      	movs	r3, #48	; 0x30
 800a6d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6d4:	9503      	str	r5, [sp, #12]
 800a6d6:	f04f 0b01 	mov.w	fp, #1
 800a6da:	46b8      	mov	r8, r7
 800a6dc:	4645      	mov	r5, r8
 800a6de:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a6e2:	b10b      	cbz	r3, 800a6e8 <_vfiprintf_r+0x50>
 800a6e4:	2b25      	cmp	r3, #37	; 0x25
 800a6e6:	d154      	bne.n	800a792 <_vfiprintf_r+0xfa>
 800a6e8:	ebb8 0a07 	subs.w	sl, r8, r7
 800a6ec:	d00b      	beq.n	800a706 <_vfiprintf_r+0x6e>
 800a6ee:	4653      	mov	r3, sl
 800a6f0:	463a      	mov	r2, r7
 800a6f2:	4621      	mov	r1, r4
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	f7ff ffbc 	bl	800a672 <__sfputs_r>
 800a6fa:	3001      	adds	r0, #1
 800a6fc:	f000 80c2 	beq.w	800a884 <_vfiprintf_r+0x1ec>
 800a700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a702:	4453      	add	r3, sl
 800a704:	9309      	str	r3, [sp, #36]	; 0x24
 800a706:	f898 3000 	ldrb.w	r3, [r8]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	f000 80ba 	beq.w	800a884 <_vfiprintf_r+0x1ec>
 800a710:	2300      	movs	r3, #0
 800a712:	f04f 32ff 	mov.w	r2, #4294967295
 800a716:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a71a:	9304      	str	r3, [sp, #16]
 800a71c:	9307      	str	r3, [sp, #28]
 800a71e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a722:	931a      	str	r3, [sp, #104]	; 0x68
 800a724:	46a8      	mov	r8, r5
 800a726:	2205      	movs	r2, #5
 800a728:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a72c:	485e      	ldr	r0, [pc, #376]	; (800a8a8 <_vfiprintf_r+0x210>)
 800a72e:	f7f5 fd5f 	bl	80001f0 <memchr>
 800a732:	9b04      	ldr	r3, [sp, #16]
 800a734:	bb78      	cbnz	r0, 800a796 <_vfiprintf_r+0xfe>
 800a736:	06d9      	lsls	r1, r3, #27
 800a738:	bf44      	itt	mi
 800a73a:	2220      	movmi	r2, #32
 800a73c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a740:	071a      	lsls	r2, r3, #28
 800a742:	bf44      	itt	mi
 800a744:	222b      	movmi	r2, #43	; 0x2b
 800a746:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a74a:	782a      	ldrb	r2, [r5, #0]
 800a74c:	2a2a      	cmp	r2, #42	; 0x2a
 800a74e:	d02a      	beq.n	800a7a6 <_vfiprintf_r+0x10e>
 800a750:	9a07      	ldr	r2, [sp, #28]
 800a752:	46a8      	mov	r8, r5
 800a754:	2000      	movs	r0, #0
 800a756:	250a      	movs	r5, #10
 800a758:	4641      	mov	r1, r8
 800a75a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a75e:	3b30      	subs	r3, #48	; 0x30
 800a760:	2b09      	cmp	r3, #9
 800a762:	d969      	bls.n	800a838 <_vfiprintf_r+0x1a0>
 800a764:	b360      	cbz	r0, 800a7c0 <_vfiprintf_r+0x128>
 800a766:	e024      	b.n	800a7b2 <_vfiprintf_r+0x11a>
 800a768:	4b50      	ldr	r3, [pc, #320]	; (800a8ac <_vfiprintf_r+0x214>)
 800a76a:	429c      	cmp	r4, r3
 800a76c:	d101      	bne.n	800a772 <_vfiprintf_r+0xda>
 800a76e:	68b4      	ldr	r4, [r6, #8]
 800a770:	e7a2      	b.n	800a6b8 <_vfiprintf_r+0x20>
 800a772:	4b4f      	ldr	r3, [pc, #316]	; (800a8b0 <_vfiprintf_r+0x218>)
 800a774:	429c      	cmp	r4, r3
 800a776:	bf08      	it	eq
 800a778:	68f4      	ldreq	r4, [r6, #12]
 800a77a:	e79d      	b.n	800a6b8 <_vfiprintf_r+0x20>
 800a77c:	4621      	mov	r1, r4
 800a77e:	4630      	mov	r0, r6
 800a780:	f7fd fe2e 	bl	80083e0 <__swsetup_r>
 800a784:	2800      	cmp	r0, #0
 800a786:	d09d      	beq.n	800a6c4 <_vfiprintf_r+0x2c>
 800a788:	f04f 30ff 	mov.w	r0, #4294967295
 800a78c:	b01d      	add	sp, #116	; 0x74
 800a78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a792:	46a8      	mov	r8, r5
 800a794:	e7a2      	b.n	800a6dc <_vfiprintf_r+0x44>
 800a796:	4a44      	ldr	r2, [pc, #272]	; (800a8a8 <_vfiprintf_r+0x210>)
 800a798:	1a80      	subs	r0, r0, r2
 800a79a:	fa0b f000 	lsl.w	r0, fp, r0
 800a79e:	4318      	orrs	r0, r3
 800a7a0:	9004      	str	r0, [sp, #16]
 800a7a2:	4645      	mov	r5, r8
 800a7a4:	e7be      	b.n	800a724 <_vfiprintf_r+0x8c>
 800a7a6:	9a03      	ldr	r2, [sp, #12]
 800a7a8:	1d11      	adds	r1, r2, #4
 800a7aa:	6812      	ldr	r2, [r2, #0]
 800a7ac:	9103      	str	r1, [sp, #12]
 800a7ae:	2a00      	cmp	r2, #0
 800a7b0:	db01      	blt.n	800a7b6 <_vfiprintf_r+0x11e>
 800a7b2:	9207      	str	r2, [sp, #28]
 800a7b4:	e004      	b.n	800a7c0 <_vfiprintf_r+0x128>
 800a7b6:	4252      	negs	r2, r2
 800a7b8:	f043 0302 	orr.w	r3, r3, #2
 800a7bc:	9207      	str	r2, [sp, #28]
 800a7be:	9304      	str	r3, [sp, #16]
 800a7c0:	f898 3000 	ldrb.w	r3, [r8]
 800a7c4:	2b2e      	cmp	r3, #46	; 0x2e
 800a7c6:	d10e      	bne.n	800a7e6 <_vfiprintf_r+0x14e>
 800a7c8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a7cc:	2b2a      	cmp	r3, #42	; 0x2a
 800a7ce:	d138      	bne.n	800a842 <_vfiprintf_r+0x1aa>
 800a7d0:	9b03      	ldr	r3, [sp, #12]
 800a7d2:	1d1a      	adds	r2, r3, #4
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	9203      	str	r2, [sp, #12]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	bfb8      	it	lt
 800a7dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7e0:	f108 0802 	add.w	r8, r8, #2
 800a7e4:	9305      	str	r3, [sp, #20]
 800a7e6:	4d33      	ldr	r5, [pc, #204]	; (800a8b4 <_vfiprintf_r+0x21c>)
 800a7e8:	f898 1000 	ldrb.w	r1, [r8]
 800a7ec:	2203      	movs	r2, #3
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	f7f5 fcfe 	bl	80001f0 <memchr>
 800a7f4:	b140      	cbz	r0, 800a808 <_vfiprintf_r+0x170>
 800a7f6:	2340      	movs	r3, #64	; 0x40
 800a7f8:	1b40      	subs	r0, r0, r5
 800a7fa:	fa03 f000 	lsl.w	r0, r3, r0
 800a7fe:	9b04      	ldr	r3, [sp, #16]
 800a800:	4303      	orrs	r3, r0
 800a802:	f108 0801 	add.w	r8, r8, #1
 800a806:	9304      	str	r3, [sp, #16]
 800a808:	f898 1000 	ldrb.w	r1, [r8]
 800a80c:	482a      	ldr	r0, [pc, #168]	; (800a8b8 <_vfiprintf_r+0x220>)
 800a80e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a812:	2206      	movs	r2, #6
 800a814:	f108 0701 	add.w	r7, r8, #1
 800a818:	f7f5 fcea 	bl	80001f0 <memchr>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	d037      	beq.n	800a890 <_vfiprintf_r+0x1f8>
 800a820:	4b26      	ldr	r3, [pc, #152]	; (800a8bc <_vfiprintf_r+0x224>)
 800a822:	bb1b      	cbnz	r3, 800a86c <_vfiprintf_r+0x1d4>
 800a824:	9b03      	ldr	r3, [sp, #12]
 800a826:	3307      	adds	r3, #7
 800a828:	f023 0307 	bic.w	r3, r3, #7
 800a82c:	3308      	adds	r3, #8
 800a82e:	9303      	str	r3, [sp, #12]
 800a830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a832:	444b      	add	r3, r9
 800a834:	9309      	str	r3, [sp, #36]	; 0x24
 800a836:	e750      	b.n	800a6da <_vfiprintf_r+0x42>
 800a838:	fb05 3202 	mla	r2, r5, r2, r3
 800a83c:	2001      	movs	r0, #1
 800a83e:	4688      	mov	r8, r1
 800a840:	e78a      	b.n	800a758 <_vfiprintf_r+0xc0>
 800a842:	2300      	movs	r3, #0
 800a844:	f108 0801 	add.w	r8, r8, #1
 800a848:	9305      	str	r3, [sp, #20]
 800a84a:	4619      	mov	r1, r3
 800a84c:	250a      	movs	r5, #10
 800a84e:	4640      	mov	r0, r8
 800a850:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a854:	3a30      	subs	r2, #48	; 0x30
 800a856:	2a09      	cmp	r2, #9
 800a858:	d903      	bls.n	800a862 <_vfiprintf_r+0x1ca>
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d0c3      	beq.n	800a7e6 <_vfiprintf_r+0x14e>
 800a85e:	9105      	str	r1, [sp, #20]
 800a860:	e7c1      	b.n	800a7e6 <_vfiprintf_r+0x14e>
 800a862:	fb05 2101 	mla	r1, r5, r1, r2
 800a866:	2301      	movs	r3, #1
 800a868:	4680      	mov	r8, r0
 800a86a:	e7f0      	b.n	800a84e <_vfiprintf_r+0x1b6>
 800a86c:	ab03      	add	r3, sp, #12
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	4622      	mov	r2, r4
 800a872:	4b13      	ldr	r3, [pc, #76]	; (800a8c0 <_vfiprintf_r+0x228>)
 800a874:	a904      	add	r1, sp, #16
 800a876:	4630      	mov	r0, r6
 800a878:	f7fb ff96 	bl	80067a8 <_printf_float>
 800a87c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a880:	4681      	mov	r9, r0
 800a882:	d1d5      	bne.n	800a830 <_vfiprintf_r+0x198>
 800a884:	89a3      	ldrh	r3, [r4, #12]
 800a886:	065b      	lsls	r3, r3, #25
 800a888:	f53f af7e 	bmi.w	800a788 <_vfiprintf_r+0xf0>
 800a88c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a88e:	e77d      	b.n	800a78c <_vfiprintf_r+0xf4>
 800a890:	ab03      	add	r3, sp, #12
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	4622      	mov	r2, r4
 800a896:	4b0a      	ldr	r3, [pc, #40]	; (800a8c0 <_vfiprintf_r+0x228>)
 800a898:	a904      	add	r1, sp, #16
 800a89a:	4630      	mov	r0, r6
 800a89c:	f7fc fa3a 	bl	8006d14 <_printf_i>
 800a8a0:	e7ec      	b.n	800a87c <_vfiprintf_r+0x1e4>
 800a8a2:	bf00      	nop
 800a8a4:	0800ad00 	.word	0x0800ad00
 800a8a8:	0800ae4c 	.word	0x0800ae4c
 800a8ac:	0800ad20 	.word	0x0800ad20
 800a8b0:	0800ace0 	.word	0x0800ace0
 800a8b4:	0800ae52 	.word	0x0800ae52
 800a8b8:	0800ae56 	.word	0x0800ae56
 800a8bc:	080067a9 	.word	0x080067a9
 800a8c0:	0800a673 	.word	0x0800a673

0800a8c4 <__sread>:
 800a8c4:	b510      	push	{r4, lr}
 800a8c6:	460c      	mov	r4, r1
 800a8c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8cc:	f000 f8e0 	bl	800aa90 <_read_r>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	bfab      	itete	ge
 800a8d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8d6:	89a3      	ldrhlt	r3, [r4, #12]
 800a8d8:	181b      	addge	r3, r3, r0
 800a8da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8de:	bfac      	ite	ge
 800a8e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8e2:	81a3      	strhlt	r3, [r4, #12]
 800a8e4:	bd10      	pop	{r4, pc}

0800a8e6 <__swrite>:
 800a8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ea:	461f      	mov	r7, r3
 800a8ec:	898b      	ldrh	r3, [r1, #12]
 800a8ee:	05db      	lsls	r3, r3, #23
 800a8f0:	4605      	mov	r5, r0
 800a8f2:	460c      	mov	r4, r1
 800a8f4:	4616      	mov	r6, r2
 800a8f6:	d505      	bpl.n	800a904 <__swrite+0x1e>
 800a8f8:	2302      	movs	r3, #2
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a900:	f000 f874 	bl	800a9ec <_lseek_r>
 800a904:	89a3      	ldrh	r3, [r4, #12]
 800a906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a90a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a90e:	81a3      	strh	r3, [r4, #12]
 800a910:	4632      	mov	r2, r6
 800a912:	463b      	mov	r3, r7
 800a914:	4628      	mov	r0, r5
 800a916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a91a:	f000 b823 	b.w	800a964 <_write_r>

0800a91e <__sseek>:
 800a91e:	b510      	push	{r4, lr}
 800a920:	460c      	mov	r4, r1
 800a922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a926:	f000 f861 	bl	800a9ec <_lseek_r>
 800a92a:	1c43      	adds	r3, r0, #1
 800a92c:	89a3      	ldrh	r3, [r4, #12]
 800a92e:	bf15      	itete	ne
 800a930:	6560      	strne	r0, [r4, #84]	; 0x54
 800a932:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a936:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a93a:	81a3      	strheq	r3, [r4, #12]
 800a93c:	bf18      	it	ne
 800a93e:	81a3      	strhne	r3, [r4, #12]
 800a940:	bd10      	pop	{r4, pc}

0800a942 <__sclose>:
 800a942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a946:	f000 b81f 	b.w	800a988 <_close_r>

0800a94a <__ascii_wctomb>:
 800a94a:	b149      	cbz	r1, 800a960 <__ascii_wctomb+0x16>
 800a94c:	2aff      	cmp	r2, #255	; 0xff
 800a94e:	bf85      	ittet	hi
 800a950:	238a      	movhi	r3, #138	; 0x8a
 800a952:	6003      	strhi	r3, [r0, #0]
 800a954:	700a      	strbls	r2, [r1, #0]
 800a956:	f04f 30ff 	movhi.w	r0, #4294967295
 800a95a:	bf98      	it	ls
 800a95c:	2001      	movls	r0, #1
 800a95e:	4770      	bx	lr
 800a960:	4608      	mov	r0, r1
 800a962:	4770      	bx	lr

0800a964 <_write_r>:
 800a964:	b538      	push	{r3, r4, r5, lr}
 800a966:	4c07      	ldr	r4, [pc, #28]	; (800a984 <_write_r+0x20>)
 800a968:	4605      	mov	r5, r0
 800a96a:	4608      	mov	r0, r1
 800a96c:	4611      	mov	r1, r2
 800a96e:	2200      	movs	r2, #0
 800a970:	6022      	str	r2, [r4, #0]
 800a972:	461a      	mov	r2, r3
 800a974:	f7f6 ff50 	bl	8001818 <_write>
 800a978:	1c43      	adds	r3, r0, #1
 800a97a:	d102      	bne.n	800a982 <_write_r+0x1e>
 800a97c:	6823      	ldr	r3, [r4, #0]
 800a97e:	b103      	cbz	r3, 800a982 <_write_r+0x1e>
 800a980:	602b      	str	r3, [r5, #0]
 800a982:	bd38      	pop	{r3, r4, r5, pc}
 800a984:	20004d1c 	.word	0x20004d1c

0800a988 <_close_r>:
 800a988:	b538      	push	{r3, r4, r5, lr}
 800a98a:	4c06      	ldr	r4, [pc, #24]	; (800a9a4 <_close_r+0x1c>)
 800a98c:	2300      	movs	r3, #0
 800a98e:	4605      	mov	r5, r0
 800a990:	4608      	mov	r0, r1
 800a992:	6023      	str	r3, [r4, #0]
 800a994:	f7f6 ff6c 	bl	8001870 <_close>
 800a998:	1c43      	adds	r3, r0, #1
 800a99a:	d102      	bne.n	800a9a2 <_close_r+0x1a>
 800a99c:	6823      	ldr	r3, [r4, #0]
 800a99e:	b103      	cbz	r3, 800a9a2 <_close_r+0x1a>
 800a9a0:	602b      	str	r3, [r5, #0]
 800a9a2:	bd38      	pop	{r3, r4, r5, pc}
 800a9a4:	20004d1c 	.word	0x20004d1c

0800a9a8 <_fstat_r>:
 800a9a8:	b538      	push	{r3, r4, r5, lr}
 800a9aa:	4c07      	ldr	r4, [pc, #28]	; (800a9c8 <_fstat_r+0x20>)
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	4605      	mov	r5, r0
 800a9b0:	4608      	mov	r0, r1
 800a9b2:	4611      	mov	r1, r2
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	f7f6 ffab 	bl	8001910 <_fstat>
 800a9ba:	1c43      	adds	r3, r0, #1
 800a9bc:	d102      	bne.n	800a9c4 <_fstat_r+0x1c>
 800a9be:	6823      	ldr	r3, [r4, #0]
 800a9c0:	b103      	cbz	r3, 800a9c4 <_fstat_r+0x1c>
 800a9c2:	602b      	str	r3, [r5, #0]
 800a9c4:	bd38      	pop	{r3, r4, r5, pc}
 800a9c6:	bf00      	nop
 800a9c8:	20004d1c 	.word	0x20004d1c

0800a9cc <_isatty_r>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	4c06      	ldr	r4, [pc, #24]	; (800a9e8 <_isatty_r+0x1c>)
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	4605      	mov	r5, r0
 800a9d4:	4608      	mov	r0, r1
 800a9d6:	6023      	str	r3, [r4, #0]
 800a9d8:	f7f6 ff08 	bl	80017ec <_isatty>
 800a9dc:	1c43      	adds	r3, r0, #1
 800a9de:	d102      	bne.n	800a9e6 <_isatty_r+0x1a>
 800a9e0:	6823      	ldr	r3, [r4, #0]
 800a9e2:	b103      	cbz	r3, 800a9e6 <_isatty_r+0x1a>
 800a9e4:	602b      	str	r3, [r5, #0]
 800a9e6:	bd38      	pop	{r3, r4, r5, pc}
 800a9e8:	20004d1c 	.word	0x20004d1c

0800a9ec <_lseek_r>:
 800a9ec:	b538      	push	{r3, r4, r5, lr}
 800a9ee:	4c07      	ldr	r4, [pc, #28]	; (800aa0c <_lseek_r+0x20>)
 800a9f0:	4605      	mov	r5, r0
 800a9f2:	4608      	mov	r0, r1
 800a9f4:	4611      	mov	r1, r2
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	6022      	str	r2, [r4, #0]
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	f7f6 ff4f 	bl	800189e <_lseek>
 800aa00:	1c43      	adds	r3, r0, #1
 800aa02:	d102      	bne.n	800aa0a <_lseek_r+0x1e>
 800aa04:	6823      	ldr	r3, [r4, #0]
 800aa06:	b103      	cbz	r3, 800aa0a <_lseek_r+0x1e>
 800aa08:	602b      	str	r3, [r5, #0]
 800aa0a:	bd38      	pop	{r3, r4, r5, pc}
 800aa0c:	20004d1c 	.word	0x20004d1c

0800aa10 <memmove>:
 800aa10:	4288      	cmp	r0, r1
 800aa12:	b510      	push	{r4, lr}
 800aa14:	eb01 0302 	add.w	r3, r1, r2
 800aa18:	d807      	bhi.n	800aa2a <memmove+0x1a>
 800aa1a:	1e42      	subs	r2, r0, #1
 800aa1c:	4299      	cmp	r1, r3
 800aa1e:	d00a      	beq.n	800aa36 <memmove+0x26>
 800aa20:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa24:	f802 4f01 	strb.w	r4, [r2, #1]!
 800aa28:	e7f8      	b.n	800aa1c <memmove+0xc>
 800aa2a:	4283      	cmp	r3, r0
 800aa2c:	d9f5      	bls.n	800aa1a <memmove+0xa>
 800aa2e:	1881      	adds	r1, r0, r2
 800aa30:	1ad2      	subs	r2, r2, r3
 800aa32:	42d3      	cmn	r3, r2
 800aa34:	d100      	bne.n	800aa38 <memmove+0x28>
 800aa36:	bd10      	pop	{r4, pc}
 800aa38:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa3c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800aa40:	e7f7      	b.n	800aa32 <memmove+0x22>

0800aa42 <_realloc_r>:
 800aa42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa44:	4607      	mov	r7, r0
 800aa46:	4614      	mov	r4, r2
 800aa48:	460e      	mov	r6, r1
 800aa4a:	b921      	cbnz	r1, 800aa56 <_realloc_r+0x14>
 800aa4c:	4611      	mov	r1, r2
 800aa4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aa52:	f7fb bdbb 	b.w	80065cc <_malloc_r>
 800aa56:	b922      	cbnz	r2, 800aa62 <_realloc_r+0x20>
 800aa58:	f7fb fd6a 	bl	8006530 <_free_r>
 800aa5c:	4625      	mov	r5, r4
 800aa5e:	4628      	mov	r0, r5
 800aa60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa62:	f000 f827 	bl	800aab4 <_malloc_usable_size_r>
 800aa66:	42a0      	cmp	r0, r4
 800aa68:	d20f      	bcs.n	800aa8a <_realloc_r+0x48>
 800aa6a:	4621      	mov	r1, r4
 800aa6c:	4638      	mov	r0, r7
 800aa6e:	f7fb fdad 	bl	80065cc <_malloc_r>
 800aa72:	4605      	mov	r5, r0
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d0f2      	beq.n	800aa5e <_realloc_r+0x1c>
 800aa78:	4631      	mov	r1, r6
 800aa7a:	4622      	mov	r2, r4
 800aa7c:	f7fb fd36 	bl	80064ec <memcpy>
 800aa80:	4631      	mov	r1, r6
 800aa82:	4638      	mov	r0, r7
 800aa84:	f7fb fd54 	bl	8006530 <_free_r>
 800aa88:	e7e9      	b.n	800aa5e <_realloc_r+0x1c>
 800aa8a:	4635      	mov	r5, r6
 800aa8c:	e7e7      	b.n	800aa5e <_realloc_r+0x1c>
	...

0800aa90 <_read_r>:
 800aa90:	b538      	push	{r3, r4, r5, lr}
 800aa92:	4c07      	ldr	r4, [pc, #28]	; (800aab0 <_read_r+0x20>)
 800aa94:	4605      	mov	r5, r0
 800aa96:	4608      	mov	r0, r1
 800aa98:	4611      	mov	r1, r2
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	6022      	str	r2, [r4, #0]
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	f7f6 ff0e 	bl	80018c0 <_read>
 800aaa4:	1c43      	adds	r3, r0, #1
 800aaa6:	d102      	bne.n	800aaae <_read_r+0x1e>
 800aaa8:	6823      	ldr	r3, [r4, #0]
 800aaaa:	b103      	cbz	r3, 800aaae <_read_r+0x1e>
 800aaac:	602b      	str	r3, [r5, #0]
 800aaae:	bd38      	pop	{r3, r4, r5, pc}
 800aab0:	20004d1c 	.word	0x20004d1c

0800aab4 <_malloc_usable_size_r>:
 800aab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aab8:	1f18      	subs	r0, r3, #4
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	bfbc      	itt	lt
 800aabe:	580b      	ldrlt	r3, [r1, r0]
 800aac0:	18c0      	addlt	r0, r0, r3
 800aac2:	4770      	bx	lr

0800aac4 <_init>:
 800aac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac6:	bf00      	nop
 800aac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaca:	bc08      	pop	{r3}
 800aacc:	469e      	mov	lr, r3
 800aace:	4770      	bx	lr

0800aad0 <_fini>:
 800aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad2:	bf00      	nop
 800aad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad6:	bc08      	pop	{r3}
 800aad8:	469e      	mov	lr, r3
 800aada:	4770      	bx	lr
