
Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  0800695c  0800695c  0001695c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b44  08006b44  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006b44  08006b44  00016b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b4c  08006b4c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b4c  08006b4c  00016b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b50  08006b50  00016b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b40  20000074  08006bc8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bb4  08006bc8  00024bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001763a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fe4  00000000  00000000  000376de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f18  00000000  00000000  0003a6c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df0  00000000  00000000  0003b5e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a2ca  00000000  00000000  0003c3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ddd0  00000000  00000000  0005669a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096eec  00000000  00000000  0006446a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fb356  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004434  00000000  00000000  000fb3d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006944 	.word	0x08006944

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006944 	.word	0x08006944

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000090 	.word	0x20000090
 80005b0:	200000e4 	.word	0x200000e4

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b09e      	sub	sp, #120	; 0x78
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fef3 	bl	80013a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f88d 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 fa45 	bl	8000a50 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005c6:	f000 f945 	bl	8000854 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 fa0f 	bl	80009ec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005ce:	f000 f8ef 	bl	80007b0 <MX_ADC1_Init>
  MX_SPI2_Init();
 80005d2:	f000 f975 	bl	80008c0 <MX_SPI2_Init>
  MX_SPI3_Init();
 80005d6:	f000 f9a9 	bl	800092c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80005da:	f000 f9dd 	bl	8000998 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80005de:	f000 fa2f 	bl	8000a40 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 80005e2:	4833      	ldr	r0, [pc, #204]	; (80006b0 <main+0xfc>)
 80005e4:	f000 fb80 	bl	8000ce8 <RetargetInit>
  for(int i = 0; i < 500; i++) printf(" \r\n");
 80005e8:	2300      	movs	r3, #0
 80005ea:	677b      	str	r3, [r7, #116]	; 0x74
 80005ec:	e005      	b.n	80005fa <main+0x46>
 80005ee:	4831      	ldr	r0, [pc, #196]	; (80006b4 <main+0x100>)
 80005f0:	f005 face 	bl	8005b90 <puts>
 80005f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005f6:	3301      	adds	r3, #1
 80005f8:	677b      	str	r3, [r7, #116]	; 0x74
 80005fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000600:	dbf5      	blt.n	80005ee <main+0x3a>
  HAL_Delay(250);
 8000602:	20fa      	movs	r0, #250	; 0xfa
 8000604:	f000 ff40 	bl	8001488 <HAL_Delay>
  printf("Starting:\r\n");
 8000608:	482b      	ldr	r0, [pc, #172]	; (80006b8 <main+0x104>)
 800060a:	f005 fac1 	bl	8005b90 <puts>
  HAL_Delay(250);
 800060e:	20fa      	movs	r0, #250	; 0xfa
 8000610:	f000 ff3a 	bl	8001488 <HAL_Delay>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ControlLogic */
  osThreadStaticDef(ControlLogic, startControlLogic, osPriorityNormal, 0, 128, ControlLogicBuffer, &ControlLogicControlBlock);
 8000614:	4b29      	ldr	r3, [pc, #164]	; (80006bc <main+0x108>)
 8000616:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800061a:	461d      	mov	r5, r3
 800061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlLogicHandle = osThreadCreate(osThread(ControlLogic), NULL);
 8000628:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f003 fb67 	bl	8003d02 <osThreadCreate>
 8000634:	4602      	mov	r2, r0
 8000636:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <main+0x10c>)
 8000638:	601a      	str	r2, [r3, #0]

  /* definition and creation of Acquisition */
  osThreadStaticDef(Acquisition, startAcquisition, osPriorityRealtime, 0, 128, AcquisitionBuffer, &AcquisitionControlBlock);
 800063a:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <main+0x110>)
 800063c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000640:	461d      	mov	r5, r3
 8000642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000646:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800064a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AcquisitionHandle = osThreadCreate(osThread(Acquisition), NULL);
 800064e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f003 fb54 	bl	8003d02 <osThreadCreate>
 800065a:	4602      	mov	r2, r0
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <main+0x114>)
 800065e:	601a      	str	r2, [r3, #0]

  /* definition and creation of Processing */
  osThreadStaticDef(Processing, startProcessing, osPriorityNormal, 0, 128, ProcessingBuffer, &ProcessingControlBlock);
 8000660:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <main+0x118>)
 8000662:	f107 0420 	add.w	r4, r7, #32
 8000666:	461d      	mov	r5, r3
 8000668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000670:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ProcessingHandle = osThreadCreate(osThread(Processing), NULL);
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f003 fb41 	bl	8003d02 <osThreadCreate>
 8000680:	4602      	mov	r2, r0
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <main+0x11c>)
 8000684:	601a      	str	r2, [r3, #0]

  /* definition and creation of Monitoring */
  osThreadStaticDef(Monitoring, startMonitoring, osPriorityLow, 0, 128, MonitoringBuffer, &MonitoringControlBlock);
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <main+0x120>)
 8000688:	1d3c      	adds	r4, r7, #4
 800068a:	461d      	mov	r5, r3
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MonitoringHandle = osThreadCreate(osThread(Monitoring), NULL);
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f003 fb30 	bl	8003d02 <osThreadCreate>
 80006a2:	4602      	mov	r2, r0
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <main+0x124>)
 80006a6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006a8:	f003 fb24 	bl	8003cf4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <main+0xf8>
 80006ae:	bf00      	nop
 80006b0:	20004948 	.word	0x20004948
 80006b4:	0800695c 	.word	0x0800695c
 80006b8:	08006960 	.word	0x08006960
 80006bc:	0800697c 	.word	0x0800697c
 80006c0:	200046dc 	.word	0x200046dc
 80006c4:	080069a4 	.word	0x080069a4
 80006c8:	200046d8 	.word	0x200046d8
 80006cc:	080069cc 	.word	0x080069cc
 80006d0:	2000459c 	.word	0x2000459c
 80006d4:	080069f4 	.word	0x080069f4
 80006d8:	200046d4 	.word	0x200046d4

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2230      	movs	r2, #48	; 0x30
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f005 f92c 	bl	8005948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <SystemClock_Config+0xcc>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a27      	ldr	r2, [pc, #156]	; (80007a8 <SystemClock_Config+0xcc>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
 8000710:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <SystemClock_Config+0xcc>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b22      	ldr	r3, [pc, #136]	; (80007ac <SystemClock_Config+0xd0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemClock_Config+0xd0>)
 8000726:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <SystemClock_Config+0xd0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000738:	2302      	movs	r3, #2
 800073a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2310      	movs	r3, #16
 8000742:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000744:	2302      	movs	r3, #2
 8000746:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000748:	2300      	movs	r3, #0
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800074c:	2310      	movs	r3, #16
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000750:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000754:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000756:	2304      	movs	r3, #4
 8000758:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800075a:	2304      	movs	r3, #4
 800075c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	4618      	mov	r0, r3
 8000764:	f001 fba6 	bl	8001eb4 <HAL_RCC_OscConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800076e:	f000 fab6 	bl	8000cde <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2302      	movs	r3, #2
 8000778:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000782:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2102      	movs	r1, #2
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fe00 	bl	8002394 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800079a:	f000 faa0 	bl	8000cde <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	; 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b6:	463b      	mov	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_ADC1_Init+0x98>)
 80007c4:	4a21      	ldr	r2, [pc, #132]	; (800084c <MX_ADC1_Init+0x9c>)
 80007c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_ADC1_Init+0x98>)
 80007ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d0:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_ADC1_Init+0x98>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_ADC1_Init+0x98>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007dc:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_ADC1_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_ADC1_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_ADC1_Init+0x98>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_ADC1_Init+0x98>)
 80007f2:	4a17      	ldr	r2, [pc, #92]	; (8000850 <MX_ADC1_Init+0xa0>)
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_ADC1_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_ADC1_Init+0x98>)
 80007fe:	2201      	movs	r2, #1
 8000800:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_ADC1_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_ADC1_Init+0x98>)
 800080c:	2201      	movs	r2, #1
 800080e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000810:	480d      	ldr	r0, [pc, #52]	; (8000848 <MX_ADC1_Init+0x98>)
 8000812:	f000 fe5b 	bl	80014cc <HAL_ADC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800081c:	f000 fa5f 	bl	8000cde <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000820:	2300      	movs	r3, #0
 8000822:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000824:	2301      	movs	r3, #1
 8000826:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082c:	463b      	mov	r3, r7
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_ADC1_Init+0x98>)
 8000832:	f000 fe8f 	bl	8001554 <HAL_ADC_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800083c:	f000 fa4f 	bl	8000cde <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200045f8 	.word	0x200045f8
 800084c:	40012000 	.word	0x40012000
 8000850:	0f000001 	.word	0x0f000001

08000854 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_SPI1_Init+0x64>)
 800085a:	4a18      	ldr	r2, [pc, #96]	; (80008bc <MX_SPI1_Init+0x68>)
 800085c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <MX_SPI1_Init+0x64>)
 8000860:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000864:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_SPI1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_SPI1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_SPI1_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_SPI1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_SPI1_Init+0x64>)
 8000880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000884:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_SPI1_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <MX_SPI1_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_SPI1_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <MX_SPI1_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_SPI1_Init+0x64>)
 80008a0:	220a      	movs	r2, #10
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MX_SPI1_Init+0x64>)
 80008a6:	f001 ff67 	bl	8002778 <HAL_SPI_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008b0:	f000 fa15 	bl	8000cde <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200046e0 	.word	0x200046e0
 80008bc:	40013000 	.word	0x40013000

080008c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_SPI2_Init+0x64>)
 80008c6:	4a18      	ldr	r2, [pc, #96]	; (8000928 <MX_SPI2_Init+0x68>)
 80008c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <MX_SPI2_Init+0x64>)
 80008cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_SPI2_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_SPI2_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_SPI2_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_SPI2_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_SPI2_Init+0x64>)
 80008ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_SPI2_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MX_SPI2_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_SPI2_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <MX_SPI2_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_SPI2_Init+0x64>)
 800090c:	220a      	movs	r2, #10
 800090e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_SPI2_Init+0x64>)
 8000912:	f001 ff31 	bl	8002778 <HAL_SPI_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800091c:	f000 f9df 	bl	8000cde <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	2000429c 	.word	0x2000429c
 8000928:	40003800 	.word	0x40003800

0800092c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_SPI3_Init+0x64>)
 8000932:	4a18      	ldr	r2, [pc, #96]	; (8000994 <MX_SPI3_Init+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_SPI3_Init+0x64>)
 8000938:	f44f 7282 	mov.w	r2, #260	; 0x104
 800093c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_SPI3_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_SPI3_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_SPI3_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_SPI3_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_SPI3_Init+0x64>)
 8000958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800095c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_SPI3_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <MX_SPI3_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_SPI3_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <MX_SPI3_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_SPI3_Init+0x64>)
 8000978:	220a      	movs	r2, #10
 800097a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <MX_SPI3_Init+0x64>)
 800097e:	f001 fefb 	bl	8002778 <HAL_SPI_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000988:	f000 f9a9 	bl	8000cde <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200045a0 	.word	0x200045a0
 8000994:	40003c00 	.word	0x40003c00

08000998 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <MX_USART1_UART_Init+0x50>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009d0:	f002 fc26 	bl	8003220 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009da:	f000 f980 	bl	8000cde <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20004640 	.word	0x20004640
 80009e8:	40011000 	.word	0x40011000

080009ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <MX_USART2_UART_Init+0x50>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a24:	f002 fbfc 	bl	8003220 <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a2e:	f000 f956 	bl	8000cde <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20004948 	.word	0x20004948
 8000a3c:	40004400 	.word	0x40004400

08000a40 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b4a      	ldr	r3, [pc, #296]	; (8000b94 <MX_GPIO_Init+0x144>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a49      	ldr	r2, [pc, #292]	; (8000b94 <MX_GPIO_Init+0x144>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b47      	ldr	r3, [pc, #284]	; (8000b94 <MX_GPIO_Init+0x144>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b43      	ldr	r3, [pc, #268]	; (8000b94 <MX_GPIO_Init+0x144>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a42      	ldr	r2, [pc, #264]	; (8000b94 <MX_GPIO_Init+0x144>)
 8000a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b40      	ldr	r3, [pc, #256]	; (8000b94 <MX_GPIO_Init+0x144>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	4b3c      	ldr	r3, [pc, #240]	; (8000b94 <MX_GPIO_Init+0x144>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a3b      	ldr	r2, [pc, #236]	; (8000b94 <MX_GPIO_Init+0x144>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b39      	ldr	r3, [pc, #228]	; (8000b94 <MX_GPIO_Init+0x144>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b35      	ldr	r3, [pc, #212]	; (8000b94 <MX_GPIO_Init+0x144>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a34      	ldr	r2, [pc, #208]	; (8000b94 <MX_GPIO_Init+0x144>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <MX_GPIO_Init+0x144>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2180      	movs	r1, #128	; 0x80
 8000ada:	482f      	ldr	r0, [pc, #188]	; (8000b98 <MX_GPIO_Init+0x148>)
 8000adc:	f001 f9d0 	bl	8001e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HOLD_GPIO_Port, HOLD_Pin, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae6:	482d      	ldr	r0, [pc, #180]	; (8000b9c <MX_GPIO_Init+0x14c>)
 8000ae8:	f001 f9ca 	bl	8001e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS3_Pin|LED_Pin, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000af2:	482b      	ldr	r0, [pc, #172]	; (8000ba0 <MX_GPIO_Init+0x150>)
 8000af4:	f001 f9c4 	bl	8001e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000af8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000afe:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <MX_GPIO_Init+0x154>)
 8000b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4822      	ldr	r0, [pc, #136]	; (8000b98 <MX_GPIO_Init+0x148>)
 8000b0e:	f001 f835 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : WP_Pin */
  GPIO_InitStruct.Pin = WP_Pin;
 8000b12:	2380      	movs	r3, #128	; 0x80
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WP_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	481b      	ldr	r0, [pc, #108]	; (8000b98 <MX_GPIO_Init+0x148>)
 8000b2a:	f001 f827 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : HOLD_Pin */
  GPIO_InitStruct.Pin = HOLD_Pin;
 8000b2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HOLD_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	4815      	ldr	r0, [pc, #84]	; (8000b9c <MX_GPIO_Init+0x14c>)
 8000b48:	f001 f818 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000b4c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b5e:	230a      	movs	r3, #10
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	480c      	ldr	r0, [pc, #48]	; (8000b9c <MX_GPIO_Init+0x14c>)
 8000b6a:	f001 f807 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS3_Pin LED_Pin */
  GPIO_InitStruct.Pin = CS3_Pin|LED_Pin;
 8000b6e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <MX_GPIO_Init+0x150>)
 8000b88:	f000 fff8 	bl	8001b7c <HAL_GPIO_Init>

}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020800 	.word	0x40020800
 8000b9c:	40020000 	.word	0x40020000
 8000ba0:	40020400 	.word	0x40020400
 8000ba4:	10210000 	.word	0x10210000

08000ba8 <startControlLogic>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startControlLogic */
void startControlLogic(void const * argument)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	static TickType_t time_init = 0;
	uint32_t rowAddr = 0x00000000;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
	uint16_t colAddr = 0x0000;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint8_t writeData[4] = {0xAA, 0xBB, 0xCC, 0xDD};
 8000bb8:	4b2f      	ldr	r3, [pc, #188]	; (8000c78 <startControlLogic+0xd0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t readData[20] = {0x00, 0x00, 0x00, 0x00};
 8000bbe:	f107 0310 	add.w	r3, r7, #16
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]
	uint8_t sizeW = 4;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t sizeR = 20;
 8000bd4:	2314      	movs	r3, #20
 8000bd6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t feature = 0x00;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	bool nandNominal = false;
 8000be0:	2300      	movs	r3, #0
 8000be2:	73fb      	strb	r3, [r7, #15]

	if(ENABLE_CONTROL_LOGIC || true){
		HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	2180      	movs	r1, #128	; 0x80
 8000be8:	4824      	ldr	r0, [pc, #144]	; (8000c7c <startControlLogic+0xd4>)
 8000bea:	f001 f949 	bl	8001e80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOLD_GPIO_Port, HOLD_Pin, GPIO_PIN_SET);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bf4:	4822      	ldr	r0, [pc, #136]	; (8000c80 <startControlLogic+0xd8>)
 8000bf6:	f001 f943 	bl	8001e80 <HAL_GPIO_WritePin>
		printf("%2X ", feature);
		feature = getFeature(0xB0);
		printf("%2X ", feature);
		feature = getFeature(0xC0);
		printf("%2X ", feature);*/
		nandInit(&nandNominal);
 8000bfa:	f107 030f 	add.w	r3, r7, #15
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f004 fcc8 	bl	8005594 <nandInit>
		nandBufferLoad(rowAddr);
 8000c04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c06:	f004 fce7 	bl	80055d8 <nandBufferLoad>
		writeEnable();
 8000c0a:	f004 fe09 	bl	8005820 <writeEnable>
		nandWrite(rowAddr, colAddr, writeData, sizeW);
 8000c0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000c12:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000c16:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8000c18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c1a:	f004 fde2 	bl	80057e2 <nandWrite>
		nandRead(rowAddr, colAddr, readData, sizeR);
 8000c1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c22:	f107 0210 	add.w	r2, r7, #16
 8000c26:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8000c28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c2a:	f004 fdc3 	bl	80057b4 <nandRead>

		for(int i = 0; i < sizeR; i++) printf("%X ", readData[i]);
 8000c2e:	2300      	movs	r3, #0
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
 8000c32:	e00b      	b.n	8000c4c <startControlLogic+0xa4>
 8000c34:	f107 0210 	add.w	r2, r7, #16
 8000c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c3a:	4413      	add	r3, r2
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4810      	ldr	r0, [pc, #64]	; (8000c84 <startControlLogic+0xdc>)
 8000c42:	f004 ff31 	bl	8005aa8 <iprintf>
 8000c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c48:	3301      	adds	r3, #1
 8000c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8000c4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c52:	429a      	cmp	r2, r3
 8000c54:	dbee      	blt.n	8000c34 <startControlLogic+0x8c>
		printf("\n\r");
 8000c56:	480c      	ldr	r0, [pc, #48]	; (8000c88 <startControlLogic+0xe0>)
 8000c58:	f004 ff26 	bl	8005aa8 <iprintf>
	}
  /* Infinite loop */
	while(ENABLE_CONTROL_LOGIC) {
		if(printDiv) printf("-------------\r\n");
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <startControlLogic+0xe4>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d002      	beq.n	8000c6a <startControlLogic+0xc2>
 8000c64:	480a      	ldr	r0, [pc, #40]	; (8000c90 <startControlLogic+0xe8>)
 8000c66:	f004 ff93 	bl	8005b90 <puts>
		//toggleLed();
		vTaskDelayUntil(&time_init, CONTROL_LOGIC_TASK_DELAY);
 8000c6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c6e:	4809      	ldr	r0, [pc, #36]	; (8000c94 <startControlLogic+0xec>)
 8000c70:	f003 fb64 	bl	800433c <vTaskDelayUntil>
		if(printDiv) printf("-------------\r\n");
 8000c74:	e7f2      	b.n	8000c5c <startControlLogic+0xb4>
 8000c76:	bf00      	nop
 8000c78:	08006a28 	.word	0x08006a28
 8000c7c:	40020800 	.word	0x40020800
 8000c80:	40020000 	.word	0x40020000
 8000c84:	08006a10 	.word	0x08006a10
 8000c88:	08006a14 	.word	0x08006a14
 8000c8c:	200002e4 	.word	0x200002e4
 8000c90:	08006a18 	.word	0x08006a18
 8000c94:	200002e8 	.word	0x200002e8

08000c98 <startAcquisition>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAcquisition */
void startAcquisition(void const * argument)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	if(ENABLE_ACQUISITION){
		setup_A();
		printf("\n\n");
	}
  /* Infinite loop */
	while(ENABLE_ACQUISITION) {
 8000ca0:	bf00      	nop
		}
		if(time_init > 4000) break;
	}
	//printf("%d\n\r",time_init);
	if(ENABLE_ACQUISITION) printDiv = false;
	vTaskDelete(NULL);
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f003 fabc 	bl	8004220 <vTaskDelete>

  /* USER CODE END startAcquisition */
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <startProcessing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startProcessing */
void startProcessing(void const * argument)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
		HAL_Delay(1000);
		*/
		vTaskDelayUntil(&time_init, PROCESSING_TASK_DELAY);
	}
	}
	vTaskDelete(NULL);
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f003 fab1 	bl	8004220 <vTaskDelete>
  /* USER CODE END startProcessing */
}
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <startMonitoring>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMonitoring */
void startMonitoring(void const * argument)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMonitoring */
	static GPIO_PinState pressed = GPIO_PIN_SET;
	static int counter = 0;
	static TickType_t time_init = 0;
  /* Infinite loop */
	while(ENABLE_MONITORING) {
 8000cce:	bf00      	nop


		vTaskDelayUntil(&time_init, MONITORING_TASK_DELAY);
	}

	vTaskDelete(NULL);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f003 faa5 	bl	8004220 <vTaskDelete>
  /* USER CODE END startMonitoring */
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce2:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <Error_Handler+0x6>
	...

08000ce8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000cf0:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <RetargetInit+0x28>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <RetargetInit+0x2c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6898      	ldr	r0, [r3, #8]
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	2202      	movs	r2, #2
 8000d00:	2100      	movs	r1, #0
 8000d02:	f004 ff5d 	bl	8005bc0 <setvbuf>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20004ba4 	.word	0x20004ba4
 8000d14:	20000010 	.word	0x20000010

08000d18 <_isatty>:

int _isatty(int fd) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db04      	blt.n	8000d30 <_isatty+0x18>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	dc01      	bgt.n	8000d30 <_isatty+0x18>
    return 1;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e005      	b.n	8000d3c <_isatty+0x24>

  errno = EBADF;
 8000d30:	f004 fdd8 	bl	80058e4 <__errno>
 8000d34:	4602      	mov	r2, r0
 8000d36:	2309      	movs	r3, #9
 8000d38:	6013      	str	r3, [r2, #0]
  return 0;
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <_write>:

int _write(int fd, char* ptr, int len) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d002      	beq.n	8000d5c <_write+0x18>
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d111      	bne.n	8000d80 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <_write+0x54>)
 8000d5e:	6818      	ldr	r0, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295
 8000d68:	68b9      	ldr	r1, [r7, #8]
 8000d6a:	f002 faa6 	bl	80032ba <HAL_UART_Transmit>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000d72:	7dfb      	ldrb	r3, [r7, #23]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d101      	bne.n	8000d7c <_write+0x38>
      return len;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	e008      	b.n	8000d8e <_write+0x4a>
    else
      return EIO;
 8000d7c:	2305      	movs	r3, #5
 8000d7e:	e006      	b.n	8000d8e <_write+0x4a>
  }
  errno = EBADF;
 8000d80:	f004 fdb0 	bl	80058e4 <__errno>
 8000d84:	4602      	mov	r2, r0
 8000d86:	2309      	movs	r3, #9
 8000d88:	6013      	str	r3, [r2, #0]
  return -1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20004ba4 	.word	0x20004ba4

08000d9c <_close>:

int _close(int fd) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db04      	blt.n	8000db4 <_close+0x18>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	dc01      	bgt.n	8000db4 <_close+0x18>
    return 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	e006      	b.n	8000dc2 <_close+0x26>

  errno = EBADF;
 8000db4:	f004 fd96 	bl	80058e4 <__errno>
 8000db8:	4602      	mov	r2, r0
 8000dba:	2309      	movs	r3, #9
 8000dbc:	6013      	str	r3, [r2, #0]
  return -1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b084      	sub	sp, #16
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	60f8      	str	r0, [r7, #12]
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000dd6:	f004 fd85 	bl	80058e4 <__errno>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	2309      	movs	r3, #9
 8000dde:	6013      	str	r3, [r2, #0]
  return -1;
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <_read>:

int _read(int fd, char* ptr, int len) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d110      	bne.n	8000e20 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <_read+0x4c>)
 8000e00:	6818      	ldr	r0, [r3, #0]
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	2201      	movs	r2, #1
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	f002 faef 	bl	80033ec <HAL_UART_Receive>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000e12:	7dfb      	ldrb	r3, [r7, #23]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d101      	bne.n	8000e1c <_read+0x30>
      return 1;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e008      	b.n	8000e2e <_read+0x42>
    else
      return EIO;
 8000e1c:	2305      	movs	r3, #5
 8000e1e:	e006      	b.n	8000e2e <_read+0x42>
  }
  errno = EBADF;
 8000e20:	f004 fd60 	bl	80058e4 <__errno>
 8000e24:	4602      	mov	r2, r0
 8000e26:	2309      	movs	r3, #9
 8000e28:	6013      	str	r3, [r2, #0]
  return -1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20004ba4 	.word	0x20004ba4

08000e3c <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	db08      	blt.n	8000e5e <_fstat+0x22>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	dc05      	bgt.n	8000e5e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e58:	605a      	str	r2, [r3, #4]
    return 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e005      	b.n	8000e6a <_fstat+0x2e>
  }

  errno = EBADF;
 8000e5e:	f004 fd41 	bl	80058e4 <__errno>
 8000e62:	4602      	mov	r2, r0
 8000e64:	2309      	movs	r3, #9
 8000e66:	6013      	str	r3, [r2, #0]
  return 0;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_MspInit+0x54>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	4a11      	ldr	r2, [pc, #68]	; (8000ec8 <HAL_MspInit+0x54>)
 8000e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e88:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <HAL_MspInit+0x54>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	603b      	str	r3, [r7, #0]
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <HAL_MspInit+0x54>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <HAL_MspInit+0x54>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <HAL_MspInit+0x54>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	210f      	movs	r1, #15
 8000eb6:	f06f 0001 	mvn.w	r0, #1
 8000eba:	f000 fe36 	bl	8001b2a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800

08000ecc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a17      	ldr	r2, [pc, #92]	; (8000f48 <HAL_ADC_MspInit+0x7c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d127      	bne.n	8000f3e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <HAL_ADC_MspInit+0x80>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <HAL_ADC_MspInit+0x80>)
 8000ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efc:	6453      	str	r3, [r2, #68]	; 0x44
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <HAL_ADC_MspInit+0x80>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <HAL_ADC_MspInit+0x80>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <HAL_ADC_MspInit+0x80>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <HAL_ADC_MspInit+0x80>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000f26:	2313      	movs	r3, #19
 8000f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4805      	ldr	r0, [pc, #20]	; (8000f50 <HAL_ADC_MspInit+0x84>)
 8000f3a:	f000 fe1f 	bl	8001b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f3e:	bf00      	nop
 8000f40:	3728      	adds	r7, #40	; 0x28
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40012000 	.word	0x40012000
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020000 	.word	0x40020000

08000f54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b090      	sub	sp, #64	; 0x40
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a6a      	ldr	r2, [pc, #424]	; (800111c <HAL_SPI_MspInit+0x1c8>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d12c      	bne.n	8000fd0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f7a:	4b69      	ldr	r3, [pc, #420]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	4a68      	ldr	r2, [pc, #416]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 8000f80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f84:	6453      	str	r3, [r2, #68]	; 0x44
 8000f86:	4b66      	ldr	r3, [pc, #408]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f90:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
 8000f96:	4b62      	ldr	r3, [pc, #392]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a61      	ldr	r2, [pc, #388]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b5f      	ldr	r3, [pc, #380]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fae:	23e0      	movs	r3, #224	; 0xe0
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4856      	ldr	r0, [pc, #344]	; (8001124 <HAL_SPI_MspInit+0x1d0>)
 8000fca:	f000 fdd7 	bl	8001b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fce:	e0a1      	b.n	8001114 <HAL_SPI_MspInit+0x1c0>
  else if(hspi->Instance==SPI2)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a54      	ldr	r2, [pc, #336]	; (8001128 <HAL_SPI_MspInit+0x1d4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d14b      	bne.n	8001072 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
 8000fde:	4b50      	ldr	r3, [pc, #320]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a4f      	ldr	r2, [pc, #316]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 8000fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fea:	4b4d      	ldr	r3, [pc, #308]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff2:	623b      	str	r3, [r7, #32]
 8000ff4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
 8000ffa:	4b49      	ldr	r3, [pc, #292]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a48      	ldr	r2, [pc, #288]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 8001000:	f043 0304 	orr.w	r3, r3, #4
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b46      	ldr	r3, [pc, #280]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	61fb      	str	r3, [r7, #28]
 8001010:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	61bb      	str	r3, [r7, #24]
 8001016:	4b42      	ldr	r3, [pc, #264]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a41      	ldr	r2, [pc, #260]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b3f      	ldr	r3, [pc, #252]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	61bb      	str	r3, [r7, #24]
 800102c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800102e:	230c      	movs	r3, #12
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103a:	2303      	movs	r3, #3
 800103c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800103e:	2305      	movs	r3, #5
 8001040:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001042:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001046:	4619      	mov	r1, r3
 8001048:	4838      	ldr	r0, [pc, #224]	; (800112c <HAL_SPI_MspInit+0x1d8>)
 800104a:	f000 fd97 	bl	8001b7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800104e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001060:	2305      	movs	r3, #5
 8001062:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001064:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001068:	4619      	mov	r1, r3
 800106a:	4831      	ldr	r0, [pc, #196]	; (8001130 <HAL_SPI_MspInit+0x1dc>)
 800106c:	f000 fd86 	bl	8001b7c <HAL_GPIO_Init>
}
 8001070:	e050      	b.n	8001114 <HAL_SPI_MspInit+0x1c0>
  else if(hspi->Instance==SPI3)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a2f      	ldr	r2, [pc, #188]	; (8001134 <HAL_SPI_MspInit+0x1e0>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d14b      	bne.n	8001114 <HAL_SPI_MspInit+0x1c0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	4b27      	ldr	r3, [pc, #156]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	4a26      	ldr	r2, [pc, #152]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 8001086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800108a:	6413      	str	r3, [r2, #64]	; 0x40
 800108c:	4b24      	ldr	r3, [pc, #144]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	4b20      	ldr	r3, [pc, #128]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	4a1f      	ldr	r2, [pc, #124]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	6313      	str	r3, [r2, #48]	; 0x30
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010bc:	4a18      	ldr	r2, [pc, #96]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	6313      	str	r3, [r2, #48]	; 0x30
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <HAL_SPI_MspInit+0x1cc>)
 80010c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80010e2:	2307      	movs	r3, #7
 80010e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ea:	4619      	mov	r1, r3
 80010ec:	4810      	ldr	r0, [pc, #64]	; (8001130 <HAL_SPI_MspInit+0x1dc>)
 80010ee:	f000 fd45 	bl	8001b7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001100:	2303      	movs	r3, #3
 8001102:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001104:	2306      	movs	r3, #6
 8001106:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001108:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800110c:	4619      	mov	r1, r3
 800110e:	4807      	ldr	r0, [pc, #28]	; (800112c <HAL_SPI_MspInit+0x1d8>)
 8001110:	f000 fd34 	bl	8001b7c <HAL_GPIO_Init>
}
 8001114:	bf00      	nop
 8001116:	3740      	adds	r7, #64	; 0x40
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40013000 	.word	0x40013000
 8001120:	40023800 	.word	0x40023800
 8001124:	40020000 	.word	0x40020000
 8001128:	40003800 	.word	0x40003800
 800112c:	40020800 	.word	0x40020800
 8001130:	40020400 	.word	0x40020400
 8001134:	40003c00 	.word	0x40003c00

08001138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08c      	sub	sp, #48	; 0x30
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a41      	ldr	r2, [pc, #260]	; (800125c <HAL_UART_MspInit+0x124>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d14b      	bne.n	80011f2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
 800115e:	4b40      	ldr	r3, [pc, #256]	; (8001260 <HAL_UART_MspInit+0x128>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	4a3f      	ldr	r2, [pc, #252]	; (8001260 <HAL_UART_MspInit+0x128>)
 8001164:	f043 0310 	orr.w	r3, r3, #16
 8001168:	6453      	str	r3, [r2, #68]	; 0x44
 800116a:	4b3d      	ldr	r3, [pc, #244]	; (8001260 <HAL_UART_MspInit+0x128>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	61bb      	str	r3, [r7, #24]
 8001174:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	4b39      	ldr	r3, [pc, #228]	; (8001260 <HAL_UART_MspInit+0x128>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a38      	ldr	r2, [pc, #224]	; (8001260 <HAL_UART_MspInit+0x128>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b36      	ldr	r3, [pc, #216]	; (8001260 <HAL_UART_MspInit+0x128>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b32      	ldr	r3, [pc, #200]	; (8001260 <HAL_UART_MspInit+0x128>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a31      	ldr	r2, [pc, #196]	; (8001260 <HAL_UART_MspInit+0x128>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <HAL_UART_MspInit+0x128>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011c0:	2307      	movs	r3, #7
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4619      	mov	r1, r3
 80011ca:	4826      	ldr	r0, [pc, #152]	; (8001264 <HAL_UART_MspInit+0x12c>)
 80011cc:	f000 fcd6 	bl	8001b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011e0:	2307      	movs	r3, #7
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	481f      	ldr	r0, [pc, #124]	; (8001268 <HAL_UART_MspInit+0x130>)
 80011ec:	f000 fcc6 	bl	8001b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011f0:	e030      	b.n	8001254 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a1d      	ldr	r2, [pc, #116]	; (800126c <HAL_UART_MspInit+0x134>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d12b      	bne.n	8001254 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_UART_MspInit+0x128>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	4a16      	ldr	r2, [pc, #88]	; (8001260 <HAL_UART_MspInit+0x128>)
 8001206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120a:	6413      	str	r3, [r2, #64]	; 0x40
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <HAL_UART_MspInit+0x128>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <HAL_UART_MspInit+0x128>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <HAL_UART_MspInit+0x128>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6313      	str	r3, [r2, #48]	; 0x30
 8001228:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <HAL_UART_MspInit+0x128>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001234:	230c      	movs	r3, #12
 8001236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001244:	2307      	movs	r3, #7
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <HAL_UART_MspInit+0x12c>)
 8001250:	f000 fc94 	bl	8001b7c <HAL_GPIO_Init>
}
 8001254:	bf00      	nop
 8001256:	3730      	adds	r7, #48	; 0x30
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40011000 	.word	0x40011000
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000
 8001268:	40020400 	.word	0x40020400
 800126c:	40004400 	.word	0x40004400

08001270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <NMI_Handler+0x4>

08001276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <HardFault_Handler+0x4>

0800127c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <MemManage_Handler+0x4>

08001282 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <UsageFault_Handler+0x4>

0800128e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a0:	f000 f8d2 	bl	8001448 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80012a4:	f003 fbb0 	bl	8004a08 <xTaskGetSchedulerState>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d001      	beq.n	80012b2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80012ae:	f003 fde3 	bl	8004e78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <_sbrk>:
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	4a14      	ldr	r2, [pc, #80]	; (8001314 <_sbrk+0x5c>)
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <_sbrk+0x60>)
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <_sbrk+0x64>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d102      	bne.n	80012da <_sbrk+0x22>
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <_sbrk+0x64>)
 80012d6:	4a12      	ldr	r2, [pc, #72]	; (8001320 <_sbrk+0x68>)
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <_sbrk+0x64>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d207      	bcs.n	80012f8 <_sbrk+0x40>
 80012e8:	f004 fafc 	bl	80058e4 <__errno>
 80012ec:	4602      	mov	r2, r0
 80012ee:	230c      	movs	r3, #12
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	e009      	b.n	800130c <_sbrk+0x54>
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <_sbrk+0x64>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	4a05      	ldr	r2, [pc, #20]	; (800131c <_sbrk+0x64>)
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4618      	mov	r0, r3
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20020000 	.word	0x20020000
 8001318:	00000400 	.word	0x00000400
 800131c:	200002ec 	.word	0x200002ec
 8001320:	20004bb8 	.word	0x20004bb8

08001324 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <SystemInit+0x28>)
 800132a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800132e:	4a07      	ldr	r2, [pc, #28]	; (800134c <SystemInit+0x28>)
 8001330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <SystemInit+0x28>)
 800133a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800133e:	609a      	str	r2, [r3, #8]
#endif
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <Reset_Handler>:
 8001350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001388 <LoopFillZerobss+0x14>
 8001354:	2100      	movs	r1, #0
 8001356:	e003      	b.n	8001360 <LoopCopyDataInit>

08001358 <CopyDataInit>:
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <LoopFillZerobss+0x18>)
 800135a:	585b      	ldr	r3, [r3, r1]
 800135c:	5043      	str	r3, [r0, r1]
 800135e:	3104      	adds	r1, #4

08001360 <LoopCopyDataInit>:
 8001360:	480b      	ldr	r0, [pc, #44]	; (8001390 <LoopFillZerobss+0x1c>)
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <LoopFillZerobss+0x20>)
 8001364:	1842      	adds	r2, r0, r1
 8001366:	429a      	cmp	r2, r3
 8001368:	d3f6      	bcc.n	8001358 <CopyDataInit>
 800136a:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <LoopFillZerobss+0x24>)
 800136c:	e002      	b.n	8001374 <LoopFillZerobss>

0800136e <FillZerobss>:
 800136e:	2300      	movs	r3, #0
 8001370:	f842 3b04 	str.w	r3, [r2], #4

08001374 <LoopFillZerobss>:
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <LoopFillZerobss+0x28>)
 8001376:	429a      	cmp	r2, r3
 8001378:	d3f9      	bcc.n	800136e <FillZerobss>
 800137a:	f7ff ffd3 	bl	8001324 <SystemInit>
 800137e:	f004 fab7 	bl	80058f0 <__libc_init_array>
 8001382:	f7ff f917 	bl	80005b4 <main>
 8001386:	4770      	bx	lr
 8001388:	20020000 	.word	0x20020000
 800138c:	08006b54 	.word	0x08006b54
 8001390:	20000000 	.word	0x20000000
 8001394:	20000074 	.word	0x20000074
 8001398:	20000074 	.word	0x20000074
 800139c:	20004bb4 	.word	0x20004bb4

080013a0 <ADC_IRQHandler>:
 80013a0:	e7fe      	b.n	80013a0 <ADC_IRQHandler>
	...

080013a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <HAL_Init+0x40>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0d      	ldr	r2, [pc, #52]	; (80013e4 <HAL_Init+0x40>)
 80013ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <HAL_Init+0x40>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <HAL_Init+0x40>)
 80013ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_Init+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_Init+0x40>)
 80013c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f000 fba1 	bl	8001b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d2:	200f      	movs	r0, #15
 80013d4:	f000 f808 	bl	80013e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d8:	f7ff fd4c 	bl	8000e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023c00 	.word	0x40023c00

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_InitTick+0x54>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x58>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f000 fbab 	bl	8001b62 <HAL_SYSTICK_Config>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e00e      	b.n	8001434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	d80a      	bhi.n	8001432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141c:	2200      	movs	r2, #0
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f000 fb81 	bl	8001b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <HAL_InitTick+0x5c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	e000      	b.n	8001434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000000 	.word	0x20000000
 8001440:	20000008 	.word	0x20000008
 8001444:	20000004 	.word	0x20000004

08001448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_IncTick+0x20>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_IncTick+0x24>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <HAL_IncTick+0x24>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000008 	.word	0x20000008
 800146c:	20004ba8 	.word	0x20004ba8

08001470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return uwTick;
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <HAL_GetTick+0x14>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20004ba8 	.word	0x20004ba8

08001488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff ffee 	bl	8001470 <HAL_GetTick>
 8001494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a0:	d005      	beq.n	80014ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_Delay+0x40>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ae:	bf00      	nop
 80014b0:	f7ff ffde 	bl	8001470 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d8f7      	bhi.n	80014b0 <HAL_Delay+0x28>
  {
  }
}
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000008 	.word	0x20000008

080014cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e033      	b.n	800154a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d109      	bne.n	80014fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff fcee 	bl	8000ecc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f003 0310 	and.w	r3, r3, #16
 8001506:	2b00      	cmp	r3, #0
 8001508:	d118      	bne.n	800153c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001512:	f023 0302 	bic.w	r3, r3, #2
 8001516:	f043 0202 	orr.w	r2, r3, #2
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 f94a 	bl	80017b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f023 0303 	bic.w	r3, r3, #3
 8001532:	f043 0201 	orr.w	r2, r3, #1
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	641a      	str	r2, [r3, #64]	; 0x40
 800153a:	e001      	b.n	8001540 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001548:	7bfb      	ldrb	r3, [r7, #15]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x1c>
 800156c:	2302      	movs	r3, #2
 800156e:	e113      	b.n	8001798 <HAL_ADC_ConfigChannel+0x244>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b09      	cmp	r3, #9
 800157e:	d925      	bls.n	80015cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68d9      	ldr	r1, [r3, #12]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	b29b      	uxth	r3, r3
 800158c:	461a      	mov	r2, r3
 800158e:	4613      	mov	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	3b1e      	subs	r3, #30
 8001596:	2207      	movs	r2, #7
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43da      	mvns	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	400a      	ands	r2, r1
 80015a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68d9      	ldr	r1, [r3, #12]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	4603      	mov	r3, r0
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4403      	add	r3, r0
 80015be:	3b1e      	subs	r3, #30
 80015c0:	409a      	lsls	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	e022      	b.n	8001612 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6919      	ldr	r1, [r3, #16]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	2207      	movs	r2, #7
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43da      	mvns	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	400a      	ands	r2, r1
 80015ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6919      	ldr	r1, [r3, #16]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	4618      	mov	r0, r3
 8001602:	4603      	mov	r3, r0
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4403      	add	r3, r0
 8001608:	409a      	lsls	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b06      	cmp	r3, #6
 8001618:	d824      	bhi.n	8001664 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	3b05      	subs	r3, #5
 800162c:	221f      	movs	r2, #31
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	400a      	ands	r2, r1
 800163a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	b29b      	uxth	r3, r3
 8001648:	4618      	mov	r0, r3
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	3b05      	subs	r3, #5
 8001656:	fa00 f203 	lsl.w	r2, r0, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	635a      	str	r2, [r3, #52]	; 0x34
 8001662:	e04c      	b.n	80016fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b0c      	cmp	r3, #12
 800166a:	d824      	bhi.n	80016b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	3b23      	subs	r3, #35	; 0x23
 800167e:	221f      	movs	r2, #31
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43da      	mvns	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	400a      	ands	r2, r1
 800168c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	b29b      	uxth	r3, r3
 800169a:	4618      	mov	r0, r3
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	3b23      	subs	r3, #35	; 0x23
 80016a8:	fa00 f203 	lsl.w	r2, r0, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	631a      	str	r2, [r3, #48]	; 0x30
 80016b4:	e023      	b.n	80016fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	3b41      	subs	r3, #65	; 0x41
 80016c8:	221f      	movs	r2, #31
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43da      	mvns	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	400a      	ands	r2, r1
 80016d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	4618      	mov	r0, r3
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	3b41      	subs	r3, #65	; 0x41
 80016f2:	fa00 f203 	lsl.w	r2, r0, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016fe:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <HAL_ADC_ConfigChannel+0x250>)
 8001700:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a28      	ldr	r2, [pc, #160]	; (80017a8 <HAL_ADC_ConfigChannel+0x254>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d10f      	bne.n	800172c <HAL_ADC_ConfigChannel+0x1d8>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b12      	cmp	r3, #18
 8001712:	d10b      	bne.n	800172c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a1d      	ldr	r2, [pc, #116]	; (80017a8 <HAL_ADC_ConfigChannel+0x254>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d12b      	bne.n	800178e <HAL_ADC_ConfigChannel+0x23a>
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a1c      	ldr	r2, [pc, #112]	; (80017ac <HAL_ADC_ConfigChannel+0x258>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d003      	beq.n	8001748 <HAL_ADC_ConfigChannel+0x1f4>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b11      	cmp	r3, #17
 8001746:	d122      	bne.n	800178e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a11      	ldr	r2, [pc, #68]	; (80017ac <HAL_ADC_ConfigChannel+0x258>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d111      	bne.n	800178e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <HAL_ADC_ConfigChannel+0x25c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a11      	ldr	r2, [pc, #68]	; (80017b4 <HAL_ADC_ConfigChannel+0x260>)
 8001770:	fba2 2303 	umull	r2, r3, r2, r3
 8001774:	0c9a      	lsrs	r2, r3, #18
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001780:	e002      	b.n	8001788 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	3b01      	subs	r3, #1
 8001786:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f9      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	40012300 	.word	0x40012300
 80017a8:	40012000 	.word	0x40012000
 80017ac:	10000012 	.word	0x10000012
 80017b0:	20000000 	.word	0x20000000
 80017b4:	431bde83 	.word	0x431bde83

080017b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017c0:	4b79      	ldr	r3, [pc, #484]	; (80019a8 <ADC_Init+0x1f0>)
 80017c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	431a      	orrs	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6859      	ldr	r1, [r3, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	021a      	lsls	r2, r3, #8
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001810:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6859      	ldr	r1, [r3, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001832:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6899      	ldr	r1, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	4a58      	ldr	r2, [pc, #352]	; (80019ac <ADC_Init+0x1f4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d022      	beq.n	8001896 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800185e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6899      	ldr	r1, [r3, #8]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001880:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6899      	ldr	r1, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	e00f      	b.n	80018b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0202 	bic.w	r2, r2, #2
 80018c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6899      	ldr	r1, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	7e1b      	ldrb	r3, [r3, #24]
 80018d0:	005a      	lsls	r2, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d01b      	beq.n	800191c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001902:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6859      	ldr	r1, [r3, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	3b01      	subs	r3, #1
 8001910:	035a      	lsls	r2, r3, #13
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	e007      	b.n	800192c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800192a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800193a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	3b01      	subs	r3, #1
 8001948:	051a      	lsls	r2, r3, #20
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001960:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6899      	ldr	r1, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800196e:	025a      	lsls	r2, r3, #9
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001986:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6899      	ldr	r1, [r3, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	029a      	lsls	r2, r3, #10
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	609a      	str	r2, [r3, #8]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	40012300 	.word	0x40012300
 80019ac:	0f000001 	.word	0x0f000001

080019b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019cc:	4013      	ands	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e2:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	60d3      	str	r3, [r2, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <__NVIC_GetPriorityGrouping+0x18>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	0a1b      	lsrs	r3, r3, #8
 8001a02:	f003 0307 	and.w	r3, r3, #7
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6039      	str	r1, [r7, #0]
 8001a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	db0a      	blt.n	8001a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	490c      	ldr	r1, [pc, #48]	; (8001a60 <__NVIC_SetPriority+0x4c>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	0112      	lsls	r2, r2, #4
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	440b      	add	r3, r1
 8001a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a3c:	e00a      	b.n	8001a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4908      	ldr	r1, [pc, #32]	; (8001a64 <__NVIC_SetPriority+0x50>)
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	3b04      	subs	r3, #4
 8001a4c:	0112      	lsls	r2, r2, #4
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	440b      	add	r3, r1
 8001a52:	761a      	strb	r2, [r3, #24]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000e100 	.word	0xe000e100
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f1c3 0307 	rsb	r3, r3, #7
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	bf28      	it	cs
 8001a86:	2304      	movcs	r3, #4
 8001a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	2b06      	cmp	r3, #6
 8001a90:	d902      	bls.n	8001a98 <NVIC_EncodePriority+0x30>
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3b03      	subs	r3, #3
 8001a96:	e000      	b.n	8001a9a <NVIC_EncodePriority+0x32>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	401a      	ands	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	43d9      	mvns	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	4313      	orrs	r3, r2
         );
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3724      	adds	r7, #36	; 0x24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae0:	d301      	bcc.n	8001ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00f      	b.n	8001b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <SysTick_Config+0x40>)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aee:	210f      	movs	r1, #15
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f7ff ff8e 	bl	8001a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <SysTick_Config+0x40>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afe:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <SysTick_Config+0x40>)
 8001b00:	2207      	movs	r2, #7
 8001b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	e000e010 	.word	0xe000e010

08001b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ff47 	bl	80019b0 <__NVIC_SetPriorityGrouping>
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b086      	sub	sp, #24
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b3c:	f7ff ff5c 	bl	80019f8 <__NVIC_GetPriorityGrouping>
 8001b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	6978      	ldr	r0, [r7, #20]
 8001b48:	f7ff ff8e 	bl	8001a68 <NVIC_EncodePriority>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff5d 	bl	8001a14 <__NVIC_SetPriority>
}
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ffb0 	bl	8001ad0 <SysTick_Config>
 8001b70:	4603      	mov	r3, r0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b089      	sub	sp, #36	; 0x24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
 8001b96:	e159      	b.n	8001e4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b98:	2201      	movs	r2, #1
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	f040 8148 	bne.w	8001e46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d00b      	beq.n	8001bd6 <HAL_GPIO_Init+0x5a>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d007      	beq.n	8001bd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bca:	2b11      	cmp	r3, #17
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b12      	cmp	r3, #18
 8001bd4:	d130      	bne.n	8001c38 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	2203      	movs	r2, #3
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	091b      	lsrs	r3, r3, #4
 8001c22:	f003 0201 	and.w	r2, r3, #1
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	2203      	movs	r2, #3
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0xfc>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b12      	cmp	r3, #18
 8001c76:	d123      	bne.n	8001cc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	08da      	lsrs	r2, r3, #3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3208      	adds	r2, #8
 8001c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	220f      	movs	r2, #15
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	08da      	lsrs	r2, r3, #3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3208      	adds	r2, #8
 8001cba:	69b9      	ldr	r1, [r7, #24]
 8001cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	2203      	movs	r2, #3
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0203 	and.w	r2, r3, #3
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80a2 	beq.w	8001e46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	4b56      	ldr	r3, [pc, #344]	; (8001e60 <HAL_GPIO_Init+0x2e4>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	4a55      	ldr	r2, [pc, #340]	; (8001e60 <HAL_GPIO_Init+0x2e4>)
 8001d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d10:	6453      	str	r3, [r2, #68]	; 0x44
 8001d12:	4b53      	ldr	r3, [pc, #332]	; (8001e60 <HAL_GPIO_Init+0x2e4>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d1e:	4a51      	ldr	r2, [pc, #324]	; (8001e64 <HAL_GPIO_Init+0x2e8>)
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	089b      	lsrs	r3, r3, #2
 8001d24:	3302      	adds	r3, #2
 8001d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	220f      	movs	r2, #15
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a48      	ldr	r2, [pc, #288]	; (8001e68 <HAL_GPIO_Init+0x2ec>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d019      	beq.n	8001d7e <HAL_GPIO_Init+0x202>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a47      	ldr	r2, [pc, #284]	; (8001e6c <HAL_GPIO_Init+0x2f0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <HAL_GPIO_Init+0x1fe>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a46      	ldr	r2, [pc, #280]	; (8001e70 <HAL_GPIO_Init+0x2f4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00d      	beq.n	8001d76 <HAL_GPIO_Init+0x1fa>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a45      	ldr	r2, [pc, #276]	; (8001e74 <HAL_GPIO_Init+0x2f8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d007      	beq.n	8001d72 <HAL_GPIO_Init+0x1f6>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a44      	ldr	r2, [pc, #272]	; (8001e78 <HAL_GPIO_Init+0x2fc>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d101      	bne.n	8001d6e <HAL_GPIO_Init+0x1f2>
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	e008      	b.n	8001d80 <HAL_GPIO_Init+0x204>
 8001d6e:	2307      	movs	r3, #7
 8001d70:	e006      	b.n	8001d80 <HAL_GPIO_Init+0x204>
 8001d72:	2303      	movs	r3, #3
 8001d74:	e004      	b.n	8001d80 <HAL_GPIO_Init+0x204>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e002      	b.n	8001d80 <HAL_GPIO_Init+0x204>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_GPIO_Init+0x204>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	69fa      	ldr	r2, [r7, #28]
 8001d82:	f002 0203 	and.w	r2, r2, #3
 8001d86:	0092      	lsls	r2, r2, #2
 8001d88:	4093      	lsls	r3, r2
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d90:	4934      	ldr	r1, [pc, #208]	; (8001e64 <HAL_GPIO_Init+0x2e8>)
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	3302      	adds	r3, #2
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d9e:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <HAL_GPIO_Init+0x300>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dc2:	4a2e      	ldr	r2, [pc, #184]	; (8001e7c <HAL_GPIO_Init+0x300>)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dc8:	4b2c      	ldr	r3, [pc, #176]	; (8001e7c <HAL_GPIO_Init+0x300>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dec:	4a23      	ldr	r2, [pc, #140]	; (8001e7c <HAL_GPIO_Init+0x300>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001df2:	4b22      	ldr	r3, [pc, #136]	; (8001e7c <HAL_GPIO_Init+0x300>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e16:	4a19      	ldr	r2, [pc, #100]	; (8001e7c <HAL_GPIO_Init+0x300>)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e1c:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <HAL_GPIO_Init+0x300>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e40:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <HAL_GPIO_Init+0x300>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	2b0f      	cmp	r3, #15
 8001e50:	f67f aea2 	bls.w	8001b98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e54:	bf00      	nop
 8001e56:	3724      	adds	r7, #36	; 0x24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40013800 	.word	0x40013800
 8001e68:	40020000 	.word	0x40020000
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	40020800 	.word	0x40020800
 8001e74:	40020c00 	.word	0x40020c00
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40013c00 	.word	0x40013c00

08001e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	807b      	strh	r3, [r7, #2]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e90:	787b      	ldrb	r3, [r7, #1]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e96:	887a      	ldrh	r2, [r7, #2]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e9c:	e003      	b.n	8001ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e9e:	887b      	ldrh	r3, [r7, #2]
 8001ea0:	041a      	lsls	r2, r3, #16
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	619a      	str	r2, [r3, #24]
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e25b      	b.n	800237e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d075      	beq.n	8001fbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ed2:	4ba3      	ldr	r3, [pc, #652]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d00c      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ede:	4ba0      	ldr	r3, [pc, #640]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	d112      	bne.n	8001f10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eea:	4b9d      	ldr	r3, [pc, #628]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ef6:	d10b      	bne.n	8001f10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef8:	4b99      	ldr	r3, [pc, #612]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d05b      	beq.n	8001fbc <HAL_RCC_OscConfig+0x108>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d157      	bne.n	8001fbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e236      	b.n	800237e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f18:	d106      	bne.n	8001f28 <HAL_RCC_OscConfig+0x74>
 8001f1a:	4b91      	ldr	r3, [pc, #580]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a90      	ldr	r2, [pc, #576]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	e01d      	b.n	8001f64 <HAL_RCC_OscConfig+0xb0>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x98>
 8001f32:	4b8b      	ldr	r3, [pc, #556]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a8a      	ldr	r2, [pc, #552]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	4b88      	ldr	r3, [pc, #544]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a87      	ldr	r2, [pc, #540]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8001f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	e00b      	b.n	8001f64 <HAL_RCC_OscConfig+0xb0>
 8001f4c:	4b84      	ldr	r3, [pc, #528]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a83      	ldr	r2, [pc, #524]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8001f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	4b81      	ldr	r3, [pc, #516]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a80      	ldr	r2, [pc, #512]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8001f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d013      	beq.n	8001f94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6c:	f7ff fa80 	bl	8001470 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f74:	f7ff fa7c 	bl	8001470 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b64      	cmp	r3, #100	; 0x64
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e1fb      	b.n	800237e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f86:	4b76      	ldr	r3, [pc, #472]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0xc0>
 8001f92:	e014      	b.n	8001fbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7ff fa6c 	bl	8001470 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f9c:	f7ff fa68 	bl	8001470 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	; 0x64
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e1e7      	b.n	800237e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fae:	4b6c      	ldr	r3, [pc, #432]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0xe8>
 8001fba:	e000      	b.n	8001fbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d063      	beq.n	8002092 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fca:	4b65      	ldr	r3, [pc, #404]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00b      	beq.n	8001fee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fd6:	4b62      	ldr	r3, [pc, #392]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d11c      	bne.n	800201c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fe2:	4b5f      	ldr	r3, [pc, #380]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d116      	bne.n	800201c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fee:	4b5c      	ldr	r3, [pc, #368]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d005      	beq.n	8002006 <HAL_RCC_OscConfig+0x152>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d001      	beq.n	8002006 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e1bb      	b.n	800237e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002006:	4b56      	ldr	r3, [pc, #344]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4952      	ldr	r1, [pc, #328]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201a:	e03a      	b.n	8002092 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d020      	beq.n	8002066 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002024:	4b4f      	ldr	r3, [pc, #316]	; (8002164 <HAL_RCC_OscConfig+0x2b0>)
 8002026:	2201      	movs	r2, #1
 8002028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202a:	f7ff fa21 	bl	8001470 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002032:	f7ff fa1d 	bl	8001470 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e19c      	b.n	800237e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002044:	4b46      	ldr	r3, [pc, #280]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0f0      	beq.n	8002032 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002050:	4b43      	ldr	r3, [pc, #268]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4940      	ldr	r1, [pc, #256]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8002060:	4313      	orrs	r3, r2
 8002062:	600b      	str	r3, [r1, #0]
 8002064:	e015      	b.n	8002092 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002066:	4b3f      	ldr	r3, [pc, #252]	; (8002164 <HAL_RCC_OscConfig+0x2b0>)
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206c:	f7ff fa00 	bl	8001470 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002074:	f7ff f9fc 	bl	8001470 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e17b      	b.n	800237e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002086:	4b36      	ldr	r3, [pc, #216]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d030      	beq.n	8002100 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d016      	beq.n	80020d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020a6:	4b30      	ldr	r3, [pc, #192]	; (8002168 <HAL_RCC_OscConfig+0x2b4>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ac:	f7ff f9e0 	bl	8001470 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b4:	f7ff f9dc 	bl	8001470 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e15b      	b.n	800237e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c6:	4b26      	ldr	r3, [pc, #152]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 80020c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0x200>
 80020d2:	e015      	b.n	8002100 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d4:	4b24      	ldr	r3, [pc, #144]	; (8002168 <HAL_RCC_OscConfig+0x2b4>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020da:	f7ff f9c9 	bl	8001470 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020e2:	f7ff f9c5 	bl	8001470 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e144      	b.n	800237e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f4:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 80020f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f0      	bne.n	80020e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80a0 	beq.w	800224e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002112:	4b13      	ldr	r3, [pc, #76]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10f      	bne.n	800213e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212c:	6413      	str	r3, [r2, #64]	; 0x40
 800212e:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <HAL_RCC_OscConfig+0x2ac>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800213a:	2301      	movs	r3, #1
 800213c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_RCC_OscConfig+0x2b8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d121      	bne.n	800218e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800214a:	4b08      	ldr	r3, [pc, #32]	; (800216c <HAL_RCC_OscConfig+0x2b8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a07      	ldr	r2, [pc, #28]	; (800216c <HAL_RCC_OscConfig+0x2b8>)
 8002150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002156:	f7ff f98b 	bl	8001470 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215c:	e011      	b.n	8002182 <HAL_RCC_OscConfig+0x2ce>
 800215e:	bf00      	nop
 8002160:	40023800 	.word	0x40023800
 8002164:	42470000 	.word	0x42470000
 8002168:	42470e80 	.word	0x42470e80
 800216c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002170:	f7ff f97e 	bl	8001470 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e0fd      	b.n	800237e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002182:	4b81      	ldr	r3, [pc, #516]	; (8002388 <HAL_RCC_OscConfig+0x4d4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d106      	bne.n	80021a4 <HAL_RCC_OscConfig+0x2f0>
 8002196:	4b7d      	ldr	r3, [pc, #500]	; (800238c <HAL_RCC_OscConfig+0x4d8>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219a:	4a7c      	ldr	r2, [pc, #496]	; (800238c <HAL_RCC_OscConfig+0x4d8>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6713      	str	r3, [r2, #112]	; 0x70
 80021a2:	e01c      	b.n	80021de <HAL_RCC_OscConfig+0x32a>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b05      	cmp	r3, #5
 80021aa:	d10c      	bne.n	80021c6 <HAL_RCC_OscConfig+0x312>
 80021ac:	4b77      	ldr	r3, [pc, #476]	; (800238c <HAL_RCC_OscConfig+0x4d8>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b0:	4a76      	ldr	r2, [pc, #472]	; (800238c <HAL_RCC_OscConfig+0x4d8>)
 80021b2:	f043 0304 	orr.w	r3, r3, #4
 80021b6:	6713      	str	r3, [r2, #112]	; 0x70
 80021b8:	4b74      	ldr	r3, [pc, #464]	; (800238c <HAL_RCC_OscConfig+0x4d8>)
 80021ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021bc:	4a73      	ldr	r2, [pc, #460]	; (800238c <HAL_RCC_OscConfig+0x4d8>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6713      	str	r3, [r2, #112]	; 0x70
 80021c4:	e00b      	b.n	80021de <HAL_RCC_OscConfig+0x32a>
 80021c6:	4b71      	ldr	r3, [pc, #452]	; (800238c <HAL_RCC_OscConfig+0x4d8>)
 80021c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ca:	4a70      	ldr	r2, [pc, #448]	; (800238c <HAL_RCC_OscConfig+0x4d8>)
 80021cc:	f023 0301 	bic.w	r3, r3, #1
 80021d0:	6713      	str	r3, [r2, #112]	; 0x70
 80021d2:	4b6e      	ldr	r3, [pc, #440]	; (800238c <HAL_RCC_OscConfig+0x4d8>)
 80021d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d6:	4a6d      	ldr	r2, [pc, #436]	; (800238c <HAL_RCC_OscConfig+0x4d8>)
 80021d8:	f023 0304 	bic.w	r3, r3, #4
 80021dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d015      	beq.n	8002212 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e6:	f7ff f943 	bl	8001470 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ec:	e00a      	b.n	8002204 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ee:	f7ff f93f 	bl	8001470 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e0bc      	b.n	800237e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002204:	4b61      	ldr	r3, [pc, #388]	; (800238c <HAL_RCC_OscConfig+0x4d8>)
 8002206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0ee      	beq.n	80021ee <HAL_RCC_OscConfig+0x33a>
 8002210:	e014      	b.n	800223c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002212:	f7ff f92d 	bl	8001470 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002218:	e00a      	b.n	8002230 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800221a:	f7ff f929 	bl	8001470 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f241 3288 	movw	r2, #5000	; 0x1388
 8002228:	4293      	cmp	r3, r2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e0a6      	b.n	800237e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002230:	4b56      	ldr	r3, [pc, #344]	; (800238c <HAL_RCC_OscConfig+0x4d8>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1ee      	bne.n	800221a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800223c:	7dfb      	ldrb	r3, [r7, #23]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d105      	bne.n	800224e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002242:	4b52      	ldr	r3, [pc, #328]	; (800238c <HAL_RCC_OscConfig+0x4d8>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	4a51      	ldr	r2, [pc, #324]	; (800238c <HAL_RCC_OscConfig+0x4d8>)
 8002248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800224c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 8092 	beq.w	800237c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002258:	4b4c      	ldr	r3, [pc, #304]	; (800238c <HAL_RCC_OscConfig+0x4d8>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 030c 	and.w	r3, r3, #12
 8002260:	2b08      	cmp	r3, #8
 8002262:	d05c      	beq.n	800231e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d141      	bne.n	80022f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226c:	4b48      	ldr	r3, [pc, #288]	; (8002390 <HAL_RCC_OscConfig+0x4dc>)
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002272:	f7ff f8fd 	bl	8001470 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800227a:	f7ff f8f9 	bl	8001470 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e078      	b.n	800237e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228c:	4b3f      	ldr	r3, [pc, #252]	; (800238c <HAL_RCC_OscConfig+0x4d8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1f0      	bne.n	800227a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69da      	ldr	r2, [r3, #28]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	019b      	lsls	r3, r3, #6
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ae:	085b      	lsrs	r3, r3, #1
 80022b0:	3b01      	subs	r3, #1
 80022b2:	041b      	lsls	r3, r3, #16
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	061b      	lsls	r3, r3, #24
 80022bc:	4933      	ldr	r1, [pc, #204]	; (800238c <HAL_RCC_OscConfig+0x4d8>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c2:	4b33      	ldr	r3, [pc, #204]	; (8002390 <HAL_RCC_OscConfig+0x4dc>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7ff f8d2 	bl	8001470 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d0:	f7ff f8ce 	bl	8001470 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e04d      	b.n	800237e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e2:	4b2a      	ldr	r3, [pc, #168]	; (800238c <HAL_RCC_OscConfig+0x4d8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x41c>
 80022ee:	e045      	b.n	800237c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f0:	4b27      	ldr	r3, [pc, #156]	; (8002390 <HAL_RCC_OscConfig+0x4dc>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f6:	f7ff f8bb 	bl	8001470 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fe:	f7ff f8b7 	bl	8001470 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e036      	b.n	800237e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002310:	4b1e      	ldr	r3, [pc, #120]	; (800238c <HAL_RCC_OscConfig+0x4d8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f0      	bne.n	80022fe <HAL_RCC_OscConfig+0x44a>
 800231c:	e02e      	b.n	800237c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e029      	b.n	800237e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800232a:	4b18      	ldr	r3, [pc, #96]	; (800238c <HAL_RCC_OscConfig+0x4d8>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	429a      	cmp	r2, r3
 800233c:	d11c      	bne.n	8002378 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d115      	bne.n	8002378 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002352:	4013      	ands	r3, r2
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002358:	4293      	cmp	r3, r2
 800235a:	d10d      	bne.n	8002378 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002366:	429a      	cmp	r2, r3
 8002368:	d106      	bne.n	8002378 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40007000 	.word	0x40007000
 800238c:	40023800 	.word	0x40023800
 8002390:	42470060 	.word	0x42470060

08002394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0cc      	b.n	8002542 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a8:	4b68      	ldr	r3, [pc, #416]	; (800254c <HAL_RCC_ClockConfig+0x1b8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d90c      	bls.n	80023d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b6:	4b65      	ldr	r3, [pc, #404]	; (800254c <HAL_RCC_ClockConfig+0x1b8>)
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023be:	4b63      	ldr	r3, [pc, #396]	; (800254c <HAL_RCC_ClockConfig+0x1b8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d001      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0b8      	b.n	8002542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d020      	beq.n	800241e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e8:	4b59      	ldr	r3, [pc, #356]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	4a58      	ldr	r2, [pc, #352]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002400:	4b53      	ldr	r3, [pc, #332]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	4a52      	ldr	r2, [pc, #328]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800240a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800240c:	4b50      	ldr	r3, [pc, #320]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	494d      	ldr	r1, [pc, #308]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	4313      	orrs	r3, r2
 800241c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d044      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d107      	bne.n	8002442 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002432:	4b47      	ldr	r3, [pc, #284]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d119      	bne.n	8002472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e07f      	b.n	8002542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d003      	beq.n	8002452 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800244e:	2b03      	cmp	r3, #3
 8002450:	d107      	bne.n	8002462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002452:	4b3f      	ldr	r3, [pc, #252]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d109      	bne.n	8002472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e06f      	b.n	8002542 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002462:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e067      	b.n	8002542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002472:	4b37      	ldr	r3, [pc, #220]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f023 0203 	bic.w	r2, r3, #3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	4934      	ldr	r1, [pc, #208]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	4313      	orrs	r3, r2
 8002482:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002484:	f7fe fff4 	bl	8001470 <HAL_GetTick>
 8002488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248a:	e00a      	b.n	80024a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248c:	f7fe fff0 	bl	8001470 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	f241 3288 	movw	r2, #5000	; 0x1388
 800249a:	4293      	cmp	r3, r2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e04f      	b.n	8002542 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a2:	4b2b      	ldr	r3, [pc, #172]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 020c 	and.w	r2, r3, #12
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d1eb      	bne.n	800248c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b4:	4b25      	ldr	r3, [pc, #148]	; (800254c <HAL_RCC_ClockConfig+0x1b8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 030f 	and.w	r3, r3, #15
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d20c      	bcs.n	80024dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c2:	4b22      	ldr	r3, [pc, #136]	; (800254c <HAL_RCC_ClockConfig+0x1b8>)
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ca:	4b20      	ldr	r3, [pc, #128]	; (800254c <HAL_RCC_ClockConfig+0x1b8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d001      	beq.n	80024dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e032      	b.n	8002542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4916      	ldr	r1, [pc, #88]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d009      	beq.n	800251a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	490e      	ldr	r1, [pc, #56]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	4313      	orrs	r3, r2
 8002518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800251a:	f000 f821 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 800251e:	4601      	mov	r1, r0
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	091b      	lsrs	r3, r3, #4
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <HAL_RCC_ClockConfig+0x1c0>)
 800252c:	5cd3      	ldrb	r3, [r2, r3]
 800252e:	fa21 f303 	lsr.w	r3, r1, r3
 8002532:	4a09      	ldr	r2, [pc, #36]	; (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <HAL_RCC_ClockConfig+0x1c8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe ff54 	bl	80013e8 <HAL_InitTick>

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40023c00 	.word	0x40023c00
 8002550:	40023800 	.word	0x40023800
 8002554:	08006a94 	.word	0x08006a94
 8002558:	20000000 	.word	0x20000000
 800255c:	20000004 	.word	0x20000004

08002560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	607b      	str	r3, [r7, #4]
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	2300      	movs	r3, #0
 8002570:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002576:	4b63      	ldr	r3, [pc, #396]	; (8002704 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b04      	cmp	r3, #4
 8002580:	d007      	beq.n	8002592 <HAL_RCC_GetSysClockFreq+0x32>
 8002582:	2b08      	cmp	r3, #8
 8002584:	d008      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x38>
 8002586:	2b00      	cmp	r3, #0
 8002588:	f040 80b4 	bne.w	80026f4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800258c:	4b5e      	ldr	r3, [pc, #376]	; (8002708 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800258e:	60bb      	str	r3, [r7, #8]
       break;
 8002590:	e0b3      	b.n	80026fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002592:	4b5e      	ldr	r3, [pc, #376]	; (800270c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002594:	60bb      	str	r3, [r7, #8]
      break;
 8002596:	e0b0      	b.n	80026fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002598:	4b5a      	ldr	r3, [pc, #360]	; (8002704 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025a2:	4b58      	ldr	r3, [pc, #352]	; (8002704 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d04a      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ae:	4b55      	ldr	r3, [pc, #340]	; (8002704 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	099b      	lsrs	r3, r3, #6
 80025b4:	f04f 0400 	mov.w	r4, #0
 80025b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	ea03 0501 	and.w	r5, r3, r1
 80025c4:	ea04 0602 	and.w	r6, r4, r2
 80025c8:	4629      	mov	r1, r5
 80025ca:	4632      	mov	r2, r6
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	f04f 0400 	mov.w	r4, #0
 80025d4:	0154      	lsls	r4, r2, #5
 80025d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025da:	014b      	lsls	r3, r1, #5
 80025dc:	4619      	mov	r1, r3
 80025de:	4622      	mov	r2, r4
 80025e0:	1b49      	subs	r1, r1, r5
 80025e2:	eb62 0206 	sbc.w	r2, r2, r6
 80025e6:	f04f 0300 	mov.w	r3, #0
 80025ea:	f04f 0400 	mov.w	r4, #0
 80025ee:	0194      	lsls	r4, r2, #6
 80025f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025f4:	018b      	lsls	r3, r1, #6
 80025f6:	1a5b      	subs	r3, r3, r1
 80025f8:	eb64 0402 	sbc.w	r4, r4, r2
 80025fc:	f04f 0100 	mov.w	r1, #0
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	00e2      	lsls	r2, r4, #3
 8002606:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800260a:	00d9      	lsls	r1, r3, #3
 800260c:	460b      	mov	r3, r1
 800260e:	4614      	mov	r4, r2
 8002610:	195b      	adds	r3, r3, r5
 8002612:	eb44 0406 	adc.w	r4, r4, r6
 8002616:	f04f 0100 	mov.w	r1, #0
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	0262      	lsls	r2, r4, #9
 8002620:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002624:	0259      	lsls	r1, r3, #9
 8002626:	460b      	mov	r3, r1
 8002628:	4614      	mov	r4, r2
 800262a:	4618      	mov	r0, r3
 800262c:	4621      	mov	r1, r4
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f04f 0400 	mov.w	r4, #0
 8002634:	461a      	mov	r2, r3
 8002636:	4623      	mov	r3, r4
 8002638:	f7fd fe22 	bl	8000280 <__aeabi_uldivmod>
 800263c:	4603      	mov	r3, r0
 800263e:	460c      	mov	r4, r1
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	e049      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002644:	4b2f      	ldr	r3, [pc, #188]	; (8002704 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	099b      	lsrs	r3, r3, #6
 800264a:	f04f 0400 	mov.w	r4, #0
 800264e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	ea03 0501 	and.w	r5, r3, r1
 800265a:	ea04 0602 	and.w	r6, r4, r2
 800265e:	4629      	mov	r1, r5
 8002660:	4632      	mov	r2, r6
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	f04f 0400 	mov.w	r4, #0
 800266a:	0154      	lsls	r4, r2, #5
 800266c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002670:	014b      	lsls	r3, r1, #5
 8002672:	4619      	mov	r1, r3
 8002674:	4622      	mov	r2, r4
 8002676:	1b49      	subs	r1, r1, r5
 8002678:	eb62 0206 	sbc.w	r2, r2, r6
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	f04f 0400 	mov.w	r4, #0
 8002684:	0194      	lsls	r4, r2, #6
 8002686:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800268a:	018b      	lsls	r3, r1, #6
 800268c:	1a5b      	subs	r3, r3, r1
 800268e:	eb64 0402 	sbc.w	r4, r4, r2
 8002692:	f04f 0100 	mov.w	r1, #0
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	00e2      	lsls	r2, r4, #3
 800269c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026a0:	00d9      	lsls	r1, r3, #3
 80026a2:	460b      	mov	r3, r1
 80026a4:	4614      	mov	r4, r2
 80026a6:	195b      	adds	r3, r3, r5
 80026a8:	eb44 0406 	adc.w	r4, r4, r6
 80026ac:	f04f 0100 	mov.w	r1, #0
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	02a2      	lsls	r2, r4, #10
 80026b6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80026ba:	0299      	lsls	r1, r3, #10
 80026bc:	460b      	mov	r3, r1
 80026be:	4614      	mov	r4, r2
 80026c0:	4618      	mov	r0, r3
 80026c2:	4621      	mov	r1, r4
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f04f 0400 	mov.w	r4, #0
 80026ca:	461a      	mov	r2, r3
 80026cc:	4623      	mov	r3, r4
 80026ce:	f7fd fdd7 	bl	8000280 <__aeabi_uldivmod>
 80026d2:	4603      	mov	r3, r0
 80026d4:	460c      	mov	r4, r1
 80026d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026d8:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	0c1b      	lsrs	r3, r3, #16
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	3301      	adds	r3, #1
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f0:	60bb      	str	r3, [r7, #8]
      break;
 80026f2:	e002      	b.n	80026fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80026f6:	60bb      	str	r3, [r7, #8]
      break;
 80026f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026fa:	68bb      	ldr	r3, [r7, #8]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	40023800 	.word	0x40023800
 8002708:	00f42400 	.word	0x00f42400
 800270c:	007a1200 	.word	0x007a1200

08002710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002714:	4b03      	ldr	r3, [pc, #12]	; (8002724 <HAL_RCC_GetHCLKFreq+0x14>)
 8002716:	681b      	ldr	r3, [r3, #0]
}
 8002718:	4618      	mov	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	20000000 	.word	0x20000000

08002728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800272c:	f7ff fff0 	bl	8002710 <HAL_RCC_GetHCLKFreq>
 8002730:	4601      	mov	r1, r0
 8002732:	4b05      	ldr	r3, [pc, #20]	; (8002748 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	0a9b      	lsrs	r3, r3, #10
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	4a03      	ldr	r2, [pc, #12]	; (800274c <HAL_RCC_GetPCLK1Freq+0x24>)
 800273e:	5cd3      	ldrb	r3, [r2, r3]
 8002740:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002744:	4618      	mov	r0, r3
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40023800 	.word	0x40023800
 800274c:	08006aa4 	.word	0x08006aa4

08002750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002754:	f7ff ffdc 	bl	8002710 <HAL_RCC_GetHCLKFreq>
 8002758:	4601      	mov	r1, r0
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_RCC_GetPCLK2Freq+0x20>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	0b5b      	lsrs	r3, r3, #13
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	4a03      	ldr	r2, [pc, #12]	; (8002774 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002766:	5cd3      	ldrb	r3, [r2, r3]
 8002768:	fa21 f303 	lsr.w	r3, r1, r3
}
 800276c:	4618      	mov	r0, r3
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40023800 	.word	0x40023800
 8002774:	08006aa4 	.word	0x08006aa4

08002778 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e056      	b.n	8002838 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d106      	bne.n	80027aa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7fe fbd5 	bl	8000f54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2202      	movs	r2, #2
 80027ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027c0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	ea42 0103 	orr.w	r1, r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	0c1b      	lsrs	r3, r3, #16
 8002808:	f003 0104 	and.w	r1, r3, #4
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	69da      	ldr	r2, [r3, #28]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002826:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	4613      	mov	r3, r2
 800284e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800285a:	2b01      	cmp	r3, #1
 800285c:	d101      	bne.n	8002862 <HAL_SPI_Transmit+0x22>
 800285e:	2302      	movs	r3, #2
 8002860:	e11e      	b.n	8002aa0 <HAL_SPI_Transmit+0x260>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800286a:	f7fe fe01 	bl	8001470 <HAL_GetTick>
 800286e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002870:	88fb      	ldrh	r3, [r7, #6]
 8002872:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b01      	cmp	r3, #1
 800287e:	d002      	beq.n	8002886 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002880:	2302      	movs	r3, #2
 8002882:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002884:	e103      	b.n	8002a8e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <HAL_SPI_Transmit+0x52>
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d102      	bne.n	8002898 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002896:	e0fa      	b.n	8002a8e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2203      	movs	r2, #3
 800289c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	88fa      	ldrh	r2, [r7, #6]
 80028b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	88fa      	ldrh	r2, [r7, #6]
 80028b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028de:	d107      	bne.n	80028f0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fa:	2b40      	cmp	r3, #64	; 0x40
 80028fc:	d007      	beq.n	800290e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800290c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002916:	d14b      	bne.n	80029b0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <HAL_SPI_Transmit+0xe6>
 8002920:	8afb      	ldrh	r3, [r7, #22]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d13e      	bne.n	80029a4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	881a      	ldrh	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	1c9a      	adds	r2, r3, #2
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002940:	b29b      	uxth	r3, r3
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800294a:	e02b      	b.n	80029a4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b02      	cmp	r3, #2
 8002958:	d112      	bne.n	8002980 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	881a      	ldrh	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	1c9a      	adds	r2, r3, #2
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002974:	b29b      	uxth	r3, r3
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	86da      	strh	r2, [r3, #54]	; 0x36
 800297e:	e011      	b.n	80029a4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002980:	f7fe fd76 	bl	8001470 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d803      	bhi.n	8002998 <HAL_SPI_Transmit+0x158>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002996:	d102      	bne.n	800299e <HAL_SPI_Transmit+0x15e>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d102      	bne.n	80029a4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029a2:	e074      	b.n	8002a8e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1ce      	bne.n	800294c <HAL_SPI_Transmit+0x10c>
 80029ae:	e04c      	b.n	8002a4a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <HAL_SPI_Transmit+0x17e>
 80029b8:	8afb      	ldrh	r3, [r7, #22]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d140      	bne.n	8002a40 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	330c      	adds	r3, #12
 80029c8:	7812      	ldrb	r2, [r2, #0]
 80029ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029da:	b29b      	uxth	r3, r3
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80029e4:	e02c      	b.n	8002a40 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d113      	bne.n	8002a1c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	330c      	adds	r3, #12
 80029fe:	7812      	ldrb	r2, [r2, #0]
 8002a00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a1a:	e011      	b.n	8002a40 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a1c:	f7fe fd28 	bl	8001470 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d803      	bhi.n	8002a34 <HAL_SPI_Transmit+0x1f4>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a32:	d102      	bne.n	8002a3a <HAL_SPI_Transmit+0x1fa>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d102      	bne.n	8002a40 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a3e:	e026      	b.n	8002a8e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1cd      	bne.n	80029e6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	6839      	ldr	r1, [r7, #0]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 fba4 	bl	800319c <SPI_EndRxTxTransaction>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10a      	bne.n	8002a7e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a68:	2300      	movs	r3, #0
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	77fb      	strb	r3, [r7, #31]
 8002a8a:	e000      	b.n	8002a8e <HAL_SPI_Transmit+0x24e>
  }

error:
 8002a8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3720      	adds	r7, #32
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ac4:	d112      	bne.n	8002aec <HAL_SPI_Receive+0x44>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10e      	bne.n	8002aec <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2204      	movs	r2, #4
 8002ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ad6:	88fa      	ldrh	r2, [r7, #6]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	4613      	mov	r3, r2
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f8e9 	bl	8002cba <HAL_SPI_TransmitReceive>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	e0e2      	b.n	8002cb2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_SPI_Receive+0x52>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e0db      	b.n	8002cb2 <HAL_SPI_Receive+0x20a>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b02:	f7fe fcb5 	bl	8001470 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d002      	beq.n	8002b1a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002b14:	2302      	movs	r3, #2
 8002b16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b18:	e0c2      	b.n	8002ca0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_SPI_Receive+0x7e>
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d102      	bne.n	8002b2c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b2a:	e0b9      	b.n	8002ca0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2204      	movs	r2, #4
 8002b30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	88fa      	ldrh	r2, [r7, #6]
 8002b44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	88fa      	ldrh	r2, [r7, #6]
 8002b4a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b72:	d107      	bne.n	8002b84 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b82:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8e:	2b40      	cmp	r3, #64	; 0x40
 8002b90:	d007      	beq.n	8002ba2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ba0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d162      	bne.n	8002c70 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002baa:	e02e      	b.n	8002c0a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d115      	bne.n	8002be6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f103 020c 	add.w	r2, r3, #12
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	7812      	ldrb	r2, [r2, #0]
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002be4:	e011      	b.n	8002c0a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002be6:	f7fe fc43 	bl	8001470 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d803      	bhi.n	8002bfe <HAL_SPI_Receive+0x156>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfc:	d102      	bne.n	8002c04 <HAL_SPI_Receive+0x15c>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d102      	bne.n	8002c0a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c08:	e04a      	b.n	8002ca0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1cb      	bne.n	8002bac <HAL_SPI_Receive+0x104>
 8002c14:	e031      	b.n	8002c7a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d113      	bne.n	8002c4c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2e:	b292      	uxth	r2, r2
 8002c30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c36:	1c9a      	adds	r2, r3, #2
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c4a:	e011      	b.n	8002c70 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c4c:	f7fe fc10 	bl	8001470 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d803      	bhi.n	8002c64 <HAL_SPI_Receive+0x1bc>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c62:	d102      	bne.n	8002c6a <HAL_SPI_Receive+0x1c2>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d102      	bne.n	8002c70 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c6e:	e017      	b.n	8002ca0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1cd      	bne.n	8002c16 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	6839      	ldr	r1, [r7, #0]
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 fa27 	bl	80030d2 <SPI_EndRxTransaction>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	75fb      	strb	r3, [r7, #23]
 8002c9c:	e000      	b.n	8002ca0 <HAL_SPI_Receive+0x1f8>
  }

error :
 8002c9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b08c      	sub	sp, #48	; 0x30
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_SPI_TransmitReceive+0x26>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e18a      	b.n	8002ff6 <HAL_SPI_TransmitReceive+0x33c>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ce8:	f7fe fbc2 	bl	8001470 <HAL_GetTick>
 8002cec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002cfe:	887b      	ldrh	r3, [r7, #2]
 8002d00:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d00f      	beq.n	8002d2a <HAL_SPI_TransmitReceive+0x70>
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d10:	d107      	bne.n	8002d22 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d103      	bne.n	8002d22 <HAL_SPI_TransmitReceive+0x68>
 8002d1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d003      	beq.n	8002d2a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002d22:	2302      	movs	r3, #2
 8002d24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d28:	e15b      	b.n	8002fe2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_SPI_TransmitReceive+0x82>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d002      	beq.n	8002d3c <HAL_SPI_TransmitReceive+0x82>
 8002d36:	887b      	ldrh	r3, [r7, #2]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d103      	bne.n	8002d44 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d42:	e14e      	b.n	8002fe2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d003      	beq.n	8002d58 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2205      	movs	r2, #5
 8002d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	887a      	ldrh	r2, [r7, #2]
 8002d68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	887a      	ldrh	r2, [r7, #2]
 8002d6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	887a      	ldrh	r2, [r7, #2]
 8002d7a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	887a      	ldrh	r2, [r7, #2]
 8002d80:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d98:	2b40      	cmp	r3, #64	; 0x40
 8002d9a:	d007      	beq.n	8002dac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002daa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002db4:	d178      	bne.n	8002ea8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <HAL_SPI_TransmitReceive+0x10a>
 8002dbe:	8b7b      	ldrh	r3, [r7, #26]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d166      	bne.n	8002e92 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	881a      	ldrh	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	1c9a      	adds	r2, r3, #2
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002de8:	e053      	b.n	8002e92 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d11b      	bne.n	8002e30 <HAL_SPI_TransmitReceive+0x176>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d016      	beq.n	8002e30 <HAL_SPI_TransmitReceive+0x176>
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d113      	bne.n	8002e30 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	881a      	ldrh	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	1c9a      	adds	r2, r3, #2
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d119      	bne.n	8002e72 <HAL_SPI_TransmitReceive+0x1b8>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d014      	beq.n	8002e72 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	b292      	uxth	r2, r2
 8002e54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	1c9a      	adds	r2, r3, #2
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e72:	f7fe fafd 	bl	8001470 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d807      	bhi.n	8002e92 <HAL_SPI_TransmitReceive+0x1d8>
 8002e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d003      	beq.n	8002e92 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e90:	e0a7      	b.n	8002fe2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1a6      	bne.n	8002dea <HAL_SPI_TransmitReceive+0x130>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1a1      	bne.n	8002dea <HAL_SPI_TransmitReceive+0x130>
 8002ea6:	e07c      	b.n	8002fa2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <HAL_SPI_TransmitReceive+0x1fc>
 8002eb0:	8b7b      	ldrh	r3, [r7, #26]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d16b      	bne.n	8002f8e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	330c      	adds	r3, #12
 8002ec0:	7812      	ldrb	r2, [r2, #0]
 8002ec2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002edc:	e057      	b.n	8002f8e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d11c      	bne.n	8002f26 <HAL_SPI_TransmitReceive+0x26c>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d017      	beq.n	8002f26 <HAL_SPI_TransmitReceive+0x26c>
 8002ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d114      	bne.n	8002f26 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	330c      	adds	r3, #12
 8002f06:	7812      	ldrb	r2, [r2, #0]
 8002f08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d119      	bne.n	8002f68 <HAL_SPI_TransmitReceive+0x2ae>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d014      	beq.n	8002f68 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f64:	2301      	movs	r3, #1
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f68:	f7fe fa82 	bl	8001470 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d803      	bhi.n	8002f80 <HAL_SPI_TransmitReceive+0x2c6>
 8002f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7e:	d102      	bne.n	8002f86 <HAL_SPI_TransmitReceive+0x2cc>
 8002f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d103      	bne.n	8002f8e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f8c:	e029      	b.n	8002fe2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1a2      	bne.n	8002ede <HAL_SPI_TransmitReceive+0x224>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d19d      	bne.n	8002ede <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f8f8 	bl	800319c <SPI_EndRxTxTransaction>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d006      	beq.n	8002fc0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002fbe:	e010      	b.n	8002fe2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	e000      	b.n	8002fe2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002fe0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ff2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3730      	adds	r7, #48	; 0x30
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	603b      	str	r3, [r7, #0]
 800300a:	4613      	mov	r3, r2
 800300c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800300e:	e04c      	b.n	80030aa <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003016:	d048      	beq.n	80030aa <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003018:	f7fe fa2a 	bl	8001470 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d902      	bls.n	800302e <SPI_WaitFlagStateUntilTimeout+0x30>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d13d      	bne.n	80030aa <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800303c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003046:	d111      	bne.n	800306c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003050:	d004      	beq.n	800305c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800305a:	d107      	bne.n	800306c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800306a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003074:	d10f      	bne.n	8003096 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003094:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e00f      	b.n	80030ca <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4013      	ands	r3, r2
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	bf0c      	ite	eq
 80030ba:	2301      	moveq	r3, #1
 80030bc:	2300      	movne	r3, #0
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	461a      	mov	r2, r3
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d1a3      	bne.n	8003010 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b086      	sub	sp, #24
 80030d6:	af02      	add	r7, sp, #8
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e6:	d111      	bne.n	800310c <SPI_EndRxTransaction+0x3a>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f0:	d004      	beq.n	80030fc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030fa:	d107      	bne.n	800310c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800310a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003114:	d12a      	bne.n	800316c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800311e:	d012      	beq.n	8003146 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2200      	movs	r2, #0
 8003128:	2180      	movs	r1, #128	; 0x80
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7ff ff67 	bl	8002ffe <SPI_WaitFlagStateUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d02d      	beq.n	8003192 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313a:	f043 0220 	orr.w	r2, r3, #32
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e026      	b.n	8003194 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2200      	movs	r2, #0
 800314e:	2101      	movs	r1, #1
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f7ff ff54 	bl	8002ffe <SPI_WaitFlagStateUntilTimeout>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01a      	beq.n	8003192 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003160:	f043 0220 	orr.w	r2, r3, #32
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e013      	b.n	8003194 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2200      	movs	r2, #0
 8003174:	2101      	movs	r1, #1
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f7ff ff41 	bl	8002ffe <SPI_WaitFlagStateUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003186:	f043 0220 	orr.w	r2, r3, #32
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e000      	b.n	8003194 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80031a8:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <SPI_EndRxTxTransaction+0x7c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a1b      	ldr	r2, [pc, #108]	; (800321c <SPI_EndRxTxTransaction+0x80>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	0d5b      	lsrs	r3, r3, #21
 80031b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031b8:	fb02 f303 	mul.w	r3, r2, r3
 80031bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031c6:	d112      	bne.n	80031ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2200      	movs	r2, #0
 80031d0:	2180      	movs	r1, #128	; 0x80
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f7ff ff13 	bl	8002ffe <SPI_WaitFlagStateUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d016      	beq.n	800320c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e2:	f043 0220 	orr.w	r2, r3, #32
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e00f      	b.n	800320e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003204:	2b80      	cmp	r3, #128	; 0x80
 8003206:	d0f2      	beq.n	80031ee <SPI_EndRxTxTransaction+0x52>
 8003208:	e000      	b.n	800320c <SPI_EndRxTxTransaction+0x70>
        break;
 800320a:	bf00      	nop
  }

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20000000 	.word	0x20000000
 800321c:	165e9f81 	.word	0x165e9f81

08003220 <HAL_UART_Init>:
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_UART_Init+0x12>
 800322e:	2301      	movs	r3, #1
 8003230:	e03f      	b.n	80032b2 <HAL_UART_Init+0x92>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d106      	bne.n	800324c <HAL_UART_Init+0x2c>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fd ff76 	bl	8001138 <HAL_UART_MspInit>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2224      	movs	r2, #36	; 0x24
 8003250:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003262:	60da      	str	r2, [r3, #12]
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f9b1 	bl	80035cc <UART_SetConfig>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003278:	611a      	str	r2, [r3, #16]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695a      	ldr	r2, [r3, #20]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003288:	615a      	str	r2, [r3, #20]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	63da      	str	r2, [r3, #60]	; 0x3c
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80032b0:	2300      	movs	r3, #0
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_UART_Transmit>:
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b088      	sub	sp, #32
 80032be:	af02      	add	r7, sp, #8
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	603b      	str	r3, [r7, #0]
 80032c6:	4613      	mov	r3, r2
 80032c8:	80fb      	strh	r3, [r7, #6]
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	f040 8083 	bne.w	80033e2 <HAL_UART_Transmit+0x128>
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_UART_Transmit+0x2e>
 80032e2:	88fb      	ldrh	r3, [r7, #6]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_UART_Transmit+0x32>
 80032e8:	2301      	movs	r3, #1
 80032ea:	e07b      	b.n	80033e4 <HAL_UART_Transmit+0x12a>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_UART_Transmit+0x40>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e074      	b.n	80033e4 <HAL_UART_Transmit+0x12a>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	63da      	str	r2, [r3, #60]	; 0x3c
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2221      	movs	r2, #33	; 0x21
 800330c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003310:	f7fe f8ae 	bl	8001470 <HAL_GetTick>
 8003314:	6178      	str	r0, [r7, #20]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	88fa      	ldrh	r2, [r7, #6]
 800331a:	849a      	strh	r2, [r3, #36]	; 0x24
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	88fa      	ldrh	r2, [r7, #6]
 8003320:	84da      	strh	r2, [r3, #38]	; 0x26
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800332a:	e042      	b.n	80033b2 <HAL_UART_Transmit+0xf8>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	84da      	strh	r2, [r3, #38]	; 0x26
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003342:	d122      	bne.n	800338a <HAL_UART_Transmit+0xd0>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2200      	movs	r2, #0
 800334c:	2180      	movs	r1, #128	; 0x80
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f8f2 	bl	8003538 <UART_WaitOnFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_UART_Transmit+0xa4>
 800335a:	2303      	movs	r3, #3
 800335c:	e042      	b.n	80033e4 <HAL_UART_Transmit+0x12a>
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d103      	bne.n	8003382 <HAL_UART_Transmit+0xc8>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	3302      	adds	r3, #2
 800337e:	60bb      	str	r3, [r7, #8]
 8003380:	e017      	b.n	80033b2 <HAL_UART_Transmit+0xf8>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	3301      	adds	r3, #1
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	e013      	b.n	80033b2 <HAL_UART_Transmit+0xf8>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2200      	movs	r2, #0
 8003392:	2180      	movs	r1, #128	; 0x80
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 f8cf 	bl	8003538 <UART_WaitOnFlagUntilTimeout>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_UART_Transmit+0xea>
 80033a0:	2303      	movs	r3, #3
 80033a2:	e01f      	b.n	80033e4 <HAL_UART_Transmit+0x12a>
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	60ba      	str	r2, [r7, #8]
 80033aa:	781a      	ldrb	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1b7      	bne.n	800332c <HAL_UART_Transmit+0x72>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2200      	movs	r2, #0
 80033c4:	2140      	movs	r1, #64	; 0x40
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f8b6 	bl	8003538 <UART_WaitOnFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_UART_Transmit+0x11c>
 80033d2:	2303      	movs	r3, #3
 80033d4:	e006      	b.n	80033e4 <HAL_UART_Transmit+0x12a>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80033de:	2300      	movs	r3, #0
 80033e0:	e000      	b.n	80033e4 <HAL_UART_Transmit+0x12a>
 80033e2:	2302      	movs	r3, #2
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_UART_Receive>:
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	4613      	mov	r3, r2
 80033fa:	80fb      	strh	r3, [r7, #6]
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b20      	cmp	r3, #32
 800340a:	f040 8090 	bne.w	800352e <HAL_UART_Receive+0x142>
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <HAL_UART_Receive+0x2e>
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_UART_Receive+0x32>
 800341a:	2301      	movs	r3, #1
 800341c:	e088      	b.n	8003530 <HAL_UART_Receive+0x144>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_UART_Receive+0x40>
 8003428:	2302      	movs	r3, #2
 800342a:	e081      	b.n	8003530 <HAL_UART_Receive+0x144>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	63da      	str	r2, [r3, #60]	; 0x3c
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2222      	movs	r2, #34	; 0x22
 800343e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003442:	f7fe f815 	bl	8001470 <HAL_GetTick>
 8003446:	6178      	str	r0, [r7, #20]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	88fa      	ldrh	r2, [r7, #6]
 800344c:	859a      	strh	r2, [r3, #44]	; 0x2c
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	88fa      	ldrh	r2, [r7, #6]
 8003452:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800345c:	e05c      	b.n	8003518 <HAL_UART_Receive+0x12c>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	85da      	strh	r2, [r3, #46]	; 0x2e
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003474:	d12b      	bne.n	80034ce <HAL_UART_Receive+0xe2>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2200      	movs	r2, #0
 800347e:	2120      	movs	r1, #32
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f859 	bl	8003538 <UART_WaitOnFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_UART_Receive+0xa4>
 800348c:	2303      	movs	r3, #3
 800348e:	e04f      	b.n	8003530 <HAL_UART_Receive+0x144>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10c      	bne.n	80034b6 <HAL_UART_Receive+0xca>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	801a      	strh	r2, [r3, #0]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	3302      	adds	r3, #2
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	e030      	b.n	8003518 <HAL_UART_Receive+0x12c>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	b29b      	uxth	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	801a      	strh	r2, [r3, #0]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	3301      	adds	r3, #1
 80034ca:	60bb      	str	r3, [r7, #8]
 80034cc:	e024      	b.n	8003518 <HAL_UART_Receive+0x12c>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2200      	movs	r2, #0
 80034d6:	2120      	movs	r1, #32
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f82d 	bl	8003538 <UART_WaitOnFlagUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_UART_Receive+0xfc>
 80034e4:	2303      	movs	r3, #3
 80034e6:	e023      	b.n	8003530 <HAL_UART_Receive+0x144>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d108      	bne.n	8003502 <HAL_UART_Receive+0x116>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6859      	ldr	r1, [r3, #4]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	60ba      	str	r2, [r7, #8]
 80034fc:	b2ca      	uxtb	r2, r1
 80034fe:	701a      	strb	r2, [r3, #0]
 8003500:	e00a      	b.n	8003518 <HAL_UART_Receive+0x12c>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	b2da      	uxtb	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	1c59      	adds	r1, r3, #1
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d19d      	bne.n	800345e <HAL_UART_Receive+0x72>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2220      	movs	r2, #32
 8003526:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800352a:	2300      	movs	r3, #0
 800352c:	e000      	b.n	8003530 <HAL_UART_Receive+0x144>
 800352e:	2302      	movs	r3, #2
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <UART_WaitOnFlagUntilTimeout>:
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	4613      	mov	r3, r2
 8003546:	71fb      	strb	r3, [r7, #7]
 8003548:	e02c      	b.n	80035a4 <UART_WaitOnFlagUntilTimeout+0x6c>
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d028      	beq.n	80035a4 <UART_WaitOnFlagUntilTimeout+0x6c>
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d007      	beq.n	8003568 <UART_WaitOnFlagUntilTimeout+0x30>
 8003558:	f7fd ff8a 	bl	8001470 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	429a      	cmp	r2, r3
 8003566:	d21d      	bcs.n	80035a4 <UART_WaitOnFlagUntilTimeout+0x6c>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003576:	60da      	str	r2, [r3, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695a      	ldr	r2, [r3, #20]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0201 	bic.w	r2, r2, #1
 8003586:	615a      	str	r2, [r3, #20]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80035a0:	2303      	movs	r3, #3
 80035a2:	e00f      	b.n	80035c4 <UART_WaitOnFlagUntilTimeout+0x8c>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4013      	ands	r3, r2
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	bf0c      	ite	eq
 80035b4:	2301      	moveq	r3, #1
 80035b6:	2300      	movne	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	461a      	mov	r2, r3
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d0c3      	beq.n	800354a <UART_WaitOnFlagUntilTimeout+0x12>
 80035c2:	2300      	movs	r3, #0
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <UART_SetConfig>:
 80035cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035d0:	b085      	sub	sp, #20
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	611a      	str	r2, [r3, #16]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	4313      	orrs	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800360e:	f023 030c 	bic.w	r3, r3, #12
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6812      	ldr	r2, [r2, #0]
 8003616:	68f9      	ldr	r1, [r7, #12]
 8003618:	430b      	orrs	r3, r1
 800361a:	60d3      	str	r3, [r2, #12]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699a      	ldr	r2, [r3, #24]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	615a      	str	r2, [r3, #20]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800363a:	f040 818b 	bne.w	8003954 <UART_SetConfig+0x388>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4ac1      	ldr	r2, [pc, #772]	; (8003948 <UART_SetConfig+0x37c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d005      	beq.n	8003654 <UART_SetConfig+0x88>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4abf      	ldr	r2, [pc, #764]	; (800394c <UART_SetConfig+0x380>)
 800364e:	4293      	cmp	r3, r2
 8003650:	f040 80bd 	bne.w	80037ce <UART_SetConfig+0x202>
 8003654:	f7ff f87c 	bl	8002750 <HAL_RCC_GetPCLK2Freq>
 8003658:	60b8      	str	r0, [r7, #8]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	461d      	mov	r5, r3
 800365e:	f04f 0600 	mov.w	r6, #0
 8003662:	46a8      	mov	r8, r5
 8003664:	46b1      	mov	r9, r6
 8003666:	eb18 0308 	adds.w	r3, r8, r8
 800366a:	eb49 0409 	adc.w	r4, r9, r9
 800366e:	4698      	mov	r8, r3
 8003670:	46a1      	mov	r9, r4
 8003672:	eb18 0805 	adds.w	r8, r8, r5
 8003676:	eb49 0906 	adc.w	r9, r9, r6
 800367a:	f04f 0100 	mov.w	r1, #0
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003686:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800368a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800368e:	4688      	mov	r8, r1
 8003690:	4691      	mov	r9, r2
 8003692:	eb18 0005 	adds.w	r0, r8, r5
 8003696:	eb49 0106 	adc.w	r1, r9, r6
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	461d      	mov	r5, r3
 80036a0:	f04f 0600 	mov.w	r6, #0
 80036a4:	196b      	adds	r3, r5, r5
 80036a6:	eb46 0406 	adc.w	r4, r6, r6
 80036aa:	461a      	mov	r2, r3
 80036ac:	4623      	mov	r3, r4
 80036ae:	f7fc fde7 	bl	8000280 <__aeabi_uldivmod>
 80036b2:	4603      	mov	r3, r0
 80036b4:	460c      	mov	r4, r1
 80036b6:	461a      	mov	r2, r3
 80036b8:	4ba5      	ldr	r3, [pc, #660]	; (8003950 <UART_SetConfig+0x384>)
 80036ba:	fba3 2302 	umull	r2, r3, r3, r2
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	461d      	mov	r5, r3
 80036c8:	f04f 0600 	mov.w	r6, #0
 80036cc:	46a9      	mov	r9, r5
 80036ce:	46b2      	mov	sl, r6
 80036d0:	eb19 0309 	adds.w	r3, r9, r9
 80036d4:	eb4a 040a 	adc.w	r4, sl, sl
 80036d8:	4699      	mov	r9, r3
 80036da:	46a2      	mov	sl, r4
 80036dc:	eb19 0905 	adds.w	r9, r9, r5
 80036e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80036e4:	f04f 0100 	mov.w	r1, #0
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036f8:	4689      	mov	r9, r1
 80036fa:	4692      	mov	sl, r2
 80036fc:	eb19 0005 	adds.w	r0, r9, r5
 8003700:	eb4a 0106 	adc.w	r1, sl, r6
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	461d      	mov	r5, r3
 800370a:	f04f 0600 	mov.w	r6, #0
 800370e:	196b      	adds	r3, r5, r5
 8003710:	eb46 0406 	adc.w	r4, r6, r6
 8003714:	461a      	mov	r2, r3
 8003716:	4623      	mov	r3, r4
 8003718:	f7fc fdb2 	bl	8000280 <__aeabi_uldivmod>
 800371c:	4603      	mov	r3, r0
 800371e:	460c      	mov	r4, r1
 8003720:	461a      	mov	r2, r3
 8003722:	4b8b      	ldr	r3, [pc, #556]	; (8003950 <UART_SetConfig+0x384>)
 8003724:	fba3 1302 	umull	r1, r3, r3, r2
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	2164      	movs	r1, #100	; 0x64
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	3332      	adds	r3, #50	; 0x32
 8003736:	4a86      	ldr	r2, [pc, #536]	; (8003950 <UART_SetConfig+0x384>)
 8003738:	fba2 2303 	umull	r2, r3, r2, r3
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003744:	4498      	add	r8, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	461d      	mov	r5, r3
 800374a:	f04f 0600 	mov.w	r6, #0
 800374e:	46a9      	mov	r9, r5
 8003750:	46b2      	mov	sl, r6
 8003752:	eb19 0309 	adds.w	r3, r9, r9
 8003756:	eb4a 040a 	adc.w	r4, sl, sl
 800375a:	4699      	mov	r9, r3
 800375c:	46a2      	mov	sl, r4
 800375e:	eb19 0905 	adds.w	r9, r9, r5
 8003762:	eb4a 0a06 	adc.w	sl, sl, r6
 8003766:	f04f 0100 	mov.w	r1, #0
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003772:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003776:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800377a:	4689      	mov	r9, r1
 800377c:	4692      	mov	sl, r2
 800377e:	eb19 0005 	adds.w	r0, r9, r5
 8003782:	eb4a 0106 	adc.w	r1, sl, r6
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	461d      	mov	r5, r3
 800378c:	f04f 0600 	mov.w	r6, #0
 8003790:	196b      	adds	r3, r5, r5
 8003792:	eb46 0406 	adc.w	r4, r6, r6
 8003796:	461a      	mov	r2, r3
 8003798:	4623      	mov	r3, r4
 800379a:	f7fc fd71 	bl	8000280 <__aeabi_uldivmod>
 800379e:	4603      	mov	r3, r0
 80037a0:	460c      	mov	r4, r1
 80037a2:	461a      	mov	r2, r3
 80037a4:	4b6a      	ldr	r3, [pc, #424]	; (8003950 <UART_SetConfig+0x384>)
 80037a6:	fba3 1302 	umull	r1, r3, r3, r2
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	2164      	movs	r1, #100	; 0x64
 80037ae:	fb01 f303 	mul.w	r3, r1, r3
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	3332      	adds	r3, #50	; 0x32
 80037b8:	4a65      	ldr	r2, [pc, #404]	; (8003950 <UART_SetConfig+0x384>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	f003 0207 	and.w	r2, r3, #7
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4442      	add	r2, r8
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	e26f      	b.n	8003cae <UART_SetConfig+0x6e2>
 80037ce:	f7fe ffab 	bl	8002728 <HAL_RCC_GetPCLK1Freq>
 80037d2:	60b8      	str	r0, [r7, #8]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	461d      	mov	r5, r3
 80037d8:	f04f 0600 	mov.w	r6, #0
 80037dc:	46a8      	mov	r8, r5
 80037de:	46b1      	mov	r9, r6
 80037e0:	eb18 0308 	adds.w	r3, r8, r8
 80037e4:	eb49 0409 	adc.w	r4, r9, r9
 80037e8:	4698      	mov	r8, r3
 80037ea:	46a1      	mov	r9, r4
 80037ec:	eb18 0805 	adds.w	r8, r8, r5
 80037f0:	eb49 0906 	adc.w	r9, r9, r6
 80037f4:	f04f 0100 	mov.w	r1, #0
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003800:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003804:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003808:	4688      	mov	r8, r1
 800380a:	4691      	mov	r9, r2
 800380c:	eb18 0005 	adds.w	r0, r8, r5
 8003810:	eb49 0106 	adc.w	r1, r9, r6
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	461d      	mov	r5, r3
 800381a:	f04f 0600 	mov.w	r6, #0
 800381e:	196b      	adds	r3, r5, r5
 8003820:	eb46 0406 	adc.w	r4, r6, r6
 8003824:	461a      	mov	r2, r3
 8003826:	4623      	mov	r3, r4
 8003828:	f7fc fd2a 	bl	8000280 <__aeabi_uldivmod>
 800382c:	4603      	mov	r3, r0
 800382e:	460c      	mov	r4, r1
 8003830:	461a      	mov	r2, r3
 8003832:	4b47      	ldr	r3, [pc, #284]	; (8003950 <UART_SetConfig+0x384>)
 8003834:	fba3 2302 	umull	r2, r3, r3, r2
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	461d      	mov	r5, r3
 8003842:	f04f 0600 	mov.w	r6, #0
 8003846:	46a9      	mov	r9, r5
 8003848:	46b2      	mov	sl, r6
 800384a:	eb19 0309 	adds.w	r3, r9, r9
 800384e:	eb4a 040a 	adc.w	r4, sl, sl
 8003852:	4699      	mov	r9, r3
 8003854:	46a2      	mov	sl, r4
 8003856:	eb19 0905 	adds.w	r9, r9, r5
 800385a:	eb4a 0a06 	adc.w	sl, sl, r6
 800385e:	f04f 0100 	mov.w	r1, #0
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800386a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800386e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003872:	4689      	mov	r9, r1
 8003874:	4692      	mov	sl, r2
 8003876:	eb19 0005 	adds.w	r0, r9, r5
 800387a:	eb4a 0106 	adc.w	r1, sl, r6
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	461d      	mov	r5, r3
 8003884:	f04f 0600 	mov.w	r6, #0
 8003888:	196b      	adds	r3, r5, r5
 800388a:	eb46 0406 	adc.w	r4, r6, r6
 800388e:	461a      	mov	r2, r3
 8003890:	4623      	mov	r3, r4
 8003892:	f7fc fcf5 	bl	8000280 <__aeabi_uldivmod>
 8003896:	4603      	mov	r3, r0
 8003898:	460c      	mov	r4, r1
 800389a:	461a      	mov	r2, r3
 800389c:	4b2c      	ldr	r3, [pc, #176]	; (8003950 <UART_SetConfig+0x384>)
 800389e:	fba3 1302 	umull	r1, r3, r3, r2
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	2164      	movs	r1, #100	; 0x64
 80038a6:	fb01 f303 	mul.w	r3, r1, r3
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	3332      	adds	r3, #50	; 0x32
 80038b0:	4a27      	ldr	r2, [pc, #156]	; (8003950 <UART_SetConfig+0x384>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038be:	4498      	add	r8, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	461d      	mov	r5, r3
 80038c4:	f04f 0600 	mov.w	r6, #0
 80038c8:	46a9      	mov	r9, r5
 80038ca:	46b2      	mov	sl, r6
 80038cc:	eb19 0309 	adds.w	r3, r9, r9
 80038d0:	eb4a 040a 	adc.w	r4, sl, sl
 80038d4:	4699      	mov	r9, r3
 80038d6:	46a2      	mov	sl, r4
 80038d8:	eb19 0905 	adds.w	r9, r9, r5
 80038dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80038e0:	f04f 0100 	mov.w	r1, #0
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038f4:	4689      	mov	r9, r1
 80038f6:	4692      	mov	sl, r2
 80038f8:	eb19 0005 	adds.w	r0, r9, r5
 80038fc:	eb4a 0106 	adc.w	r1, sl, r6
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	461d      	mov	r5, r3
 8003906:	f04f 0600 	mov.w	r6, #0
 800390a:	196b      	adds	r3, r5, r5
 800390c:	eb46 0406 	adc.w	r4, r6, r6
 8003910:	461a      	mov	r2, r3
 8003912:	4623      	mov	r3, r4
 8003914:	f7fc fcb4 	bl	8000280 <__aeabi_uldivmod>
 8003918:	4603      	mov	r3, r0
 800391a:	460c      	mov	r4, r1
 800391c:	461a      	mov	r2, r3
 800391e:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <UART_SetConfig+0x384>)
 8003920:	fba3 1302 	umull	r1, r3, r3, r2
 8003924:	095b      	lsrs	r3, r3, #5
 8003926:	2164      	movs	r1, #100	; 0x64
 8003928:	fb01 f303 	mul.w	r3, r1, r3
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	3332      	adds	r3, #50	; 0x32
 8003932:	4a07      	ldr	r2, [pc, #28]	; (8003950 <UART_SetConfig+0x384>)
 8003934:	fba2 2303 	umull	r2, r3, r2, r3
 8003938:	095b      	lsrs	r3, r3, #5
 800393a:	f003 0207 	and.w	r2, r3, #7
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4442      	add	r2, r8
 8003944:	609a      	str	r2, [r3, #8]
 8003946:	e1b2      	b.n	8003cae <UART_SetConfig+0x6e2>
 8003948:	40011000 	.word	0x40011000
 800394c:	40011400 	.word	0x40011400
 8003950:	51eb851f 	.word	0x51eb851f
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4ad7      	ldr	r2, [pc, #860]	; (8003cb8 <UART_SetConfig+0x6ec>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d005      	beq.n	800396a <UART_SetConfig+0x39e>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4ad6      	ldr	r2, [pc, #856]	; (8003cbc <UART_SetConfig+0x6f0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	f040 80d1 	bne.w	8003b0c <UART_SetConfig+0x540>
 800396a:	f7fe fef1 	bl	8002750 <HAL_RCC_GetPCLK2Freq>
 800396e:	60b8      	str	r0, [r7, #8]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	469a      	mov	sl, r3
 8003974:	f04f 0b00 	mov.w	fp, #0
 8003978:	46d0      	mov	r8, sl
 800397a:	46d9      	mov	r9, fp
 800397c:	eb18 0308 	adds.w	r3, r8, r8
 8003980:	eb49 0409 	adc.w	r4, r9, r9
 8003984:	4698      	mov	r8, r3
 8003986:	46a1      	mov	r9, r4
 8003988:	eb18 080a 	adds.w	r8, r8, sl
 800398c:	eb49 090b 	adc.w	r9, r9, fp
 8003990:	f04f 0100 	mov.w	r1, #0
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800399c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039a4:	4688      	mov	r8, r1
 80039a6:	4691      	mov	r9, r2
 80039a8:	eb1a 0508 	adds.w	r5, sl, r8
 80039ac:	eb4b 0609 	adc.w	r6, fp, r9
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	4619      	mov	r1, r3
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	f04f 0400 	mov.w	r4, #0
 80039c2:	0094      	lsls	r4, r2, #2
 80039c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039c8:	008b      	lsls	r3, r1, #2
 80039ca:	461a      	mov	r2, r3
 80039cc:	4623      	mov	r3, r4
 80039ce:	4628      	mov	r0, r5
 80039d0:	4631      	mov	r1, r6
 80039d2:	f7fc fc55 	bl	8000280 <__aeabi_uldivmod>
 80039d6:	4603      	mov	r3, r0
 80039d8:	460c      	mov	r4, r1
 80039da:	461a      	mov	r2, r3
 80039dc:	4bb8      	ldr	r3, [pc, #736]	; (8003cc0 <UART_SetConfig+0x6f4>)
 80039de:	fba3 2302 	umull	r2, r3, r3, r2
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	469b      	mov	fp, r3
 80039ec:	f04f 0c00 	mov.w	ip, #0
 80039f0:	46d9      	mov	r9, fp
 80039f2:	46e2      	mov	sl, ip
 80039f4:	eb19 0309 	adds.w	r3, r9, r9
 80039f8:	eb4a 040a 	adc.w	r4, sl, sl
 80039fc:	4699      	mov	r9, r3
 80039fe:	46a2      	mov	sl, r4
 8003a00:	eb19 090b 	adds.w	r9, r9, fp
 8003a04:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a08:	f04f 0100 	mov.w	r1, #0
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a1c:	4689      	mov	r9, r1
 8003a1e:	4692      	mov	sl, r2
 8003a20:	eb1b 0509 	adds.w	r5, fp, r9
 8003a24:	eb4c 060a 	adc.w	r6, ip, sl
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	f04f 0400 	mov.w	r4, #0
 8003a3a:	0094      	lsls	r4, r2, #2
 8003a3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a40:	008b      	lsls	r3, r1, #2
 8003a42:	461a      	mov	r2, r3
 8003a44:	4623      	mov	r3, r4
 8003a46:	4628      	mov	r0, r5
 8003a48:	4631      	mov	r1, r6
 8003a4a:	f7fc fc19 	bl	8000280 <__aeabi_uldivmod>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	460c      	mov	r4, r1
 8003a52:	461a      	mov	r2, r3
 8003a54:	4b9a      	ldr	r3, [pc, #616]	; (8003cc0 <UART_SetConfig+0x6f4>)
 8003a56:	fba3 1302 	umull	r1, r3, r3, r2
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	2164      	movs	r1, #100	; 0x64
 8003a5e:	fb01 f303 	mul.w	r3, r1, r3
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	3332      	adds	r3, #50	; 0x32
 8003a68:	4a95      	ldr	r2, [pc, #596]	; (8003cc0 <UART_SetConfig+0x6f4>)
 8003a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a74:	4498      	add	r8, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	469b      	mov	fp, r3
 8003a7a:	f04f 0c00 	mov.w	ip, #0
 8003a7e:	46d9      	mov	r9, fp
 8003a80:	46e2      	mov	sl, ip
 8003a82:	eb19 0309 	adds.w	r3, r9, r9
 8003a86:	eb4a 040a 	adc.w	r4, sl, sl
 8003a8a:	4699      	mov	r9, r3
 8003a8c:	46a2      	mov	sl, r4
 8003a8e:	eb19 090b 	adds.w	r9, r9, fp
 8003a92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a96:	f04f 0100 	mov.w	r1, #0
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aa2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003aa6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003aaa:	4689      	mov	r9, r1
 8003aac:	4692      	mov	sl, r2
 8003aae:	eb1b 0509 	adds.w	r5, fp, r9
 8003ab2:	eb4c 060a 	adc.w	r6, ip, sl
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	4619      	mov	r1, r3
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	f04f 0400 	mov.w	r4, #0
 8003ac8:	0094      	lsls	r4, r2, #2
 8003aca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ace:	008b      	lsls	r3, r1, #2
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4623      	mov	r3, r4
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	4631      	mov	r1, r6
 8003ad8:	f7fc fbd2 	bl	8000280 <__aeabi_uldivmod>
 8003adc:	4603      	mov	r3, r0
 8003ade:	460c      	mov	r4, r1
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4b77      	ldr	r3, [pc, #476]	; (8003cc0 <UART_SetConfig+0x6f4>)
 8003ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	2164      	movs	r1, #100	; 0x64
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	3332      	adds	r3, #50	; 0x32
 8003af6:	4a72      	ldr	r2, [pc, #456]	; (8003cc0 <UART_SetConfig+0x6f4>)
 8003af8:	fba2 2303 	umull	r2, r3, r2, r3
 8003afc:	095b      	lsrs	r3, r3, #5
 8003afe:	f003 020f 	and.w	r2, r3, #15
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4442      	add	r2, r8
 8003b08:	609a      	str	r2, [r3, #8]
 8003b0a:	e0d0      	b.n	8003cae <UART_SetConfig+0x6e2>
 8003b0c:	f7fe fe0c 	bl	8002728 <HAL_RCC_GetPCLK1Freq>
 8003b10:	60b8      	str	r0, [r7, #8]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	469a      	mov	sl, r3
 8003b16:	f04f 0b00 	mov.w	fp, #0
 8003b1a:	46d0      	mov	r8, sl
 8003b1c:	46d9      	mov	r9, fp
 8003b1e:	eb18 0308 	adds.w	r3, r8, r8
 8003b22:	eb49 0409 	adc.w	r4, r9, r9
 8003b26:	4698      	mov	r8, r3
 8003b28:	46a1      	mov	r9, r4
 8003b2a:	eb18 080a 	adds.w	r8, r8, sl
 8003b2e:	eb49 090b 	adc.w	r9, r9, fp
 8003b32:	f04f 0100 	mov.w	r1, #0
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b46:	4688      	mov	r8, r1
 8003b48:	4691      	mov	r9, r2
 8003b4a:	eb1a 0508 	adds.w	r5, sl, r8
 8003b4e:	eb4b 0609 	adc.w	r6, fp, r9
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4619      	mov	r1, r3
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	f04f 0400 	mov.w	r4, #0
 8003b64:	0094      	lsls	r4, r2, #2
 8003b66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b6a:	008b      	lsls	r3, r1, #2
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4623      	mov	r3, r4
 8003b70:	4628      	mov	r0, r5
 8003b72:	4631      	mov	r1, r6
 8003b74:	f7fc fb84 	bl	8000280 <__aeabi_uldivmod>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	460c      	mov	r4, r1
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4b50      	ldr	r3, [pc, #320]	; (8003cc0 <UART_SetConfig+0x6f4>)
 8003b80:	fba3 2302 	umull	r2, r3, r3, r2
 8003b84:	095b      	lsrs	r3, r3, #5
 8003b86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	469b      	mov	fp, r3
 8003b8e:	f04f 0c00 	mov.w	ip, #0
 8003b92:	46d9      	mov	r9, fp
 8003b94:	46e2      	mov	sl, ip
 8003b96:	eb19 0309 	adds.w	r3, r9, r9
 8003b9a:	eb4a 040a 	adc.w	r4, sl, sl
 8003b9e:	4699      	mov	r9, r3
 8003ba0:	46a2      	mov	sl, r4
 8003ba2:	eb19 090b 	adds.w	r9, r9, fp
 8003ba6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003baa:	f04f 0100 	mov.w	r1, #0
 8003bae:	f04f 0200 	mov.w	r2, #0
 8003bb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bbe:	4689      	mov	r9, r1
 8003bc0:	4692      	mov	sl, r2
 8003bc2:	eb1b 0509 	adds.w	r5, fp, r9
 8003bc6:	eb4c 060a 	adc.w	r6, ip, sl
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	4619      	mov	r1, r3
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	f04f 0400 	mov.w	r4, #0
 8003bdc:	0094      	lsls	r4, r2, #2
 8003bde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003be2:	008b      	lsls	r3, r1, #2
 8003be4:	461a      	mov	r2, r3
 8003be6:	4623      	mov	r3, r4
 8003be8:	4628      	mov	r0, r5
 8003bea:	4631      	mov	r1, r6
 8003bec:	f7fc fb48 	bl	8000280 <__aeabi_uldivmod>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	460c      	mov	r4, r1
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4b32      	ldr	r3, [pc, #200]	; (8003cc0 <UART_SetConfig+0x6f4>)
 8003bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bfc:	095b      	lsrs	r3, r3, #5
 8003bfe:	2164      	movs	r1, #100	; 0x64
 8003c00:	fb01 f303 	mul.w	r3, r1, r3
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	3332      	adds	r3, #50	; 0x32
 8003c0a:	4a2d      	ldr	r2, [pc, #180]	; (8003cc0 <UART_SetConfig+0x6f4>)
 8003c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c10:	095b      	lsrs	r3, r3, #5
 8003c12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c16:	4498      	add	r8, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	469b      	mov	fp, r3
 8003c1c:	f04f 0c00 	mov.w	ip, #0
 8003c20:	46d9      	mov	r9, fp
 8003c22:	46e2      	mov	sl, ip
 8003c24:	eb19 0309 	adds.w	r3, r9, r9
 8003c28:	eb4a 040a 	adc.w	r4, sl, sl
 8003c2c:	4699      	mov	r9, r3
 8003c2e:	46a2      	mov	sl, r4
 8003c30:	eb19 090b 	adds.w	r9, r9, fp
 8003c34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c38:	f04f 0100 	mov.w	r1, #0
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c4c:	4689      	mov	r9, r1
 8003c4e:	4692      	mov	sl, r2
 8003c50:	eb1b 0509 	adds.w	r5, fp, r9
 8003c54:	eb4c 060a 	adc.w	r6, ip, sl
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	f04f 0400 	mov.w	r4, #0
 8003c6a:	0094      	lsls	r4, r2, #2
 8003c6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c70:	008b      	lsls	r3, r1, #2
 8003c72:	461a      	mov	r2, r3
 8003c74:	4623      	mov	r3, r4
 8003c76:	4628      	mov	r0, r5
 8003c78:	4631      	mov	r1, r6
 8003c7a:	f7fc fb01 	bl	8000280 <__aeabi_uldivmod>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	460c      	mov	r4, r1
 8003c82:	461a      	mov	r2, r3
 8003c84:	4b0e      	ldr	r3, [pc, #56]	; (8003cc0 <UART_SetConfig+0x6f4>)
 8003c86:	fba3 1302 	umull	r1, r3, r3, r2
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	2164      	movs	r1, #100	; 0x64
 8003c8e:	fb01 f303 	mul.w	r3, r1, r3
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	3332      	adds	r3, #50	; 0x32
 8003c98:	4a09      	ldr	r2, [pc, #36]	; (8003cc0 <UART_SetConfig+0x6f4>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	f003 020f 	and.w	r2, r3, #15
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4442      	add	r2, r8
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	e7ff      	b.n	8003cae <UART_SetConfig+0x6e2>
 8003cae:	bf00      	nop
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cb8:	40011000 	.word	0x40011000
 8003cbc:	40011400 	.word	0x40011400
 8003cc0:	51eb851f 	.word	0x51eb851f

08003cc4 <makeFreeRtosPriority>:
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	80fb      	strh	r3, [r7, #6]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cd6:	2b84      	cmp	r3, #132	; 0x84
 8003cd8:	d005      	beq.n	8003ce6 <makeFreeRtosPriority+0x22>
 8003cda:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3303      	adds	r3, #3
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <osKernelStart>:
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	f000 fb9a 	bl	8004430 <vTaskStartScheduler>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	4618      	mov	r0, r3
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <osThreadCreate>:
 8003d02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d04:	b089      	sub	sp, #36	; 0x24
 8003d06:	af04      	add	r7, sp, #16
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	6039      	str	r1, [r7, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d020      	beq.n	8003d56 <osThreadCreate+0x54>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d01c      	beq.n	8003d56 <osThreadCreate+0x54>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685c      	ldr	r4, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681d      	ldr	r5, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691e      	ldr	r6, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff ffc8 	bl	8003cc4 <makeFreeRtosPriority>
 8003d34:	4601      	mov	r1, r0
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6992      	ldr	r2, [r2, #24]
 8003d3e:	9202      	str	r2, [sp, #8]
 8003d40:	9301      	str	r3, [sp, #4]
 8003d42:	9100      	str	r1, [sp, #0]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	4632      	mov	r2, r6
 8003d48:	4629      	mov	r1, r5
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	f000 f8d9 	bl	8003f02 <xTaskCreateStatic>
 8003d50:	4603      	mov	r3, r0
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	e01c      	b.n	8003d90 <osThreadCreate+0x8e>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685c      	ldr	r4, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681d      	ldr	r5, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	b29e      	uxth	r6, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff ffaa 	bl	8003cc4 <makeFreeRtosPriority>
 8003d70:	4602      	mov	r2, r0
 8003d72:	f107 030c 	add.w	r3, r7, #12
 8003d76:	9301      	str	r3, [sp, #4]
 8003d78:	9200      	str	r2, [sp, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	4632      	mov	r2, r6
 8003d7e:	4629      	mov	r1, r5
 8003d80:	4620      	mov	r0, r4
 8003d82:	f000 f918 	bl	8003fb6 <xTaskCreate>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d001      	beq.n	8003d90 <osThreadCreate+0x8e>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	e000      	b.n	8003d92 <osThreadCreate+0x90>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4618      	mov	r0, r3
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d9a <vListInitialise>:
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f103 0208 	add.w	r2, r3, #8
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	605a      	str	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f04f 32ff 	mov.w	r2, #4294967295
 8003db2:	609a      	str	r2, [r3, #8]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f103 0208 	add.w	r2, r3, #8
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	60da      	str	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f103 0208 	add.w	r2, r3, #8
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	611a      	str	r2, [r3, #16]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <vListInitialiseItem>:
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	611a      	str	r2, [r3, #16]
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <vListInsertEnd>:
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	605a      	str	r2, [r3, #4]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	609a      	str	r2, [r3, #8]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	605a      	str	r2, [r3, #4]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	609a      	str	r2, [r3, #8]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	611a      	str	r2, [r3, #16]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	bf00      	nop
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <vListInsert>:
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60bb      	str	r3, [r7, #8]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e52:	d103      	bne.n	8003e5c <vListInsert+0x20>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	e00c      	b.n	8003e76 <vListInsert+0x3a>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3308      	adds	r3, #8
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	e002      	b.n	8003e6a <vListInsert+0x2e>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d2f6      	bcs.n	8003e64 <vListInsert+0x28>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	605a      	str	r2, [r3, #4]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	609a      	str	r2, [r3, #8]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	605a      	str	r2, [r3, #4]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	611a      	str	r2, [r3, #16]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	bf00      	nop
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <uxListRemove>:
 8003eae:	b480      	push	{r7}
 8003eb0:	b085      	sub	sp, #20
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6892      	ldr	r2, [r2, #8]
 8003ec4:	609a      	str	r2, [r3, #8]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6852      	ldr	r2, [r2, #4]
 8003ece:	605a      	str	r2, [r3, #4]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d103      	bne.n	8003ee2 <uxListRemove+0x34>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	605a      	str	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	611a      	str	r2, [r3, #16]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	1e5a      	subs	r2, r3, #1
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <xTaskCreateStatic>:
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b08e      	sub	sp, #56	; 0x38
 8003f06:	af04      	add	r7, sp, #16
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	607a      	str	r2, [r7, #4]
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <xTaskCreateStatic+0x28>
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	623b      	str	r3, [r7, #32]
 8003f28:	e7fe      	b.n	8003f28 <xTaskCreateStatic+0x26>
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d109      	bne.n	8003f44 <xTaskCreateStatic+0x42>
 8003f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	61fb      	str	r3, [r7, #28]
 8003f42:	e7fe      	b.n	8003f42 <xTaskCreateStatic+0x40>
 8003f44:	2354      	movs	r3, #84	; 0x54
 8003f46:	613b      	str	r3, [r7, #16]
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b54      	cmp	r3, #84	; 0x54
 8003f4c:	d009      	beq.n	8003f62 <xTaskCreateStatic+0x60>
 8003f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	61bb      	str	r3, [r7, #24]
 8003f60:	e7fe      	b.n	8003f60 <xTaskCreateStatic+0x5e>
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d01e      	beq.n	8003fa8 <xTaskCreateStatic+0xa6>
 8003f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d01b      	beq.n	8003fa8 <xTaskCreateStatic+0xa6>
 8003f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f78:	631a      	str	r2, [r3, #48]	; 0x30
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003f82:	2300      	movs	r3, #0
 8003f84:	9303      	str	r3, [sp, #12]
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	9302      	str	r3, [sp, #8]
 8003f8a:	f107 0314 	add.w	r3, r7, #20
 8003f8e:	9301      	str	r3, [sp, #4]
 8003f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f850 	bl	8004040 <prvInitialiseNewTask>
 8003fa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fa2:	f000 f8d3 	bl	800414c <prvAddNewTaskToReadyList>
 8003fa6:	e001      	b.n	8003fac <xTaskCreateStatic+0xaa>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3728      	adds	r7, #40	; 0x28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <xTaskCreate>:
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b08c      	sub	sp, #48	; 0x30
 8003fba:	af04      	add	r7, sp, #16
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	603b      	str	r3, [r7, #0]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	80fb      	strh	r3, [r7, #6]
 8003fc6:	88fb      	ldrh	r3, [r7, #6]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 ffa2 	bl	8004f14 <pvPortMalloc>
 8003fd0:	6178      	str	r0, [r7, #20]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00e      	beq.n	8003ff6 <xTaskCreate+0x40>
 8003fd8:	2054      	movs	r0, #84	; 0x54
 8003fda:	f000 ff9b 	bl	8004f14 <pvPortMalloc>
 8003fde:	61f8      	str	r0, [r7, #28]
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <xTaskCreate+0x38>
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	631a      	str	r2, [r3, #48]	; 0x30
 8003fec:	e005      	b.n	8003ffa <xTaskCreate+0x44>
 8003fee:	6978      	ldr	r0, [r7, #20]
 8003ff0:	f001 f852 	bl	8005098 <vPortFree>
 8003ff4:	e001      	b.n	8003ffa <xTaskCreate+0x44>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d017      	beq.n	8004030 <xTaskCreate+0x7a>
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004008:	88fa      	ldrh	r2, [r7, #6]
 800400a:	2300      	movs	r3, #0
 800400c:	9303      	str	r3, [sp, #12]
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	9302      	str	r3, [sp, #8]
 8004012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004014:	9301      	str	r3, [sp, #4]
 8004016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 f80e 	bl	8004040 <prvInitialiseNewTask>
 8004024:	69f8      	ldr	r0, [r7, #28]
 8004026:	f000 f891 	bl	800414c <prvAddNewTaskToReadyList>
 800402a:	2301      	movs	r3, #1
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	e002      	b.n	8004036 <xTaskCreate+0x80>
 8004030:	f04f 33ff 	mov.w	r3, #4294967295
 8004034:	61bb      	str	r3, [r7, #24]
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	4618      	mov	r0, r3
 800403a:	3720      	adds	r7, #32
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <prvInitialiseNewTask>:
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
 800404e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004058:	3b01      	subs	r3, #1
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	f023 0307 	bic.w	r3, r3, #7
 8004066:	61bb      	str	r3, [r7, #24]
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <prvInitialiseNewTask+0x46>
 8004072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	e7fe      	b.n	8004084 <prvInitialiseNewTask+0x44>
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d01f      	beq.n	80040cc <prvInitialiseNewTask+0x8c>
 800408c:	2300      	movs	r3, #0
 800408e:	61fb      	str	r3, [r7, #28]
 8004090:	e012      	b.n	80040b8 <prvInitialiseNewTask+0x78>
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	4413      	add	r3, r2
 8004098:	7819      	ldrb	r1, [r3, #0]
 800409a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	4413      	add	r3, r2
 80040a0:	3334      	adds	r3, #52	; 0x34
 80040a2:	460a      	mov	r2, r1
 80040a4:	701a      	strb	r2, [r3, #0]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	4413      	add	r3, r2
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d006      	beq.n	80040c0 <prvInitialiseNewTask+0x80>
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	3301      	adds	r3, #1
 80040b6:	61fb      	str	r3, [r7, #28]
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	2b0f      	cmp	r3, #15
 80040bc:	d9e9      	bls.n	8004092 <prvInitialiseNewTask+0x52>
 80040be:	e000      	b.n	80040c2 <prvInitialiseNewTask+0x82>
 80040c0:	bf00      	nop
 80040c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040ca:	e003      	b.n	80040d4 <prvInitialiseNewTask+0x94>
 80040cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80040d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d6:	2b06      	cmp	r3, #6
 80040d8:	d901      	bls.n	80040de <prvInitialiseNewTask+0x9e>
 80040da:	2306      	movs	r3, #6
 80040dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80040de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80040e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040e8:	645a      	str	r2, [r3, #68]	; 0x44
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	2200      	movs	r2, #0
 80040ee:	649a      	str	r2, [r3, #72]	; 0x48
 80040f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f2:	3304      	adds	r3, #4
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff fe70 	bl	8003dda <vListInitialiseItem>
 80040fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fc:	3318      	adds	r3, #24
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff fe6b 	bl	8003dda <vListInitialiseItem>
 8004104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004108:	611a      	str	r2, [r3, #16]
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	f1c3 0207 	rsb	r2, r3, #7
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	619a      	str	r2, [r3, #24]
 8004114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004118:	625a      	str	r2, [r3, #36]	; 0x24
 800411a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411c:	2200      	movs	r2, #0
 800411e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	68f9      	ldr	r1, [r7, #12]
 800412c:	69b8      	ldr	r0, [r7, #24]
 800412e:	f000 fcef 	bl	8004b10 <pxPortInitialiseStack>
 8004132:	4602      	mov	r2, r0
 8004134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <prvInitialiseNewTask+0x104>
 800413e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	bf00      	nop
 8004146:	3720      	adds	r7, #32
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <prvAddNewTaskToReadyList>:
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	f000 fe02 	bl	8004d5c <vPortEnterCritical>
 8004158:	4b2a      	ldr	r3, [pc, #168]	; (8004204 <prvAddNewTaskToReadyList+0xb8>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3301      	adds	r3, #1
 800415e:	4a29      	ldr	r2, [pc, #164]	; (8004204 <prvAddNewTaskToReadyList+0xb8>)
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	4b29      	ldr	r3, [pc, #164]	; (8004208 <prvAddNewTaskToReadyList+0xbc>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <prvAddNewTaskToReadyList+0x32>
 800416a:	4a27      	ldr	r2, [pc, #156]	; (8004208 <prvAddNewTaskToReadyList+0xbc>)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	4b24      	ldr	r3, [pc, #144]	; (8004204 <prvAddNewTaskToReadyList+0xb8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d110      	bne.n	800419a <prvAddNewTaskToReadyList+0x4e>
 8004178:	f000 fb8c 	bl	8004894 <prvInitialiseTaskLists>
 800417c:	e00d      	b.n	800419a <prvAddNewTaskToReadyList+0x4e>
 800417e:	4b23      	ldr	r3, [pc, #140]	; (800420c <prvAddNewTaskToReadyList+0xc0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d109      	bne.n	800419a <prvAddNewTaskToReadyList+0x4e>
 8004186:	4b20      	ldr	r3, [pc, #128]	; (8004208 <prvAddNewTaskToReadyList+0xbc>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	429a      	cmp	r2, r3
 8004192:	d802      	bhi.n	800419a <prvAddNewTaskToReadyList+0x4e>
 8004194:	4a1c      	ldr	r2, [pc, #112]	; (8004208 <prvAddNewTaskToReadyList+0xbc>)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	4b1d      	ldr	r3, [pc, #116]	; (8004210 <prvAddNewTaskToReadyList+0xc4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3301      	adds	r3, #1
 80041a0:	4a1b      	ldr	r2, [pc, #108]	; (8004210 <prvAddNewTaskToReadyList+0xc4>)
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	2201      	movs	r2, #1
 80041aa:	409a      	lsls	r2, r3
 80041ac:	4b19      	ldr	r3, [pc, #100]	; (8004214 <prvAddNewTaskToReadyList+0xc8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	4a18      	ldr	r2, [pc, #96]	; (8004214 <prvAddNewTaskToReadyList+0xc8>)
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4a15      	ldr	r2, [pc, #84]	; (8004218 <prvAddNewTaskToReadyList+0xcc>)
 80041c4:	441a      	add	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3304      	adds	r3, #4
 80041ca:	4619      	mov	r1, r3
 80041cc:	4610      	mov	r0, r2
 80041ce:	f7ff fe11 	bl	8003df4 <vListInsertEnd>
 80041d2:	f000 fdf1 	bl	8004db8 <vPortExitCritical>
 80041d6:	4b0d      	ldr	r3, [pc, #52]	; (800420c <prvAddNewTaskToReadyList+0xc0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00e      	beq.n	80041fc <prvAddNewTaskToReadyList+0xb0>
 80041de:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <prvAddNewTaskToReadyList+0xbc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d207      	bcs.n	80041fc <prvAddNewTaskToReadyList+0xb0>
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <prvAddNewTaskToReadyList+0xd0>)
 80041ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	bf00      	nop
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	200003f0 	.word	0x200003f0
 8004208:	200002f0 	.word	0x200002f0
 800420c:	200003fc 	.word	0x200003fc
 8004210:	2000040c 	.word	0x2000040c
 8004214:	200003f8 	.word	0x200003f8
 8004218:	200002f4 	.word	0x200002f4
 800421c:	e000ed04 	.word	0xe000ed04

08004220 <vTaskDelete>:
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	f000 fd98 	bl	8004d5c <vPortEnterCritical>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d102      	bne.n	8004238 <vTaskDelete+0x18>
 8004232:	4b38      	ldr	r3, [pc, #224]	; (8004314 <vTaskDelete+0xf4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	e000      	b.n	800423a <vTaskDelete+0x1a>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	3304      	adds	r3, #4
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff fe34 	bl	8003eae <uxListRemove>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d115      	bne.n	8004278 <vTaskDelete+0x58>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004250:	4931      	ldr	r1, [pc, #196]	; (8004318 <vTaskDelete+0xf8>)
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <vTaskDelete+0x58>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004266:	2201      	movs	r2, #1
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	43da      	mvns	r2, r3
 800426e:	4b2b      	ldr	r3, [pc, #172]	; (800431c <vTaskDelete+0xfc>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4013      	ands	r3, r2
 8004274:	4a29      	ldr	r2, [pc, #164]	; (800431c <vTaskDelete+0xfc>)
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	2b00      	cmp	r3, #0
 800427e:	d004      	beq.n	800428a <vTaskDelete+0x6a>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3318      	adds	r3, #24
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff fe12 	bl	8003eae <uxListRemove>
 800428a:	4b25      	ldr	r3, [pc, #148]	; (8004320 <vTaskDelete+0x100>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3301      	adds	r3, #1
 8004290:	4a23      	ldr	r2, [pc, #140]	; (8004320 <vTaskDelete+0x100>)
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	4b1f      	ldr	r3, [pc, #124]	; (8004314 <vTaskDelete+0xf4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	429a      	cmp	r2, r3
 800429c:	d10b      	bne.n	80042b6 <vTaskDelete+0x96>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3304      	adds	r3, #4
 80042a2:	4619      	mov	r1, r3
 80042a4:	481f      	ldr	r0, [pc, #124]	; (8004324 <vTaskDelete+0x104>)
 80042a6:	f7ff fda5 	bl	8003df4 <vListInsertEnd>
 80042aa:	4b1f      	ldr	r3, [pc, #124]	; (8004328 <vTaskDelete+0x108>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3301      	adds	r3, #1
 80042b0:	4a1d      	ldr	r2, [pc, #116]	; (8004328 <vTaskDelete+0x108>)
 80042b2:	6013      	str	r3, [r2, #0]
 80042b4:	e009      	b.n	80042ca <vTaskDelete+0xaa>
 80042b6:	4b1d      	ldr	r3, [pc, #116]	; (800432c <vTaskDelete+0x10c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	4a1b      	ldr	r2, [pc, #108]	; (800432c <vTaskDelete+0x10c>)
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 fb53 	bl	800496c <prvDeleteTCB>
 80042c6:	f000 fb7f 	bl	80049c8 <prvResetNextTaskUnblockTime>
 80042ca:	f000 fd75 	bl	8004db8 <vPortExitCritical>
 80042ce:	4b18      	ldr	r3, [pc, #96]	; (8004330 <vTaskDelete+0x110>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d01a      	beq.n	800430c <vTaskDelete+0xec>
 80042d6:	4b0f      	ldr	r3, [pc, #60]	; (8004314 <vTaskDelete+0xf4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d115      	bne.n	800430c <vTaskDelete+0xec>
 80042e0:	4b14      	ldr	r3, [pc, #80]	; (8004334 <vTaskDelete+0x114>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d009      	beq.n	80042fc <vTaskDelete+0xdc>
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	e7fe      	b.n	80042fa <vTaskDelete+0xda>
 80042fc:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <vTaskDelete+0x118>)
 80042fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	200002f0 	.word	0x200002f0
 8004318:	200002f4 	.word	0x200002f4
 800431c:	200003f8 	.word	0x200003f8
 8004320:	2000040c 	.word	0x2000040c
 8004324:	200003c4 	.word	0x200003c4
 8004328:	200003d8 	.word	0x200003d8
 800432c:	200003f0 	.word	0x200003f0
 8004330:	200003fc 	.word	0x200003fc
 8004334:	20000418 	.word	0x20000418
 8004338:	e000ed04 	.word	0xe000ed04

0800433c <vTaskDelayUntil>:
 800433c:	b580      	push	{r7, lr}
 800433e:	b08a      	sub	sp, #40	; 0x28
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
 8004346:	2300      	movs	r3, #0
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d109      	bne.n	8004364 <vTaskDelayUntil+0x28>
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	617b      	str	r3, [r7, #20]
 8004362:	e7fe      	b.n	8004362 <vTaskDelayUntil+0x26>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d109      	bne.n	800437e <vTaskDelayUntil+0x42>
 800436a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	613b      	str	r3, [r7, #16]
 800437c:	e7fe      	b.n	800437c <vTaskDelayUntil+0x40>
 800437e:	4b29      	ldr	r3, [pc, #164]	; (8004424 <vTaskDelayUntil+0xe8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <vTaskDelayUntil+0x5e>
 8004386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	e7fe      	b.n	8004398 <vTaskDelayUntil+0x5c>
 800439a:	f000 f8a7 	bl	80044ec <vTaskSuspendAll>
 800439e:	4b22      	ldr	r3, [pc, #136]	; (8004428 <vTaskDelayUntil+0xec>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	623b      	str	r3, [r7, #32]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	4413      	add	r3, r2
 80043ac:	61fb      	str	r3, [r7, #28]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6a3a      	ldr	r2, [r7, #32]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d20b      	bcs.n	80043d0 <vTaskDelayUntil+0x94>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d211      	bcs.n	80043e6 <vTaskDelayUntil+0xaa>
 80043c2:	69fa      	ldr	r2, [r7, #28]
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d90d      	bls.n	80043e6 <vTaskDelayUntil+0xaa>
 80043ca:	2301      	movs	r3, #1
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
 80043ce:	e00a      	b.n	80043e6 <vTaskDelayUntil+0xaa>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	69fa      	ldr	r2, [r7, #28]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d303      	bcc.n	80043e2 <vTaskDelayUntil+0xa6>
 80043da:	69fa      	ldr	r2, [r7, #28]
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d901      	bls.n	80043e6 <vTaskDelayUntil+0xaa>
 80043e2:	2301      	movs	r3, #1
 80043e4:	627b      	str	r3, [r7, #36]	; 0x24
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d006      	beq.n	8004400 <vTaskDelayUntil+0xc4>
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2100      	movs	r1, #0
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fb22 	bl	8004a44 <prvAddCurrentTaskToDelayedList>
 8004400:	f000 f882 	bl	8004508 <xTaskResumeAll>
 8004404:	61b8      	str	r0, [r7, #24]
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d107      	bne.n	800441c <vTaskDelayUntil+0xe0>
 800440c:	4b07      	ldr	r3, [pc, #28]	; (800442c <vTaskDelayUntil+0xf0>)
 800440e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	bf00      	nop
 800441e:	3728      	adds	r7, #40	; 0x28
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20000418 	.word	0x20000418
 8004428:	200003f4 	.word	0x200003f4
 800442c:	e000ed04 	.word	0xe000ed04

08004430 <vTaskStartScheduler>:
 8004430:	b580      	push	{r7, lr}
 8004432:	b08a      	sub	sp, #40	; 0x28
 8004434:	af04      	add	r7, sp, #16
 8004436:	2300      	movs	r3, #0
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	2300      	movs	r3, #0
 800443c:	607b      	str	r3, [r7, #4]
 800443e:	463a      	mov	r2, r7
 8004440:	1d39      	adds	r1, r7, #4
 8004442:	f107 0308 	add.w	r3, r7, #8
 8004446:	4618      	mov	r0, r3
 8004448:	f7fc f89a 	bl	8000580 <vApplicationGetIdleTaskMemory>
 800444c:	6839      	ldr	r1, [r7, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	9202      	str	r2, [sp, #8]
 8004454:	9301      	str	r3, [sp, #4]
 8004456:	2300      	movs	r3, #0
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	2300      	movs	r3, #0
 800445c:	460a      	mov	r2, r1
 800445e:	491d      	ldr	r1, [pc, #116]	; (80044d4 <vTaskStartScheduler+0xa4>)
 8004460:	481d      	ldr	r0, [pc, #116]	; (80044d8 <vTaskStartScheduler+0xa8>)
 8004462:	f7ff fd4e 	bl	8003f02 <xTaskCreateStatic>
 8004466:	4602      	mov	r2, r0
 8004468:	4b1c      	ldr	r3, [pc, #112]	; (80044dc <vTaskStartScheduler+0xac>)
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	4b1b      	ldr	r3, [pc, #108]	; (80044dc <vTaskStartScheduler+0xac>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <vTaskStartScheduler+0x4a>
 8004474:	2301      	movs	r3, #1
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	e001      	b.n	800447e <vTaskStartScheduler+0x4e>
 800447a:	2300      	movs	r3, #0
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d115      	bne.n	80044b0 <vTaskStartScheduler+0x80>
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	4b12      	ldr	r3, [pc, #72]	; (80044e0 <vTaskStartScheduler+0xb0>)
 8004498:	f04f 32ff 	mov.w	r2, #4294967295
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <vTaskStartScheduler+0xb4>)
 80044a0:	2201      	movs	r2, #1
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	4b10      	ldr	r3, [pc, #64]	; (80044e8 <vTaskStartScheduler+0xb8>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	f000 fbb9 	bl	8004c20 <xPortStartScheduler>
 80044ae:	e00d      	b.n	80044cc <vTaskStartScheduler+0x9c>
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b6:	d109      	bne.n	80044cc <vTaskStartScheduler+0x9c>
 80044b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044bc:	f383 8811 	msr	BASEPRI, r3
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	e7fe      	b.n	80044ca <vTaskStartScheduler+0x9a>
 80044cc:	bf00      	nop
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	08006a2c 	.word	0x08006a2c
 80044d8:	08004865 	.word	0x08004865
 80044dc:	20000414 	.word	0x20000414
 80044e0:	20000410 	.word	0x20000410
 80044e4:	200003fc 	.word	0x200003fc
 80044e8:	200003f4 	.word	0x200003f4

080044ec <vTaskSuspendAll>:
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	4b04      	ldr	r3, [pc, #16]	; (8004504 <vTaskSuspendAll+0x18>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3301      	adds	r3, #1
 80044f6:	4a03      	ldr	r2, [pc, #12]	; (8004504 <vTaskSuspendAll+0x18>)
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	bf00      	nop
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	20000418 	.word	0x20000418

08004508 <xTaskResumeAll>:
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	2300      	movs	r3, #0
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	2300      	movs	r3, #0
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	4b41      	ldr	r3, [pc, #260]	; (800461c <xTaskResumeAll+0x114>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <xTaskResumeAll+0x2a>
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	603b      	str	r3, [r7, #0]
 8004530:	e7fe      	b.n	8004530 <xTaskResumeAll+0x28>
 8004532:	f000 fc13 	bl	8004d5c <vPortEnterCritical>
 8004536:	4b39      	ldr	r3, [pc, #228]	; (800461c <xTaskResumeAll+0x114>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3b01      	subs	r3, #1
 800453c:	4a37      	ldr	r2, [pc, #220]	; (800461c <xTaskResumeAll+0x114>)
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	4b36      	ldr	r3, [pc, #216]	; (800461c <xTaskResumeAll+0x114>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d161      	bne.n	800460c <xTaskResumeAll+0x104>
 8004548:	4b35      	ldr	r3, [pc, #212]	; (8004620 <xTaskResumeAll+0x118>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d05d      	beq.n	800460c <xTaskResumeAll+0x104>
 8004550:	e02e      	b.n	80045b0 <xTaskResumeAll+0xa8>
 8004552:	4b34      	ldr	r3, [pc, #208]	; (8004624 <xTaskResumeAll+0x11c>)
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3318      	adds	r3, #24
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff fca5 	bl	8003eae <uxListRemove>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3304      	adds	r3, #4
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff fca0 	bl	8003eae <uxListRemove>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004572:	2201      	movs	r2, #1
 8004574:	409a      	lsls	r2, r3
 8004576:	4b2c      	ldr	r3, [pc, #176]	; (8004628 <xTaskResumeAll+0x120>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4313      	orrs	r3, r2
 800457c:	4a2a      	ldr	r2, [pc, #168]	; (8004628 <xTaskResumeAll+0x120>)
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4a27      	ldr	r2, [pc, #156]	; (800462c <xTaskResumeAll+0x124>)
 800458e:	441a      	add	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3304      	adds	r3, #4
 8004594:	4619      	mov	r1, r3
 8004596:	4610      	mov	r0, r2
 8004598:	f7ff fc2c 	bl	8003df4 <vListInsertEnd>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a0:	4b23      	ldr	r3, [pc, #140]	; (8004630 <xTaskResumeAll+0x128>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d302      	bcc.n	80045b0 <xTaskResumeAll+0xa8>
 80045aa:	4b22      	ldr	r3, [pc, #136]	; (8004634 <xTaskResumeAll+0x12c>)
 80045ac:	2201      	movs	r2, #1
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	4b1c      	ldr	r3, [pc, #112]	; (8004624 <xTaskResumeAll+0x11c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1cc      	bne.n	8004552 <xTaskResumeAll+0x4a>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <xTaskResumeAll+0xba>
 80045be:	f000 fa03 	bl	80049c8 <prvResetNextTaskUnblockTime>
 80045c2:	4b1d      	ldr	r3, [pc, #116]	; (8004638 <xTaskResumeAll+0x130>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	607b      	str	r3, [r7, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d010      	beq.n	80045f0 <xTaskResumeAll+0xe8>
 80045ce:	f000 f837 	bl	8004640 <xTaskIncrementTick>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <xTaskResumeAll+0xd6>
 80045d8:	4b16      	ldr	r3, [pc, #88]	; (8004634 <xTaskResumeAll+0x12c>)
 80045da:	2201      	movs	r2, #1
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	607b      	str	r3, [r7, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f1      	bne.n	80045ce <xTaskResumeAll+0xc6>
 80045ea:	4b13      	ldr	r3, [pc, #76]	; (8004638 <xTaskResumeAll+0x130>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	4b10      	ldr	r3, [pc, #64]	; (8004634 <xTaskResumeAll+0x12c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d009      	beq.n	800460c <xTaskResumeAll+0x104>
 80045f8:	2301      	movs	r3, #1
 80045fa:	60bb      	str	r3, [r7, #8]
 80045fc:	4b0f      	ldr	r3, [pc, #60]	; (800463c <xTaskResumeAll+0x134>)
 80045fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f000 fbd4 	bl	8004db8 <vPortExitCritical>
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000418 	.word	0x20000418
 8004620:	200003f0 	.word	0x200003f0
 8004624:	200003b0 	.word	0x200003b0
 8004628:	200003f8 	.word	0x200003f8
 800462c:	200002f4 	.word	0x200002f4
 8004630:	200002f0 	.word	0x200002f0
 8004634:	20000404 	.word	0x20000404
 8004638:	20000400 	.word	0x20000400
 800463c:	e000ed04 	.word	0xe000ed04

08004640 <xTaskIncrementTick>:
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	2300      	movs	r3, #0
 8004648:	617b      	str	r3, [r7, #20]
 800464a:	4b4e      	ldr	r3, [pc, #312]	; (8004784 <xTaskIncrementTick+0x144>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	f040 8087 	bne.w	8004762 <xTaskIncrementTick+0x122>
 8004654:	4b4c      	ldr	r3, [pc, #304]	; (8004788 <xTaskIncrementTick+0x148>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3301      	adds	r3, #1
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	4a4a      	ldr	r2, [pc, #296]	; (8004788 <xTaskIncrementTick+0x148>)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d11f      	bne.n	80046a8 <xTaskIncrementTick+0x68>
 8004668:	4b48      	ldr	r3, [pc, #288]	; (800478c <xTaskIncrementTick+0x14c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d009      	beq.n	8004686 <xTaskIncrementTick+0x46>
 8004672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	e7fe      	b.n	8004684 <xTaskIncrementTick+0x44>
 8004686:	4b41      	ldr	r3, [pc, #260]	; (800478c <xTaskIncrementTick+0x14c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	4b40      	ldr	r3, [pc, #256]	; (8004790 <xTaskIncrementTick+0x150>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a3e      	ldr	r2, [pc, #248]	; (800478c <xTaskIncrementTick+0x14c>)
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	4a3e      	ldr	r2, [pc, #248]	; (8004790 <xTaskIncrementTick+0x150>)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	4b3e      	ldr	r3, [pc, #248]	; (8004794 <xTaskIncrementTick+0x154>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3301      	adds	r3, #1
 80046a0:	4a3c      	ldr	r2, [pc, #240]	; (8004794 <xTaskIncrementTick+0x154>)
 80046a2:	6013      	str	r3, [r2, #0]
 80046a4:	f000 f990 	bl	80049c8 <prvResetNextTaskUnblockTime>
 80046a8:	4b3b      	ldr	r3, [pc, #236]	; (8004798 <xTaskIncrementTick+0x158>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d348      	bcc.n	8004744 <xTaskIncrementTick+0x104>
 80046b2:	4b36      	ldr	r3, [pc, #216]	; (800478c <xTaskIncrementTick+0x14c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d104      	bne.n	80046c6 <xTaskIncrementTick+0x86>
 80046bc:	4b36      	ldr	r3, [pc, #216]	; (8004798 <xTaskIncrementTick+0x158>)
 80046be:	f04f 32ff 	mov.w	r2, #4294967295
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	e03e      	b.n	8004744 <xTaskIncrementTick+0x104>
 80046c6:	4b31      	ldr	r3, [pc, #196]	; (800478c <xTaskIncrementTick+0x14c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	60bb      	str	r3, [r7, #8]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	607b      	str	r3, [r7, #4]
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d203      	bcs.n	80046e6 <xTaskIncrementTick+0xa6>
 80046de:	4a2e      	ldr	r2, [pc, #184]	; (8004798 <xTaskIncrementTick+0x158>)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	e02e      	b.n	8004744 <xTaskIncrementTick+0x104>
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	3304      	adds	r3, #4
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff fbdf 	bl	8003eae <uxListRemove>
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d004      	beq.n	8004702 <xTaskIncrementTick+0xc2>
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	3318      	adds	r3, #24
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff fbd6 	bl	8003eae <uxListRemove>
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004706:	2201      	movs	r2, #1
 8004708:	409a      	lsls	r2, r3
 800470a:	4b24      	ldr	r3, [pc, #144]	; (800479c <xTaskIncrementTick+0x15c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4313      	orrs	r3, r2
 8004710:	4a22      	ldr	r2, [pc, #136]	; (800479c <xTaskIncrementTick+0x15c>)
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4a1f      	ldr	r2, [pc, #124]	; (80047a0 <xTaskIncrementTick+0x160>)
 8004722:	441a      	add	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	3304      	adds	r3, #4
 8004728:	4619      	mov	r1, r3
 800472a:	4610      	mov	r0, r2
 800472c:	f7ff fb62 	bl	8003df4 <vListInsertEnd>
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004734:	4b1b      	ldr	r3, [pc, #108]	; (80047a4 <xTaskIncrementTick+0x164>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	429a      	cmp	r2, r3
 800473c:	d3b9      	bcc.n	80046b2 <xTaskIncrementTick+0x72>
 800473e:	2301      	movs	r3, #1
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	e7b6      	b.n	80046b2 <xTaskIncrementTick+0x72>
 8004744:	4b17      	ldr	r3, [pc, #92]	; (80047a4 <xTaskIncrementTick+0x164>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474a:	4915      	ldr	r1, [pc, #84]	; (80047a0 <xTaskIncrementTick+0x160>)
 800474c:	4613      	mov	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d907      	bls.n	800476c <xTaskIncrementTick+0x12c>
 800475c:	2301      	movs	r3, #1
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	e004      	b.n	800476c <xTaskIncrementTick+0x12c>
 8004762:	4b11      	ldr	r3, [pc, #68]	; (80047a8 <xTaskIncrementTick+0x168>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3301      	adds	r3, #1
 8004768:	4a0f      	ldr	r2, [pc, #60]	; (80047a8 <xTaskIncrementTick+0x168>)
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	4b0f      	ldr	r3, [pc, #60]	; (80047ac <xTaskIncrementTick+0x16c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <xTaskIncrementTick+0x138>
 8004774:	2301      	movs	r3, #1
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000418 	.word	0x20000418
 8004788:	200003f4 	.word	0x200003f4
 800478c:	200003a8 	.word	0x200003a8
 8004790:	200003ac 	.word	0x200003ac
 8004794:	20000408 	.word	0x20000408
 8004798:	20000410 	.word	0x20000410
 800479c:	200003f8 	.word	0x200003f8
 80047a0:	200002f4 	.word	0x200002f4
 80047a4:	200002f0 	.word	0x200002f0
 80047a8:	20000400 	.word	0x20000400
 80047ac:	20000404 	.word	0x20000404

080047b0 <vTaskSwitchContext>:
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	4b26      	ldr	r3, [pc, #152]	; (8004850 <vTaskSwitchContext+0xa0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <vTaskSwitchContext+0x16>
 80047be:	4b25      	ldr	r3, [pc, #148]	; (8004854 <vTaskSwitchContext+0xa4>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	e03e      	b.n	8004844 <vTaskSwitchContext+0x94>
 80047c6:	4b23      	ldr	r3, [pc, #140]	; (8004854 <vTaskSwitchContext+0xa4>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	4b22      	ldr	r3, [pc, #136]	; (8004858 <vTaskSwitchContext+0xa8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	fab3 f383 	clz	r3, r3
 80047d8:	72fb      	strb	r3, [r7, #11]
 80047da:	7afb      	ldrb	r3, [r7, #11]
 80047dc:	f1c3 031f 	rsb	r3, r3, #31
 80047e0:	617b      	str	r3, [r7, #20]
 80047e2:	491e      	ldr	r1, [pc, #120]	; (800485c <vTaskSwitchContext+0xac>)
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	4613      	mov	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	440b      	add	r3, r1
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d109      	bne.n	800480a <vTaskSwitchContext+0x5a>
 80047f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	607b      	str	r3, [r7, #4]
 8004808:	e7fe      	b.n	8004808 <vTaskSwitchContext+0x58>
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4a11      	ldr	r2, [pc, #68]	; (800485c <vTaskSwitchContext+0xac>)
 8004816:	4413      	add	r3, r2
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	605a      	str	r2, [r3, #4]
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	3308      	adds	r3, #8
 800482c:	429a      	cmp	r2, r3
 800482e:	d104      	bne.n	800483a <vTaskSwitchContext+0x8a>
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	605a      	str	r2, [r3, #4]
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	4a07      	ldr	r2, [pc, #28]	; (8004860 <vTaskSwitchContext+0xb0>)
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	20000418 	.word	0x20000418
 8004854:	20000404 	.word	0x20000404
 8004858:	200003f8 	.word	0x200003f8
 800485c:	200002f4 	.word	0x200002f4
 8004860:	200002f0 	.word	0x200002f0

08004864 <prvIdleTask>:
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	f000 f852 	bl	8004914 <prvCheckTasksWaitingTermination>
 8004870:	4b06      	ldr	r3, [pc, #24]	; (800488c <prvIdleTask+0x28>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d9f9      	bls.n	800486c <prvIdleTask+0x8>
 8004878:	4b05      	ldr	r3, [pc, #20]	; (8004890 <prvIdleTask+0x2c>)
 800487a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	e7f0      	b.n	800486c <prvIdleTask+0x8>
 800488a:	bf00      	nop
 800488c:	200002f4 	.word	0x200002f4
 8004890:	e000ed04 	.word	0xe000ed04

08004894 <prvInitialiseTaskLists>:
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	2300      	movs	r3, #0
 800489c:	607b      	str	r3, [r7, #4]
 800489e:	e00c      	b.n	80048ba <prvInitialiseTaskLists+0x26>
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4a12      	ldr	r2, [pc, #72]	; (80048f4 <prvInitialiseTaskLists+0x60>)
 80048ac:	4413      	add	r3, r2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7ff fa73 	bl	8003d9a <vListInitialise>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3301      	adds	r3, #1
 80048b8:	607b      	str	r3, [r7, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b06      	cmp	r3, #6
 80048be:	d9ef      	bls.n	80048a0 <prvInitialiseTaskLists+0xc>
 80048c0:	480d      	ldr	r0, [pc, #52]	; (80048f8 <prvInitialiseTaskLists+0x64>)
 80048c2:	f7ff fa6a 	bl	8003d9a <vListInitialise>
 80048c6:	480d      	ldr	r0, [pc, #52]	; (80048fc <prvInitialiseTaskLists+0x68>)
 80048c8:	f7ff fa67 	bl	8003d9a <vListInitialise>
 80048cc:	480c      	ldr	r0, [pc, #48]	; (8004900 <prvInitialiseTaskLists+0x6c>)
 80048ce:	f7ff fa64 	bl	8003d9a <vListInitialise>
 80048d2:	480c      	ldr	r0, [pc, #48]	; (8004904 <prvInitialiseTaskLists+0x70>)
 80048d4:	f7ff fa61 	bl	8003d9a <vListInitialise>
 80048d8:	480b      	ldr	r0, [pc, #44]	; (8004908 <prvInitialiseTaskLists+0x74>)
 80048da:	f7ff fa5e 	bl	8003d9a <vListInitialise>
 80048de:	4b0b      	ldr	r3, [pc, #44]	; (800490c <prvInitialiseTaskLists+0x78>)
 80048e0:	4a05      	ldr	r2, [pc, #20]	; (80048f8 <prvInitialiseTaskLists+0x64>)
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <prvInitialiseTaskLists+0x7c>)
 80048e6:	4a05      	ldr	r2, [pc, #20]	; (80048fc <prvInitialiseTaskLists+0x68>)
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	200002f4 	.word	0x200002f4
 80048f8:	20000380 	.word	0x20000380
 80048fc:	20000394 	.word	0x20000394
 8004900:	200003b0 	.word	0x200003b0
 8004904:	200003c4 	.word	0x200003c4
 8004908:	200003dc 	.word	0x200003dc
 800490c:	200003a8 	.word	0x200003a8
 8004910:	200003ac 	.word	0x200003ac

08004914 <prvCheckTasksWaitingTermination>:
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	e019      	b.n	8004950 <prvCheckTasksWaitingTermination+0x3c>
 800491c:	f000 fa1e 	bl	8004d5c <vPortEnterCritical>
 8004920:	4b0f      	ldr	r3, [pc, #60]	; (8004960 <prvCheckTasksWaitingTermination+0x4c>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	607b      	str	r3, [r7, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3304      	adds	r3, #4
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff fabe 	bl	8003eae <uxListRemove>
 8004932:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <prvCheckTasksWaitingTermination+0x50>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3b01      	subs	r3, #1
 8004938:	4a0a      	ldr	r2, [pc, #40]	; (8004964 <prvCheckTasksWaitingTermination+0x50>)
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <prvCheckTasksWaitingTermination+0x54>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3b01      	subs	r3, #1
 8004942:	4a09      	ldr	r2, [pc, #36]	; (8004968 <prvCheckTasksWaitingTermination+0x54>)
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	f000 fa37 	bl	8004db8 <vPortExitCritical>
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f80e 	bl	800496c <prvDeleteTCB>
 8004950:	4b05      	ldr	r3, [pc, #20]	; (8004968 <prvCheckTasksWaitingTermination+0x54>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e1      	bne.n	800491c <prvCheckTasksWaitingTermination+0x8>
 8004958:	bf00      	nop
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	200003c4 	.word	0x200003c4
 8004964:	200003f0 	.word	0x200003f0
 8004968:	200003d8 	.word	0x200003d8

0800496c <prvDeleteTCB>:
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800497a:	2b00      	cmp	r3, #0
 800497c:	d108      	bne.n	8004990 <prvDeleteTCB+0x24>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fb88 	bl	8005098 <vPortFree>
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fb85 	bl	8005098 <vPortFree>
 800498e:	e017      	b.n	80049c0 <prvDeleteTCB+0x54>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004996:	2b01      	cmp	r3, #1
 8004998:	d103      	bne.n	80049a2 <prvDeleteTCB+0x36>
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fb7c 	bl	8005098 <vPortFree>
 80049a0:	e00e      	b.n	80049c0 <prvDeleteTCB+0x54>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d009      	beq.n	80049c0 <prvDeleteTCB+0x54>
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	e7fe      	b.n	80049be <prvDeleteTCB+0x52>
 80049c0:	bf00      	nop
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <prvResetNextTaskUnblockTime>:
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <prvResetNextTaskUnblockTime+0x38>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d104      	bne.n	80049e2 <prvResetNextTaskUnblockTime+0x1a>
 80049d8:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <prvResetNextTaskUnblockTime+0x3c>)
 80049da:	f04f 32ff 	mov.w	r2, #4294967295
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	e008      	b.n	80049f4 <prvResetNextTaskUnblockTime+0x2c>
 80049e2:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <prvResetNextTaskUnblockTime+0x38>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	607b      	str	r3, [r7, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	4a04      	ldr	r2, [pc, #16]	; (8004a04 <prvResetNextTaskUnblockTime+0x3c>)
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	200003a8 	.word	0x200003a8
 8004a04:	20000410 	.word	0x20000410

08004a08 <xTaskGetSchedulerState>:
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <xTaskGetSchedulerState+0x34>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d102      	bne.n	8004a1c <xTaskGetSchedulerState+0x14>
 8004a16:	2301      	movs	r3, #1
 8004a18:	607b      	str	r3, [r7, #4]
 8004a1a:	e008      	b.n	8004a2e <xTaskGetSchedulerState+0x26>
 8004a1c:	4b08      	ldr	r3, [pc, #32]	; (8004a40 <xTaskGetSchedulerState+0x38>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d102      	bne.n	8004a2a <xTaskGetSchedulerState+0x22>
 8004a24:	2302      	movs	r3, #2
 8004a26:	607b      	str	r3, [r7, #4]
 8004a28:	e001      	b.n	8004a2e <xTaskGetSchedulerState+0x26>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	607b      	str	r3, [r7, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4618      	mov	r0, r3
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	200003fc 	.word	0x200003fc
 8004a40:	20000418 	.word	0x20000418

08004a44 <prvAddCurrentTaskToDelayedList>:
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
 8004a4e:	4b29      	ldr	r3, [pc, #164]	; (8004af4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	4b28      	ldr	r3, [pc, #160]	; (8004af8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff fa27 	bl	8003eae <uxListRemove>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10b      	bne.n	8004a7e <prvAddCurrentTaskToDelayedList+0x3a>
 8004a66:	4b24      	ldr	r3, [pc, #144]	; (8004af8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	43da      	mvns	r2, r3
 8004a74:	4b21      	ldr	r3, [pc, #132]	; (8004afc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	4a20      	ldr	r2, [pc, #128]	; (8004afc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a84:	d10a      	bne.n	8004a9c <prvAddCurrentTaskToDelayedList+0x58>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d007      	beq.n	8004a9c <prvAddCurrentTaskToDelayedList+0x58>
 8004a8c:	4b1a      	ldr	r3, [pc, #104]	; (8004af8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	3304      	adds	r3, #4
 8004a92:	4619      	mov	r1, r3
 8004a94:	481a      	ldr	r0, [pc, #104]	; (8004b00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004a96:	f7ff f9ad 	bl	8003df4 <vListInsertEnd>
 8004a9a:	e026      	b.n	8004aea <prvAddCurrentTaskToDelayedList+0xa6>
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	60bb      	str	r3, [r7, #8]
 8004aa4:	4b14      	ldr	r3, [pc, #80]	; (8004af8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	605a      	str	r2, [r3, #4]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d209      	bcs.n	8004ac8 <prvAddCurrentTaskToDelayedList+0x84>
 8004ab4:	4b13      	ldr	r3, [pc, #76]	; (8004b04 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3304      	adds	r3, #4
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	f7ff f9bb 	bl	8003e3c <vListInsert>
 8004ac6:	e010      	b.n	8004aea <prvAddCurrentTaskToDelayedList+0xa6>
 8004ac8:	4b0f      	ldr	r3, [pc, #60]	; (8004b08 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b0a      	ldr	r3, [pc, #40]	; (8004af8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	f7ff f9b1 	bl	8003e3c <vListInsert>
 8004ada:	4b0c      	ldr	r3, [pc, #48]	; (8004b0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d202      	bcs.n	8004aea <prvAddCurrentTaskToDelayedList+0xa6>
 8004ae4:	4a09      	ldr	r2, [pc, #36]	; (8004b0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	bf00      	nop
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	200003f4 	.word	0x200003f4
 8004af8:	200002f0 	.word	0x200002f0
 8004afc:	200003f8 	.word	0x200003f8
 8004b00:	200003dc 	.word	0x200003dc
 8004b04:	200003ac 	.word	0x200003ac
 8004b08:	200003a8 	.word	0x200003a8
 8004b0c:	20000410 	.word	0x20000410

08004b10 <pxPortInitialiseStack>:
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	3b04      	subs	r3, #4
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3b04      	subs	r3, #4
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f023 0201 	bic.w	r2, r3, #1
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3b04      	subs	r3, #4
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	4a0c      	ldr	r2, [pc, #48]	; (8004b74 <pxPortInitialiseStack+0x64>)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3b14      	subs	r3, #20
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3b04      	subs	r3, #4
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f06f 0202 	mvn.w	r2, #2
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	3b20      	subs	r3, #32
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	08004b79 	.word	0x08004b79

08004b78 <prvTaskExitError>:
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	2300      	movs	r3, #0
 8004b80:	607b      	str	r3, [r7, #4]
 8004b82:	4b11      	ldr	r3, [pc, #68]	; (8004bc8 <prvTaskExitError+0x50>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8a:	d009      	beq.n	8004ba0 <prvTaskExitError+0x28>
 8004b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	e7fe      	b.n	8004b9e <prvTaskExitError+0x26>
 8004ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	60bb      	str	r3, [r7, #8]
 8004bb2:	bf00      	nop
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0fc      	beq.n	8004bb4 <prvTaskExitError+0x3c>
 8004bba:	bf00      	nop
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	2000000c 	.word	0x2000000c
 8004bcc:	00000000 	.word	0x00000000

08004bd0 <SVC_Handler>:
 8004bd0:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <pxCurrentTCBConst2>)
 8004bd2:	6819      	ldr	r1, [r3, #0]
 8004bd4:	6808      	ldr	r0, [r1, #0]
 8004bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bda:	f380 8809 	msr	PSP, r0
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f04f 0000 	mov.w	r0, #0
 8004be6:	f380 8811 	msr	BASEPRI, r0
 8004bea:	4770      	bx	lr
 8004bec:	f3af 8000 	nop.w

08004bf0 <pxCurrentTCBConst2>:
 8004bf0:	200002f0 	.word	0x200002f0
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop

08004bf8 <prvPortStartFirstTask>:
 8004bf8:	4808      	ldr	r0, [pc, #32]	; (8004c1c <prvPortStartFirstTask+0x24>)
 8004bfa:	6800      	ldr	r0, [r0, #0]
 8004bfc:	6800      	ldr	r0, [r0, #0]
 8004bfe:	f380 8808 	msr	MSP, r0
 8004c02:	f04f 0000 	mov.w	r0, #0
 8004c06:	f380 8814 	msr	CONTROL, r0
 8004c0a:	b662      	cpsie	i
 8004c0c:	b661      	cpsie	f
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	df00      	svc	0
 8004c18:	bf00      	nop
 8004c1a:	bf00      	nop
 8004c1c:	e000ed08 	.word	0xe000ed08

08004c20 <xPortStartScheduler>:
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	4b44      	ldr	r3, [pc, #272]	; (8004d38 <xPortStartScheduler+0x118>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a44      	ldr	r2, [pc, #272]	; (8004d3c <xPortStartScheduler+0x11c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d109      	bne.n	8004c44 <xPortStartScheduler+0x24>
 8004c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	e7fe      	b.n	8004c42 <xPortStartScheduler+0x22>
 8004c44:	4b3c      	ldr	r3, [pc, #240]	; (8004d38 <xPortStartScheduler+0x118>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a3d      	ldr	r2, [pc, #244]	; (8004d40 <xPortStartScheduler+0x120>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d109      	bne.n	8004c62 <xPortStartScheduler+0x42>
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	e7fe      	b.n	8004c60 <xPortStartScheduler+0x40>
 8004c62:	4b38      	ldr	r3, [pc, #224]	; (8004d44 <xPortStartScheduler+0x124>)
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	607b      	str	r3, [r7, #4]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	22ff      	movs	r2, #255	; 0xff
 8004c72:	701a      	strb	r2, [r3, #0]
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	70fb      	strb	r3, [r7, #3]
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	4b30      	ldr	r3, [pc, #192]	; (8004d48 <xPortStartScheduler+0x128>)
 8004c88:	701a      	strb	r2, [r3, #0]
 8004c8a:	4b30      	ldr	r3, [pc, #192]	; (8004d4c <xPortStartScheduler+0x12c>)
 8004c8c:	2207      	movs	r2, #7
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	e009      	b.n	8004ca6 <xPortStartScheduler+0x86>
 8004c92:	4b2e      	ldr	r3, [pc, #184]	; (8004d4c <xPortStartScheduler+0x12c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	4a2c      	ldr	r2, [pc, #176]	; (8004d4c <xPortStartScheduler+0x12c>)
 8004c9a:	6013      	str	r3, [r2, #0]
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	70fb      	strb	r3, [r7, #3]
 8004ca6:	78fb      	ldrb	r3, [r7, #3]
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cae:	2b80      	cmp	r3, #128	; 0x80
 8004cb0:	d0ef      	beq.n	8004c92 <xPortStartScheduler+0x72>
 8004cb2:	4b26      	ldr	r3, [pc, #152]	; (8004d4c <xPortStartScheduler+0x12c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f1c3 0307 	rsb	r3, r3, #7
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d009      	beq.n	8004cd2 <xPortStartScheduler+0xb2>
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	60bb      	str	r3, [r7, #8]
 8004cd0:	e7fe      	b.n	8004cd0 <xPortStartScheduler+0xb0>
 8004cd2:	4b1e      	ldr	r3, [pc, #120]	; (8004d4c <xPortStartScheduler+0x12c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	021b      	lsls	r3, r3, #8
 8004cd8:	4a1c      	ldr	r2, [pc, #112]	; (8004d4c <xPortStartScheduler+0x12c>)
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	4b1b      	ldr	r3, [pc, #108]	; (8004d4c <xPortStartScheduler+0x12c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ce4:	4a19      	ldr	r2, [pc, #100]	; (8004d4c <xPortStartScheduler+0x12c>)
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	701a      	strb	r2, [r3, #0]
 8004cf0:	4b17      	ldr	r3, [pc, #92]	; (8004d50 <xPortStartScheduler+0x130>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a16      	ldr	r2, [pc, #88]	; (8004d50 <xPortStartScheduler+0x130>)
 8004cf6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	4b14      	ldr	r3, [pc, #80]	; (8004d50 <xPortStartScheduler+0x130>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a13      	ldr	r2, [pc, #76]	; (8004d50 <xPortStartScheduler+0x130>)
 8004d02:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	f000 f8d6 	bl	8004eb8 <vPortSetupTimerInterrupt>
 8004d0c:	4b11      	ldr	r3, [pc, #68]	; (8004d54 <xPortStartScheduler+0x134>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	f000 f8f5 	bl	8004f00 <vPortEnableVFP>
 8004d16:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <xPortStartScheduler+0x138>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a0f      	ldr	r2, [pc, #60]	; (8004d58 <xPortStartScheduler+0x138>)
 8004d1c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	f7ff ff69 	bl	8004bf8 <prvPortStartFirstTask>
 8004d26:	f7ff fd43 	bl	80047b0 <vTaskSwitchContext>
 8004d2a:	f7ff ff25 	bl	8004b78 <prvTaskExitError>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	4618      	mov	r0, r3
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	e000ed00 	.word	0xe000ed00
 8004d3c:	410fc271 	.word	0x410fc271
 8004d40:	410fc270 	.word	0x410fc270
 8004d44:	e000e400 	.word	0xe000e400
 8004d48:	2000041c 	.word	0x2000041c
 8004d4c:	20000420 	.word	0x20000420
 8004d50:	e000ed20 	.word	0xe000ed20
 8004d54:	2000000c 	.word	0x2000000c
 8004d58:	e000ef34 	.word	0xe000ef34

08004d5c <vPortEnterCritical>:
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d66:	f383 8811 	msr	BASEPRI, r3
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	607b      	str	r3, [r7, #4]
 8004d74:	4b0e      	ldr	r3, [pc, #56]	; (8004db0 <vPortEnterCritical+0x54>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	4a0d      	ldr	r2, [pc, #52]	; (8004db0 <vPortEnterCritical+0x54>)
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <vPortEnterCritical+0x54>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d10e      	bne.n	8004da4 <vPortEnterCritical+0x48>
 8004d86:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <vPortEnterCritical+0x58>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d009      	beq.n	8004da4 <vPortEnterCritical+0x48>
 8004d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	603b      	str	r3, [r7, #0]
 8004da2:	e7fe      	b.n	8004da2 <vPortEnterCritical+0x46>
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	2000000c 	.word	0x2000000c
 8004db4:	e000ed04 	.word	0xe000ed04

08004db8 <vPortExitCritical>:
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4b11      	ldr	r3, [pc, #68]	; (8004e04 <vPortExitCritical+0x4c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d109      	bne.n	8004dda <vPortExitCritical+0x22>
 8004dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	607b      	str	r3, [r7, #4]
 8004dd8:	e7fe      	b.n	8004dd8 <vPortExitCritical+0x20>
 8004dda:	4b0a      	ldr	r3, [pc, #40]	; (8004e04 <vPortExitCritical+0x4c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	3b01      	subs	r3, #1
 8004de0:	4a08      	ldr	r2, [pc, #32]	; (8004e04 <vPortExitCritical+0x4c>)
 8004de2:	6013      	str	r3, [r2, #0]
 8004de4:	4b07      	ldr	r3, [pc, #28]	; (8004e04 <vPortExitCritical+0x4c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d104      	bne.n	8004df6 <vPortExitCritical+0x3e>
 8004dec:	2300      	movs	r3, #0
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	2000000c 	.word	0x2000000c
	...

08004e10 <PendSV_Handler>:
 8004e10:	f3ef 8009 	mrs	r0, PSP
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	4b15      	ldr	r3, [pc, #84]	; (8004e70 <pxCurrentTCBConst>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	f01e 0f10 	tst.w	lr, #16
 8004e20:	bf08      	it	eq
 8004e22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e2a:	6010      	str	r0, [r2, #0]
 8004e2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e34:	f380 8811 	msr	BASEPRI, r0
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f7ff fcb6 	bl	80047b0 <vTaskSwitchContext>
 8004e44:	f04f 0000 	mov.w	r0, #0
 8004e48:	f380 8811 	msr	BASEPRI, r0
 8004e4c:	bc09      	pop	{r0, r3}
 8004e4e:	6819      	ldr	r1, [r3, #0]
 8004e50:	6808      	ldr	r0, [r1, #0]
 8004e52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e56:	f01e 0f10 	tst.w	lr, #16
 8004e5a:	bf08      	it	eq
 8004e5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e60:	f380 8809 	msr	PSP, r0
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	f3af 8000 	nop.w

08004e70 <pxCurrentTCBConst>:
 8004e70:	200002f0 	.word	0x200002f0
 8004e74:	bf00      	nop
 8004e76:	bf00      	nop

08004e78 <xPortSysTickHandler>:
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	607b      	str	r3, [r7, #4]
 8004e90:	f7ff fbd6 	bl	8004640 <xTaskIncrementTick>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <xPortSysTickHandler+0x2a>
 8004e9a:	4b06      	ldr	r3, [pc, #24]	; (8004eb4 <xPortSysTickHandler+0x3c>)
 8004e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	603b      	str	r3, [r7, #0]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	bf00      	nop
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	e000ed04 	.word	0xe000ed04

08004eb8 <vPortSetupTimerInterrupt>:
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	4b0b      	ldr	r3, [pc, #44]	; (8004eec <vPortSetupTimerInterrupt+0x34>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <vPortSetupTimerInterrupt+0x38>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	4b0a      	ldr	r3, [pc, #40]	; (8004ef4 <vPortSetupTimerInterrupt+0x3c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a0a      	ldr	r2, [pc, #40]	; (8004ef8 <vPortSetupTimerInterrupt+0x40>)
 8004ece:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed2:	099b      	lsrs	r3, r3, #6
 8004ed4:	4a09      	ldr	r2, [pc, #36]	; (8004efc <vPortSetupTimerInterrupt+0x44>)
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	4b04      	ldr	r3, [pc, #16]	; (8004eec <vPortSetupTimerInterrupt+0x34>)
 8004edc:	2207      	movs	r2, #7
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	bf00      	nop
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	e000e010 	.word	0xe000e010
 8004ef0:	e000e018 	.word	0xe000e018
 8004ef4:	20000000 	.word	0x20000000
 8004ef8:	10624dd3 	.word	0x10624dd3
 8004efc:	e000e014 	.word	0xe000e014

08004f00 <vPortEnableVFP>:
 8004f00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f10 <vPortEnableVFP+0x10>
 8004f04:	6801      	ldr	r1, [r0, #0]
 8004f06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f0a:	6001      	str	r1, [r0, #0]
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	e000ed88 	.word	0xe000ed88

08004f14 <pvPortMalloc>:
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08a      	sub	sp, #40	; 0x28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	61fb      	str	r3, [r7, #28]
 8004f20:	f7ff fae4 	bl	80044ec <vTaskSuspendAll>
 8004f24:	4b57      	ldr	r3, [pc, #348]	; (8005084 <pvPortMalloc+0x170>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <pvPortMalloc+0x1c>
 8004f2c:	f000 f90c 	bl	8005148 <prvHeapInit>
 8004f30:	4b55      	ldr	r3, [pc, #340]	; (8005088 <pvPortMalloc+0x174>)
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4013      	ands	r3, r2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f040 808c 	bne.w	8005056 <pvPortMalloc+0x142>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d01c      	beq.n	8004f7e <pvPortMalloc+0x6a>
 8004f44:	2208      	movs	r2, #8
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4413      	add	r3, r2
 8004f4a:	607b      	str	r3, [r7, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d013      	beq.n	8004f7e <pvPortMalloc+0x6a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f023 0307 	bic.w	r3, r3, #7
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	607b      	str	r3, [r7, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d009      	beq.n	8004f7e <pvPortMalloc+0x6a>
 8004f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	e7fe      	b.n	8004f7c <pvPortMalloc+0x68>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d068      	beq.n	8005056 <pvPortMalloc+0x142>
 8004f84:	4b41      	ldr	r3, [pc, #260]	; (800508c <pvPortMalloc+0x178>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d863      	bhi.n	8005056 <pvPortMalloc+0x142>
 8004f8e:	4b40      	ldr	r3, [pc, #256]	; (8005090 <pvPortMalloc+0x17c>)
 8004f90:	623b      	str	r3, [r7, #32]
 8004f92:	4b3f      	ldr	r3, [pc, #252]	; (8005090 <pvPortMalloc+0x17c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
 8004f98:	e004      	b.n	8004fa4 <pvPortMalloc+0x90>
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	623b      	str	r3, [r7, #32]
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d903      	bls.n	8004fb6 <pvPortMalloc+0xa2>
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1f1      	bne.n	8004f9a <pvPortMalloc+0x86>
 8004fb6:	4b33      	ldr	r3, [pc, #204]	; (8005084 <pvPortMalloc+0x170>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d04a      	beq.n	8005056 <pvPortMalloc+0x142>
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2208      	movs	r2, #8
 8004fc6:	4413      	add	r3, r2
 8004fc8:	61fb      	str	r3, [r7, #28]
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	1ad2      	subs	r2, r2, r3
 8004fda:	2308      	movs	r3, #8
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d91e      	bls.n	8005020 <pvPortMalloc+0x10c>
 8004fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d009      	beq.n	8005008 <pvPortMalloc+0xf4>
 8004ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	e7fe      	b.n	8005006 <pvPortMalloc+0xf2>
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	1ad2      	subs	r2, r2, r3
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	605a      	str	r2, [r3, #4]
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	605a      	str	r2, [r3, #4]
 800501a:	69b8      	ldr	r0, [r7, #24]
 800501c:	f000 f8f6 	bl	800520c <prvInsertBlockIntoFreeList>
 8005020:	4b1a      	ldr	r3, [pc, #104]	; (800508c <pvPortMalloc+0x178>)
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	4a18      	ldr	r2, [pc, #96]	; (800508c <pvPortMalloc+0x178>)
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	4b17      	ldr	r3, [pc, #92]	; (800508c <pvPortMalloc+0x178>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	4b18      	ldr	r3, [pc, #96]	; (8005094 <pvPortMalloc+0x180>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d203      	bcs.n	8005042 <pvPortMalloc+0x12e>
 800503a:	4b14      	ldr	r3, [pc, #80]	; (800508c <pvPortMalloc+0x178>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a15      	ldr	r2, [pc, #84]	; (8005094 <pvPortMalloc+0x180>)
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	4b10      	ldr	r3, [pc, #64]	; (8005088 <pvPortMalloc+0x174>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	431a      	orrs	r2, r3
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	605a      	str	r2, [r3, #4]
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	f7ff fa57 	bl	8004508 <xTaskResumeAll>
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	2b00      	cmp	r3, #0
 8005062:	d009      	beq.n	8005078 <pvPortMalloc+0x164>
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	e7fe      	b.n	8005076 <pvPortMalloc+0x162>
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	4618      	mov	r0, r3
 800507c:	3728      	adds	r7, #40	; 0x28
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	2000402c 	.word	0x2000402c
 8005088:	20004038 	.word	0x20004038
 800508c:	20004030 	.word	0x20004030
 8005090:	20004024 	.word	0x20004024
 8005094:	20004034 	.word	0x20004034

08005098 <vPortFree>:
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d046      	beq.n	8005138 <vPortFree+0xa0>
 80050aa:	2308      	movs	r3, #8
 80050ac:	425b      	negs	r3, r3
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4413      	add	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	613b      	str	r3, [r7, #16]
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	4b20      	ldr	r3, [pc, #128]	; (8005140 <vPortFree+0xa8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4013      	ands	r3, r2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <vPortFree+0x42>
 80050c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	e7fe      	b.n	80050d8 <vPortFree+0x40>
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d009      	beq.n	80050f6 <vPortFree+0x5e>
 80050e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	60bb      	str	r3, [r7, #8]
 80050f4:	e7fe      	b.n	80050f4 <vPortFree+0x5c>
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	4b11      	ldr	r3, [pc, #68]	; (8005140 <vPortFree+0xa8>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4013      	ands	r3, r2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d019      	beq.n	8005138 <vPortFree+0xa0>
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d115      	bne.n	8005138 <vPortFree+0xa0>
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <vPortFree+0xa8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	43db      	mvns	r3, r3
 8005116:	401a      	ands	r2, r3
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	605a      	str	r2, [r3, #4]
 800511c:	f7ff f9e6 	bl	80044ec <vTaskSuspendAll>
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	4b07      	ldr	r3, [pc, #28]	; (8005144 <vPortFree+0xac>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4413      	add	r3, r2
 800512a:	4a06      	ldr	r2, [pc, #24]	; (8005144 <vPortFree+0xac>)
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	6938      	ldr	r0, [r7, #16]
 8005130:	f000 f86c 	bl	800520c <prvInsertBlockIntoFreeList>
 8005134:	f7ff f9e8 	bl	8004508 <xTaskResumeAll>
 8005138:	bf00      	nop
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	20004038 	.word	0x20004038
 8005144:	20004030 	.word	0x20004030

08005148 <prvHeapInit>:
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005152:	60bb      	str	r3, [r7, #8]
 8005154:	4b27      	ldr	r3, [pc, #156]	; (80051f4 <prvHeapInit+0xac>)
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00c      	beq.n	800517c <prvHeapInit+0x34>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	3307      	adds	r3, #7
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0307 	bic.w	r3, r3, #7
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	4a1f      	ldr	r2, [pc, #124]	; (80051f4 <prvHeapInit+0xac>)
 8005178:	4413      	add	r3, r2
 800517a:	60bb      	str	r3, [r7, #8]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	607b      	str	r3, [r7, #4]
 8005180:	4a1d      	ldr	r2, [pc, #116]	; (80051f8 <prvHeapInit+0xb0>)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	4b1c      	ldr	r3, [pc, #112]	; (80051f8 <prvHeapInit+0xb0>)
 8005188:	2200      	movs	r2, #0
 800518a:	605a      	str	r2, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	4413      	add	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	2208      	movs	r2, #8
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	1a9b      	subs	r3, r3, r2
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0307 	bic.w	r3, r3, #7
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4a15      	ldr	r2, [pc, #84]	; (80051fc <prvHeapInit+0xb4>)
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	4b14      	ldr	r3, [pc, #80]	; (80051fc <prvHeapInit+0xb4>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2200      	movs	r2, #0
 80051b0:	605a      	str	r2, [r3, #4]
 80051b2:	4b12      	ldr	r3, [pc, #72]	; (80051fc <prvHeapInit+0xb4>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	603b      	str	r3, [r7, #0]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	1ad2      	subs	r2, r2, r3
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	605a      	str	r2, [r3, #4]
 80051c8:	4b0c      	ldr	r3, [pc, #48]	; (80051fc <prvHeapInit+0xb4>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	4a0a      	ldr	r2, [pc, #40]	; (8005200 <prvHeapInit+0xb8>)
 80051d6:	6013      	str	r3, [r2, #0]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	4a09      	ldr	r2, [pc, #36]	; (8005204 <prvHeapInit+0xbc>)
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	4b09      	ldr	r3, [pc, #36]	; (8005208 <prvHeapInit+0xc0>)
 80051e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	bf00      	nop
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	20000424 	.word	0x20000424
 80051f8:	20004024 	.word	0x20004024
 80051fc:	2000402c 	.word	0x2000402c
 8005200:	20004034 	.word	0x20004034
 8005204:	20004030 	.word	0x20004030
 8005208:	20004038 	.word	0x20004038

0800520c <prvInsertBlockIntoFreeList>:
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	4b28      	ldr	r3, [pc, #160]	; (80052b8 <prvInsertBlockIntoFreeList+0xac>)
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	e002      	b.n	8005220 <prvInsertBlockIntoFreeList+0x14>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	429a      	cmp	r2, r3
 8005228:	d8f7      	bhi.n	800521a <prvInsertBlockIntoFreeList+0xe>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	60bb      	str	r3, [r7, #8]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	4413      	add	r3, r2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	429a      	cmp	r2, r3
 800523a:	d108      	bne.n	800524e <prvInsertBlockIntoFreeList+0x42>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	441a      	add	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	605a      	str	r2, [r3, #4]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	607b      	str	r3, [r7, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	60bb      	str	r3, [r7, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	441a      	add	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d118      	bne.n	8005294 <prvInsertBlockIntoFreeList+0x88>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	4b15      	ldr	r3, [pc, #84]	; (80052bc <prvInsertBlockIntoFreeList+0xb0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d00d      	beq.n	800528a <prvInsertBlockIntoFreeList+0x7e>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	441a      	add	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	605a      	str	r2, [r3, #4]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	e008      	b.n	800529c <prvInsertBlockIntoFreeList+0x90>
 800528a:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <prvInsertBlockIntoFreeList+0xb0>)
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	e003      	b.n	800529c <prvInsertBlockIntoFreeList+0x90>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d002      	beq.n	80052aa <prvInsertBlockIntoFreeList+0x9e>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	20004024 	.word	0x20004024
 80052bc:	2000402c 	.word	0x2000402c

080052c0 <registerSpiLock>:
#if !defined(SUPRESS_SETUP_WARNING) && !defined(SUPRESS_ALL)
	else printf("! Setup Warning: %s not setup on this device.\r\n", name);
#endif
}

spiLock_t* registerSpiLock() {
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
	if(_spiLocksRegistered < NUM_SPI_LOCKS) {
 80052c4:	4b10      	ldr	r3, [pc, #64]	; (8005308 <registerSpiLock+0x48>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d817      	bhi.n	80052fc <registerSpiLock+0x3c>
		_spiLocks[_spiLocksRegistered].lock = false;
 80052cc:	4b0e      	ldr	r3, [pc, #56]	; (8005308 <registerSpiLock+0x48>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	4a0e      	ldr	r2, [pc, #56]	; (800530c <registerSpiLock+0x4c>)
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	4413      	add	r3, r2
 80052d6:	2200      	movs	r2, #0
 80052d8:	719a      	strb	r2, [r3, #6]
		_spiLocks[_spiLocksRegistered].pin = 0x69;
 80052da:	4b0b      	ldr	r3, [pc, #44]	; (8005308 <registerSpiLock+0x48>)
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	4a0b      	ldr	r2, [pc, #44]	; (800530c <registerSpiLock+0x4c>)
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	4413      	add	r3, r2
 80052e4:	2269      	movs	r2, #105	; 0x69
 80052e6:	809a      	strh	r2, [r3, #4]
		return &_spiLocks[_spiLocksRegistered++];
 80052e8:	4b07      	ldr	r3, [pc, #28]	; (8005308 <registerSpiLock+0x48>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	b2d1      	uxtb	r1, r2
 80052f0:	4a05      	ldr	r2, [pc, #20]	; (8005308 <registerSpiLock+0x48>)
 80052f2:	7011      	strb	r1, [r2, #0]
 80052f4:	00db      	lsls	r3, r3, #3
 80052f6:	4a05      	ldr	r2, [pc, #20]	; (800530c <registerSpiLock+0x4c>)
 80052f8:	4413      	add	r3, r2
 80052fa:	e000      	b.n	80052fe <registerSpiLock+0x3e>
	}
	else return NULL;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	2000403c 	.word	0x2000403c
 800530c:	20004738 	.word	0x20004738

08005310 <setSpiLock>:

void setSpiLock(GPIO_TypeDef* port, uint16_t pin, spiLock_t* locker) {
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	460b      	mov	r3, r1
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	817b      	strh	r3, [r7, #10]
	if(locker->lock) {
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	799b      	ldrb	r3, [r3, #6]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00d      	beq.n	8005342 <setSpiLock+0x32>
		if(pin != FAKE_GPIO) HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 8005326:	897b      	ldrh	r3, [r7, #10]
 8005328:	f248 0201 	movw	r2, #32769	; 0x8001
 800532c:	4293      	cmp	r3, r2
 800532e:	d005      	beq.n	800533c <setSpiLock+0x2c>
 8005330:	897b      	ldrh	r3, [r7, #10]
 8005332:	2201      	movs	r2, #1
 8005334:	4619      	mov	r1, r3
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f7fc fda2 	bl	8001e80 <HAL_GPIO_WritePin>
		locker->lock = false;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	719a      	strb	r2, [r3, #6]
	}
	locker->port = port;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	601a      	str	r2, [r3, #0]
	locker->pin = pin;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	897a      	ldrh	r2, [r7, #10]
 800534c:	809a      	strh	r2, [r3, #4]
	if(pin != FAKE_GPIO) HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 800534e:	897b      	ldrh	r3, [r7, #10]
 8005350:	f248 0201 	movw	r2, #32769	; 0x8001
 8005354:	4293      	cmp	r3, r2
 8005356:	d005      	beq.n	8005364 <setSpiLock+0x54>
 8005358:	897b      	ldrh	r3, [r7, #10]
 800535a:	2201      	movs	r2, #1
 800535c:	4619      	mov	r1, r3
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f7fc fd8e 	bl	8001e80 <HAL_GPIO_WritePin>

	printf("Pin: %X\r\n", locker->pin);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	889b      	ldrh	r3, [r3, #4]
 8005368:	4619      	mov	r1, r3
 800536a:	4803      	ldr	r0, [pc, #12]	; (8005378 <setSpiLock+0x68>)
 800536c:	f000 fb9c 	bl	8005aa8 <iprintf>
}
 8005370:	bf00      	nop
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	08006a64 	.word	0x08006a64

0800537c <lockSpi>:

void lockSpi(spiLock_t* locker) {
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
	printf("Start Lock\n\r");
 8005384:	480e      	ldr	r0, [pc, #56]	; (80053c0 <lockSpi+0x44>)
 8005386:	f000 fb8f 	bl	8005aa8 <iprintf>
	if(locker->pin != FAKE_GPIO){
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	889b      	ldrh	r3, [r3, #4]
 800538e:	f248 0201 	movw	r2, #32769	; 0x8001
 8005392:	4293      	cmp	r3, r2
 8005394:	d00a      	beq.n	80053ac <lockSpi+0x30>
		HAL_GPIO_WritePin(locker->port, locker->pin, GPIO_PIN_RESET);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6818      	ldr	r0, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	889b      	ldrh	r3, [r3, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	4619      	mov	r1, r3
 80053a2:	f7fc fd6d 	bl	8001e80 <HAL_GPIO_WritePin>
		printf("First If\n\r");
 80053a6:	4807      	ldr	r0, [pc, #28]	; (80053c4 <lockSpi+0x48>)
 80053a8:	f000 fb7e 	bl	8005aa8 <iprintf>
	}
	locker->lock = true;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	719a      	strb	r2, [r3, #6]
	printf("End\n\r");
 80053b2:	4805      	ldr	r0, [pc, #20]	; (80053c8 <lockSpi+0x4c>)
 80053b4:	f000 fb78 	bl	8005aa8 <iprintf>
}
 80053b8:	bf00      	nop
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	08006a70 	.word	0x08006a70
 80053c4:	08006a80 	.word	0x08006a80
 80053c8:	08006a8c 	.word	0x08006a8c

080053cc <unlockSpi>:
void unlockSpi(spiLock_t* locker) {
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
	if(locker->pin != FAKE_GPIO){
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	889b      	ldrh	r3, [r3, #4]
 80053d8:	f248 0201 	movw	r2, #32769	; 0x8001
 80053dc:	4293      	cmp	r3, r2
 80053de:	d007      	beq.n	80053f0 <unlockSpi+0x24>
		HAL_GPIO_WritePin(locker->port, locker->pin, GPIO_PIN_SET);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6818      	ldr	r0, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	889b      	ldrh	r3, [r3, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	4619      	mov	r1, r3
 80053ec:	f7fc fd48 	bl	8001e80 <HAL_GPIO_WritePin>
	}
	locker->lock = false;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	719a      	strb	r2, [r3, #6]
}
 80053f6:	bf00      	nop
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
	...

08005400 <sendSPI>:

HAL_StatusTypeDef sendSPI(uint8_t * cmd, int len, GPIO_TypeDef * port, uint16_t pin, SPI_HandleTypeDef *bus)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
 800540c:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef state = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	74fb      	strb	r3, [r7, #19]
	if (pin == FAKE_GPIO) return state;
 8005412:	887b      	ldrh	r3, [r7, #2]
 8005414:	f248 0201 	movw	r2, #32769	; 0x8001
 8005418:	4293      	cmp	r3, r2
 800541a:	d101      	bne.n	8005420 <sendSPI+0x20>
 800541c:	7cfb      	ldrb	r3, [r7, #19]
 800541e:	e03a      	b.n	8005496 <sendSPI+0x96>
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //CS low
 8005420:	887b      	ldrh	r3, [r7, #2]
 8005422:	2200      	movs	r2, #0
 8005424:	4619      	mov	r1, r3
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7fc fd2a 	bl	8001e80 <HAL_GPIO_WritePin>
	state = HAL_SPI_Transmit(bus, cmd, len, HAL_MAX_DELAY);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	b29a      	uxth	r2, r3
 8005430:	f04f 33ff 	mov.w	r3, #4294967295
 8005434:	68f9      	ldr	r1, [r7, #12]
 8005436:	6a38      	ldr	r0, [r7, #32]
 8005438:	f7fd fa02 	bl	8002840 <HAL_SPI_Transmit>
 800543c:	4603      	mov	r3, r0
 800543e:	74fb      	strb	r3, [r7, #19]
	for(int i = 0; i < _spiLocksRegistered; i++)
 8005440:	2300      	movs	r3, #0
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	e018      	b.n	8005478 <sendSPI+0x78>
		if((_spiLocks[i]).port == port && (_spiLocks[i]).pin == pin)
 8005446:	4a16      	ldr	r2, [pc, #88]	; (80054a0 <sendSPI+0xa0>)
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	429a      	cmp	r2, r3
 8005452:	d10e      	bne.n	8005472 <sendSPI+0x72>
 8005454:	4a12      	ldr	r2, [pc, #72]	; (80054a0 <sendSPI+0xa0>)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	00db      	lsls	r3, r3, #3
 800545a:	4413      	add	r3, r2
 800545c:	889b      	ldrh	r3, [r3, #4]
 800545e:	887a      	ldrh	r2, [r7, #2]
 8005460:	429a      	cmp	r2, r3
 8005462:	d106      	bne.n	8005472 <sendSPI+0x72>
			if(_spiLocks[i].lock == true) goto bypass_unlock;
 8005464:	4a0e      	ldr	r2, [pc, #56]	; (80054a0 <sendSPI+0xa0>)
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	4413      	add	r3, r2
 800546c:	799b      	ldrb	r3, [r3, #6]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10f      	bne.n	8005492 <sendSPI+0x92>
	for(int i = 0; i < _spiLocksRegistered; i++)
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	3301      	adds	r3, #1
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	4b0a      	ldr	r3, [pc, #40]	; (80054a4 <sendSPI+0xa4>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	4293      	cmp	r3, r2
 8005482:	dbe0      	blt.n	8005446 <sendSPI+0x46>
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);	//CS high
 8005484:	887b      	ldrh	r3, [r7, #2]
 8005486:	2201      	movs	r2, #1
 8005488:	4619      	mov	r1, r3
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7fc fcf8 	bl	8001e80 <HAL_GPIO_WritePin>
 8005490:	e000      	b.n	8005494 <sendSPI+0x94>
			if(_spiLocks[i].lock == true) goto bypass_unlock;
 8005492:	bf00      	nop
	bypass_unlock:

	return state;
 8005494:	7cfb      	ldrb	r3, [r7, #19]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3718      	adds	r7, #24
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20004738 	.word	0x20004738
 80054a4:	2000403c 	.word	0x2000403c

080054a8 <recieveSPI>:

HAL_StatusTypeDef recieveSPI(uint8_t * cmd, int cmdLen, uint8_t * data, int dataLen, GPIO_TypeDef * port, uint16_t pin,  SPI_HandleTypeDef *bus)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
 80054b4:	603b      	str	r3, [r7, #0]

	//Note: dataLen should be number of bytes in the register group being read
	HAL_StatusTypeDef state = HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	74fb      	strb	r3, [r7, #19]
	if (pin == FAKE_GPIO) return state;
 80054ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054bc:	f248 0201 	movw	r2, #32769	; 0x8001
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d101      	bne.n	80054c8 <recieveSPI+0x20>
 80054c4:	7cfb      	ldrb	r3, [r7, #19]
 80054c6:	e042      	b.n	800554e <recieveSPI+0xa6>
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //CS low
 80054c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054ca:	2200      	movs	r2, #0
 80054cc:	4619      	mov	r1, r3
 80054ce:	6a38      	ldr	r0, [r7, #32]
 80054d0:	f7fc fcd6 	bl	8001e80 <HAL_GPIO_WritePin>
	state = HAL_SPI_Transmit(bus, cmd, cmdLen, HAL_MAX_DELAY);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	f04f 33ff 	mov.w	r3, #4294967295
 80054dc:	68f9      	ldr	r1, [r7, #12]
 80054de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054e0:	f7fd f9ae 	bl	8002840 <HAL_SPI_Transmit>
 80054e4:	4603      	mov	r3, r0
 80054e6:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Receive(bus, data, dataLen, HAL_MAX_DELAY);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	f04f 33ff 	mov.w	r3, #4294967295
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054f4:	f7fd fad8 	bl	8002aa8 <HAL_SPI_Receive>
	for(int i = 0; i < _spiLocksRegistered; i++)
 80054f8:	2300      	movs	r3, #0
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	e018      	b.n	8005530 <recieveSPI+0x88>
		if((_spiLocks[i]).port == port && (_spiLocks[i]).pin == pin)
 80054fe:	4a16      	ldr	r2, [pc, #88]	; (8005558 <recieveSPI+0xb0>)
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005506:	6a3a      	ldr	r2, [r7, #32]
 8005508:	429a      	cmp	r2, r3
 800550a:	d10e      	bne.n	800552a <recieveSPI+0x82>
 800550c:	4a12      	ldr	r2, [pc, #72]	; (8005558 <recieveSPI+0xb0>)
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	4413      	add	r3, r2
 8005514:	889b      	ldrh	r3, [r3, #4]
 8005516:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005518:	429a      	cmp	r2, r3
 800551a:	d106      	bne.n	800552a <recieveSPI+0x82>
			if(_spiLocks[i].lock == true) goto bypass_unlock;
 800551c:	4a0e      	ldr	r2, [pc, #56]	; (8005558 <recieveSPI+0xb0>)
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	4413      	add	r3, r2
 8005524:	799b      	ldrb	r3, [r3, #6]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10f      	bne.n	800554a <recieveSPI+0xa2>
	for(int i = 0; i < _spiLocksRegistered; i++)
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	3301      	adds	r3, #1
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	4b0a      	ldr	r3, [pc, #40]	; (800555c <recieveSPI+0xb4>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	461a      	mov	r2, r3
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	4293      	cmp	r3, r2
 800553a:	dbe0      	blt.n	80054fe <recieveSPI+0x56>
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);	//CS high
 800553c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800553e:	2201      	movs	r2, #1
 8005540:	4619      	mov	r1, r3
 8005542:	6a38      	ldr	r0, [r7, #32]
 8005544:	f7fc fc9c 	bl	8001e80 <HAL_GPIO_WritePin>
 8005548:	e000      	b.n	800554c <recieveSPI+0xa4>
			if(_spiLocks[i].lock == true) goto bypass_unlock;
 800554a:	bf00      	nop
	bypass_unlock:

	return state;
 800554c:	7cfb      	ldrb	r3, [r7, #19]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20004738 	.word	0x20004738
 800555c:	2000403c 	.word	0x2000403c

08005560 <handleHalError>:

void handleHalError(Device_ID device)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	4603      	mov	r3, r0
 8005568:	71fb      	strb	r3, [r7, #7]
	//Toggle an LED, send error messages, or something similar
	//I don't know what you guys need, but this is for you to fill out
	// TODO: Implement handleHalError
	extern spiLock_t* nandSpiLock;

	if(device == NAND) unlockSpi(nandSpiLock);
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	2b04      	cmp	r3, #4
 800556e:	d104      	bne.n	800557a <handleHalError+0x1a>
 8005570:	4b06      	ldr	r3, [pc, #24]	; (800558c <handleHalError+0x2c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff ff29 	bl	80053cc <unlockSpi>

	nomPtr[device] = false;
 800557a:	79fb      	ldrb	r3, [r7, #7]
 800557c:	4a04      	ldr	r2, [pc, #16]	; (8005590 <handleHalError+0x30>)
 800557e:	2100      	movs	r1, #0
 8005580:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8005584:	bf00      	nop
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	20004bac 	.word	0x20004bac
 8005590:	20004988 	.word	0x20004988

08005594 <nandInit>:
#include <nandInterface.h>
#include <common.h>

spiLock_t* nandSpiLock;

void nandInit(bool* nandNomPtr) {
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
	nomPtr[NAND] = nandNomPtr;
 800559c:	4a0b      	ldr	r2, [pc, #44]	; (80055cc <nandInit+0x38>)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6113      	str	r3, [r2, #16]
	nandSpiLock = registerSpiLock();
 80055a2:	f7ff fe8d 	bl	80052c0 <registerSpiLock>
 80055a6:	4602      	mov	r2, r0
 80055a8:	4b09      	ldr	r3, [pc, #36]	; (80055d0 <nandInit+0x3c>)
 80055aa:	601a      	str	r2, [r3, #0]
	setSpiLock(NAND_CS_GPIO_Port, NAND_CS_Pin, nandSpiLock);
 80055ac:	4b08      	ldr	r3, [pc, #32]	; (80055d0 <nandInit+0x3c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	461a      	mov	r2, r3
 80055b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055b6:	4807      	ldr	r0, [pc, #28]	; (80055d4 <nandInit+0x40>)
 80055b8:	f7ff feaa 	bl	8005310 <setSpiLock>
	*nandNomPtr = true;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	701a      	strb	r2, [r3, #0]
}
 80055c2:	bf00      	nop
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20004988 	.word	0x20004988
 80055d0:	20004bac 	.word	0x20004bac
 80055d4:	40020400 	.word	0x40020400

080055d8 <nandBufferLoad>:
 * @author Mark Batistich
 * @date 01/21/2021
 */


void nandBufferLoad(uint32_t rowAddr){
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af02      	add	r7, sp, #8
 80055de:	6078      	str	r0, [r7, #4]
//#if CS3_PIN != FAKE_PIN
	// Variables
	uint8_t cmd[4];  // Command sent to device
	uint8_t feature; //feature byte
	bool oip = true; //operation in progress
 80055e0:	2301      	movs	r3, #1
 80055e2:	73fb      	strb	r3, [r7, #15]

	//Load data from cell array into buffer
	cmd[0] = R_CELL_ARRAY;
 80055e4:	2313      	movs	r3, #19
 80055e6:	723b      	strb	r3, [r7, #8]
	cmd[3] = rowAddr;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	72fb      	strb	r3, [r7, #11]
	cmd[2] = rowAddr >> 8;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	0a1b      	lsrs	r3, r3, #8
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	72bb      	strb	r3, [r7, #10]
	cmd[1] = rowAddr >> 16;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	0c1b      	lsrs	r3, r3, #16
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	727b      	strb	r3, [r7, #9]
	if (sendSPI(&cmd[0], 4, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 80055fe:	f107 0008 	add.w	r0, r7, #8
 8005602:	4b11      	ldr	r3, [pc, #68]	; (8005648 <nandBufferLoad+0x70>)
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800560a:	4a10      	ldr	r2, [pc, #64]	; (800564c <nandBufferLoad+0x74>)
 800560c:	2104      	movs	r1, #4
 800560e:	f7ff fef7 	bl	8005400 <sendSPI>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <nandBufferLoad+0x48>
		handleHalError(BMP);
 8005618:	2001      	movs	r0, #1
 800561a:	f7ff ffa1 	bl	8005560 <handleHalError>
 800561e:	e00f      	b.n	8005640 <nandBufferLoad+0x68>
		return;
	}

	do{
		feature = getFeature(FEATURE_ADDR_C);
 8005620:	20c0      	movs	r0, #192	; 0xc0
 8005622:	f000 f935 	bl	8005890 <getFeature>
 8005626:	4603      	mov	r3, r0
 8005628:	73bb      	strb	r3, [r7, #14]
		oip = getBit(feature, 0);
 800562a:	7bbb      	ldrb	r3, [r7, #14]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	bf14      	ite	ne
 8005634:	2301      	movne	r3, #1
 8005636:	2300      	moveq	r3, #0
 8005638:	73fb      	strb	r3, [r7, #15]
	}while(oip);
 800563a:	7bfb      	ldrb	r3, [r7, #15]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1ef      	bne.n	8005620 <nandBufferLoad+0x48>
//#endif
}
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	200046e0 	.word	0x200046e0
 800564c:	40020400 	.word	0x40020400

08005650 <nandBufferRead>:
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */

void nandBufferRead(uint16_t colAddr, uint8_t data[], uint8_t size){
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af04      	add	r7, sp, #16
 8005656:	4603      	mov	r3, r0
 8005658:	6039      	str	r1, [r7, #0]
 800565a:	80fb      	strh	r3, [r7, #6]
 800565c:	4613      	mov	r3, r2
 800565e:	717b      	strb	r3, [r7, #5]
//#if CS3_PIN != FAKE_PIN
	// Variables
	uint8_t cmd[4];       // Command sent to device

	//Read data from the buffer into the data array
	cmd[0] = R_BUFFER;
 8005660:	2303      	movs	r3, #3
 8005662:	733b      	strb	r3, [r7, #12]
	cmd[2] = colAddr;
 8005664:	88fb      	ldrh	r3, [r7, #6]
 8005666:	b2db      	uxtb	r3, r3
 8005668:	73bb      	strb	r3, [r7, #14]
	cmd[1] = colAddr >> 8;
 800566a:	88fb      	ldrh	r3, [r7, #6]
 800566c:	0a1b      	lsrs	r3, r3, #8
 800566e:	b29b      	uxth	r3, r3
 8005670:	b2db      	uxtb	r3, r3
 8005672:	737b      	strb	r3, [r7, #13]
	cmd[3] = 0x00; //dummy byte
 8005674:	2300      	movs	r3, #0
 8005676:	73fb      	strb	r3, [r7, #15]
	if (recieveSPI(&cmd[0], 4, data, size, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS))
 8005678:	797a      	ldrb	r2, [r7, #5]
 800567a:	f107 000c 	add.w	r0, r7, #12
 800567e:	4b0a      	ldr	r3, [pc, #40]	; (80056a8 <nandBufferRead+0x58>)
 8005680:	9302      	str	r3, [sp, #8]
 8005682:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005686:	9301      	str	r3, [sp, #4]
 8005688:	4b08      	ldr	r3, [pc, #32]	; (80056ac <nandBufferRead+0x5c>)
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	4613      	mov	r3, r2
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	2104      	movs	r1, #4
 8005692:	f7ff ff09 	bl	80054a8 <recieveSPI>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <nandBufferRead+0x52>
	{
		handleHalError(BMP);
 800569c:	2001      	movs	r0, #1
 800569e:	f7ff ff5f 	bl	8005560 <handleHalError>
		return;
	}
//#endif
}
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	200046e0 	.word	0x200046e0
 80056ac:	40020400 	.word	0x40020400

080056b0 <nandBufferWrite>:
 * @param colAddr: The 13 bit column address
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
void nandBufferWrite(uint16_t colAddr, uint8_t data[], uint8_t size){
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af02      	add	r7, sp, #8
 80056b6:	4603      	mov	r3, r0
 80056b8:	6039      	str	r1, [r7, #0]
 80056ba:	80fb      	strh	r3, [r7, #6]
 80056bc:	4613      	mov	r3, r2
 80056be:	717b      	strb	r3, [r7, #5]
	// Variables
	uint8_t cmd[3];       // Command sent to device

	cmd[0] = W_LOAD_RAND;
 80056c0:	2384      	movs	r3, #132	; 0x84
 80056c2:	733b      	strb	r3, [r7, #12]
	cmd[2] = colAddr;
 80056c4:	88fb      	ldrh	r3, [r7, #6]
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	73bb      	strb	r3, [r7, #14]
	cmd[1] = colAddr >> 8;
 80056ca:	88fb      	ldrh	r3, [r7, #6]
 80056cc:	0a1b      	lsrs	r3, r3, #8
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	737b      	strb	r3, [r7, #13]

	lockSpi(nandSpiLock);
 80056d4:	4b16      	ldr	r3, [pc, #88]	; (8005730 <nandBufferWrite+0x80>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff fe4f 	bl	800537c <lockSpi>

	if (sendSPI(&cmd[0], 5, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 80056de:	f107 000c 	add.w	r0, r7, #12
 80056e2:	4b14      	ldr	r3, [pc, #80]	; (8005734 <nandBufferWrite+0x84>)
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056ea:	4a13      	ldr	r2, [pc, #76]	; (8005738 <nandBufferWrite+0x88>)
 80056ec:	2105      	movs	r1, #5
 80056ee:	f7ff fe87 	bl	8005400 <sendSPI>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <nandBufferWrite+0x50>
		handleHalError(NAND);
 80056f8:	2004      	movs	r0, #4
 80056fa:	f7ff ff31 	bl	8005560 <handleHalError>
		return;
 80056fe:	e014      	b.n	800572a <nandBufferWrite+0x7a>
	}

	if (sendSPI(&data[0], size, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 8005700:	7979      	ldrb	r1, [r7, #5]
 8005702:	4b0c      	ldr	r3, [pc, #48]	; (8005734 <nandBufferWrite+0x84>)
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	f44f 7300 	mov.w	r3, #512	; 0x200
 800570a:	4a0b      	ldr	r2, [pc, #44]	; (8005738 <nandBufferWrite+0x88>)
 800570c:	6838      	ldr	r0, [r7, #0]
 800570e:	f7ff fe77 	bl	8005400 <sendSPI>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <nandBufferWrite+0x70>
		handleHalError(NAND);
 8005718:	2004      	movs	r0, #4
 800571a:	f7ff ff21 	bl	8005560 <handleHalError>
		return;
 800571e:	e004      	b.n	800572a <nandBufferWrite+0x7a>
	}
	unlockSpi(nandSpiLock);
 8005720:	4b03      	ldr	r3, [pc, #12]	; (8005730 <nandBufferWrite+0x80>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4618      	mov	r0, r3
 8005726:	f7ff fe51 	bl	80053cc <unlockSpi>
}
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	20004bac 	.word	0x20004bac
 8005734:	200046e0 	.word	0x200046e0
 8005738:	40020400 	.word	0x40020400

0800573c <nandBufferExecute>:
 * @param rowAddr: The 17 bit row address
 *
 * @author Mark Batistich
 * @date 01/24 /2021
 */
void nandBufferExecute(uint32_t rowAddr){
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af02      	add	r7, sp, #8
 8005742:	6078      	str	r0, [r7, #4]
	// Variables
	uint8_t cmd[4];  // Command sent to device
	uint8_t feature; //feature byte
	bool oip = true; //operation in progress
 8005744:	2301      	movs	r3, #1
 8005746:	73fb      	strb	r3, [r7, #15]
	//bool prg_f = false; //program fail

	//Load data from cell array into buffer
	cmd[0] = W_EXECUTE;
 8005748:	2310      	movs	r3, #16
 800574a:	723b      	strb	r3, [r7, #8]
	cmd[3] = rowAddr;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	b2db      	uxtb	r3, r3
 8005750:	72fb      	strb	r3, [r7, #11]
	cmd[2] = rowAddr >> 8;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	0a1b      	lsrs	r3, r3, #8
 8005756:	b2db      	uxtb	r3, r3
 8005758:	72bb      	strb	r3, [r7, #10]
	cmd[1] = rowAddr >> 16;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	0c1b      	lsrs	r3, r3, #16
 800575e:	b2db      	uxtb	r3, r3
 8005760:	727b      	strb	r3, [r7, #9]
	if (sendSPI(&cmd[0], 4, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 8005762:	f107 0008 	add.w	r0, r7, #8
 8005766:	4b11      	ldr	r3, [pc, #68]	; (80057ac <nandBufferExecute+0x70>)
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800576e:	4a10      	ldr	r2, [pc, #64]	; (80057b0 <nandBufferExecute+0x74>)
 8005770:	2104      	movs	r1, #4
 8005772:	f7ff fe45 	bl	8005400 <sendSPI>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <nandBufferExecute+0x48>
		handleHalError(BMP);
 800577c:	2001      	movs	r0, #1
 800577e:	f7ff feef 	bl	8005560 <handleHalError>
 8005782:	e00f      	b.n	80057a4 <nandBufferExecute+0x68>
		return;
	}
	do{
		feature = getFeature(FEATURE_ADDR_C);
 8005784:	20c0      	movs	r0, #192	; 0xc0
 8005786:	f000 f883 	bl	8005890 <getFeature>
 800578a:	4603      	mov	r3, r0
 800578c:	73bb      	strb	r3, [r7, #14]
		oip = getBit(feature, 0);
 800578e:	7bbb      	ldrb	r3, [r7, #14]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	bf14      	ite	ne
 8005798:	2301      	movne	r3, #1
 800579a:	2300      	moveq	r3, #0
 800579c:	73fb      	strb	r3, [r7, #15]
		//prg_f = getBit(feature, 3);
	}while(oip);
 800579e:	7bfb      	ldrb	r3, [r7, #15]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1ef      	bne.n	8005784 <nandBufferExecute+0x48>
}
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	200046e0 	.word	0x200046e0
 80057b0:	40020400 	.word	0x40020400

080057b4 <nandRead>:
 * @param colAddr: The 13 bit column address
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
void nandRead(uint32_t rowAddr, uint16_t colAddr, uint8_t data[], uint8_t size){
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	607a      	str	r2, [r7, #4]
 80057be:	461a      	mov	r2, r3
 80057c0:	460b      	mov	r3, r1
 80057c2:	817b      	strh	r3, [r7, #10]
 80057c4:	4613      	mov	r3, r2
 80057c6:	727b      	strb	r3, [r7, #9]
	nandBufferLoad(rowAddr);
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f7ff ff05 	bl	80055d8 <nandBufferLoad>
	nandBufferRead(colAddr, data, size);
 80057ce:	7a7a      	ldrb	r2, [r7, #9]
 80057d0:	897b      	ldrh	r3, [r7, #10]
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7ff ff3b 	bl	8005650 <nandBufferRead>
}
 80057da:	bf00      	nop
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <nandWrite>:
 * @param colAddr: The 13 bit column address
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
void nandWrite(uint32_t rowAddr, uint16_t colAddr, uint8_t data[], uint8_t size){
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	60f8      	str	r0, [r7, #12]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	461a      	mov	r2, r3
 80057ee:	460b      	mov	r3, r1
 80057f0:	817b      	strh	r3, [r7, #10]
 80057f2:	4613      	mov	r3, r2
 80057f4:	727b      	strb	r3, [r7, #9]

	nandBufferLoad(rowAddr);
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f7ff feee 	bl	80055d8 <nandBufferLoad>
	writeEnable();
 80057fc:	f000 f810 	bl	8005820 <writeEnable>
	nandBufferWrite(colAddr, data, size);
 8005800:	7a7a      	ldrb	r2, [r7, #9]
 8005802:	897b      	ldrh	r3, [r7, #10]
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	4618      	mov	r0, r3
 8005808:	f7ff ff52 	bl	80056b0 <nandBufferWrite>
	nandBufferExecute(rowAddr);
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f7ff ff95 	bl	800573c <nandBufferExecute>
	writeDisable();
 8005812:	f000 f821 	bl	8005858 <writeDisable>
}
 8005816:	bf00      	nop
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
	...

08005820 <writeEnable>:
 * @brief Enables writing
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
void writeEnable(){
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af02      	add	r7, sp, #8
	// Variables
	uint8_t cmd;  // Command sent to device

	// Send Command
	cmd = W_ENABLE;
 8005826:	2306      	movs	r3, #6
 8005828:	71fb      	strb	r3, [r7, #7]
	if (sendSPI(&cmd, 1, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 800582a:	1df8      	adds	r0, r7, #7
 800582c:	4b08      	ldr	r3, [pc, #32]	; (8005850 <writeEnable+0x30>)
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005834:	4a07      	ldr	r2, [pc, #28]	; (8005854 <writeEnable+0x34>)
 8005836:	2101      	movs	r1, #1
 8005838:	f7ff fde2 	bl	8005400 <sendSPI>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <writeEnable+0x28>
		handleHalError(BMP);
 8005842:	2001      	movs	r0, #1
 8005844:	f7ff fe8c 	bl	8005560 <handleHalError>
		return;
	}
}
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	200046e0 	.word	0x200046e0
 8005854:	40020400 	.word	0x40020400

08005858 <writeDisable>:
 * @brief Disables writing
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
void writeDisable(){
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af02      	add	r7, sp, #8
	// Variables
	uint8_t cmd;  // Command sent to device

	// Send Command
	cmd = W_DISABLE;
 800585e:	2304      	movs	r3, #4
 8005860:	71fb      	strb	r3, [r7, #7]
	if (sendSPI(&cmd, 1, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 8005862:	1df8      	adds	r0, r7, #7
 8005864:	4b08      	ldr	r3, [pc, #32]	; (8005888 <writeDisable+0x30>)
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800586c:	4a07      	ldr	r2, [pc, #28]	; (800588c <writeDisable+0x34>)
 800586e:	2101      	movs	r1, #1
 8005870:	f7ff fdc6 	bl	8005400 <sendSPI>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <writeDisable+0x28>
		handleHalError(BMP);
 800587a:	2001      	movs	r0, #1
 800587c:	f7ff fe70 	bl	8005560 <handleHalError>
		return;
	}
}
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	200046e0 	.word	0x200046e0
 800588c:	40020400 	.word	0x40020400

08005890 <getFeature>:
 * @param featureAddr: address of the feature to get
 *
 * @author Mark Batistich
 * @date 01/24/2021
 */
uint8_t getFeature(uint8_t featureAddr){
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af04      	add	r7, sp, #16
 8005896:	4603      	mov	r3, r0
 8005898:	71fb      	strb	r3, [r7, #7]
	// Variables
	uint8_t cmd[2];  // Command sent to device
	uint8_t feature; //feature byte

	// Send Command
	cmd[0] = GET_FEATURE;
 800589a:	230f      	movs	r3, #15
 800589c:	733b      	strb	r3, [r7, #12]
	cmd[1] = featureAddr;
 800589e:	79fb      	ldrb	r3, [r7, #7]
 80058a0:	737b      	strb	r3, [r7, #13]
	if (recieveSPI(&cmd[0], 2, &feature, 1, NAND_CS_GPIO_Port, NAND_CS_Pin, STORAGE_SPI_BUS)){
 80058a2:	f107 020b 	add.w	r2, r7, #11
 80058a6:	f107 000c 	add.w	r0, r7, #12
 80058aa:	4b0c      	ldr	r3, [pc, #48]	; (80058dc <getFeature+0x4c>)
 80058ac:	9302      	str	r3, [sp, #8]
 80058ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058b2:	9301      	str	r3, [sp, #4]
 80058b4:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <getFeature+0x50>)
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	2301      	movs	r3, #1
 80058ba:	2102      	movs	r1, #2
 80058bc:	f7ff fdf4 	bl	80054a8 <recieveSPI>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d004      	beq.n	80058d0 <getFeature+0x40>
		handleHalError(BMP);
 80058c6:	2001      	movs	r0, #1
 80058c8:	f7ff fe4a 	bl	8005560 <handleHalError>
		return 0x00;
 80058cc:	2300      	movs	r3, #0
 80058ce:	e000      	b.n	80058d2 <getFeature+0x42>
	}
	return feature;
 80058d0:	7afb      	ldrb	r3, [r7, #11]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	200046e0 	.word	0x200046e0
 80058e0:	40020400 	.word	0x40020400

080058e4 <__errno>:
 80058e4:	4b01      	ldr	r3, [pc, #4]	; (80058ec <__errno+0x8>)
 80058e6:	6818      	ldr	r0, [r3, #0]
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	20000010 	.word	0x20000010

080058f0 <__libc_init_array>:
 80058f0:	b570      	push	{r4, r5, r6, lr}
 80058f2:	4e0d      	ldr	r6, [pc, #52]	; (8005928 <__libc_init_array+0x38>)
 80058f4:	4c0d      	ldr	r4, [pc, #52]	; (800592c <__libc_init_array+0x3c>)
 80058f6:	1ba4      	subs	r4, r4, r6
 80058f8:	10a4      	asrs	r4, r4, #2
 80058fa:	2500      	movs	r5, #0
 80058fc:	42a5      	cmp	r5, r4
 80058fe:	d109      	bne.n	8005914 <__libc_init_array+0x24>
 8005900:	4e0b      	ldr	r6, [pc, #44]	; (8005930 <__libc_init_array+0x40>)
 8005902:	4c0c      	ldr	r4, [pc, #48]	; (8005934 <__libc_init_array+0x44>)
 8005904:	f001 f81e 	bl	8006944 <_init>
 8005908:	1ba4      	subs	r4, r4, r6
 800590a:	10a4      	asrs	r4, r4, #2
 800590c:	2500      	movs	r5, #0
 800590e:	42a5      	cmp	r5, r4
 8005910:	d105      	bne.n	800591e <__libc_init_array+0x2e>
 8005912:	bd70      	pop	{r4, r5, r6, pc}
 8005914:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005918:	4798      	blx	r3
 800591a:	3501      	adds	r5, #1
 800591c:	e7ee      	b.n	80058fc <__libc_init_array+0xc>
 800591e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005922:	4798      	blx	r3
 8005924:	3501      	adds	r5, #1
 8005926:	e7f2      	b.n	800590e <__libc_init_array+0x1e>
 8005928:	08006b4c 	.word	0x08006b4c
 800592c:	08006b4c 	.word	0x08006b4c
 8005930:	08006b4c 	.word	0x08006b4c
 8005934:	08006b50 	.word	0x08006b50

08005938 <malloc>:
 8005938:	4b02      	ldr	r3, [pc, #8]	; (8005944 <malloc+0xc>)
 800593a:	4601      	mov	r1, r0
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	f000 b859 	b.w	80059f4 <_malloc_r>
 8005942:	bf00      	nop
 8005944:	20000010 	.word	0x20000010

08005948 <memset>:
 8005948:	4402      	add	r2, r0
 800594a:	4603      	mov	r3, r0
 800594c:	4293      	cmp	r3, r2
 800594e:	d100      	bne.n	8005952 <memset+0xa>
 8005950:	4770      	bx	lr
 8005952:	f803 1b01 	strb.w	r1, [r3], #1
 8005956:	e7f9      	b.n	800594c <memset+0x4>

08005958 <_free_r>:
 8005958:	b538      	push	{r3, r4, r5, lr}
 800595a:	4605      	mov	r5, r0
 800595c:	2900      	cmp	r1, #0
 800595e:	d045      	beq.n	80059ec <_free_r+0x94>
 8005960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005964:	1f0c      	subs	r4, r1, #4
 8005966:	2b00      	cmp	r3, #0
 8005968:	bfb8      	it	lt
 800596a:	18e4      	addlt	r4, r4, r3
 800596c:	f000 fc74 	bl	8006258 <__malloc_lock>
 8005970:	4a1f      	ldr	r2, [pc, #124]	; (80059f0 <_free_r+0x98>)
 8005972:	6813      	ldr	r3, [r2, #0]
 8005974:	4610      	mov	r0, r2
 8005976:	b933      	cbnz	r3, 8005986 <_free_r+0x2e>
 8005978:	6063      	str	r3, [r4, #4]
 800597a:	6014      	str	r4, [r2, #0]
 800597c:	4628      	mov	r0, r5
 800597e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005982:	f000 bc6a 	b.w	800625a <__malloc_unlock>
 8005986:	42a3      	cmp	r3, r4
 8005988:	d90c      	bls.n	80059a4 <_free_r+0x4c>
 800598a:	6821      	ldr	r1, [r4, #0]
 800598c:	1862      	adds	r2, r4, r1
 800598e:	4293      	cmp	r3, r2
 8005990:	bf04      	itt	eq
 8005992:	681a      	ldreq	r2, [r3, #0]
 8005994:	685b      	ldreq	r3, [r3, #4]
 8005996:	6063      	str	r3, [r4, #4]
 8005998:	bf04      	itt	eq
 800599a:	1852      	addeq	r2, r2, r1
 800599c:	6022      	streq	r2, [r4, #0]
 800599e:	6004      	str	r4, [r0, #0]
 80059a0:	e7ec      	b.n	800597c <_free_r+0x24>
 80059a2:	4613      	mov	r3, r2
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	b10a      	cbz	r2, 80059ac <_free_r+0x54>
 80059a8:	42a2      	cmp	r2, r4
 80059aa:	d9fa      	bls.n	80059a2 <_free_r+0x4a>
 80059ac:	6819      	ldr	r1, [r3, #0]
 80059ae:	1858      	adds	r0, r3, r1
 80059b0:	42a0      	cmp	r0, r4
 80059b2:	d10b      	bne.n	80059cc <_free_r+0x74>
 80059b4:	6820      	ldr	r0, [r4, #0]
 80059b6:	4401      	add	r1, r0
 80059b8:	1858      	adds	r0, r3, r1
 80059ba:	4282      	cmp	r2, r0
 80059bc:	6019      	str	r1, [r3, #0]
 80059be:	d1dd      	bne.n	800597c <_free_r+0x24>
 80059c0:	6810      	ldr	r0, [r2, #0]
 80059c2:	6852      	ldr	r2, [r2, #4]
 80059c4:	605a      	str	r2, [r3, #4]
 80059c6:	4401      	add	r1, r0
 80059c8:	6019      	str	r1, [r3, #0]
 80059ca:	e7d7      	b.n	800597c <_free_r+0x24>
 80059cc:	d902      	bls.n	80059d4 <_free_r+0x7c>
 80059ce:	230c      	movs	r3, #12
 80059d0:	602b      	str	r3, [r5, #0]
 80059d2:	e7d3      	b.n	800597c <_free_r+0x24>
 80059d4:	6820      	ldr	r0, [r4, #0]
 80059d6:	1821      	adds	r1, r4, r0
 80059d8:	428a      	cmp	r2, r1
 80059da:	bf04      	itt	eq
 80059dc:	6811      	ldreq	r1, [r2, #0]
 80059de:	6852      	ldreq	r2, [r2, #4]
 80059e0:	6062      	str	r2, [r4, #4]
 80059e2:	bf04      	itt	eq
 80059e4:	1809      	addeq	r1, r1, r0
 80059e6:	6021      	streq	r1, [r4, #0]
 80059e8:	605c      	str	r4, [r3, #4]
 80059ea:	e7c7      	b.n	800597c <_free_r+0x24>
 80059ec:	bd38      	pop	{r3, r4, r5, pc}
 80059ee:	bf00      	nop
 80059f0:	20004040 	.word	0x20004040

080059f4 <_malloc_r>:
 80059f4:	b570      	push	{r4, r5, r6, lr}
 80059f6:	1ccd      	adds	r5, r1, #3
 80059f8:	f025 0503 	bic.w	r5, r5, #3
 80059fc:	3508      	adds	r5, #8
 80059fe:	2d0c      	cmp	r5, #12
 8005a00:	bf38      	it	cc
 8005a02:	250c      	movcc	r5, #12
 8005a04:	2d00      	cmp	r5, #0
 8005a06:	4606      	mov	r6, r0
 8005a08:	db01      	blt.n	8005a0e <_malloc_r+0x1a>
 8005a0a:	42a9      	cmp	r1, r5
 8005a0c:	d903      	bls.n	8005a16 <_malloc_r+0x22>
 8005a0e:	230c      	movs	r3, #12
 8005a10:	6033      	str	r3, [r6, #0]
 8005a12:	2000      	movs	r0, #0
 8005a14:	bd70      	pop	{r4, r5, r6, pc}
 8005a16:	f000 fc1f 	bl	8006258 <__malloc_lock>
 8005a1a:	4a21      	ldr	r2, [pc, #132]	; (8005aa0 <_malloc_r+0xac>)
 8005a1c:	6814      	ldr	r4, [r2, #0]
 8005a1e:	4621      	mov	r1, r4
 8005a20:	b991      	cbnz	r1, 8005a48 <_malloc_r+0x54>
 8005a22:	4c20      	ldr	r4, [pc, #128]	; (8005aa4 <_malloc_r+0xb0>)
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	b91b      	cbnz	r3, 8005a30 <_malloc_r+0x3c>
 8005a28:	4630      	mov	r0, r6
 8005a2a:	f000 f8b9 	bl	8005ba0 <_sbrk_r>
 8005a2e:	6020      	str	r0, [r4, #0]
 8005a30:	4629      	mov	r1, r5
 8005a32:	4630      	mov	r0, r6
 8005a34:	f000 f8b4 	bl	8005ba0 <_sbrk_r>
 8005a38:	1c43      	adds	r3, r0, #1
 8005a3a:	d124      	bne.n	8005a86 <_malloc_r+0x92>
 8005a3c:	230c      	movs	r3, #12
 8005a3e:	6033      	str	r3, [r6, #0]
 8005a40:	4630      	mov	r0, r6
 8005a42:	f000 fc0a 	bl	800625a <__malloc_unlock>
 8005a46:	e7e4      	b.n	8005a12 <_malloc_r+0x1e>
 8005a48:	680b      	ldr	r3, [r1, #0]
 8005a4a:	1b5b      	subs	r3, r3, r5
 8005a4c:	d418      	bmi.n	8005a80 <_malloc_r+0x8c>
 8005a4e:	2b0b      	cmp	r3, #11
 8005a50:	d90f      	bls.n	8005a72 <_malloc_r+0x7e>
 8005a52:	600b      	str	r3, [r1, #0]
 8005a54:	50cd      	str	r5, [r1, r3]
 8005a56:	18cc      	adds	r4, r1, r3
 8005a58:	4630      	mov	r0, r6
 8005a5a:	f000 fbfe 	bl	800625a <__malloc_unlock>
 8005a5e:	f104 000b 	add.w	r0, r4, #11
 8005a62:	1d23      	adds	r3, r4, #4
 8005a64:	f020 0007 	bic.w	r0, r0, #7
 8005a68:	1ac3      	subs	r3, r0, r3
 8005a6a:	d0d3      	beq.n	8005a14 <_malloc_r+0x20>
 8005a6c:	425a      	negs	r2, r3
 8005a6e:	50e2      	str	r2, [r4, r3]
 8005a70:	e7d0      	b.n	8005a14 <_malloc_r+0x20>
 8005a72:	428c      	cmp	r4, r1
 8005a74:	684b      	ldr	r3, [r1, #4]
 8005a76:	bf16      	itet	ne
 8005a78:	6063      	strne	r3, [r4, #4]
 8005a7a:	6013      	streq	r3, [r2, #0]
 8005a7c:	460c      	movne	r4, r1
 8005a7e:	e7eb      	b.n	8005a58 <_malloc_r+0x64>
 8005a80:	460c      	mov	r4, r1
 8005a82:	6849      	ldr	r1, [r1, #4]
 8005a84:	e7cc      	b.n	8005a20 <_malloc_r+0x2c>
 8005a86:	1cc4      	adds	r4, r0, #3
 8005a88:	f024 0403 	bic.w	r4, r4, #3
 8005a8c:	42a0      	cmp	r0, r4
 8005a8e:	d005      	beq.n	8005a9c <_malloc_r+0xa8>
 8005a90:	1a21      	subs	r1, r4, r0
 8005a92:	4630      	mov	r0, r6
 8005a94:	f000 f884 	bl	8005ba0 <_sbrk_r>
 8005a98:	3001      	adds	r0, #1
 8005a9a:	d0cf      	beq.n	8005a3c <_malloc_r+0x48>
 8005a9c:	6025      	str	r5, [r4, #0]
 8005a9e:	e7db      	b.n	8005a58 <_malloc_r+0x64>
 8005aa0:	20004040 	.word	0x20004040
 8005aa4:	20004044 	.word	0x20004044

08005aa8 <iprintf>:
 8005aa8:	b40f      	push	{r0, r1, r2, r3}
 8005aaa:	4b0a      	ldr	r3, [pc, #40]	; (8005ad4 <iprintf+0x2c>)
 8005aac:	b513      	push	{r0, r1, r4, lr}
 8005aae:	681c      	ldr	r4, [r3, #0]
 8005ab0:	b124      	cbz	r4, 8005abc <iprintf+0x14>
 8005ab2:	69a3      	ldr	r3, [r4, #24]
 8005ab4:	b913      	cbnz	r3, 8005abc <iprintf+0x14>
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f000 fae0 	bl	800607c <__sinit>
 8005abc:	ab05      	add	r3, sp, #20
 8005abe:	9a04      	ldr	r2, [sp, #16]
 8005ac0:	68a1      	ldr	r1, [r4, #8]
 8005ac2:	9301      	str	r3, [sp, #4]
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f000 fbf3 	bl	80062b0 <_vfiprintf_r>
 8005aca:	b002      	add	sp, #8
 8005acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ad0:	b004      	add	sp, #16
 8005ad2:	4770      	bx	lr
 8005ad4:	20000010 	.word	0x20000010

08005ad8 <_puts_r>:
 8005ad8:	b570      	push	{r4, r5, r6, lr}
 8005ada:	460e      	mov	r6, r1
 8005adc:	4605      	mov	r5, r0
 8005ade:	b118      	cbz	r0, 8005ae8 <_puts_r+0x10>
 8005ae0:	6983      	ldr	r3, [r0, #24]
 8005ae2:	b90b      	cbnz	r3, 8005ae8 <_puts_r+0x10>
 8005ae4:	f000 faca 	bl	800607c <__sinit>
 8005ae8:	69ab      	ldr	r3, [r5, #24]
 8005aea:	68ac      	ldr	r4, [r5, #8]
 8005aec:	b913      	cbnz	r3, 8005af4 <_puts_r+0x1c>
 8005aee:	4628      	mov	r0, r5
 8005af0:	f000 fac4 	bl	800607c <__sinit>
 8005af4:	4b23      	ldr	r3, [pc, #140]	; (8005b84 <_puts_r+0xac>)
 8005af6:	429c      	cmp	r4, r3
 8005af8:	d117      	bne.n	8005b2a <_puts_r+0x52>
 8005afa:	686c      	ldr	r4, [r5, #4]
 8005afc:	89a3      	ldrh	r3, [r4, #12]
 8005afe:	071b      	lsls	r3, r3, #28
 8005b00:	d51d      	bpl.n	8005b3e <_puts_r+0x66>
 8005b02:	6923      	ldr	r3, [r4, #16]
 8005b04:	b1db      	cbz	r3, 8005b3e <_puts_r+0x66>
 8005b06:	3e01      	subs	r6, #1
 8005b08:	68a3      	ldr	r3, [r4, #8]
 8005b0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	60a3      	str	r3, [r4, #8]
 8005b12:	b9e9      	cbnz	r1, 8005b50 <_puts_r+0x78>
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	da2e      	bge.n	8005b76 <_puts_r+0x9e>
 8005b18:	4622      	mov	r2, r4
 8005b1a:	210a      	movs	r1, #10
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	f000 f8fd 	bl	8005d1c <__swbuf_r>
 8005b22:	3001      	adds	r0, #1
 8005b24:	d011      	beq.n	8005b4a <_puts_r+0x72>
 8005b26:	200a      	movs	r0, #10
 8005b28:	e011      	b.n	8005b4e <_puts_r+0x76>
 8005b2a:	4b17      	ldr	r3, [pc, #92]	; (8005b88 <_puts_r+0xb0>)
 8005b2c:	429c      	cmp	r4, r3
 8005b2e:	d101      	bne.n	8005b34 <_puts_r+0x5c>
 8005b30:	68ac      	ldr	r4, [r5, #8]
 8005b32:	e7e3      	b.n	8005afc <_puts_r+0x24>
 8005b34:	4b15      	ldr	r3, [pc, #84]	; (8005b8c <_puts_r+0xb4>)
 8005b36:	429c      	cmp	r4, r3
 8005b38:	bf08      	it	eq
 8005b3a:	68ec      	ldreq	r4, [r5, #12]
 8005b3c:	e7de      	b.n	8005afc <_puts_r+0x24>
 8005b3e:	4621      	mov	r1, r4
 8005b40:	4628      	mov	r0, r5
 8005b42:	f000 f93d 	bl	8005dc0 <__swsetup_r>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	d0dd      	beq.n	8005b06 <_puts_r+0x2e>
 8005b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b4e:	bd70      	pop	{r4, r5, r6, pc}
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	da04      	bge.n	8005b5e <_puts_r+0x86>
 8005b54:	69a2      	ldr	r2, [r4, #24]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	dc06      	bgt.n	8005b68 <_puts_r+0x90>
 8005b5a:	290a      	cmp	r1, #10
 8005b5c:	d004      	beq.n	8005b68 <_puts_r+0x90>
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	6022      	str	r2, [r4, #0]
 8005b64:	7019      	strb	r1, [r3, #0]
 8005b66:	e7cf      	b.n	8005b08 <_puts_r+0x30>
 8005b68:	4622      	mov	r2, r4
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	f000 f8d6 	bl	8005d1c <__swbuf_r>
 8005b70:	3001      	adds	r0, #1
 8005b72:	d1c9      	bne.n	8005b08 <_puts_r+0x30>
 8005b74:	e7e9      	b.n	8005b4a <_puts_r+0x72>
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	200a      	movs	r0, #10
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	6022      	str	r2, [r4, #0]
 8005b7e:	7018      	strb	r0, [r3, #0]
 8005b80:	e7e5      	b.n	8005b4e <_puts_r+0x76>
 8005b82:	bf00      	nop
 8005b84:	08006ad0 	.word	0x08006ad0
 8005b88:	08006af0 	.word	0x08006af0
 8005b8c:	08006ab0 	.word	0x08006ab0

08005b90 <puts>:
 8005b90:	4b02      	ldr	r3, [pc, #8]	; (8005b9c <puts+0xc>)
 8005b92:	4601      	mov	r1, r0
 8005b94:	6818      	ldr	r0, [r3, #0]
 8005b96:	f7ff bf9f 	b.w	8005ad8 <_puts_r>
 8005b9a:	bf00      	nop
 8005b9c:	20000010 	.word	0x20000010

08005ba0 <_sbrk_r>:
 8005ba0:	b538      	push	{r3, r4, r5, lr}
 8005ba2:	4c06      	ldr	r4, [pc, #24]	; (8005bbc <_sbrk_r+0x1c>)
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	4605      	mov	r5, r0
 8005ba8:	4608      	mov	r0, r1
 8005baa:	6023      	str	r3, [r4, #0]
 8005bac:	f7fb fb84 	bl	80012b8 <_sbrk>
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	d102      	bne.n	8005bba <_sbrk_r+0x1a>
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	b103      	cbz	r3, 8005bba <_sbrk_r+0x1a>
 8005bb8:	602b      	str	r3, [r5, #0]
 8005bba:	bd38      	pop	{r3, r4, r5, pc}
 8005bbc:	20004bb0 	.word	0x20004bb0

08005bc0 <setvbuf>:
 8005bc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005bc4:	461d      	mov	r5, r3
 8005bc6:	4b51      	ldr	r3, [pc, #324]	; (8005d0c <setvbuf+0x14c>)
 8005bc8:	681e      	ldr	r6, [r3, #0]
 8005bca:	4604      	mov	r4, r0
 8005bcc:	460f      	mov	r7, r1
 8005bce:	4690      	mov	r8, r2
 8005bd0:	b126      	cbz	r6, 8005bdc <setvbuf+0x1c>
 8005bd2:	69b3      	ldr	r3, [r6, #24]
 8005bd4:	b913      	cbnz	r3, 8005bdc <setvbuf+0x1c>
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	f000 fa50 	bl	800607c <__sinit>
 8005bdc:	4b4c      	ldr	r3, [pc, #304]	; (8005d10 <setvbuf+0x150>)
 8005bde:	429c      	cmp	r4, r3
 8005be0:	d152      	bne.n	8005c88 <setvbuf+0xc8>
 8005be2:	6874      	ldr	r4, [r6, #4]
 8005be4:	f1b8 0f02 	cmp.w	r8, #2
 8005be8:	d006      	beq.n	8005bf8 <setvbuf+0x38>
 8005bea:	f1b8 0f01 	cmp.w	r8, #1
 8005bee:	f200 8089 	bhi.w	8005d04 <setvbuf+0x144>
 8005bf2:	2d00      	cmp	r5, #0
 8005bf4:	f2c0 8086 	blt.w	8005d04 <setvbuf+0x144>
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	f000 f9d4 	bl	8005fa8 <_fflush_r>
 8005c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c02:	b141      	cbz	r1, 8005c16 <setvbuf+0x56>
 8005c04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c08:	4299      	cmp	r1, r3
 8005c0a:	d002      	beq.n	8005c12 <setvbuf+0x52>
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f7ff fea3 	bl	8005958 <_free_r>
 8005c12:	2300      	movs	r3, #0
 8005c14:	6363      	str	r3, [r4, #52]	; 0x34
 8005c16:	2300      	movs	r3, #0
 8005c18:	61a3      	str	r3, [r4, #24]
 8005c1a:	6063      	str	r3, [r4, #4]
 8005c1c:	89a3      	ldrh	r3, [r4, #12]
 8005c1e:	061b      	lsls	r3, r3, #24
 8005c20:	d503      	bpl.n	8005c2a <setvbuf+0x6a>
 8005c22:	6921      	ldr	r1, [r4, #16]
 8005c24:	4630      	mov	r0, r6
 8005c26:	f7ff fe97 	bl	8005958 <_free_r>
 8005c2a:	89a3      	ldrh	r3, [r4, #12]
 8005c2c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005c30:	f023 0303 	bic.w	r3, r3, #3
 8005c34:	f1b8 0f02 	cmp.w	r8, #2
 8005c38:	81a3      	strh	r3, [r4, #12]
 8005c3a:	d05d      	beq.n	8005cf8 <setvbuf+0x138>
 8005c3c:	ab01      	add	r3, sp, #4
 8005c3e:	466a      	mov	r2, sp
 8005c40:	4621      	mov	r1, r4
 8005c42:	4630      	mov	r0, r6
 8005c44:	f000 faa4 	bl	8006190 <__swhatbuf_r>
 8005c48:	89a3      	ldrh	r3, [r4, #12]
 8005c4a:	4318      	orrs	r0, r3
 8005c4c:	81a0      	strh	r0, [r4, #12]
 8005c4e:	bb2d      	cbnz	r5, 8005c9c <setvbuf+0xdc>
 8005c50:	9d00      	ldr	r5, [sp, #0]
 8005c52:	4628      	mov	r0, r5
 8005c54:	f7ff fe70 	bl	8005938 <malloc>
 8005c58:	4607      	mov	r7, r0
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	d14e      	bne.n	8005cfc <setvbuf+0x13c>
 8005c5e:	f8dd 9000 	ldr.w	r9, [sp]
 8005c62:	45a9      	cmp	r9, r5
 8005c64:	d13c      	bne.n	8005ce0 <setvbuf+0x120>
 8005c66:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6a:	89a3      	ldrh	r3, [r4, #12]
 8005c6c:	f043 0302 	orr.w	r3, r3, #2
 8005c70:	81a3      	strh	r3, [r4, #12]
 8005c72:	2300      	movs	r3, #0
 8005c74:	60a3      	str	r3, [r4, #8]
 8005c76:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c7a:	6023      	str	r3, [r4, #0]
 8005c7c:	6123      	str	r3, [r4, #16]
 8005c7e:	2301      	movs	r3, #1
 8005c80:	6163      	str	r3, [r4, #20]
 8005c82:	b003      	add	sp, #12
 8005c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c88:	4b22      	ldr	r3, [pc, #136]	; (8005d14 <setvbuf+0x154>)
 8005c8a:	429c      	cmp	r4, r3
 8005c8c:	d101      	bne.n	8005c92 <setvbuf+0xd2>
 8005c8e:	68b4      	ldr	r4, [r6, #8]
 8005c90:	e7a8      	b.n	8005be4 <setvbuf+0x24>
 8005c92:	4b21      	ldr	r3, [pc, #132]	; (8005d18 <setvbuf+0x158>)
 8005c94:	429c      	cmp	r4, r3
 8005c96:	bf08      	it	eq
 8005c98:	68f4      	ldreq	r4, [r6, #12]
 8005c9a:	e7a3      	b.n	8005be4 <setvbuf+0x24>
 8005c9c:	2f00      	cmp	r7, #0
 8005c9e:	d0d8      	beq.n	8005c52 <setvbuf+0x92>
 8005ca0:	69b3      	ldr	r3, [r6, #24]
 8005ca2:	b913      	cbnz	r3, 8005caa <setvbuf+0xea>
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	f000 f9e9 	bl	800607c <__sinit>
 8005caa:	f1b8 0f01 	cmp.w	r8, #1
 8005cae:	bf08      	it	eq
 8005cb0:	89a3      	ldrheq	r3, [r4, #12]
 8005cb2:	6027      	str	r7, [r4, #0]
 8005cb4:	bf04      	itt	eq
 8005cb6:	f043 0301 	orreq.w	r3, r3, #1
 8005cba:	81a3      	strheq	r3, [r4, #12]
 8005cbc:	89a3      	ldrh	r3, [r4, #12]
 8005cbe:	f013 0008 	ands.w	r0, r3, #8
 8005cc2:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8005cc6:	d01b      	beq.n	8005d00 <setvbuf+0x140>
 8005cc8:	f013 0001 	ands.w	r0, r3, #1
 8005ccc:	bf18      	it	ne
 8005cce:	426d      	negne	r5, r5
 8005cd0:	f04f 0300 	mov.w	r3, #0
 8005cd4:	bf1d      	ittte	ne
 8005cd6:	60a3      	strne	r3, [r4, #8]
 8005cd8:	61a5      	strne	r5, [r4, #24]
 8005cda:	4618      	movne	r0, r3
 8005cdc:	60a5      	streq	r5, [r4, #8]
 8005cde:	e7d0      	b.n	8005c82 <setvbuf+0xc2>
 8005ce0:	4648      	mov	r0, r9
 8005ce2:	f7ff fe29 	bl	8005938 <malloc>
 8005ce6:	4607      	mov	r7, r0
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	d0bc      	beq.n	8005c66 <setvbuf+0xa6>
 8005cec:	89a3      	ldrh	r3, [r4, #12]
 8005cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf2:	81a3      	strh	r3, [r4, #12]
 8005cf4:	464d      	mov	r5, r9
 8005cf6:	e7d3      	b.n	8005ca0 <setvbuf+0xe0>
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	e7b6      	b.n	8005c6a <setvbuf+0xaa>
 8005cfc:	46a9      	mov	r9, r5
 8005cfe:	e7f5      	b.n	8005cec <setvbuf+0x12c>
 8005d00:	60a0      	str	r0, [r4, #8]
 8005d02:	e7be      	b.n	8005c82 <setvbuf+0xc2>
 8005d04:	f04f 30ff 	mov.w	r0, #4294967295
 8005d08:	e7bb      	b.n	8005c82 <setvbuf+0xc2>
 8005d0a:	bf00      	nop
 8005d0c:	20000010 	.word	0x20000010
 8005d10:	08006ad0 	.word	0x08006ad0
 8005d14:	08006af0 	.word	0x08006af0
 8005d18:	08006ab0 	.word	0x08006ab0

08005d1c <__swbuf_r>:
 8005d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1e:	460e      	mov	r6, r1
 8005d20:	4614      	mov	r4, r2
 8005d22:	4605      	mov	r5, r0
 8005d24:	b118      	cbz	r0, 8005d2e <__swbuf_r+0x12>
 8005d26:	6983      	ldr	r3, [r0, #24]
 8005d28:	b90b      	cbnz	r3, 8005d2e <__swbuf_r+0x12>
 8005d2a:	f000 f9a7 	bl	800607c <__sinit>
 8005d2e:	4b21      	ldr	r3, [pc, #132]	; (8005db4 <__swbuf_r+0x98>)
 8005d30:	429c      	cmp	r4, r3
 8005d32:	d12a      	bne.n	8005d8a <__swbuf_r+0x6e>
 8005d34:	686c      	ldr	r4, [r5, #4]
 8005d36:	69a3      	ldr	r3, [r4, #24]
 8005d38:	60a3      	str	r3, [r4, #8]
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	071a      	lsls	r2, r3, #28
 8005d3e:	d52e      	bpl.n	8005d9e <__swbuf_r+0x82>
 8005d40:	6923      	ldr	r3, [r4, #16]
 8005d42:	b363      	cbz	r3, 8005d9e <__swbuf_r+0x82>
 8005d44:	6923      	ldr	r3, [r4, #16]
 8005d46:	6820      	ldr	r0, [r4, #0]
 8005d48:	1ac0      	subs	r0, r0, r3
 8005d4a:	6963      	ldr	r3, [r4, #20]
 8005d4c:	b2f6      	uxtb	r6, r6
 8005d4e:	4283      	cmp	r3, r0
 8005d50:	4637      	mov	r7, r6
 8005d52:	dc04      	bgt.n	8005d5e <__swbuf_r+0x42>
 8005d54:	4621      	mov	r1, r4
 8005d56:	4628      	mov	r0, r5
 8005d58:	f000 f926 	bl	8005fa8 <_fflush_r>
 8005d5c:	bb28      	cbnz	r0, 8005daa <__swbuf_r+0x8e>
 8005d5e:	68a3      	ldr	r3, [r4, #8]
 8005d60:	3b01      	subs	r3, #1
 8005d62:	60a3      	str	r3, [r4, #8]
 8005d64:	6823      	ldr	r3, [r4, #0]
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	6022      	str	r2, [r4, #0]
 8005d6a:	701e      	strb	r6, [r3, #0]
 8005d6c:	6963      	ldr	r3, [r4, #20]
 8005d6e:	3001      	adds	r0, #1
 8005d70:	4283      	cmp	r3, r0
 8005d72:	d004      	beq.n	8005d7e <__swbuf_r+0x62>
 8005d74:	89a3      	ldrh	r3, [r4, #12]
 8005d76:	07db      	lsls	r3, r3, #31
 8005d78:	d519      	bpl.n	8005dae <__swbuf_r+0x92>
 8005d7a:	2e0a      	cmp	r6, #10
 8005d7c:	d117      	bne.n	8005dae <__swbuf_r+0x92>
 8005d7e:	4621      	mov	r1, r4
 8005d80:	4628      	mov	r0, r5
 8005d82:	f000 f911 	bl	8005fa8 <_fflush_r>
 8005d86:	b190      	cbz	r0, 8005dae <__swbuf_r+0x92>
 8005d88:	e00f      	b.n	8005daa <__swbuf_r+0x8e>
 8005d8a:	4b0b      	ldr	r3, [pc, #44]	; (8005db8 <__swbuf_r+0x9c>)
 8005d8c:	429c      	cmp	r4, r3
 8005d8e:	d101      	bne.n	8005d94 <__swbuf_r+0x78>
 8005d90:	68ac      	ldr	r4, [r5, #8]
 8005d92:	e7d0      	b.n	8005d36 <__swbuf_r+0x1a>
 8005d94:	4b09      	ldr	r3, [pc, #36]	; (8005dbc <__swbuf_r+0xa0>)
 8005d96:	429c      	cmp	r4, r3
 8005d98:	bf08      	it	eq
 8005d9a:	68ec      	ldreq	r4, [r5, #12]
 8005d9c:	e7cb      	b.n	8005d36 <__swbuf_r+0x1a>
 8005d9e:	4621      	mov	r1, r4
 8005da0:	4628      	mov	r0, r5
 8005da2:	f000 f80d 	bl	8005dc0 <__swsetup_r>
 8005da6:	2800      	cmp	r0, #0
 8005da8:	d0cc      	beq.n	8005d44 <__swbuf_r+0x28>
 8005daa:	f04f 37ff 	mov.w	r7, #4294967295
 8005dae:	4638      	mov	r0, r7
 8005db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005db2:	bf00      	nop
 8005db4:	08006ad0 	.word	0x08006ad0
 8005db8:	08006af0 	.word	0x08006af0
 8005dbc:	08006ab0 	.word	0x08006ab0

08005dc0 <__swsetup_r>:
 8005dc0:	4b32      	ldr	r3, [pc, #200]	; (8005e8c <__swsetup_r+0xcc>)
 8005dc2:	b570      	push	{r4, r5, r6, lr}
 8005dc4:	681d      	ldr	r5, [r3, #0]
 8005dc6:	4606      	mov	r6, r0
 8005dc8:	460c      	mov	r4, r1
 8005dca:	b125      	cbz	r5, 8005dd6 <__swsetup_r+0x16>
 8005dcc:	69ab      	ldr	r3, [r5, #24]
 8005dce:	b913      	cbnz	r3, 8005dd6 <__swsetup_r+0x16>
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	f000 f953 	bl	800607c <__sinit>
 8005dd6:	4b2e      	ldr	r3, [pc, #184]	; (8005e90 <__swsetup_r+0xd0>)
 8005dd8:	429c      	cmp	r4, r3
 8005dda:	d10f      	bne.n	8005dfc <__swsetup_r+0x3c>
 8005ddc:	686c      	ldr	r4, [r5, #4]
 8005dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	0715      	lsls	r5, r2, #28
 8005de6:	d42c      	bmi.n	8005e42 <__swsetup_r+0x82>
 8005de8:	06d0      	lsls	r0, r2, #27
 8005dea:	d411      	bmi.n	8005e10 <__swsetup_r+0x50>
 8005dec:	2209      	movs	r2, #9
 8005dee:	6032      	str	r2, [r6, #0]
 8005df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005df4:	81a3      	strh	r3, [r4, #12]
 8005df6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dfa:	e03e      	b.n	8005e7a <__swsetup_r+0xba>
 8005dfc:	4b25      	ldr	r3, [pc, #148]	; (8005e94 <__swsetup_r+0xd4>)
 8005dfe:	429c      	cmp	r4, r3
 8005e00:	d101      	bne.n	8005e06 <__swsetup_r+0x46>
 8005e02:	68ac      	ldr	r4, [r5, #8]
 8005e04:	e7eb      	b.n	8005dde <__swsetup_r+0x1e>
 8005e06:	4b24      	ldr	r3, [pc, #144]	; (8005e98 <__swsetup_r+0xd8>)
 8005e08:	429c      	cmp	r4, r3
 8005e0a:	bf08      	it	eq
 8005e0c:	68ec      	ldreq	r4, [r5, #12]
 8005e0e:	e7e6      	b.n	8005dde <__swsetup_r+0x1e>
 8005e10:	0751      	lsls	r1, r2, #29
 8005e12:	d512      	bpl.n	8005e3a <__swsetup_r+0x7a>
 8005e14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e16:	b141      	cbz	r1, 8005e2a <__swsetup_r+0x6a>
 8005e18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e1c:	4299      	cmp	r1, r3
 8005e1e:	d002      	beq.n	8005e26 <__swsetup_r+0x66>
 8005e20:	4630      	mov	r0, r6
 8005e22:	f7ff fd99 	bl	8005958 <_free_r>
 8005e26:	2300      	movs	r3, #0
 8005e28:	6363      	str	r3, [r4, #52]	; 0x34
 8005e2a:	89a3      	ldrh	r3, [r4, #12]
 8005e2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e30:	81a3      	strh	r3, [r4, #12]
 8005e32:	2300      	movs	r3, #0
 8005e34:	6063      	str	r3, [r4, #4]
 8005e36:	6923      	ldr	r3, [r4, #16]
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	89a3      	ldrh	r3, [r4, #12]
 8005e3c:	f043 0308 	orr.w	r3, r3, #8
 8005e40:	81a3      	strh	r3, [r4, #12]
 8005e42:	6923      	ldr	r3, [r4, #16]
 8005e44:	b94b      	cbnz	r3, 8005e5a <__swsetup_r+0x9a>
 8005e46:	89a3      	ldrh	r3, [r4, #12]
 8005e48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e50:	d003      	beq.n	8005e5a <__swsetup_r+0x9a>
 8005e52:	4621      	mov	r1, r4
 8005e54:	4630      	mov	r0, r6
 8005e56:	f000 f9bf 	bl	80061d8 <__smakebuf_r>
 8005e5a:	89a2      	ldrh	r2, [r4, #12]
 8005e5c:	f012 0301 	ands.w	r3, r2, #1
 8005e60:	d00c      	beq.n	8005e7c <__swsetup_r+0xbc>
 8005e62:	2300      	movs	r3, #0
 8005e64:	60a3      	str	r3, [r4, #8]
 8005e66:	6963      	ldr	r3, [r4, #20]
 8005e68:	425b      	negs	r3, r3
 8005e6a:	61a3      	str	r3, [r4, #24]
 8005e6c:	6923      	ldr	r3, [r4, #16]
 8005e6e:	b953      	cbnz	r3, 8005e86 <__swsetup_r+0xc6>
 8005e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005e78:	d1ba      	bne.n	8005df0 <__swsetup_r+0x30>
 8005e7a:	bd70      	pop	{r4, r5, r6, pc}
 8005e7c:	0792      	lsls	r2, r2, #30
 8005e7e:	bf58      	it	pl
 8005e80:	6963      	ldrpl	r3, [r4, #20]
 8005e82:	60a3      	str	r3, [r4, #8]
 8005e84:	e7f2      	b.n	8005e6c <__swsetup_r+0xac>
 8005e86:	2000      	movs	r0, #0
 8005e88:	e7f7      	b.n	8005e7a <__swsetup_r+0xba>
 8005e8a:	bf00      	nop
 8005e8c:	20000010 	.word	0x20000010
 8005e90:	08006ad0 	.word	0x08006ad0
 8005e94:	08006af0 	.word	0x08006af0
 8005e98:	08006ab0 	.word	0x08006ab0

08005e9c <__sflush_r>:
 8005e9c:	898a      	ldrh	r2, [r1, #12]
 8005e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea2:	4605      	mov	r5, r0
 8005ea4:	0710      	lsls	r0, r2, #28
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	d458      	bmi.n	8005f5c <__sflush_r+0xc0>
 8005eaa:	684b      	ldr	r3, [r1, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	dc05      	bgt.n	8005ebc <__sflush_r+0x20>
 8005eb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	dc02      	bgt.n	8005ebc <__sflush_r+0x20>
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ebc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ebe:	2e00      	cmp	r6, #0
 8005ec0:	d0f9      	beq.n	8005eb6 <__sflush_r+0x1a>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ec8:	682f      	ldr	r7, [r5, #0]
 8005eca:	6a21      	ldr	r1, [r4, #32]
 8005ecc:	602b      	str	r3, [r5, #0]
 8005ece:	d032      	beq.n	8005f36 <__sflush_r+0x9a>
 8005ed0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ed2:	89a3      	ldrh	r3, [r4, #12]
 8005ed4:	075a      	lsls	r2, r3, #29
 8005ed6:	d505      	bpl.n	8005ee4 <__sflush_r+0x48>
 8005ed8:	6863      	ldr	r3, [r4, #4]
 8005eda:	1ac0      	subs	r0, r0, r3
 8005edc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ede:	b10b      	cbz	r3, 8005ee4 <__sflush_r+0x48>
 8005ee0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ee2:	1ac0      	subs	r0, r0, r3
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005eea:	6a21      	ldr	r1, [r4, #32]
 8005eec:	4628      	mov	r0, r5
 8005eee:	47b0      	blx	r6
 8005ef0:	1c43      	adds	r3, r0, #1
 8005ef2:	89a3      	ldrh	r3, [r4, #12]
 8005ef4:	d106      	bne.n	8005f04 <__sflush_r+0x68>
 8005ef6:	6829      	ldr	r1, [r5, #0]
 8005ef8:	291d      	cmp	r1, #29
 8005efa:	d848      	bhi.n	8005f8e <__sflush_r+0xf2>
 8005efc:	4a29      	ldr	r2, [pc, #164]	; (8005fa4 <__sflush_r+0x108>)
 8005efe:	40ca      	lsrs	r2, r1
 8005f00:	07d6      	lsls	r6, r2, #31
 8005f02:	d544      	bpl.n	8005f8e <__sflush_r+0xf2>
 8005f04:	2200      	movs	r2, #0
 8005f06:	6062      	str	r2, [r4, #4]
 8005f08:	04d9      	lsls	r1, r3, #19
 8005f0a:	6922      	ldr	r2, [r4, #16]
 8005f0c:	6022      	str	r2, [r4, #0]
 8005f0e:	d504      	bpl.n	8005f1a <__sflush_r+0x7e>
 8005f10:	1c42      	adds	r2, r0, #1
 8005f12:	d101      	bne.n	8005f18 <__sflush_r+0x7c>
 8005f14:	682b      	ldr	r3, [r5, #0]
 8005f16:	b903      	cbnz	r3, 8005f1a <__sflush_r+0x7e>
 8005f18:	6560      	str	r0, [r4, #84]	; 0x54
 8005f1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f1c:	602f      	str	r7, [r5, #0]
 8005f1e:	2900      	cmp	r1, #0
 8005f20:	d0c9      	beq.n	8005eb6 <__sflush_r+0x1a>
 8005f22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f26:	4299      	cmp	r1, r3
 8005f28:	d002      	beq.n	8005f30 <__sflush_r+0x94>
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f7ff fd14 	bl	8005958 <_free_r>
 8005f30:	2000      	movs	r0, #0
 8005f32:	6360      	str	r0, [r4, #52]	; 0x34
 8005f34:	e7c0      	b.n	8005eb8 <__sflush_r+0x1c>
 8005f36:	2301      	movs	r3, #1
 8005f38:	4628      	mov	r0, r5
 8005f3a:	47b0      	blx	r6
 8005f3c:	1c41      	adds	r1, r0, #1
 8005f3e:	d1c8      	bne.n	8005ed2 <__sflush_r+0x36>
 8005f40:	682b      	ldr	r3, [r5, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d0c5      	beq.n	8005ed2 <__sflush_r+0x36>
 8005f46:	2b1d      	cmp	r3, #29
 8005f48:	d001      	beq.n	8005f4e <__sflush_r+0xb2>
 8005f4a:	2b16      	cmp	r3, #22
 8005f4c:	d101      	bne.n	8005f52 <__sflush_r+0xb6>
 8005f4e:	602f      	str	r7, [r5, #0]
 8005f50:	e7b1      	b.n	8005eb6 <__sflush_r+0x1a>
 8005f52:	89a3      	ldrh	r3, [r4, #12]
 8005f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f58:	81a3      	strh	r3, [r4, #12]
 8005f5a:	e7ad      	b.n	8005eb8 <__sflush_r+0x1c>
 8005f5c:	690f      	ldr	r7, [r1, #16]
 8005f5e:	2f00      	cmp	r7, #0
 8005f60:	d0a9      	beq.n	8005eb6 <__sflush_r+0x1a>
 8005f62:	0793      	lsls	r3, r2, #30
 8005f64:	680e      	ldr	r6, [r1, #0]
 8005f66:	bf08      	it	eq
 8005f68:	694b      	ldreq	r3, [r1, #20]
 8005f6a:	600f      	str	r7, [r1, #0]
 8005f6c:	bf18      	it	ne
 8005f6e:	2300      	movne	r3, #0
 8005f70:	eba6 0807 	sub.w	r8, r6, r7
 8005f74:	608b      	str	r3, [r1, #8]
 8005f76:	f1b8 0f00 	cmp.w	r8, #0
 8005f7a:	dd9c      	ble.n	8005eb6 <__sflush_r+0x1a>
 8005f7c:	4643      	mov	r3, r8
 8005f7e:	463a      	mov	r2, r7
 8005f80:	6a21      	ldr	r1, [r4, #32]
 8005f82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f84:	4628      	mov	r0, r5
 8005f86:	47b0      	blx	r6
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	dc06      	bgt.n	8005f9a <__sflush_r+0xfe>
 8005f8c:	89a3      	ldrh	r3, [r4, #12]
 8005f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f92:	81a3      	strh	r3, [r4, #12]
 8005f94:	f04f 30ff 	mov.w	r0, #4294967295
 8005f98:	e78e      	b.n	8005eb8 <__sflush_r+0x1c>
 8005f9a:	4407      	add	r7, r0
 8005f9c:	eba8 0800 	sub.w	r8, r8, r0
 8005fa0:	e7e9      	b.n	8005f76 <__sflush_r+0xda>
 8005fa2:	bf00      	nop
 8005fa4:	20400001 	.word	0x20400001

08005fa8 <_fflush_r>:
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	690b      	ldr	r3, [r1, #16]
 8005fac:	4605      	mov	r5, r0
 8005fae:	460c      	mov	r4, r1
 8005fb0:	b1db      	cbz	r3, 8005fea <_fflush_r+0x42>
 8005fb2:	b118      	cbz	r0, 8005fbc <_fflush_r+0x14>
 8005fb4:	6983      	ldr	r3, [r0, #24]
 8005fb6:	b90b      	cbnz	r3, 8005fbc <_fflush_r+0x14>
 8005fb8:	f000 f860 	bl	800607c <__sinit>
 8005fbc:	4b0c      	ldr	r3, [pc, #48]	; (8005ff0 <_fflush_r+0x48>)
 8005fbe:	429c      	cmp	r4, r3
 8005fc0:	d109      	bne.n	8005fd6 <_fflush_r+0x2e>
 8005fc2:	686c      	ldr	r4, [r5, #4]
 8005fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fc8:	b17b      	cbz	r3, 8005fea <_fflush_r+0x42>
 8005fca:	4621      	mov	r1, r4
 8005fcc:	4628      	mov	r0, r5
 8005fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fd2:	f7ff bf63 	b.w	8005e9c <__sflush_r>
 8005fd6:	4b07      	ldr	r3, [pc, #28]	; (8005ff4 <_fflush_r+0x4c>)
 8005fd8:	429c      	cmp	r4, r3
 8005fda:	d101      	bne.n	8005fe0 <_fflush_r+0x38>
 8005fdc:	68ac      	ldr	r4, [r5, #8]
 8005fde:	e7f1      	b.n	8005fc4 <_fflush_r+0x1c>
 8005fe0:	4b05      	ldr	r3, [pc, #20]	; (8005ff8 <_fflush_r+0x50>)
 8005fe2:	429c      	cmp	r4, r3
 8005fe4:	bf08      	it	eq
 8005fe6:	68ec      	ldreq	r4, [r5, #12]
 8005fe8:	e7ec      	b.n	8005fc4 <_fflush_r+0x1c>
 8005fea:	2000      	movs	r0, #0
 8005fec:	bd38      	pop	{r3, r4, r5, pc}
 8005fee:	bf00      	nop
 8005ff0:	08006ad0 	.word	0x08006ad0
 8005ff4:	08006af0 	.word	0x08006af0
 8005ff8:	08006ab0 	.word	0x08006ab0

08005ffc <std>:
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	b510      	push	{r4, lr}
 8006000:	4604      	mov	r4, r0
 8006002:	e9c0 3300 	strd	r3, r3, [r0]
 8006006:	6083      	str	r3, [r0, #8]
 8006008:	8181      	strh	r1, [r0, #12]
 800600a:	6643      	str	r3, [r0, #100]	; 0x64
 800600c:	81c2      	strh	r2, [r0, #14]
 800600e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006012:	6183      	str	r3, [r0, #24]
 8006014:	4619      	mov	r1, r3
 8006016:	2208      	movs	r2, #8
 8006018:	305c      	adds	r0, #92	; 0x5c
 800601a:	f7ff fc95 	bl	8005948 <memset>
 800601e:	4b05      	ldr	r3, [pc, #20]	; (8006034 <std+0x38>)
 8006020:	6263      	str	r3, [r4, #36]	; 0x24
 8006022:	4b05      	ldr	r3, [pc, #20]	; (8006038 <std+0x3c>)
 8006024:	62a3      	str	r3, [r4, #40]	; 0x28
 8006026:	4b05      	ldr	r3, [pc, #20]	; (800603c <std+0x40>)
 8006028:	62e3      	str	r3, [r4, #44]	; 0x2c
 800602a:	4b05      	ldr	r3, [pc, #20]	; (8006040 <std+0x44>)
 800602c:	6224      	str	r4, [r4, #32]
 800602e:	6323      	str	r3, [r4, #48]	; 0x30
 8006030:	bd10      	pop	{r4, pc}
 8006032:	bf00      	nop
 8006034:	080067ed 	.word	0x080067ed
 8006038:	0800680f 	.word	0x0800680f
 800603c:	08006847 	.word	0x08006847
 8006040:	0800686b 	.word	0x0800686b

08006044 <_cleanup_r>:
 8006044:	4901      	ldr	r1, [pc, #4]	; (800604c <_cleanup_r+0x8>)
 8006046:	f000 b885 	b.w	8006154 <_fwalk_reent>
 800604a:	bf00      	nop
 800604c:	08005fa9 	.word	0x08005fa9

08006050 <__sfmoreglue>:
 8006050:	b570      	push	{r4, r5, r6, lr}
 8006052:	1e4a      	subs	r2, r1, #1
 8006054:	2568      	movs	r5, #104	; 0x68
 8006056:	4355      	muls	r5, r2
 8006058:	460e      	mov	r6, r1
 800605a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800605e:	f7ff fcc9 	bl	80059f4 <_malloc_r>
 8006062:	4604      	mov	r4, r0
 8006064:	b140      	cbz	r0, 8006078 <__sfmoreglue+0x28>
 8006066:	2100      	movs	r1, #0
 8006068:	e9c0 1600 	strd	r1, r6, [r0]
 800606c:	300c      	adds	r0, #12
 800606e:	60a0      	str	r0, [r4, #8]
 8006070:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006074:	f7ff fc68 	bl	8005948 <memset>
 8006078:	4620      	mov	r0, r4
 800607a:	bd70      	pop	{r4, r5, r6, pc}

0800607c <__sinit>:
 800607c:	6983      	ldr	r3, [r0, #24]
 800607e:	b510      	push	{r4, lr}
 8006080:	4604      	mov	r4, r0
 8006082:	bb33      	cbnz	r3, 80060d2 <__sinit+0x56>
 8006084:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006088:	6503      	str	r3, [r0, #80]	; 0x50
 800608a:	4b12      	ldr	r3, [pc, #72]	; (80060d4 <__sinit+0x58>)
 800608c:	4a12      	ldr	r2, [pc, #72]	; (80060d8 <__sinit+0x5c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6282      	str	r2, [r0, #40]	; 0x28
 8006092:	4298      	cmp	r0, r3
 8006094:	bf04      	itt	eq
 8006096:	2301      	moveq	r3, #1
 8006098:	6183      	streq	r3, [r0, #24]
 800609a:	f000 f81f 	bl	80060dc <__sfp>
 800609e:	6060      	str	r0, [r4, #4]
 80060a0:	4620      	mov	r0, r4
 80060a2:	f000 f81b 	bl	80060dc <__sfp>
 80060a6:	60a0      	str	r0, [r4, #8]
 80060a8:	4620      	mov	r0, r4
 80060aa:	f000 f817 	bl	80060dc <__sfp>
 80060ae:	2200      	movs	r2, #0
 80060b0:	60e0      	str	r0, [r4, #12]
 80060b2:	2104      	movs	r1, #4
 80060b4:	6860      	ldr	r0, [r4, #4]
 80060b6:	f7ff ffa1 	bl	8005ffc <std>
 80060ba:	2201      	movs	r2, #1
 80060bc:	2109      	movs	r1, #9
 80060be:	68a0      	ldr	r0, [r4, #8]
 80060c0:	f7ff ff9c 	bl	8005ffc <std>
 80060c4:	2202      	movs	r2, #2
 80060c6:	2112      	movs	r1, #18
 80060c8:	68e0      	ldr	r0, [r4, #12]
 80060ca:	f7ff ff97 	bl	8005ffc <std>
 80060ce:	2301      	movs	r3, #1
 80060d0:	61a3      	str	r3, [r4, #24]
 80060d2:	bd10      	pop	{r4, pc}
 80060d4:	08006aac 	.word	0x08006aac
 80060d8:	08006045 	.word	0x08006045

080060dc <__sfp>:
 80060dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060de:	4b1b      	ldr	r3, [pc, #108]	; (800614c <__sfp+0x70>)
 80060e0:	681e      	ldr	r6, [r3, #0]
 80060e2:	69b3      	ldr	r3, [r6, #24]
 80060e4:	4607      	mov	r7, r0
 80060e6:	b913      	cbnz	r3, 80060ee <__sfp+0x12>
 80060e8:	4630      	mov	r0, r6
 80060ea:	f7ff ffc7 	bl	800607c <__sinit>
 80060ee:	3648      	adds	r6, #72	; 0x48
 80060f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	d503      	bpl.n	8006100 <__sfp+0x24>
 80060f8:	6833      	ldr	r3, [r6, #0]
 80060fa:	b133      	cbz	r3, 800610a <__sfp+0x2e>
 80060fc:	6836      	ldr	r6, [r6, #0]
 80060fe:	e7f7      	b.n	80060f0 <__sfp+0x14>
 8006100:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006104:	b16d      	cbz	r5, 8006122 <__sfp+0x46>
 8006106:	3468      	adds	r4, #104	; 0x68
 8006108:	e7f4      	b.n	80060f4 <__sfp+0x18>
 800610a:	2104      	movs	r1, #4
 800610c:	4638      	mov	r0, r7
 800610e:	f7ff ff9f 	bl	8006050 <__sfmoreglue>
 8006112:	6030      	str	r0, [r6, #0]
 8006114:	2800      	cmp	r0, #0
 8006116:	d1f1      	bne.n	80060fc <__sfp+0x20>
 8006118:	230c      	movs	r3, #12
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	4604      	mov	r4, r0
 800611e:	4620      	mov	r0, r4
 8006120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006122:	4b0b      	ldr	r3, [pc, #44]	; (8006150 <__sfp+0x74>)
 8006124:	6665      	str	r5, [r4, #100]	; 0x64
 8006126:	e9c4 5500 	strd	r5, r5, [r4]
 800612a:	60a5      	str	r5, [r4, #8]
 800612c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006130:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006134:	2208      	movs	r2, #8
 8006136:	4629      	mov	r1, r5
 8006138:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800613c:	f7ff fc04 	bl	8005948 <memset>
 8006140:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006144:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006148:	e7e9      	b.n	800611e <__sfp+0x42>
 800614a:	bf00      	nop
 800614c:	08006aac 	.word	0x08006aac
 8006150:	ffff0001 	.word	0xffff0001

08006154 <_fwalk_reent>:
 8006154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006158:	4680      	mov	r8, r0
 800615a:	4689      	mov	r9, r1
 800615c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006160:	2600      	movs	r6, #0
 8006162:	b914      	cbnz	r4, 800616a <_fwalk_reent+0x16>
 8006164:	4630      	mov	r0, r6
 8006166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800616a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800616e:	3f01      	subs	r7, #1
 8006170:	d501      	bpl.n	8006176 <_fwalk_reent+0x22>
 8006172:	6824      	ldr	r4, [r4, #0]
 8006174:	e7f5      	b.n	8006162 <_fwalk_reent+0xe>
 8006176:	89ab      	ldrh	r3, [r5, #12]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d907      	bls.n	800618c <_fwalk_reent+0x38>
 800617c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006180:	3301      	adds	r3, #1
 8006182:	d003      	beq.n	800618c <_fwalk_reent+0x38>
 8006184:	4629      	mov	r1, r5
 8006186:	4640      	mov	r0, r8
 8006188:	47c8      	blx	r9
 800618a:	4306      	orrs	r6, r0
 800618c:	3568      	adds	r5, #104	; 0x68
 800618e:	e7ee      	b.n	800616e <_fwalk_reent+0x1a>

08006190 <__swhatbuf_r>:
 8006190:	b570      	push	{r4, r5, r6, lr}
 8006192:	460e      	mov	r6, r1
 8006194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006198:	2900      	cmp	r1, #0
 800619a:	b096      	sub	sp, #88	; 0x58
 800619c:	4614      	mov	r4, r2
 800619e:	461d      	mov	r5, r3
 80061a0:	da07      	bge.n	80061b2 <__swhatbuf_r+0x22>
 80061a2:	2300      	movs	r3, #0
 80061a4:	602b      	str	r3, [r5, #0]
 80061a6:	89b3      	ldrh	r3, [r6, #12]
 80061a8:	061a      	lsls	r2, r3, #24
 80061aa:	d410      	bmi.n	80061ce <__swhatbuf_r+0x3e>
 80061ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061b0:	e00e      	b.n	80061d0 <__swhatbuf_r+0x40>
 80061b2:	466a      	mov	r2, sp
 80061b4:	f000 fb80 	bl	80068b8 <_fstat_r>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	dbf2      	blt.n	80061a2 <__swhatbuf_r+0x12>
 80061bc:	9a01      	ldr	r2, [sp, #4]
 80061be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80061c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80061c6:	425a      	negs	r2, r3
 80061c8:	415a      	adcs	r2, r3
 80061ca:	602a      	str	r2, [r5, #0]
 80061cc:	e7ee      	b.n	80061ac <__swhatbuf_r+0x1c>
 80061ce:	2340      	movs	r3, #64	; 0x40
 80061d0:	2000      	movs	r0, #0
 80061d2:	6023      	str	r3, [r4, #0]
 80061d4:	b016      	add	sp, #88	; 0x58
 80061d6:	bd70      	pop	{r4, r5, r6, pc}

080061d8 <__smakebuf_r>:
 80061d8:	898b      	ldrh	r3, [r1, #12]
 80061da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061dc:	079d      	lsls	r5, r3, #30
 80061de:	4606      	mov	r6, r0
 80061e0:	460c      	mov	r4, r1
 80061e2:	d507      	bpl.n	80061f4 <__smakebuf_r+0x1c>
 80061e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	6123      	str	r3, [r4, #16]
 80061ec:	2301      	movs	r3, #1
 80061ee:	6163      	str	r3, [r4, #20]
 80061f0:	b002      	add	sp, #8
 80061f2:	bd70      	pop	{r4, r5, r6, pc}
 80061f4:	ab01      	add	r3, sp, #4
 80061f6:	466a      	mov	r2, sp
 80061f8:	f7ff ffca 	bl	8006190 <__swhatbuf_r>
 80061fc:	9900      	ldr	r1, [sp, #0]
 80061fe:	4605      	mov	r5, r0
 8006200:	4630      	mov	r0, r6
 8006202:	f7ff fbf7 	bl	80059f4 <_malloc_r>
 8006206:	b948      	cbnz	r0, 800621c <__smakebuf_r+0x44>
 8006208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800620c:	059a      	lsls	r2, r3, #22
 800620e:	d4ef      	bmi.n	80061f0 <__smakebuf_r+0x18>
 8006210:	f023 0303 	bic.w	r3, r3, #3
 8006214:	f043 0302 	orr.w	r3, r3, #2
 8006218:	81a3      	strh	r3, [r4, #12]
 800621a:	e7e3      	b.n	80061e4 <__smakebuf_r+0xc>
 800621c:	4b0d      	ldr	r3, [pc, #52]	; (8006254 <__smakebuf_r+0x7c>)
 800621e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006220:	89a3      	ldrh	r3, [r4, #12]
 8006222:	6020      	str	r0, [r4, #0]
 8006224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006228:	81a3      	strh	r3, [r4, #12]
 800622a:	9b00      	ldr	r3, [sp, #0]
 800622c:	6163      	str	r3, [r4, #20]
 800622e:	9b01      	ldr	r3, [sp, #4]
 8006230:	6120      	str	r0, [r4, #16]
 8006232:	b15b      	cbz	r3, 800624c <__smakebuf_r+0x74>
 8006234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006238:	4630      	mov	r0, r6
 800623a:	f000 fb4f 	bl	80068dc <_isatty_r>
 800623e:	b128      	cbz	r0, 800624c <__smakebuf_r+0x74>
 8006240:	89a3      	ldrh	r3, [r4, #12]
 8006242:	f023 0303 	bic.w	r3, r3, #3
 8006246:	f043 0301 	orr.w	r3, r3, #1
 800624a:	81a3      	strh	r3, [r4, #12]
 800624c:	89a3      	ldrh	r3, [r4, #12]
 800624e:	431d      	orrs	r5, r3
 8006250:	81a5      	strh	r5, [r4, #12]
 8006252:	e7cd      	b.n	80061f0 <__smakebuf_r+0x18>
 8006254:	08006045 	.word	0x08006045

08006258 <__malloc_lock>:
 8006258:	4770      	bx	lr

0800625a <__malloc_unlock>:
 800625a:	4770      	bx	lr

0800625c <__sfputc_r>:
 800625c:	6893      	ldr	r3, [r2, #8]
 800625e:	3b01      	subs	r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	b410      	push	{r4}
 8006264:	6093      	str	r3, [r2, #8]
 8006266:	da08      	bge.n	800627a <__sfputc_r+0x1e>
 8006268:	6994      	ldr	r4, [r2, #24]
 800626a:	42a3      	cmp	r3, r4
 800626c:	db01      	blt.n	8006272 <__sfputc_r+0x16>
 800626e:	290a      	cmp	r1, #10
 8006270:	d103      	bne.n	800627a <__sfputc_r+0x1e>
 8006272:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006276:	f7ff bd51 	b.w	8005d1c <__swbuf_r>
 800627a:	6813      	ldr	r3, [r2, #0]
 800627c:	1c58      	adds	r0, r3, #1
 800627e:	6010      	str	r0, [r2, #0]
 8006280:	7019      	strb	r1, [r3, #0]
 8006282:	4608      	mov	r0, r1
 8006284:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006288:	4770      	bx	lr

0800628a <__sfputs_r>:
 800628a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628c:	4606      	mov	r6, r0
 800628e:	460f      	mov	r7, r1
 8006290:	4614      	mov	r4, r2
 8006292:	18d5      	adds	r5, r2, r3
 8006294:	42ac      	cmp	r4, r5
 8006296:	d101      	bne.n	800629c <__sfputs_r+0x12>
 8006298:	2000      	movs	r0, #0
 800629a:	e007      	b.n	80062ac <__sfputs_r+0x22>
 800629c:	463a      	mov	r2, r7
 800629e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062a2:	4630      	mov	r0, r6
 80062a4:	f7ff ffda 	bl	800625c <__sfputc_r>
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	d1f3      	bne.n	8006294 <__sfputs_r+0xa>
 80062ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062b0 <_vfiprintf_r>:
 80062b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b4:	460c      	mov	r4, r1
 80062b6:	b09d      	sub	sp, #116	; 0x74
 80062b8:	4617      	mov	r7, r2
 80062ba:	461d      	mov	r5, r3
 80062bc:	4606      	mov	r6, r0
 80062be:	b118      	cbz	r0, 80062c8 <_vfiprintf_r+0x18>
 80062c0:	6983      	ldr	r3, [r0, #24]
 80062c2:	b90b      	cbnz	r3, 80062c8 <_vfiprintf_r+0x18>
 80062c4:	f7ff feda 	bl	800607c <__sinit>
 80062c8:	4b7c      	ldr	r3, [pc, #496]	; (80064bc <_vfiprintf_r+0x20c>)
 80062ca:	429c      	cmp	r4, r3
 80062cc:	d158      	bne.n	8006380 <_vfiprintf_r+0xd0>
 80062ce:	6874      	ldr	r4, [r6, #4]
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	0718      	lsls	r0, r3, #28
 80062d4:	d55e      	bpl.n	8006394 <_vfiprintf_r+0xe4>
 80062d6:	6923      	ldr	r3, [r4, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d05b      	beq.n	8006394 <_vfiprintf_r+0xe4>
 80062dc:	2300      	movs	r3, #0
 80062de:	9309      	str	r3, [sp, #36]	; 0x24
 80062e0:	2320      	movs	r3, #32
 80062e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062e6:	2330      	movs	r3, #48	; 0x30
 80062e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062ec:	9503      	str	r5, [sp, #12]
 80062ee:	f04f 0b01 	mov.w	fp, #1
 80062f2:	46b8      	mov	r8, r7
 80062f4:	4645      	mov	r5, r8
 80062f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80062fa:	b10b      	cbz	r3, 8006300 <_vfiprintf_r+0x50>
 80062fc:	2b25      	cmp	r3, #37	; 0x25
 80062fe:	d154      	bne.n	80063aa <_vfiprintf_r+0xfa>
 8006300:	ebb8 0a07 	subs.w	sl, r8, r7
 8006304:	d00b      	beq.n	800631e <_vfiprintf_r+0x6e>
 8006306:	4653      	mov	r3, sl
 8006308:	463a      	mov	r2, r7
 800630a:	4621      	mov	r1, r4
 800630c:	4630      	mov	r0, r6
 800630e:	f7ff ffbc 	bl	800628a <__sfputs_r>
 8006312:	3001      	adds	r0, #1
 8006314:	f000 80c2 	beq.w	800649c <_vfiprintf_r+0x1ec>
 8006318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800631a:	4453      	add	r3, sl
 800631c:	9309      	str	r3, [sp, #36]	; 0x24
 800631e:	f898 3000 	ldrb.w	r3, [r8]
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 80ba 	beq.w	800649c <_vfiprintf_r+0x1ec>
 8006328:	2300      	movs	r3, #0
 800632a:	f04f 32ff 	mov.w	r2, #4294967295
 800632e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006332:	9304      	str	r3, [sp, #16]
 8006334:	9307      	str	r3, [sp, #28]
 8006336:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800633a:	931a      	str	r3, [sp, #104]	; 0x68
 800633c:	46a8      	mov	r8, r5
 800633e:	2205      	movs	r2, #5
 8006340:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006344:	485e      	ldr	r0, [pc, #376]	; (80064c0 <_vfiprintf_r+0x210>)
 8006346:	f7f9 ff4b 	bl	80001e0 <memchr>
 800634a:	9b04      	ldr	r3, [sp, #16]
 800634c:	bb78      	cbnz	r0, 80063ae <_vfiprintf_r+0xfe>
 800634e:	06d9      	lsls	r1, r3, #27
 8006350:	bf44      	itt	mi
 8006352:	2220      	movmi	r2, #32
 8006354:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006358:	071a      	lsls	r2, r3, #28
 800635a:	bf44      	itt	mi
 800635c:	222b      	movmi	r2, #43	; 0x2b
 800635e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006362:	782a      	ldrb	r2, [r5, #0]
 8006364:	2a2a      	cmp	r2, #42	; 0x2a
 8006366:	d02a      	beq.n	80063be <_vfiprintf_r+0x10e>
 8006368:	9a07      	ldr	r2, [sp, #28]
 800636a:	46a8      	mov	r8, r5
 800636c:	2000      	movs	r0, #0
 800636e:	250a      	movs	r5, #10
 8006370:	4641      	mov	r1, r8
 8006372:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006376:	3b30      	subs	r3, #48	; 0x30
 8006378:	2b09      	cmp	r3, #9
 800637a:	d969      	bls.n	8006450 <_vfiprintf_r+0x1a0>
 800637c:	b360      	cbz	r0, 80063d8 <_vfiprintf_r+0x128>
 800637e:	e024      	b.n	80063ca <_vfiprintf_r+0x11a>
 8006380:	4b50      	ldr	r3, [pc, #320]	; (80064c4 <_vfiprintf_r+0x214>)
 8006382:	429c      	cmp	r4, r3
 8006384:	d101      	bne.n	800638a <_vfiprintf_r+0xda>
 8006386:	68b4      	ldr	r4, [r6, #8]
 8006388:	e7a2      	b.n	80062d0 <_vfiprintf_r+0x20>
 800638a:	4b4f      	ldr	r3, [pc, #316]	; (80064c8 <_vfiprintf_r+0x218>)
 800638c:	429c      	cmp	r4, r3
 800638e:	bf08      	it	eq
 8006390:	68f4      	ldreq	r4, [r6, #12]
 8006392:	e79d      	b.n	80062d0 <_vfiprintf_r+0x20>
 8006394:	4621      	mov	r1, r4
 8006396:	4630      	mov	r0, r6
 8006398:	f7ff fd12 	bl	8005dc0 <__swsetup_r>
 800639c:	2800      	cmp	r0, #0
 800639e:	d09d      	beq.n	80062dc <_vfiprintf_r+0x2c>
 80063a0:	f04f 30ff 	mov.w	r0, #4294967295
 80063a4:	b01d      	add	sp, #116	; 0x74
 80063a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063aa:	46a8      	mov	r8, r5
 80063ac:	e7a2      	b.n	80062f4 <_vfiprintf_r+0x44>
 80063ae:	4a44      	ldr	r2, [pc, #272]	; (80064c0 <_vfiprintf_r+0x210>)
 80063b0:	1a80      	subs	r0, r0, r2
 80063b2:	fa0b f000 	lsl.w	r0, fp, r0
 80063b6:	4318      	orrs	r0, r3
 80063b8:	9004      	str	r0, [sp, #16]
 80063ba:	4645      	mov	r5, r8
 80063bc:	e7be      	b.n	800633c <_vfiprintf_r+0x8c>
 80063be:	9a03      	ldr	r2, [sp, #12]
 80063c0:	1d11      	adds	r1, r2, #4
 80063c2:	6812      	ldr	r2, [r2, #0]
 80063c4:	9103      	str	r1, [sp, #12]
 80063c6:	2a00      	cmp	r2, #0
 80063c8:	db01      	blt.n	80063ce <_vfiprintf_r+0x11e>
 80063ca:	9207      	str	r2, [sp, #28]
 80063cc:	e004      	b.n	80063d8 <_vfiprintf_r+0x128>
 80063ce:	4252      	negs	r2, r2
 80063d0:	f043 0302 	orr.w	r3, r3, #2
 80063d4:	9207      	str	r2, [sp, #28]
 80063d6:	9304      	str	r3, [sp, #16]
 80063d8:	f898 3000 	ldrb.w	r3, [r8]
 80063dc:	2b2e      	cmp	r3, #46	; 0x2e
 80063de:	d10e      	bne.n	80063fe <_vfiprintf_r+0x14e>
 80063e0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80063e4:	2b2a      	cmp	r3, #42	; 0x2a
 80063e6:	d138      	bne.n	800645a <_vfiprintf_r+0x1aa>
 80063e8:	9b03      	ldr	r3, [sp, #12]
 80063ea:	1d1a      	adds	r2, r3, #4
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	9203      	str	r2, [sp, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	bfb8      	it	lt
 80063f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80063f8:	f108 0802 	add.w	r8, r8, #2
 80063fc:	9305      	str	r3, [sp, #20]
 80063fe:	4d33      	ldr	r5, [pc, #204]	; (80064cc <_vfiprintf_r+0x21c>)
 8006400:	f898 1000 	ldrb.w	r1, [r8]
 8006404:	2203      	movs	r2, #3
 8006406:	4628      	mov	r0, r5
 8006408:	f7f9 feea 	bl	80001e0 <memchr>
 800640c:	b140      	cbz	r0, 8006420 <_vfiprintf_r+0x170>
 800640e:	2340      	movs	r3, #64	; 0x40
 8006410:	1b40      	subs	r0, r0, r5
 8006412:	fa03 f000 	lsl.w	r0, r3, r0
 8006416:	9b04      	ldr	r3, [sp, #16]
 8006418:	4303      	orrs	r3, r0
 800641a:	f108 0801 	add.w	r8, r8, #1
 800641e:	9304      	str	r3, [sp, #16]
 8006420:	f898 1000 	ldrb.w	r1, [r8]
 8006424:	482a      	ldr	r0, [pc, #168]	; (80064d0 <_vfiprintf_r+0x220>)
 8006426:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800642a:	2206      	movs	r2, #6
 800642c:	f108 0701 	add.w	r7, r8, #1
 8006430:	f7f9 fed6 	bl	80001e0 <memchr>
 8006434:	2800      	cmp	r0, #0
 8006436:	d037      	beq.n	80064a8 <_vfiprintf_r+0x1f8>
 8006438:	4b26      	ldr	r3, [pc, #152]	; (80064d4 <_vfiprintf_r+0x224>)
 800643a:	bb1b      	cbnz	r3, 8006484 <_vfiprintf_r+0x1d4>
 800643c:	9b03      	ldr	r3, [sp, #12]
 800643e:	3307      	adds	r3, #7
 8006440:	f023 0307 	bic.w	r3, r3, #7
 8006444:	3308      	adds	r3, #8
 8006446:	9303      	str	r3, [sp, #12]
 8006448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800644a:	444b      	add	r3, r9
 800644c:	9309      	str	r3, [sp, #36]	; 0x24
 800644e:	e750      	b.n	80062f2 <_vfiprintf_r+0x42>
 8006450:	fb05 3202 	mla	r2, r5, r2, r3
 8006454:	2001      	movs	r0, #1
 8006456:	4688      	mov	r8, r1
 8006458:	e78a      	b.n	8006370 <_vfiprintf_r+0xc0>
 800645a:	2300      	movs	r3, #0
 800645c:	f108 0801 	add.w	r8, r8, #1
 8006460:	9305      	str	r3, [sp, #20]
 8006462:	4619      	mov	r1, r3
 8006464:	250a      	movs	r5, #10
 8006466:	4640      	mov	r0, r8
 8006468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800646c:	3a30      	subs	r2, #48	; 0x30
 800646e:	2a09      	cmp	r2, #9
 8006470:	d903      	bls.n	800647a <_vfiprintf_r+0x1ca>
 8006472:	2b00      	cmp	r3, #0
 8006474:	d0c3      	beq.n	80063fe <_vfiprintf_r+0x14e>
 8006476:	9105      	str	r1, [sp, #20]
 8006478:	e7c1      	b.n	80063fe <_vfiprintf_r+0x14e>
 800647a:	fb05 2101 	mla	r1, r5, r1, r2
 800647e:	2301      	movs	r3, #1
 8006480:	4680      	mov	r8, r0
 8006482:	e7f0      	b.n	8006466 <_vfiprintf_r+0x1b6>
 8006484:	ab03      	add	r3, sp, #12
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	4622      	mov	r2, r4
 800648a:	4b13      	ldr	r3, [pc, #76]	; (80064d8 <_vfiprintf_r+0x228>)
 800648c:	a904      	add	r1, sp, #16
 800648e:	4630      	mov	r0, r6
 8006490:	f3af 8000 	nop.w
 8006494:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006498:	4681      	mov	r9, r0
 800649a:	d1d5      	bne.n	8006448 <_vfiprintf_r+0x198>
 800649c:	89a3      	ldrh	r3, [r4, #12]
 800649e:	065b      	lsls	r3, r3, #25
 80064a0:	f53f af7e 	bmi.w	80063a0 <_vfiprintf_r+0xf0>
 80064a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064a6:	e77d      	b.n	80063a4 <_vfiprintf_r+0xf4>
 80064a8:	ab03      	add	r3, sp, #12
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	4622      	mov	r2, r4
 80064ae:	4b0a      	ldr	r3, [pc, #40]	; (80064d8 <_vfiprintf_r+0x228>)
 80064b0:	a904      	add	r1, sp, #16
 80064b2:	4630      	mov	r0, r6
 80064b4:	f000 f888 	bl	80065c8 <_printf_i>
 80064b8:	e7ec      	b.n	8006494 <_vfiprintf_r+0x1e4>
 80064ba:	bf00      	nop
 80064bc:	08006ad0 	.word	0x08006ad0
 80064c0:	08006b10 	.word	0x08006b10
 80064c4:	08006af0 	.word	0x08006af0
 80064c8:	08006ab0 	.word	0x08006ab0
 80064cc:	08006b16 	.word	0x08006b16
 80064d0:	08006b1a 	.word	0x08006b1a
 80064d4:	00000000 	.word	0x00000000
 80064d8:	0800628b 	.word	0x0800628b

080064dc <_printf_common>:
 80064dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064e0:	4691      	mov	r9, r2
 80064e2:	461f      	mov	r7, r3
 80064e4:	688a      	ldr	r2, [r1, #8]
 80064e6:	690b      	ldr	r3, [r1, #16]
 80064e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064ec:	4293      	cmp	r3, r2
 80064ee:	bfb8      	it	lt
 80064f0:	4613      	movlt	r3, r2
 80064f2:	f8c9 3000 	str.w	r3, [r9]
 80064f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064fa:	4606      	mov	r6, r0
 80064fc:	460c      	mov	r4, r1
 80064fe:	b112      	cbz	r2, 8006506 <_printf_common+0x2a>
 8006500:	3301      	adds	r3, #1
 8006502:	f8c9 3000 	str.w	r3, [r9]
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	0699      	lsls	r1, r3, #26
 800650a:	bf42      	ittt	mi
 800650c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006510:	3302      	addmi	r3, #2
 8006512:	f8c9 3000 	strmi.w	r3, [r9]
 8006516:	6825      	ldr	r5, [r4, #0]
 8006518:	f015 0506 	ands.w	r5, r5, #6
 800651c:	d107      	bne.n	800652e <_printf_common+0x52>
 800651e:	f104 0a19 	add.w	sl, r4, #25
 8006522:	68e3      	ldr	r3, [r4, #12]
 8006524:	f8d9 2000 	ldr.w	r2, [r9]
 8006528:	1a9b      	subs	r3, r3, r2
 800652a:	42ab      	cmp	r3, r5
 800652c:	dc28      	bgt.n	8006580 <_printf_common+0xa4>
 800652e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006532:	6822      	ldr	r2, [r4, #0]
 8006534:	3300      	adds	r3, #0
 8006536:	bf18      	it	ne
 8006538:	2301      	movne	r3, #1
 800653a:	0692      	lsls	r2, r2, #26
 800653c:	d42d      	bmi.n	800659a <_printf_common+0xbe>
 800653e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006542:	4639      	mov	r1, r7
 8006544:	4630      	mov	r0, r6
 8006546:	47c0      	blx	r8
 8006548:	3001      	adds	r0, #1
 800654a:	d020      	beq.n	800658e <_printf_common+0xb2>
 800654c:	6823      	ldr	r3, [r4, #0]
 800654e:	68e5      	ldr	r5, [r4, #12]
 8006550:	f8d9 2000 	ldr.w	r2, [r9]
 8006554:	f003 0306 	and.w	r3, r3, #6
 8006558:	2b04      	cmp	r3, #4
 800655a:	bf08      	it	eq
 800655c:	1aad      	subeq	r5, r5, r2
 800655e:	68a3      	ldr	r3, [r4, #8]
 8006560:	6922      	ldr	r2, [r4, #16]
 8006562:	bf0c      	ite	eq
 8006564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006568:	2500      	movne	r5, #0
 800656a:	4293      	cmp	r3, r2
 800656c:	bfc4      	itt	gt
 800656e:	1a9b      	subgt	r3, r3, r2
 8006570:	18ed      	addgt	r5, r5, r3
 8006572:	f04f 0900 	mov.w	r9, #0
 8006576:	341a      	adds	r4, #26
 8006578:	454d      	cmp	r5, r9
 800657a:	d11a      	bne.n	80065b2 <_printf_common+0xd6>
 800657c:	2000      	movs	r0, #0
 800657e:	e008      	b.n	8006592 <_printf_common+0xb6>
 8006580:	2301      	movs	r3, #1
 8006582:	4652      	mov	r2, sl
 8006584:	4639      	mov	r1, r7
 8006586:	4630      	mov	r0, r6
 8006588:	47c0      	blx	r8
 800658a:	3001      	adds	r0, #1
 800658c:	d103      	bne.n	8006596 <_printf_common+0xba>
 800658e:	f04f 30ff 	mov.w	r0, #4294967295
 8006592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006596:	3501      	adds	r5, #1
 8006598:	e7c3      	b.n	8006522 <_printf_common+0x46>
 800659a:	18e1      	adds	r1, r4, r3
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	2030      	movs	r0, #48	; 0x30
 80065a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065a4:	4422      	add	r2, r4
 80065a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065ae:	3302      	adds	r3, #2
 80065b0:	e7c5      	b.n	800653e <_printf_common+0x62>
 80065b2:	2301      	movs	r3, #1
 80065b4:	4622      	mov	r2, r4
 80065b6:	4639      	mov	r1, r7
 80065b8:	4630      	mov	r0, r6
 80065ba:	47c0      	blx	r8
 80065bc:	3001      	adds	r0, #1
 80065be:	d0e6      	beq.n	800658e <_printf_common+0xb2>
 80065c0:	f109 0901 	add.w	r9, r9, #1
 80065c4:	e7d8      	b.n	8006578 <_printf_common+0x9c>
	...

080065c8 <_printf_i>:
 80065c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80065cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80065d0:	460c      	mov	r4, r1
 80065d2:	7e09      	ldrb	r1, [r1, #24]
 80065d4:	b085      	sub	sp, #20
 80065d6:	296e      	cmp	r1, #110	; 0x6e
 80065d8:	4617      	mov	r7, r2
 80065da:	4606      	mov	r6, r0
 80065dc:	4698      	mov	r8, r3
 80065de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065e0:	f000 80b3 	beq.w	800674a <_printf_i+0x182>
 80065e4:	d822      	bhi.n	800662c <_printf_i+0x64>
 80065e6:	2963      	cmp	r1, #99	; 0x63
 80065e8:	d036      	beq.n	8006658 <_printf_i+0x90>
 80065ea:	d80a      	bhi.n	8006602 <_printf_i+0x3a>
 80065ec:	2900      	cmp	r1, #0
 80065ee:	f000 80b9 	beq.w	8006764 <_printf_i+0x19c>
 80065f2:	2958      	cmp	r1, #88	; 0x58
 80065f4:	f000 8083 	beq.w	80066fe <_printf_i+0x136>
 80065f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006600:	e032      	b.n	8006668 <_printf_i+0xa0>
 8006602:	2964      	cmp	r1, #100	; 0x64
 8006604:	d001      	beq.n	800660a <_printf_i+0x42>
 8006606:	2969      	cmp	r1, #105	; 0x69
 8006608:	d1f6      	bne.n	80065f8 <_printf_i+0x30>
 800660a:	6820      	ldr	r0, [r4, #0]
 800660c:	6813      	ldr	r3, [r2, #0]
 800660e:	0605      	lsls	r5, r0, #24
 8006610:	f103 0104 	add.w	r1, r3, #4
 8006614:	d52a      	bpl.n	800666c <_printf_i+0xa4>
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6011      	str	r1, [r2, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	da03      	bge.n	8006626 <_printf_i+0x5e>
 800661e:	222d      	movs	r2, #45	; 0x2d
 8006620:	425b      	negs	r3, r3
 8006622:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006626:	486f      	ldr	r0, [pc, #444]	; (80067e4 <_printf_i+0x21c>)
 8006628:	220a      	movs	r2, #10
 800662a:	e039      	b.n	80066a0 <_printf_i+0xd8>
 800662c:	2973      	cmp	r1, #115	; 0x73
 800662e:	f000 809d 	beq.w	800676c <_printf_i+0x1a4>
 8006632:	d808      	bhi.n	8006646 <_printf_i+0x7e>
 8006634:	296f      	cmp	r1, #111	; 0x6f
 8006636:	d020      	beq.n	800667a <_printf_i+0xb2>
 8006638:	2970      	cmp	r1, #112	; 0x70
 800663a:	d1dd      	bne.n	80065f8 <_printf_i+0x30>
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	f043 0320 	orr.w	r3, r3, #32
 8006642:	6023      	str	r3, [r4, #0]
 8006644:	e003      	b.n	800664e <_printf_i+0x86>
 8006646:	2975      	cmp	r1, #117	; 0x75
 8006648:	d017      	beq.n	800667a <_printf_i+0xb2>
 800664a:	2978      	cmp	r1, #120	; 0x78
 800664c:	d1d4      	bne.n	80065f8 <_printf_i+0x30>
 800664e:	2378      	movs	r3, #120	; 0x78
 8006650:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006654:	4864      	ldr	r0, [pc, #400]	; (80067e8 <_printf_i+0x220>)
 8006656:	e055      	b.n	8006704 <_printf_i+0x13c>
 8006658:	6813      	ldr	r3, [r2, #0]
 800665a:	1d19      	adds	r1, r3, #4
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6011      	str	r1, [r2, #0]
 8006660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006664:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006668:	2301      	movs	r3, #1
 800666a:	e08c      	b.n	8006786 <_printf_i+0x1be>
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6011      	str	r1, [r2, #0]
 8006670:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006674:	bf18      	it	ne
 8006676:	b21b      	sxthne	r3, r3
 8006678:	e7cf      	b.n	800661a <_printf_i+0x52>
 800667a:	6813      	ldr	r3, [r2, #0]
 800667c:	6825      	ldr	r5, [r4, #0]
 800667e:	1d18      	adds	r0, r3, #4
 8006680:	6010      	str	r0, [r2, #0]
 8006682:	0628      	lsls	r0, r5, #24
 8006684:	d501      	bpl.n	800668a <_printf_i+0xc2>
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	e002      	b.n	8006690 <_printf_i+0xc8>
 800668a:	0668      	lsls	r0, r5, #25
 800668c:	d5fb      	bpl.n	8006686 <_printf_i+0xbe>
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	4854      	ldr	r0, [pc, #336]	; (80067e4 <_printf_i+0x21c>)
 8006692:	296f      	cmp	r1, #111	; 0x6f
 8006694:	bf14      	ite	ne
 8006696:	220a      	movne	r2, #10
 8006698:	2208      	moveq	r2, #8
 800669a:	2100      	movs	r1, #0
 800669c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066a0:	6865      	ldr	r5, [r4, #4]
 80066a2:	60a5      	str	r5, [r4, #8]
 80066a4:	2d00      	cmp	r5, #0
 80066a6:	f2c0 8095 	blt.w	80067d4 <_printf_i+0x20c>
 80066aa:	6821      	ldr	r1, [r4, #0]
 80066ac:	f021 0104 	bic.w	r1, r1, #4
 80066b0:	6021      	str	r1, [r4, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d13d      	bne.n	8006732 <_printf_i+0x16a>
 80066b6:	2d00      	cmp	r5, #0
 80066b8:	f040 808e 	bne.w	80067d8 <_printf_i+0x210>
 80066bc:	4665      	mov	r5, ip
 80066be:	2a08      	cmp	r2, #8
 80066c0:	d10b      	bne.n	80066da <_printf_i+0x112>
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	07db      	lsls	r3, r3, #31
 80066c6:	d508      	bpl.n	80066da <_printf_i+0x112>
 80066c8:	6923      	ldr	r3, [r4, #16]
 80066ca:	6862      	ldr	r2, [r4, #4]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	bfde      	ittt	le
 80066d0:	2330      	movle	r3, #48	; 0x30
 80066d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066da:	ebac 0305 	sub.w	r3, ip, r5
 80066de:	6123      	str	r3, [r4, #16]
 80066e0:	f8cd 8000 	str.w	r8, [sp]
 80066e4:	463b      	mov	r3, r7
 80066e6:	aa03      	add	r2, sp, #12
 80066e8:	4621      	mov	r1, r4
 80066ea:	4630      	mov	r0, r6
 80066ec:	f7ff fef6 	bl	80064dc <_printf_common>
 80066f0:	3001      	adds	r0, #1
 80066f2:	d14d      	bne.n	8006790 <_printf_i+0x1c8>
 80066f4:	f04f 30ff 	mov.w	r0, #4294967295
 80066f8:	b005      	add	sp, #20
 80066fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066fe:	4839      	ldr	r0, [pc, #228]	; (80067e4 <_printf_i+0x21c>)
 8006700:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006704:	6813      	ldr	r3, [r2, #0]
 8006706:	6821      	ldr	r1, [r4, #0]
 8006708:	1d1d      	adds	r5, r3, #4
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6015      	str	r5, [r2, #0]
 800670e:	060a      	lsls	r2, r1, #24
 8006710:	d50b      	bpl.n	800672a <_printf_i+0x162>
 8006712:	07ca      	lsls	r2, r1, #31
 8006714:	bf44      	itt	mi
 8006716:	f041 0120 	orrmi.w	r1, r1, #32
 800671a:	6021      	strmi	r1, [r4, #0]
 800671c:	b91b      	cbnz	r3, 8006726 <_printf_i+0x15e>
 800671e:	6822      	ldr	r2, [r4, #0]
 8006720:	f022 0220 	bic.w	r2, r2, #32
 8006724:	6022      	str	r2, [r4, #0]
 8006726:	2210      	movs	r2, #16
 8006728:	e7b7      	b.n	800669a <_printf_i+0xd2>
 800672a:	064d      	lsls	r5, r1, #25
 800672c:	bf48      	it	mi
 800672e:	b29b      	uxthmi	r3, r3
 8006730:	e7ef      	b.n	8006712 <_printf_i+0x14a>
 8006732:	4665      	mov	r5, ip
 8006734:	fbb3 f1f2 	udiv	r1, r3, r2
 8006738:	fb02 3311 	mls	r3, r2, r1, r3
 800673c:	5cc3      	ldrb	r3, [r0, r3]
 800673e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006742:	460b      	mov	r3, r1
 8006744:	2900      	cmp	r1, #0
 8006746:	d1f5      	bne.n	8006734 <_printf_i+0x16c>
 8006748:	e7b9      	b.n	80066be <_printf_i+0xf6>
 800674a:	6813      	ldr	r3, [r2, #0]
 800674c:	6825      	ldr	r5, [r4, #0]
 800674e:	6961      	ldr	r1, [r4, #20]
 8006750:	1d18      	adds	r0, r3, #4
 8006752:	6010      	str	r0, [r2, #0]
 8006754:	0628      	lsls	r0, r5, #24
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	d501      	bpl.n	800675e <_printf_i+0x196>
 800675a:	6019      	str	r1, [r3, #0]
 800675c:	e002      	b.n	8006764 <_printf_i+0x19c>
 800675e:	066a      	lsls	r2, r5, #25
 8006760:	d5fb      	bpl.n	800675a <_printf_i+0x192>
 8006762:	8019      	strh	r1, [r3, #0]
 8006764:	2300      	movs	r3, #0
 8006766:	6123      	str	r3, [r4, #16]
 8006768:	4665      	mov	r5, ip
 800676a:	e7b9      	b.n	80066e0 <_printf_i+0x118>
 800676c:	6813      	ldr	r3, [r2, #0]
 800676e:	1d19      	adds	r1, r3, #4
 8006770:	6011      	str	r1, [r2, #0]
 8006772:	681d      	ldr	r5, [r3, #0]
 8006774:	6862      	ldr	r2, [r4, #4]
 8006776:	2100      	movs	r1, #0
 8006778:	4628      	mov	r0, r5
 800677a:	f7f9 fd31 	bl	80001e0 <memchr>
 800677e:	b108      	cbz	r0, 8006784 <_printf_i+0x1bc>
 8006780:	1b40      	subs	r0, r0, r5
 8006782:	6060      	str	r0, [r4, #4]
 8006784:	6863      	ldr	r3, [r4, #4]
 8006786:	6123      	str	r3, [r4, #16]
 8006788:	2300      	movs	r3, #0
 800678a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800678e:	e7a7      	b.n	80066e0 <_printf_i+0x118>
 8006790:	6923      	ldr	r3, [r4, #16]
 8006792:	462a      	mov	r2, r5
 8006794:	4639      	mov	r1, r7
 8006796:	4630      	mov	r0, r6
 8006798:	47c0      	blx	r8
 800679a:	3001      	adds	r0, #1
 800679c:	d0aa      	beq.n	80066f4 <_printf_i+0x12c>
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	079b      	lsls	r3, r3, #30
 80067a2:	d413      	bmi.n	80067cc <_printf_i+0x204>
 80067a4:	68e0      	ldr	r0, [r4, #12]
 80067a6:	9b03      	ldr	r3, [sp, #12]
 80067a8:	4298      	cmp	r0, r3
 80067aa:	bfb8      	it	lt
 80067ac:	4618      	movlt	r0, r3
 80067ae:	e7a3      	b.n	80066f8 <_printf_i+0x130>
 80067b0:	2301      	movs	r3, #1
 80067b2:	464a      	mov	r2, r9
 80067b4:	4639      	mov	r1, r7
 80067b6:	4630      	mov	r0, r6
 80067b8:	47c0      	blx	r8
 80067ba:	3001      	adds	r0, #1
 80067bc:	d09a      	beq.n	80066f4 <_printf_i+0x12c>
 80067be:	3501      	adds	r5, #1
 80067c0:	68e3      	ldr	r3, [r4, #12]
 80067c2:	9a03      	ldr	r2, [sp, #12]
 80067c4:	1a9b      	subs	r3, r3, r2
 80067c6:	42ab      	cmp	r3, r5
 80067c8:	dcf2      	bgt.n	80067b0 <_printf_i+0x1e8>
 80067ca:	e7eb      	b.n	80067a4 <_printf_i+0x1dc>
 80067cc:	2500      	movs	r5, #0
 80067ce:	f104 0919 	add.w	r9, r4, #25
 80067d2:	e7f5      	b.n	80067c0 <_printf_i+0x1f8>
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1ac      	bne.n	8006732 <_printf_i+0x16a>
 80067d8:	7803      	ldrb	r3, [r0, #0]
 80067da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067e2:	e76c      	b.n	80066be <_printf_i+0xf6>
 80067e4:	08006b21 	.word	0x08006b21
 80067e8:	08006b32 	.word	0x08006b32

080067ec <__sread>:
 80067ec:	b510      	push	{r4, lr}
 80067ee:	460c      	mov	r4, r1
 80067f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f4:	f000 f894 	bl	8006920 <_read_r>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	bfab      	itete	ge
 80067fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006800:	181b      	addge	r3, r3, r0
 8006802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006806:	bfac      	ite	ge
 8006808:	6563      	strge	r3, [r4, #84]	; 0x54
 800680a:	81a3      	strhlt	r3, [r4, #12]
 800680c:	bd10      	pop	{r4, pc}

0800680e <__swrite>:
 800680e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006812:	461f      	mov	r7, r3
 8006814:	898b      	ldrh	r3, [r1, #12]
 8006816:	05db      	lsls	r3, r3, #23
 8006818:	4605      	mov	r5, r0
 800681a:	460c      	mov	r4, r1
 800681c:	4616      	mov	r6, r2
 800681e:	d505      	bpl.n	800682c <__swrite+0x1e>
 8006820:	2302      	movs	r3, #2
 8006822:	2200      	movs	r2, #0
 8006824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006828:	f000 f868 	bl	80068fc <_lseek_r>
 800682c:	89a3      	ldrh	r3, [r4, #12]
 800682e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006836:	81a3      	strh	r3, [r4, #12]
 8006838:	4632      	mov	r2, r6
 800683a:	463b      	mov	r3, r7
 800683c:	4628      	mov	r0, r5
 800683e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006842:	f000 b817 	b.w	8006874 <_write_r>

08006846 <__sseek>:
 8006846:	b510      	push	{r4, lr}
 8006848:	460c      	mov	r4, r1
 800684a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800684e:	f000 f855 	bl	80068fc <_lseek_r>
 8006852:	1c43      	adds	r3, r0, #1
 8006854:	89a3      	ldrh	r3, [r4, #12]
 8006856:	bf15      	itete	ne
 8006858:	6560      	strne	r0, [r4, #84]	; 0x54
 800685a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800685e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006862:	81a3      	strheq	r3, [r4, #12]
 8006864:	bf18      	it	ne
 8006866:	81a3      	strhne	r3, [r4, #12]
 8006868:	bd10      	pop	{r4, pc}

0800686a <__sclose>:
 800686a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800686e:	f000 b813 	b.w	8006898 <_close_r>
	...

08006874 <_write_r>:
 8006874:	b538      	push	{r3, r4, r5, lr}
 8006876:	4c07      	ldr	r4, [pc, #28]	; (8006894 <_write_r+0x20>)
 8006878:	4605      	mov	r5, r0
 800687a:	4608      	mov	r0, r1
 800687c:	4611      	mov	r1, r2
 800687e:	2200      	movs	r2, #0
 8006880:	6022      	str	r2, [r4, #0]
 8006882:	461a      	mov	r2, r3
 8006884:	f7fa fa5e 	bl	8000d44 <_write>
 8006888:	1c43      	adds	r3, r0, #1
 800688a:	d102      	bne.n	8006892 <_write_r+0x1e>
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	b103      	cbz	r3, 8006892 <_write_r+0x1e>
 8006890:	602b      	str	r3, [r5, #0]
 8006892:	bd38      	pop	{r3, r4, r5, pc}
 8006894:	20004bb0 	.word	0x20004bb0

08006898 <_close_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	4c06      	ldr	r4, [pc, #24]	; (80068b4 <_close_r+0x1c>)
 800689c:	2300      	movs	r3, #0
 800689e:	4605      	mov	r5, r0
 80068a0:	4608      	mov	r0, r1
 80068a2:	6023      	str	r3, [r4, #0]
 80068a4:	f7fa fa7a 	bl	8000d9c <_close>
 80068a8:	1c43      	adds	r3, r0, #1
 80068aa:	d102      	bne.n	80068b2 <_close_r+0x1a>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	b103      	cbz	r3, 80068b2 <_close_r+0x1a>
 80068b0:	602b      	str	r3, [r5, #0]
 80068b2:	bd38      	pop	{r3, r4, r5, pc}
 80068b4:	20004bb0 	.word	0x20004bb0

080068b8 <_fstat_r>:
 80068b8:	b538      	push	{r3, r4, r5, lr}
 80068ba:	4c07      	ldr	r4, [pc, #28]	; (80068d8 <_fstat_r+0x20>)
 80068bc:	2300      	movs	r3, #0
 80068be:	4605      	mov	r5, r0
 80068c0:	4608      	mov	r0, r1
 80068c2:	4611      	mov	r1, r2
 80068c4:	6023      	str	r3, [r4, #0]
 80068c6:	f7fa fab9 	bl	8000e3c <_fstat>
 80068ca:	1c43      	adds	r3, r0, #1
 80068cc:	d102      	bne.n	80068d4 <_fstat_r+0x1c>
 80068ce:	6823      	ldr	r3, [r4, #0]
 80068d0:	b103      	cbz	r3, 80068d4 <_fstat_r+0x1c>
 80068d2:	602b      	str	r3, [r5, #0]
 80068d4:	bd38      	pop	{r3, r4, r5, pc}
 80068d6:	bf00      	nop
 80068d8:	20004bb0 	.word	0x20004bb0

080068dc <_isatty_r>:
 80068dc:	b538      	push	{r3, r4, r5, lr}
 80068de:	4c06      	ldr	r4, [pc, #24]	; (80068f8 <_isatty_r+0x1c>)
 80068e0:	2300      	movs	r3, #0
 80068e2:	4605      	mov	r5, r0
 80068e4:	4608      	mov	r0, r1
 80068e6:	6023      	str	r3, [r4, #0]
 80068e8:	f7fa fa16 	bl	8000d18 <_isatty>
 80068ec:	1c43      	adds	r3, r0, #1
 80068ee:	d102      	bne.n	80068f6 <_isatty_r+0x1a>
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	b103      	cbz	r3, 80068f6 <_isatty_r+0x1a>
 80068f4:	602b      	str	r3, [r5, #0]
 80068f6:	bd38      	pop	{r3, r4, r5, pc}
 80068f8:	20004bb0 	.word	0x20004bb0

080068fc <_lseek_r>:
 80068fc:	b538      	push	{r3, r4, r5, lr}
 80068fe:	4c07      	ldr	r4, [pc, #28]	; (800691c <_lseek_r+0x20>)
 8006900:	4605      	mov	r5, r0
 8006902:	4608      	mov	r0, r1
 8006904:	4611      	mov	r1, r2
 8006906:	2200      	movs	r2, #0
 8006908:	6022      	str	r2, [r4, #0]
 800690a:	461a      	mov	r2, r3
 800690c:	f7fa fa5d 	bl	8000dca <_lseek>
 8006910:	1c43      	adds	r3, r0, #1
 8006912:	d102      	bne.n	800691a <_lseek_r+0x1e>
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	b103      	cbz	r3, 800691a <_lseek_r+0x1e>
 8006918:	602b      	str	r3, [r5, #0]
 800691a:	bd38      	pop	{r3, r4, r5, pc}
 800691c:	20004bb0 	.word	0x20004bb0

08006920 <_read_r>:
 8006920:	b538      	push	{r3, r4, r5, lr}
 8006922:	4c07      	ldr	r4, [pc, #28]	; (8006940 <_read_r+0x20>)
 8006924:	4605      	mov	r5, r0
 8006926:	4608      	mov	r0, r1
 8006928:	4611      	mov	r1, r2
 800692a:	2200      	movs	r2, #0
 800692c:	6022      	str	r2, [r4, #0]
 800692e:	461a      	mov	r2, r3
 8006930:	f7fa fa5c 	bl	8000dec <_read>
 8006934:	1c43      	adds	r3, r0, #1
 8006936:	d102      	bne.n	800693e <_read_r+0x1e>
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	b103      	cbz	r3, 800693e <_read_r+0x1e>
 800693c:	602b      	str	r3, [r5, #0]
 800693e:	bd38      	pop	{r3, r4, r5, pc}
 8006940:	20004bb0 	.word	0x20004bb0

08006944 <_init>:
 8006944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006946:	bf00      	nop
 8006948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800694a:	bc08      	pop	{r3}
 800694c:	469e      	mov	lr, r3
 800694e:	4770      	bx	lr

08006950 <_fini>:
 8006950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006952:	bf00      	nop
 8006954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006956:	bc08      	pop	{r3}
 8006958:	469e      	mov	lr, r3
 800695a:	4770      	bx	lr
